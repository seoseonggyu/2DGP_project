//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Legacy Shaders/Diffuse" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_MainTex ("Base (RGB)", 2D) = "white" { }
}
SubShader {
 LOD 200
 Tags { "RenderType" = "Opaque" }
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 33959
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
        u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat1.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat6, u_xlat3);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 211
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %63 %189 %201 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 RelaxedPrecision 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 RelaxedPrecision 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 RelaxedPrecision 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %53 SpecId 53 
                                                      OpDecorate %63 Location 63 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %201 Location 201 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                               Private f32_3* %22 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %19 %25 
                                              %27 = OpTypeStruct %19 %19 %19 %26 %7 %7 %19 %19 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 7 
                                              %32 = OpTypePointer Uniform %19 
                                              %37 = OpTypeBool 
                                              %38 = OpTypePointer Private %37 
                                Private bool* %39 = OpVariable Private 
                                          i32 %40 = OpConstant 2 
                                          u32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          f32 %45 = OpConstant 3.674022E-40 
                                         bool %47 = OpConstantFalse 
                                         bool %53 = OpSpecConstantFalse 
                                          u32 %56 = OpConstant 1 
                                              %60 = OpTypePointer Private %19 
                               Private f32_4* %61 = OpVariable Private 
                                              %62 = OpTypePointer Input %7 
                                 Input f32_3* %63 = OpVariable Input 
                                          i32 %66 = OpConstant 3 
                                          i32 %67 = OpConstant 1 
                                          i32 %74 = OpConstant 0 
                                             %105 = OpTypePointer Function %7 
                                         i32 %119 = OpConstant 5 
                                             %120 = OpTypePointer Uniform %7 
                                         i32 %129 = OpConstant 4 
                                             %135 = OpTypePointer Private %6 
                                Private f32* %136 = OpVariable Private 
                                         f32 %139 = OpConstant 3.674022E-40 
                                         f32 %141 = OpConstant 3.674022E-40 
                                Private f32* %143 = OpVariable Private 
                                         u32 %144 = OpConstant 2 
                                         f32 %147 = OpConstant 3.674022E-40 
                                             %154 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %155 = OpTypeSampledImage %154 
                                             %156 = OpTypePointer UniformConstant %155 
 UniformConstant read_only Texture3DSampled* %157 = OpVariable UniformConstant 
                              Private f32_4* %162 = OpVariable Private 
                                         u32 %168 = OpConstant 3 
                              Private f32_3* %170 = OpVariable Private 
                                         f32 %178 = OpConstant 3.674022E-40 
                                         i32 %183 = OpConstant 6 
                                Private f32* %188 = OpVariable Private 
                                Input f32_3* %189 = OpVariable Input 
                                             %200 = OpTypePointer Output %19 
                               Output f32_4* %201 = OpVariable Output 
                                             %208 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %106 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                                        f32_3 %23 = OpLoad %9 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                        f32_3 %36 = OpFMul %23 %35 
                                                      OpStore %22 %36 
                                 Uniform f32* %43 = OpAccessChain %29 %40 %41 
                                          f32 %44 = OpLoad %43 
                                         bool %46 = OpFOrdEqual %44 %45 
                                                      OpStore %39 %46 
                                                      OpSelectionMerge %49 None 
                                                      OpBranchConditional %47 %48 %49 
                                              %48 = OpLabel 
                                         bool %50 = OpLoad %39 
                                                      OpSelectionMerge %52 None 
                                                      OpBranchConditional %50 %51 %52 
                                              %51 = OpLabel 
                                                      OpBranch %52 
                                              %52 = OpLabel 
                                                      OpBranch %49 
                                              %49 = OpLabel 
                                                      OpSelectionMerge %55 None 
                                                      OpBranchConditional %53 %54 %164 
                                              %54 = OpLabel 
                                 Uniform f32* %57 = OpAccessChain %29 %40 %56 
                                          f32 %58 = OpLoad %57 
                                         bool %59 = OpFOrdEqual %58 %45 
                                                      OpStore %39 %59 
                                        f32_3 %64 = OpLoad %63 
                                        f32_3 %65 = OpVectorShuffle %64 %64 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %29 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                        f32_4 %72 = OpLoad %61 
                                        f32_4 %73 = OpVectorShuffle %72 %71 4 5 6 3 
                                                      OpStore %61 %73 
                               Uniform f32_4* %75 = OpAccessChain %29 %66 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                                        f32_3 %78 = OpLoad %63 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 0 0 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %61 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFAdd %80 %82 
                                        f32_4 %84 = OpLoad %61 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %61 %85 
                               Uniform f32_4* %86 = OpAccessChain %29 %66 %40 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpLoad %63 
                                        f32_3 %90 = OpVectorShuffle %89 %89 2 2 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %61 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFAdd %91 %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 6 3 
                                                      OpStore %61 %96 
                                        f32_4 %97 = OpLoad %61 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                               Uniform f32_4* %99 = OpAccessChain %29 %66 %66 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFAdd %98 %101 
                                       f32_4 %103 = OpLoad %61 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %61 %104 
                                        bool %107 = OpLoad %39 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %61 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %106 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_3 %113 = OpLoad %63 
                                                      OpStore %106 %113 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %114 = OpLoad %106 
                                       f32_4 %115 = OpLoad %61 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %61 %116 
                                       f32_4 %117 = OpLoad %61 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %121 = OpAccessChain %29 %119 
                                       f32_3 %122 = OpLoad %121 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %118 %123 
                                       f32_4 %125 = OpLoad %61 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %61 %126 
                                       f32_4 %127 = OpLoad %61 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                              Uniform f32_3* %130 = OpAccessChain %29 %129 
                                       f32_3 %131 = OpLoad %130 
                                       f32_3 %132 = OpFMul %128 %131 
                                       f32_4 %133 = OpLoad %61 
                                       f32_4 %134 = OpVectorShuffle %133 %132 0 4 5 6 
                                                      OpStore %61 %134 
                                Private f32* %137 = OpAccessChain %61 %56 
                                         f32 %138 = OpLoad %137 
                                         f32 %140 = OpFMul %138 %139 
                                         f32 %142 = OpFAdd %140 %141 
                                                      OpStore %136 %142 
                                Uniform f32* %145 = OpAccessChain %29 %40 %144 
                                         f32 %146 = OpLoad %145 
                                         f32 %148 = OpFMul %146 %147 
                                         f32 %149 = OpFAdd %148 %141 
                                                      OpStore %143 %149 
                                         f32 %150 = OpLoad %136 
                                         f32 %151 = OpLoad %143 
                                         f32 %152 = OpExtInst %1 40 %150 %151 
                                Private f32* %153 = OpAccessChain %61 %41 
                                                      OpStore %153 %152 
                  read_only Texture3DSampled %158 = OpLoad %157 
                                       f32_4 %159 = OpLoad %61 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 2 3 
                                       f32_4 %161 = OpImageSampleImplicitLod %158 %160 
                                                      OpStore %61 %161 
                                       f32_4 %163 = OpLoad %61 
                                                      OpStore %162 %163 
                                                      OpBranch %55 
                                             %164 = OpLabel 
                                Private f32* %165 = OpAccessChain %162 %41 
                                                      OpStore %165 %45 
                                Private f32* %166 = OpAccessChain %162 %56 
                                                      OpStore %166 %45 
                                Private f32* %167 = OpAccessChain %162 %144 
                                                      OpStore %167 %45 
                                Private f32* %169 = OpAccessChain %162 %168 
                                                      OpStore %169 %45 
                                                      OpBranch %55 
                                              %55 = OpLabel 
                                       f32_4 %171 = OpLoad %162 
                              Uniform f32_4* %172 = OpAccessChain %29 %67 
                                       f32_4 %173 = OpLoad %172 
                                         f32 %174 = OpDot %171 %173 
                                Private f32* %175 = OpAccessChain %170 %41 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %170 %41 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpExtInst %1 43 %177 %178 %45 
                                Private f32* %180 = OpAccessChain %170 %41 
                                                      OpStore %180 %179 
                                       f32_3 %181 = OpLoad %170 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 0 0 
                              Uniform f32_4* %184 = OpAccessChain %29 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %182 %186 
                                                      OpStore %170 %187 
                                       f32_3 %190 = OpLoad %189 
                              Uniform f32_4* %191 = OpAccessChain %29 %74 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %190 %193 
                                                      OpStore %188 %194 
                                         f32 %195 = OpLoad %188 
                                         f32 %196 = OpExtInst %1 40 %195 %178 
                                                      OpStore %188 %196 
                                       f32_3 %197 = OpLoad %22 
                                       f32_3 %198 = OpLoad %170 
                                       f32_3 %199 = OpFMul %197 %198 
                                                      OpStore %170 %199 
                                         f32 %202 = OpLoad %188 
                                       f32_3 %203 = OpCompositeConstruct %202 %202 %202 
                                       f32_3 %204 = OpLoad %170 
                                       f32_3 %205 = OpFMul %203 %204 
                                       f32_4 %206 = OpLoad %201 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %201 %207 
                                 Output f32* %209 = OpAccessChain %201 %168 
                                                      OpStore %209 %45 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
        u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat1.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat6, u_xlat3);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 270
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %261 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %261 Location 261 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                                Output f32_2* %99 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                               Output f32_3* %151 = OpVariable Output 
                                             %154 = OpTypePointer Private %51 
                              Private f32_3* %155 = OpVariable Private 
                              Private f32_4* %172 = OpVariable Private 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %184 = OpConstant 4 
                                         i32 %190 = OpConstant 5 
                                         i32 %196 = OpConstant 6 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         u32 %206 = OpConstant 3 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_3 %228 = OpConstantComposite %227 %227 %227 
                                         f32 %236 = OpConstant 3.674022E-40 
                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                               Output f32_3* %261 = OpVariable Output 
                                             %264 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore %99 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                Private f32* %156 = OpAccessChain %9 %83 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %9 %83 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                Private f32* %161 = OpAccessChain %155 %120 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %9 %120 
                                         f32 %163 = OpLoad %162 
                                Private f32* %164 = OpAccessChain %9 %120 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Private f32* %167 = OpAccessChain %155 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFNegate %168 
                                         f32 %170 = OpFAdd %166 %169 
                                Private f32* %171 = OpAccessChain %155 %120 
                                                      OpStore %171 %170 
                                       f32_4 %173 = OpLoad %9 
                                       f32_4 %174 = OpVectorShuffle %173 %173 1 2 2 0 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 1 2 2 
                                       f32_4 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                              Uniform f32_4* %179 = OpAccessChain %21 %47 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpLoad %172 
                                         f32 %182 = OpDot %180 %181 
                                Private f32* %183 = OpAccessChain %178 %120 
                                                      OpStore %183 %182 
                              Uniform f32_4* %185 = OpAccessChain %21 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %172 
                                         f32 %188 = OpDot %186 %187 
                                Private f32* %189 = OpAccessChain %178 %83 
                                                      OpStore %189 %188 
                              Uniform f32_4* %191 = OpAccessChain %21 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpLoad %172 
                                         f32 %194 = OpDot %192 %193 
                                Private f32* %195 = OpAccessChain %178 %134 
                                                      OpStore %195 %194 
                              Uniform f32_4* %197 = OpAccessChain %21 %196 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpLoad %155 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %178 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %155 %204 
                                Private f32* %207 = OpAccessChain %9 %206 
                                                      OpStore %207 %205 
                              Uniform f32_4* %208 = OpAccessChain %21 %29 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %9 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %178 %120 
                                                      OpStore %212 %211 
                              Uniform f32_4* %213 = OpAccessChain %21 %24 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %9 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %178 %83 
                                                      OpStore %217 %216 
                              Uniform f32_4* %218 = OpAccessChain %21 %37 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %9 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %178 %134 
                                                      OpStore %222 %221 
                                       f32_3 %223 = OpLoad %155 
                                       f32_3 %224 = OpLoad %178 
                                       f32_3 %225 = OpFAdd %223 %224 
                                                      OpStore %155 %225 
                                       f32_3 %226 = OpLoad %155 
                                       f32_3 %229 = OpExtInst %1 40 %226 %228 
                                                      OpStore %155 %229 
                                       f32_3 %230 = OpLoad %155 
                                       f32_3 %231 = OpExtInst %1 30 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %238 = OpFMul %235 %237 
                                       f32_4 %239 = OpLoad %9 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %9 %240 
                                       f32_4 %241 = OpLoad %9 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                       f32_4 %244 = OpLoad %9 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %9 %245 
                                       f32_4 %246 = OpLoad %9 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %9 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %9 %255 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpExtInst %1 40 %257 %228 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                                      OpStore %261 %263 
                                 Output f32* %265 = OpAccessChain %87 %29 %83 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFNegate %266 
                                 Output f32* %268 = OpAccessChain %87 %29 %83 
                                                      OpStore %268 %267 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 218
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %63 %189 %202 %206 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 RelaxedPrecision 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 RelaxedPrecision 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 RelaxedPrecision 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %53 SpecId 53 
                                                      OpDecorate %63 Location 63 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %202 Location 202 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                               Private f32_3* %22 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %19 %25 
                                              %27 = OpTypeStruct %19 %19 %19 %26 %7 %7 %19 %19 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 7 
                                              %32 = OpTypePointer Uniform %19 
                                              %37 = OpTypeBool 
                                              %38 = OpTypePointer Private %37 
                                Private bool* %39 = OpVariable Private 
                                          i32 %40 = OpConstant 2 
                                          u32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          f32 %45 = OpConstant 3.674022E-40 
                                         bool %47 = OpConstantFalse 
                                         bool %53 = OpSpecConstantFalse 
                                          u32 %56 = OpConstant 1 
                                              %60 = OpTypePointer Private %19 
                               Private f32_4* %61 = OpVariable Private 
                                              %62 = OpTypePointer Input %7 
                                 Input f32_3* %63 = OpVariable Input 
                                          i32 %66 = OpConstant 3 
                                          i32 %67 = OpConstant 1 
                                          i32 %74 = OpConstant 0 
                                             %105 = OpTypePointer Function %7 
                                         i32 %119 = OpConstant 5 
                                             %120 = OpTypePointer Uniform %7 
                                         i32 %129 = OpConstant 4 
                                             %135 = OpTypePointer Private %6 
                                Private f32* %136 = OpVariable Private 
                                         f32 %139 = OpConstant 3.674022E-40 
                                         f32 %141 = OpConstant 3.674022E-40 
                                Private f32* %143 = OpVariable Private 
                                         u32 %144 = OpConstant 2 
                                         f32 %147 = OpConstant 3.674022E-40 
                                             %154 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %155 = OpTypeSampledImage %154 
                                             %156 = OpTypePointer UniformConstant %155 
 UniformConstant read_only Texture3DSampled* %157 = OpVariable UniformConstant 
                              Private f32_4* %162 = OpVariable Private 
                                         u32 %168 = OpConstant 3 
                              Private f32_3* %170 = OpVariable Private 
                                         f32 %178 = OpConstant 3.674022E-40 
                                         i32 %183 = OpConstant 6 
                                Private f32* %188 = OpVariable Private 
                                Input f32_3* %189 = OpVariable Input 
                              Private f32_3* %200 = OpVariable Private 
                                Input f32_3* %202 = OpVariable Input 
                                             %205 = OpTypePointer Output %19 
                               Output f32_4* %206 = OpVariable Output 
                                             %215 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %106 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                                        f32_3 %23 = OpLoad %9 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                        f32_3 %36 = OpFMul %23 %35 
                                                      OpStore %22 %36 
                                 Uniform f32* %43 = OpAccessChain %29 %40 %41 
                                          f32 %44 = OpLoad %43 
                                         bool %46 = OpFOrdEqual %44 %45 
                                                      OpStore %39 %46 
                                                      OpSelectionMerge %49 None 
                                                      OpBranchConditional %47 %48 %49 
                                              %48 = OpLabel 
                                         bool %50 = OpLoad %39 
                                                      OpSelectionMerge %52 None 
                                                      OpBranchConditional %50 %51 %52 
                                              %51 = OpLabel 
                                                      OpBranch %52 
                                              %52 = OpLabel 
                                                      OpBranch %49 
                                              %49 = OpLabel 
                                                      OpSelectionMerge %55 None 
                                                      OpBranchConditional %53 %54 %164 
                                              %54 = OpLabel 
                                 Uniform f32* %57 = OpAccessChain %29 %40 %56 
                                          f32 %58 = OpLoad %57 
                                         bool %59 = OpFOrdEqual %58 %45 
                                                      OpStore %39 %59 
                                        f32_3 %64 = OpLoad %63 
                                        f32_3 %65 = OpVectorShuffle %64 %64 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %29 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                        f32_4 %72 = OpLoad %61 
                                        f32_4 %73 = OpVectorShuffle %72 %71 4 5 6 3 
                                                      OpStore %61 %73 
                               Uniform f32_4* %75 = OpAccessChain %29 %66 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                                        f32_3 %78 = OpLoad %63 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 0 0 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %61 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFAdd %80 %82 
                                        f32_4 %84 = OpLoad %61 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %61 %85 
                               Uniform f32_4* %86 = OpAccessChain %29 %66 %40 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpLoad %63 
                                        f32_3 %90 = OpVectorShuffle %89 %89 2 2 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %61 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFAdd %91 %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 6 3 
                                                      OpStore %61 %96 
                                        f32_4 %97 = OpLoad %61 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                               Uniform f32_4* %99 = OpAccessChain %29 %66 %66 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFAdd %98 %101 
                                       f32_4 %103 = OpLoad %61 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %61 %104 
                                        bool %107 = OpLoad %39 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %61 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %106 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_3 %113 = OpLoad %63 
                                                      OpStore %106 %113 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %114 = OpLoad %106 
                                       f32_4 %115 = OpLoad %61 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %61 %116 
                                       f32_4 %117 = OpLoad %61 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %121 = OpAccessChain %29 %119 
                                       f32_3 %122 = OpLoad %121 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %118 %123 
                                       f32_4 %125 = OpLoad %61 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %61 %126 
                                       f32_4 %127 = OpLoad %61 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                              Uniform f32_3* %130 = OpAccessChain %29 %129 
                                       f32_3 %131 = OpLoad %130 
                                       f32_3 %132 = OpFMul %128 %131 
                                       f32_4 %133 = OpLoad %61 
                                       f32_4 %134 = OpVectorShuffle %133 %132 0 4 5 6 
                                                      OpStore %61 %134 
                                Private f32* %137 = OpAccessChain %61 %56 
                                         f32 %138 = OpLoad %137 
                                         f32 %140 = OpFMul %138 %139 
                                         f32 %142 = OpFAdd %140 %141 
                                                      OpStore %136 %142 
                                Uniform f32* %145 = OpAccessChain %29 %40 %144 
                                         f32 %146 = OpLoad %145 
                                         f32 %148 = OpFMul %146 %147 
                                         f32 %149 = OpFAdd %148 %141 
                                                      OpStore %143 %149 
                                         f32 %150 = OpLoad %136 
                                         f32 %151 = OpLoad %143 
                                         f32 %152 = OpExtInst %1 40 %150 %151 
                                Private f32* %153 = OpAccessChain %61 %41 
                                                      OpStore %153 %152 
                  read_only Texture3DSampled %158 = OpLoad %157 
                                       f32_4 %159 = OpLoad %61 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 2 3 
                                       f32_4 %161 = OpImageSampleImplicitLod %158 %160 
                                                      OpStore %61 %161 
                                       f32_4 %163 = OpLoad %61 
                                                      OpStore %162 %163 
                                                      OpBranch %55 
                                             %164 = OpLabel 
                                Private f32* %165 = OpAccessChain %162 %41 
                                                      OpStore %165 %45 
                                Private f32* %166 = OpAccessChain %162 %56 
                                                      OpStore %166 %45 
                                Private f32* %167 = OpAccessChain %162 %144 
                                                      OpStore %167 %45 
                                Private f32* %169 = OpAccessChain %162 %168 
                                                      OpStore %169 %45 
                                                      OpBranch %55 
                                              %55 = OpLabel 
                                       f32_4 %171 = OpLoad %162 
                              Uniform f32_4* %172 = OpAccessChain %29 %67 
                                       f32_4 %173 = OpLoad %172 
                                         f32 %174 = OpDot %171 %173 
                                Private f32* %175 = OpAccessChain %170 %41 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %170 %41 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpExtInst %1 43 %177 %178 %45 
                                Private f32* %180 = OpAccessChain %170 %41 
                                                      OpStore %180 %179 
                                       f32_3 %181 = OpLoad %170 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 0 0 
                              Uniform f32_4* %184 = OpAccessChain %29 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %182 %186 
                                                      OpStore %170 %187 
                                       f32_3 %190 = OpLoad %189 
                              Uniform f32_4* %191 = OpAccessChain %29 %74 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %190 %193 
                                                      OpStore %188 %194 
                                         f32 %195 = OpLoad %188 
                                         f32 %196 = OpExtInst %1 40 %195 %178 
                                                      OpStore %188 %196 
                                       f32_3 %197 = OpLoad %22 
                                       f32_3 %198 = OpLoad %170 
                                       f32_3 %199 = OpFMul %197 %198 
                                                      OpStore %170 %199 
                                       f32_3 %201 = OpLoad %22 
                                       f32_3 %203 = OpLoad %202 
                                       f32_3 %204 = OpFMul %201 %203 
                                                      OpStore %200 %204 
                                       f32_3 %207 = OpLoad %170 
                                         f32 %208 = OpLoad %188 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_3 %210 = OpFMul %207 %209 
                                       f32_3 %211 = OpLoad %200 
                                       f32_3 %212 = OpFAdd %210 %211 
                                       f32_4 %213 = OpLoad %206 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %206 %214 
                                 Output f32* %216 = OpAccessChain %206 %168 
                                                      OpStore %216 %45 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat9) + u_xlat1.x;
    u_xlat9 = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat9;
    u_xlat9 = u_xlat9 * _LightShadowData.z + _LightShadowData.w;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat7.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat7.x, u_xlat4.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat4.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat7.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat7.xy);
    u_xlat9 = u_xlat9 + u_xlat10_2.x;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat4.x = min(u_xlat9, u_xlat4.x);
    u_xlat9 = (u_xlatb1) ? u_xlat4.x : u_xlat9;
    u_xlat1.xyz = vec3(u_xlat9) * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 183
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 %174 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 Location 174 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                               Output f32_4* %162 = OpVariable Output 
                               Output f32_4* %174 = OpVariable Output 
                                         f32 %175 = OpConstant 3.674022E-40 
                                       f32_4 %176 = OpConstantComposite %175 %175 %175 %175 
                                             %177 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad %162 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %162 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %162 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %162 %173 
                                                      OpStore %174 %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFNegate %179 
                                 Output f32* %181 = OpAccessChain %92 %28 %88 
                                                      OpStore %181 %180 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 307
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %40 %240 %285 %297 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 RelaxedPrecision 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 RelaxedPrecision 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 RelaxedPrecision 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpMemberDecorate %28 8 Offset 28 
                                                      OpMemberDecorate %28 9 Offset 28 
                                                      OpMemberDecorate %28 10 RelaxedPrecision 
                                                      OpMemberDecorate %28 10 Offset 28 
                                                      OpMemberDecorate %28 11 RelaxedPrecision 
                                                      OpMemberDecorate %28 11 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %40 Location 40 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %126 SpecId 126 
                                                      OpDecorate %217 DescriptorSet 217 
                                                      OpDecorate %217 Binding 217 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 Location 240 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %249 DescriptorSet 249 
                                                      OpDecorate %249 Binding 249 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 Location 285 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %297 Location 297 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                               Private f32_3* %22 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %19 %25 
                                              %27 = OpTypeArray %19 %25 
                                              %28 = OpTypeStruct %7 %19 %19 %19 %19 %26 %19 %27 %7 %7 %19 %19 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 11 
                                              %33 = OpTypePointer Uniform %19 
                               Private f32_3* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                                 Input f32_3* %40 = OpVariable Input 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                                              %48 = OpTypePointer Private %19 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %50 = OpConstant 5 
                                          u32 %51 = OpConstant 2 
                                              %52 = OpTypePointer Uniform %6 
                                          u32 %55 = OpConstant 0 
                                              %56 = OpTypePointer Private %6 
                                          i32 %58 = OpConstant 1 
                                          u32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant 2 
                                 Private f32* %67 = OpVariable Private 
                                          i32 %73 = OpConstant 4 
                                          u32 %93 = OpConstant 3 
                                         i32 %102 = OpConstant 3 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %111 = OpConstant 3.674022E-40 
                                             %113 = OpTypeBool 
                                             %114 = OpTypePointer Private %113 
                               Private bool* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 6 
                                        bool %120 = OpConstantFalse 
                                        bool %126 = OpSpecConstantFalse 
                               Private bool* %129 = OpVariable Private 
                                         i32 %135 = OpConstant 7 
                              Private f32_3* %172 = OpVariable Private 
                                             %173 = OpTypePointer Function %7 
                                         i32 %184 = OpConstant 9 
                                         i32 %190 = OpConstant 8 
                                         f32 %198 = OpConstant 3.674022E-40 
                                         f32 %200 = OpConstant 3.674022E-40 
                                Private f32* %203 = OpVariable Private 
                                         f32 %206 = OpConstant 3.674022E-40 
                                             %214 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %215 = OpTypeSampledImage %214 
                                             %216 = OpTypePointer UniformConstant %215 
 UniformConstant read_only Texture3DSampled* %217 = OpVariable UniformConstant 
                              Private f32_4* %222 = OpVariable Private 
                              Private f32_3* %229 = OpVariable Private 
                                             %239 = OpTypePointer Input %19 
                                Input f32_4* %240 = OpVariable Input 
                                Private f32* %248 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %249 = OpVariable UniformConstant 
                                Private f32* %255 = OpVariable Private 
                                             %266 = OpTypePointer Function %6 
                                         i32 %279 = OpConstant 10 
                                Private f32* %284 = OpVariable Private 
                                Input f32_3* %285 = OpVariable Input 
                                             %296 = OpTypePointer Output %19 
                               Output f32_4* %297 = OpVariable Output 
                                             %304 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %174 = OpVariable Function 
                               Function f32* %267 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                                        f32_3 %23 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %23 %36 
                                                      OpStore %22 %37 
                                        f32_3 %41 = OpLoad %40 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %30 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %38 %47 
                                 Uniform f32* %53 = OpAccessChain %30 %50 %43 %51 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %57 = OpAccessChain %49 %55 
                                                      OpStore %57 %54 
                                 Uniform f32* %59 = OpAccessChain %30 %50 %58 %51 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %62 = OpAccessChain %49 %61 
                                                      OpStore %62 %60 
                                 Uniform f32* %64 = OpAccessChain %30 %50 %63 %51 
                                          f32 %65 = OpLoad %64 
                                 Private f32* %66 = OpAccessChain %49 %51 
                                                      OpStore %66 %65 
                                        f32_3 %68 = OpLoad %38 
                                        f32_4 %69 = OpLoad %49 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                          f32 %71 = OpDot %68 %70 
                                                      OpStore %67 %71 
                                        f32_3 %72 = OpLoad %40 
                               Uniform f32_4* %74 = OpAccessChain %30 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFNegate %76 
                                        f32_3 %78 = OpFAdd %72 %77 
                                                      OpStore %38 %78 
                                        f32_3 %79 = OpLoad %38 
                                        f32_3 %80 = OpLoad %38 
                                          f32 %81 = OpDot %79 %80 
                                 Private f32* %82 = OpAccessChain %38 %55 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %38 %55 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpExtInst %1 31 %84 
                                 Private f32* %86 = OpAccessChain %38 %55 
                                                      OpStore %86 %85 
                                          f32 %87 = OpLoad %67 
                                          f32 %88 = OpFNegate %87 
                                 Private f32* %89 = OpAccessChain %38 %55 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %38 %55 
                                                      OpStore %92 %91 
                                 Uniform f32* %94 = OpAccessChain %30 %73 %93 
                                          f32 %95 = OpLoad %94 
                                 Private f32* %96 = OpAccessChain %38 %55 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFMul %95 %97 
                                          f32 %99 = OpLoad %67 
                                         f32 %100 = OpFAdd %98 %99 
                                                      OpStore %67 %100 
                                         f32 %101 = OpLoad %67 
                                Uniform f32* %103 = OpAccessChain %30 %102 %51 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFMul %101 %104 
                                Uniform f32* %106 = OpAccessChain %30 %102 %93 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFAdd %105 %107 
                                                      OpStore %67 %108 
                                         f32 %109 = OpLoad %67 
                                         f32 %112 = OpExtInst %1 43 %109 %110 %111 
                                                      OpStore %67 %112 
                                Uniform f32* %117 = OpAccessChain %30 %116 %55 
                                         f32 %118 = OpLoad %117 
                                        bool %119 = OpFOrdEqual %118 %111 
                                                      OpStore %115 %119 
                                                      OpSelectionMerge %122 None 
                                                      OpBranchConditional %120 %121 %122 
                                             %121 = OpLabel 
                                        bool %123 = OpLoad %115 
                                                      OpSelectionMerge %125 None 
                                                      OpBranchConditional %123 %124 %125 
                                             %124 = OpLabel 
                                                      OpBranch %125 
                                             %125 = OpLabel 
                                                      OpBranch %122 
                                             %122 = OpLabel 
                                                      OpSelectionMerge %128 None 
                                                      OpBranchConditional %126 %127 %224 
                                             %127 = OpLabel 
                                Uniform f32* %130 = OpAccessChain %30 %116 %61 
                                         f32 %131 = OpLoad %130 
                                        bool %132 = OpFOrdEqual %131 %111 
                                                      OpStore %129 %132 
                                       f32_3 %133 = OpLoad %40 
                                       f32_3 %134 = OpVectorShuffle %133 %133 1 1 1 
                              Uniform f32_4* %136 = OpAccessChain %30 %135 %58 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFMul %134 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %49 %141 
                              Uniform f32_4* %142 = OpAccessChain %30 %135 %43 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpLoad %40 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 0 0 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %49 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFAdd %147 %149 
                                       f32_4 %151 = OpLoad %49 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %49 %152 
                              Uniform f32_4* %153 = OpAccessChain %30 %135 %63 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpLoad %40 
                                       f32_3 %157 = OpVectorShuffle %156 %156 2 2 2 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %49 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %158 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %49 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                              Uniform f32_4* %166 = OpAccessChain %30 %135 %102 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFAdd %165 %168 
                                       f32_4 %170 = OpLoad %49 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 6 3 
                                                      OpStore %49 %171 
                                        bool %175 = OpLoad %129 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %180 
                                             %176 = OpLabel 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                                      OpStore %174 %179 
                                                      OpBranch %177 
                                             %180 = OpLabel 
                                       f32_3 %181 = OpLoad %40 
                                                      OpStore %174 %181 
                                                      OpBranch %177 
                                             %177 = OpLabel 
                                       f32_3 %182 = OpLoad %174 
                                                      OpStore %172 %182 
                                       f32_3 %183 = OpLoad %172 
                              Uniform f32_3* %185 = OpAccessChain %30 %184 
                                       f32_3 %186 = OpLoad %185 
                                       f32_3 %187 = OpFNegate %186 
                                       f32_3 %188 = OpFAdd %183 %187 
                                                      OpStore %172 %188 
                                       f32_3 %189 = OpLoad %172 
                              Uniform f32_3* %191 = OpAccessChain %30 %190 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFMul %189 %192 
                                       f32_4 %194 = OpLoad %49 
                                       f32_4 %195 = OpVectorShuffle %194 %193 0 4 5 6 
                                                      OpStore %49 %195 
                                Private f32* %196 = OpAccessChain %49 %61 
                                         f32 %197 = OpLoad %196 
                                         f32 %199 = OpFMul %197 %198 
                                         f32 %201 = OpFAdd %199 %200 
                                Private f32* %202 = OpAccessChain %172 %55 
                                                      OpStore %202 %201 
                                Uniform f32* %204 = OpAccessChain %30 %116 %51 
                                         f32 %205 = OpLoad %204 
                                         f32 %207 = OpFMul %205 %206 
                                         f32 %208 = OpFAdd %207 %200 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Private f32* %210 = OpAccessChain %172 %55 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpExtInst %1 40 %209 %211 
                                Private f32* %213 = OpAccessChain %49 %55 
                                                      OpStore %213 %212 
                  read_only Texture3DSampled %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %49 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 2 3 
                                       f32_4 %221 = OpImageSampleImplicitLod %218 %220 
                                                      OpStore %49 %221 
                                       f32_4 %223 = OpLoad %49 
                                                      OpStore %222 %223 
                                                      OpBranch %128 
                                             %224 = OpLabel 
                                Private f32* %225 = OpAccessChain %222 %55 
                                                      OpStore %225 %111 
                                Private f32* %226 = OpAccessChain %222 %61 
                                                      OpStore %226 %111 
                                Private f32* %227 = OpAccessChain %222 %51 
                                                      OpStore %227 %111 
                                Private f32* %228 = OpAccessChain %222 %93 
                                                      OpStore %228 %111 
                                                      OpBranch %128 
                                             %128 = OpLabel 
                                       f32_4 %230 = OpLoad %222 
                              Uniform f32_4* %231 = OpAccessChain %30 %63 
                                       f32_4 %232 = OpLoad %231 
                                         f32 %233 = OpDot %230 %232 
                                Private f32* %234 = OpAccessChain %229 %55 
                                                      OpStore %234 %233 
                                Private f32* %235 = OpAccessChain %229 %55 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpExtInst %1 43 %236 %110 %111 
                                Private f32* %238 = OpAccessChain %229 %55 
                                                      OpStore %238 %237 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_4 %243 = OpLoad %240 
                                       f32_2 %244 = OpVectorShuffle %243 %243 3 3 
                                       f32_2 %245 = OpFDiv %242 %244 
                                       f32_3 %246 = OpLoad %172 
                                       f32_3 %247 = OpVectorShuffle %246 %245 3 4 2 
                                                      OpStore %172 %247 
                  read_only Texture2DSampled %250 = OpLoad %249 
                                       f32_3 %251 = OpLoad %172 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 1 
                                       f32_4 %253 = OpImageSampleImplicitLod %250 %252 
                                         f32 %254 = OpCompositeExtract %253 0 
                                                      OpStore %248 %254 
                                         f32 %256 = OpLoad %67 
                                         f32 %257 = OpLoad %248 
                                         f32 %258 = OpFAdd %256 %257 
                                                      OpStore %255 %258 
                                         f32 %259 = OpLoad %255 
                                         f32 %260 = OpExtInst %1 43 %259 %110 %111 
                                                      OpStore %255 %260 
                                         f32 %261 = OpLoad %255 
                                Private f32* %262 = OpAccessChain %229 %55 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpExtInst %1 37 %261 %263 
                                Private f32* %265 = OpAccessChain %229 %55 
                                                      OpStore %265 %264 
                                        bool %268 = OpLoad %115 
                                                      OpSelectionMerge %270 None 
                                                      OpBranchConditional %268 %269 %273 
                                             %269 = OpLabel 
                                Private f32* %271 = OpAccessChain %229 %55 
                                         f32 %272 = OpLoad %271 
                                                      OpStore %267 %272 
                                                      OpBranch %270 
                                             %273 = OpLabel 
                                         f32 %274 = OpLoad %255 
                                                      OpStore %267 %274 
                                                      OpBranch %270 
                                             %270 = OpLabel 
                                         f32 %275 = OpLoad %267 
                                Private f32* %276 = OpAccessChain %229 %55 
                                                      OpStore %276 %275 
                                       f32_3 %277 = OpLoad %229 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 0 0 
                              Uniform f32_4* %280 = OpAccessChain %30 %279 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpFMul %278 %282 
                                                      OpStore %229 %283 
                                       f32_3 %286 = OpLoad %285 
                              Uniform f32_4* %287 = OpAccessChain %30 %58 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                         f32 %290 = OpDot %286 %289 
                                                      OpStore %284 %290 
                                         f32 %291 = OpLoad %284 
                                         f32 %292 = OpExtInst %1 40 %291 %110 
                                                      OpStore %284 %292 
                                       f32_3 %293 = OpLoad %22 
                                       f32_3 %294 = OpLoad %229 
                                       f32_3 %295 = OpFMul %293 %294 
                                                      OpStore %229 %295 
                                         f32 %298 = OpLoad %284 
                                       f32_3 %299 = OpCompositeConstruct %298 %298 %298 
                                       f32_3 %300 = OpLoad %229 
                                       f32_3 %301 = OpFMul %299 %300 
                                       f32_4 %302 = OpLoad %297 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %297 %303 
                                 Output f32* %305 = OpAccessChain %297 %93 
                                                      OpStore %305 %111 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(unity_SHBr, u_xlat2);
    u_xlat1.y = dot(unity_SHBg, u_xlat2);
    u_xlat1.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
vec2 u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat18) + u_xlat1.x;
    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat18;
    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat13.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13.x, u_xlat7.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat13.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat13.xy);
    u_xlat18 = u_xlat18 + u_xlat10_2.x;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat7.x = min(u_xlat18, u_xlat7.x);
    u_xlat18 = (u_xlatb1) ? u_xlat7.x : u_xlat18;
    u_xlat7.xyz = vec3(u_xlat18) * _LightColor0.xyz;
    if(u_xlatb1){
        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat1.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat18 = max(u_xlat18, u_xlat1.x);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = vs_TEXCOORD1.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat5);
        u_xlat3.y = dot(u_xlat10_4, u_xlat5);
        u_xlat3.z = dot(u_xlat10_2, u_xlat5);
    } else {
        u_xlat2.xyz = vs_TEXCOORD1.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat18 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 238
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %114 %152 %192 %217 %229 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %229 Location 229 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 5 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 7 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                               Output f32_2* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 8 
                                             %113 = OpTypePointer Input %51 
                                Input f32_3* %114 = OpVariable Input 
                                         i32 %116 = OpConstant 6 
                                         u32 %121 = OpConstant 0 
                                             %122 = OpTypePointer Private %6 
                                         u32 %135 = OpConstant 2 
                                Private f32* %137 = OpVariable Private 
                               Output f32_3* %152 = OpVariable Output 
                                Private f32* %155 = OpVariable Private 
                              Private f32_4* %169 = OpVariable Private 
                                             %175 = OpTypePointer Private %51 
                              Private f32_3* %176 = OpVariable Private 
                               Output f32_3* %192 = OpVariable Output 
                                         i32 %193 = OpConstant 4 
                                             %204 = OpTypePointer Uniform %6 
                              Private f32_4* %209 = OpVariable Private 
                                         f32 %212 = OpConstant 3.674022E-40 
                                       f32_3 %213 = OpConstantComposite %212 %212 %212 
                               Output f32_4* %217 = OpVariable Output 
                               Output f32_4* %229 = OpVariable Output 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_4 %231 = OpConstantComposite %230 %230 %230 %230 
                                             %232 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore %100 %112 
                                       f32_3 %115 = OpLoad %114 
                              Uniform f32_4* %117 = OpAccessChain %21 %116 %29 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %115 %119 
                                Private f32* %123 = OpAccessChain %45 %121 
                                                      OpStore %123 %120 
                                       f32_3 %124 = OpLoad %114 
                              Uniform f32_4* %125 = OpAccessChain %21 %116 %24 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %129 = OpAccessChain %45 %90 
                                                      OpStore %129 %128 
                                       f32_3 %130 = OpLoad %114 
                              Uniform f32_4* %131 = OpAccessChain %21 %116 %37 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %130 %133 
                                Private f32* %136 = OpAccessChain %45 %135 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %45 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_4 %140 = OpLoad %45 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                         f32 %142 = OpDot %139 %141 
                                                      OpStore %137 %142 
                                         f32 %143 = OpLoad %137 
                                         f32 %144 = OpExtInst %1 32 %143 
                                                      OpStore %137 %144 
                                         f32 %145 = OpLoad %137 
                                       f32_3 %146 = OpCompositeConstruct %145 %145 %145 
                                       f32_4 %147 = OpLoad %45 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %45 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %45 %151 
                                       f32_4 %153 = OpLoad %45 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                Private f32* %156 = OpAccessChain %45 %90 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %45 %90 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                                      OpStore %155 %160 
                                Private f32* %161 = OpAccessChain %45 %121 
                                         f32 %162 = OpLoad %161 
                                Private f32* %163 = OpAccessChain %45 %121 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFMul %162 %164 
                                         f32 %166 = OpLoad %155 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %165 %167 
                                                      OpStore %155 %168 
                                       f32_4 %170 = OpLoad %45 
                                       f32_4 %171 = OpVectorShuffle %170 %170 1 2 2 0 
                                       f32_4 %172 = OpLoad %45 
                                       f32_4 %173 = OpVectorShuffle %172 %172 0 1 2 2 
                                       f32_4 %174 = OpFMul %171 %173 
                                                      OpStore %169 %174 
                              Uniform f32_4* %177 = OpAccessChain %21 %24 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpLoad %169 
                                         f32 %180 = OpDot %178 %179 
                                Private f32* %181 = OpAccessChain %176 %121 
                                                      OpStore %181 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %37 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %169 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %176 %90 
                                                      OpStore %186 %185 
                              Uniform f32_4* %187 = OpAccessChain %21 %47 
                                       f32_4 %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %169 
                                         f32 %190 = OpDot %188 %189 
                                Private f32* %191 = OpAccessChain %176 %135 
                                                      OpStore %191 %190 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpLoad %155 
                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %176 
                                       f32_3 %201 = OpFAdd %199 %200 
                                                      OpStore %192 %201 
                                Private f32* %202 = OpAccessChain %9 %90 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %21 %29 %121 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                Private f32* %208 = OpAccessChain %9 %90 
                                                      OpStore %208 %207 
                                       f32_4 %210 = OpLoad %9 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 3 1 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %209 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 1 5 6 
                                                      OpStore %209 %216 
                                       f32_4 %218 = OpLoad %9 
                                       f32_2 %219 = OpVectorShuffle %218 %218 2 3 
                                       f32_4 %220 = OpLoad %217 
                                       f32_4 %221 = OpVectorShuffle %220 %219 0 1 4 5 
                                                      OpStore %217 %221 
                                       f32_4 %222 = OpLoad %209 
                                       f32_2 %223 = OpVectorShuffle %222 %222 2 2 
                                       f32_4 %224 = OpLoad %209 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 3 
                                       f32_2 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad %217 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %217 %228 
                                                      OpStore %229 %231 
                                 Output f32* %233 = OpAccessChain %94 %29 %90 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                 Output f32* %236 = OpAccessChain %94 %29 %90 
                                                      OpStore %236 %235 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 507
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %41 %249 %416 %456 %495 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 RelaxedPrecision 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 RelaxedPrecision 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 RelaxedPrecision 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 RelaxedPrecision 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 RelaxedPrecision 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 RelaxedPrecision 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpMemberDecorate %28 8 Offset 28 
                                                      OpMemberDecorate %28 9 Offset 28 
                                                      OpMemberDecorate %28 10 Offset 28 
                                                      OpMemberDecorate %28 11 Offset 28 
                                                      OpMemberDecorate %28 12 Offset 28 
                                                      OpMemberDecorate %28 13 RelaxedPrecision 
                                                      OpMemberDecorate %28 13 Offset 28 
                                                      OpMemberDecorate %28 14 RelaxedPrecision 
                                                      OpMemberDecorate %28 14 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %133 SpecId 133 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %249 Location 249 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %258 DescriptorSet 258 
                                                      OpDecorate %258 Binding 258 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %416 Location 416 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %495 Location 495 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                               Private f32_3* %22 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %19 %25 
                                              %27 = OpTypeArray %19 %25 
                                              %28 = OpTypeStruct %7 %19 %19 %19 %19 %19 %19 %19 %26 %19 %27 %7 %7 %19 %19 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 14 
                                              %33 = OpTypePointer Uniform %19 
                                              %38 = OpTypePointer Private %19 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                                 Input f32_3* %41 = OpVariable Input 
                                          i32 %44 = OpConstant 0 
                                              %45 = OpTypePointer Uniform %7 
                               Private f32_4* %51 = OpVariable Private 
                                          i32 %52 = OpConstant 8 
                                          u32 %53 = OpConstant 2 
                                              %54 = OpTypePointer Uniform %6 
                                          u32 %57 = OpConstant 0 
                                              %58 = OpTypePointer Private %6 
                                          i32 %60 = OpConstant 1 
                                          u32 %63 = OpConstant 1 
                                          i32 %65 = OpConstant 2 
                                 Private f32* %69 = OpVariable Private 
                                          i32 %76 = OpConstant 7 
                                         u32 %100 = OpConstant 3 
                                         i32 %109 = OpConstant 6 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         f32 %118 = OpConstant 3.674022E-40 
                                             %120 = OpTypeBool 
                                             %121 = OpTypePointer Private %120 
                               Private bool* %122 = OpVariable Private 
                                         i32 %123 = OpConstant 9 
                                        bool %127 = OpConstantFalse 
                                        bool %133 = OpSpecConstantFalse 
                               Private bool* %136 = OpVariable Private 
                                         i32 %142 = OpConstant 10 
                                         i32 %173 = OpConstant 3 
                              Private f32_3* %180 = OpVariable Private 
                                             %181 = OpTypePointer Function %7 
                                         i32 %192 = OpConstant 12 
                                         i32 %198 = OpConstant 11 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         f32 %208 = OpConstant 3.674022E-40 
                                Private f32* %211 = OpVariable Private 
                                         f32 %214 = OpConstant 3.674022E-40 
                                             %222 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %223 = OpTypeSampledImage %222 
                                             %224 = OpTypePointer UniformConstant %223 
 UniformConstant read_only Texture3DSampled* %225 = OpVariable UniformConstant 
                              Private f32_4* %230 = OpVariable Private 
                              Private f32_3* %237 = OpVariable Private 
                                         i32 %239 = OpConstant 5 
                                             %248 = OpTypePointer Input %19 
                                Input f32_4* %249 = OpVariable Input 
                                Private f32* %257 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %258 = OpVariable UniformConstant 
                                Private f32* %264 = OpVariable Private 
                                             %275 = OpTypePointer Function %6 
                                         i32 %288 = OpConstant 13 
                               Private bool* %300 = OpVariable Private 
                              Private f32_4* %375 = OpVariable Private 
                                       f32_3 %397 = OpConstantComposite %206 %117 %117 
                                       f32_3 %407 = OpConstantComposite %214 %117 %117 
                              Private f32_4* %415 = OpVariable Private 
                                Input f32_3* %416 = OpVariable Input 
                              Private f32_3* %421 = OpVariable Private 
                                         i32 %449 = OpConstant 4 
                                Input f32_3* %456 = OpVariable Input 
                                       f32_3 %460 = OpConstantComposite %117 %117 %117 
                              Private f32_3* %462 = OpVariable Private 
                                         f32 %466 = OpConstant 3.674022E-40 
                                       f32_3 %467 = OpConstantComposite %466 %466 %466 
                                         f32 %472 = OpConstant 3.674022E-40 
                                       f32_3 %473 = OpConstantComposite %472 %472 %472 
                                         f32 %475 = OpConstant 3.674022E-40 
                                       f32_3 %476 = OpConstantComposite %475 %475 %475 
                                Private f32* %480 = OpVariable Private 
                                             %494 = OpTypePointer Output %19 
                               Output f32_4* %495 = OpVariable Output 
                                             %504 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %182 = OpVariable Function 
                               Function f32* %276 = OpVariable Function 
                             Function f32_3* %342 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                                        f32_3 %23 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %23 %36 
                                                      OpStore %22 %37 
                                        f32_3 %42 = OpLoad %41 
                                        f32_3 %43 = OpFNegate %42 
                               Uniform f32_3* %46 = OpAccessChain %30 %44 
                                        f32_3 %47 = OpLoad %46 
                                        f32_3 %48 = OpFAdd %43 %47 
                                        f32_4 %49 = OpLoad %39 
                                        f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                                      OpStore %39 %50 
                                 Uniform f32* %55 = OpAccessChain %30 %52 %44 %53 
                                          f32 %56 = OpLoad %55 
                                 Private f32* %59 = OpAccessChain %51 %57 
                                                      OpStore %59 %56 
                                 Uniform f32* %61 = OpAccessChain %30 %52 %60 %53 
                                          f32 %62 = OpLoad %61 
                                 Private f32* %64 = OpAccessChain %51 %63 
                                                      OpStore %64 %62 
                                 Uniform f32* %66 = OpAccessChain %30 %52 %65 %53 
                                          f32 %67 = OpLoad %66 
                                 Private f32* %68 = OpAccessChain %51 %53 
                                                      OpStore %68 %67 
                                        f32_4 %70 = OpLoad %39 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %51 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                          f32 %74 = OpDot %71 %73 
                                                      OpStore %69 %74 
                                        f32_3 %75 = OpLoad %41 
                               Uniform f32_4* %77 = OpAccessChain %30 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %81 = OpFAdd %75 %80 
                                        f32_4 %82 = OpLoad %39 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %39 %83 
                                        f32_4 %84 = OpLoad %39 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_4 %86 = OpLoad %39 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                          f32 %88 = OpDot %85 %87 
                                 Private f32* %89 = OpAccessChain %39 %57 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %39 %57 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpExtInst %1 31 %91 
                                 Private f32* %93 = OpAccessChain %39 %57 
                                                      OpStore %93 %92 
                                          f32 %94 = OpLoad %69 
                                          f32 %95 = OpFNegate %94 
                                 Private f32* %96 = OpAccessChain %39 %57 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFAdd %95 %97 
                                 Private f32* %99 = OpAccessChain %39 %57 
                                                      OpStore %99 %98 
                                Uniform f32* %101 = OpAccessChain %30 %76 %100 
                                         f32 %102 = OpLoad %101 
                                Private f32* %103 = OpAccessChain %39 %57 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFMul %102 %104 
                                         f32 %106 = OpLoad %69 
                                         f32 %107 = OpFAdd %105 %106 
                                                      OpStore %69 %107 
                                         f32 %108 = OpLoad %69 
                                Uniform f32* %110 = OpAccessChain %30 %109 %53 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFMul %108 %111 
                                Uniform f32* %113 = OpAccessChain %30 %109 %100 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFAdd %112 %114 
                                                      OpStore %69 %115 
                                         f32 %116 = OpLoad %69 
                                         f32 %119 = OpExtInst %1 43 %116 %117 %118 
                                                      OpStore %69 %119 
                                Uniform f32* %124 = OpAccessChain %30 %123 %57 
                                         f32 %125 = OpLoad %124 
                                        bool %126 = OpFOrdEqual %125 %118 
                                                      OpStore %122 %126 
                                                      OpSelectionMerge %129 None 
                                                      OpBranchConditional %127 %128 %129 
                                             %128 = OpLabel 
                                        bool %130 = OpLoad %122 
                                                      OpSelectionMerge %132 None 
                                                      OpBranchConditional %130 %131 %132 
                                             %131 = OpLabel 
                                                      OpBranch %132 
                                             %132 = OpLabel 
                                                      OpBranch %129 
                                             %129 = OpLabel 
                                                      OpSelectionMerge %135 None 
                                                      OpBranchConditional %133 %134 %232 
                                             %134 = OpLabel 
                                Uniform f32* %137 = OpAccessChain %30 %123 %63 
                                         f32 %138 = OpLoad %137 
                                        bool %139 = OpFOrdEqual %138 %118 
                                                      OpStore %136 %139 
                                       f32_3 %140 = OpLoad %41 
                                       f32_3 %141 = OpVectorShuffle %140 %140 1 1 1 
                              Uniform f32_4* %143 = OpAccessChain %30 %142 %60 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %141 %145 
                                       f32_4 %147 = OpLoad %51 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %51 %148 
                              Uniform f32_4* %149 = OpAccessChain %30 %142 %44 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpLoad %41 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 0 0 
                                       f32_3 %154 = OpFMul %151 %153 
                                       f32_4 %155 = OpLoad %51 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_3 %157 = OpFAdd %154 %156 
                                       f32_4 %158 = OpLoad %51 
                                       f32_4 %159 = OpVectorShuffle %158 %157 4 5 6 3 
                                                      OpStore %51 %159 
                              Uniform f32_4* %160 = OpAccessChain %30 %142 %65 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpLoad %41 
                                       f32_3 %164 = OpVectorShuffle %163 %163 2 2 2 
                                       f32_3 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %51 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %165 %167 
                                       f32_4 %169 = OpLoad %51 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %51 %170 
                                       f32_4 %171 = OpLoad %51 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                              Uniform f32_4* %174 = OpAccessChain %30 %142 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFAdd %172 %176 
                                       f32_4 %178 = OpLoad %51 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 6 3 
                                                      OpStore %51 %179 
                                        bool %183 = OpLoad %136 
                                                      OpSelectionMerge %185 None 
                                                      OpBranchConditional %183 %184 %188 
                                             %184 = OpLabel 
                                       f32_4 %186 = OpLoad %51 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                                      OpStore %182 %187 
                                                      OpBranch %185 
                                             %188 = OpLabel 
                                       f32_3 %189 = OpLoad %41 
                                                      OpStore %182 %189 
                                                      OpBranch %185 
                                             %185 = OpLabel 
                                       f32_3 %190 = OpLoad %182 
                                                      OpStore %180 %190 
                                       f32_3 %191 = OpLoad %180 
                              Uniform f32_3* %193 = OpAccessChain %30 %192 
                                       f32_3 %194 = OpLoad %193 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %191 %195 
                                                      OpStore %180 %196 
                                       f32_3 %197 = OpLoad %180 
                              Uniform f32_3* %199 = OpAccessChain %30 %198 
                                       f32_3 %200 = OpLoad %199 
                                       f32_3 %201 = OpFMul %197 %200 
                                       f32_4 %202 = OpLoad %51 
                                       f32_4 %203 = OpVectorShuffle %202 %201 0 4 5 6 
                                                      OpStore %51 %203 
                                Private f32* %204 = OpAccessChain %51 %63 
                                         f32 %205 = OpLoad %204 
                                         f32 %207 = OpFMul %205 %206 
                                         f32 %209 = OpFAdd %207 %208 
                                Private f32* %210 = OpAccessChain %180 %57 
                                                      OpStore %210 %209 
                                Uniform f32* %212 = OpAccessChain %30 %123 %53 
                                         f32 %213 = OpLoad %212 
                                         f32 %215 = OpFMul %213 %214 
                                         f32 %216 = OpFAdd %215 %208 
                                                      OpStore %211 %216 
                                         f32 %217 = OpLoad %211 
                                Private f32* %218 = OpAccessChain %180 %57 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 40 %217 %219 
                                Private f32* %221 = OpAccessChain %51 %57 
                                                      OpStore %221 %220 
                  read_only Texture3DSampled %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %51 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 2 3 
                                       f32_4 %229 = OpImageSampleImplicitLod %226 %228 
                                                      OpStore %51 %229 
                                       f32_4 %231 = OpLoad %51 
                                                      OpStore %230 %231 
                                                      OpBranch %135 
                                             %232 = OpLabel 
                                Private f32* %233 = OpAccessChain %230 %57 
                                                      OpStore %233 %118 
                                Private f32* %234 = OpAccessChain %230 %63 
                                                      OpStore %234 %118 
                                Private f32* %235 = OpAccessChain %230 %53 
                                                      OpStore %235 %118 
                                Private f32* %236 = OpAccessChain %230 %100 
                                                      OpStore %236 %118 
                                                      OpBranch %135 
                                             %135 = OpLabel 
                                       f32_4 %238 = OpLoad %230 
                              Uniform f32_4* %240 = OpAccessChain %30 %239 
                                       f32_4 %241 = OpLoad %240 
                                         f32 %242 = OpDot %238 %241 
                                Private f32* %243 = OpAccessChain %237 %57 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %237 %57 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpExtInst %1 43 %245 %117 %118 
                                Private f32* %247 = OpAccessChain %237 %57 
                                                      OpStore %247 %246 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 1 
                                       f32_4 %252 = OpLoad %249 
                                       f32_2 %253 = OpVectorShuffle %252 %252 3 3 
                                       f32_2 %254 = OpFDiv %251 %253 
                                       f32_3 %255 = OpLoad %180 
                                       f32_3 %256 = OpVectorShuffle %255 %254 3 4 2 
                                                      OpStore %180 %256 
                  read_only Texture2DSampled %259 = OpLoad %258 
                                       f32_3 %260 = OpLoad %180 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_4 %262 = OpImageSampleImplicitLod %259 %261 
                                         f32 %263 = OpCompositeExtract %262 0 
                                                      OpStore %257 %263 
                                         f32 %265 = OpLoad %69 
                                         f32 %266 = OpLoad %257 
                                         f32 %267 = OpFAdd %265 %266 
                                                      OpStore %264 %267 
                                         f32 %268 = OpLoad %264 
                                         f32 %269 = OpExtInst %1 43 %268 %117 %118 
                                                      OpStore %264 %269 
                                         f32 %270 = OpLoad %264 
                                Private f32* %271 = OpAccessChain %237 %57 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 37 %270 %272 
                                Private f32* %274 = OpAccessChain %237 %57 
                                                      OpStore %274 %273 
                                        bool %277 = OpLoad %122 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %282 
                                             %278 = OpLabel 
                                Private f32* %280 = OpAccessChain %237 %57 
                                         f32 %281 = OpLoad %280 
                                                      OpStore %276 %281 
                                                      OpBranch %279 
                                             %282 = OpLabel 
                                         f32 %283 = OpLoad %264 
                                                      OpStore %276 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                         f32 %284 = OpLoad %276 
                                Private f32* %285 = OpAccessChain %237 %57 
                                                      OpStore %285 %284 
                                       f32_3 %286 = OpLoad %237 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 0 0 
                              Uniform f32_4* %289 = OpAccessChain %30 %288 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFMul %287 %291 
                                                      OpStore %237 %292 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %127 %293 %294 
                                             %293 = OpLabel 
                                        bool %295 = OpLoad %122 
                                                      OpSelectionMerge %297 None 
                                                      OpBranchConditional %295 %296 %297 
                                             %296 = OpLabel 
                                                      OpBranch %297 
                                             %297 = OpLabel 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                                      OpSelectionMerge %299 None 
                                                      OpBranchConditional %133 %298 %434 
                                             %298 = OpLabel 
                                Uniform f32* %301 = OpAccessChain %30 %123 %63 
                                         f32 %302 = OpLoad %301 
                                        bool %303 = OpFOrdEqual %302 %118 
                                                      OpStore %300 %303 
                                       f32_3 %304 = OpLoad %41 
                                       f32_3 %305 = OpVectorShuffle %304 %304 1 1 1 
                              Uniform f32_4* %306 = OpAccessChain %30 %142 %60 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFMul %305 %308 
                                       f32_4 %310 = OpLoad %39 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %39 %311 
                              Uniform f32_4* %312 = OpAccessChain %30 %142 %44 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpLoad %41 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 0 0 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %39 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %39 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %39 %322 
                              Uniform f32_4* %323 = OpAccessChain %30 %142 %65 
                                       f32_4 %324 = OpLoad %323 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpLoad %41 
                                       f32_3 %327 = OpVectorShuffle %326 %326 2 2 2 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFAdd %328 %330 
                                       f32_4 %332 = OpLoad %39 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 6 3 
                                                      OpStore %39 %333 
                                       f32_4 %334 = OpLoad %39 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                              Uniform f32_4* %336 = OpAccessChain %30 %142 %173 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFAdd %335 %338 
                                       f32_4 %340 = OpLoad %39 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %39 %341 
                                        bool %343 = OpLoad %300 
                                                      OpSelectionMerge %345 None 
                                                      OpBranchConditional %343 %344 %348 
                                             %344 = OpLabel 
                                       f32_4 %346 = OpLoad %39 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                                      OpStore %342 %347 
                                                      OpBranch %345 
                                             %348 = OpLabel 
                                       f32_3 %349 = OpLoad %41 
                                                      OpStore %342 %349 
                                                      OpBranch %345 
                                             %345 = OpLabel 
                                       f32_3 %350 = OpLoad %342 
                                       f32_4 %351 = OpLoad %39 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %39 %352 
                                       f32_4 %353 = OpLoad %39 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                              Uniform f32_3* %355 = OpAccessChain %30 %192 
                                       f32_3 %356 = OpLoad %355 
                                       f32_3 %357 = OpFNegate %356 
                                       f32_3 %358 = OpFAdd %354 %357 
                                       f32_4 %359 = OpLoad %39 
                                       f32_4 %360 = OpVectorShuffle %359 %358 4 5 6 3 
                                                      OpStore %39 %360 
                                       f32_4 %361 = OpLoad %39 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                              Uniform f32_3* %363 = OpAccessChain %30 %198 
                                       f32_3 %364 = OpLoad %363 
                                       f32_3 %365 = OpFMul %362 %364 
                                       f32_4 %366 = OpLoad %39 
                                       f32_4 %367 = OpVectorShuffle %366 %365 0 4 5 6 
                                                      OpStore %39 %367 
                                Private f32* %368 = OpAccessChain %39 %63 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %369 %206 
                                                      OpStore %69 %370 
                                Uniform f32* %371 = OpAccessChain %30 %123 %53 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpFMul %372 %214 
                                Private f32* %374 = OpAccessChain %180 %57 
                                                      OpStore %374 %373 
                                Uniform f32* %376 = OpAccessChain %30 %123 %53 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpFNegate %377 
                                         f32 %379 = OpFMul %378 %214 
                                         f32 %380 = OpFAdd %379 %206 
                                Private f32* %381 = OpAccessChain %375 %57 
                                                      OpStore %381 %380 
                                         f32 %382 = OpLoad %69 
                                Private f32* %383 = OpAccessChain %180 %57 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpExtInst %1 40 %382 %384 
                                                      OpStore %69 %385 
                                Private f32* %386 = OpAccessChain %375 %57 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpLoad %69 
                                         f32 %389 = OpExtInst %1 37 %387 %388 
                                Private f32* %390 = OpAccessChain %39 %57 
                                                      OpStore %390 %389 
                  read_only Texture3DSampled %391 = OpLoad %225 
                                       f32_4 %392 = OpLoad %39 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 2 3 
                                       f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                                                      OpStore %51 %394 
                                       f32_4 %395 = OpLoad %39 
                                       f32_3 %396 = OpVectorShuffle %395 %395 0 2 3 
                                       f32_3 %398 = OpFAdd %396 %397 
                                       f32_4 %399 = OpLoad %375 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %375 %400 
                  read_only Texture3DSampled %401 = OpLoad %225 
                                       f32_4 %402 = OpLoad %375 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_4 %404 = OpImageSampleImplicitLod %401 %403 
                                                      OpStore %375 %404 
                                       f32_4 %405 = OpLoad %39 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 2 3 
                                       f32_3 %408 = OpFAdd %406 %407 
                                       f32_4 %409 = OpLoad %39 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %39 %410 
                  read_only Texture3DSampled %411 = OpLoad %225 
                                       f32_4 %412 = OpLoad %39 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpImageSampleImplicitLod %411 %413 
                                                      OpStore %39 %414 
                                       f32_3 %417 = OpLoad %416 
                                       f32_4 %418 = OpLoad %415 
                                       f32_4 %419 = OpVectorShuffle %418 %417 4 5 6 3 
                                                      OpStore %415 %419 
                                Private f32* %420 = OpAccessChain %415 %100 
                                                      OpStore %420 %118 
                                       f32_4 %422 = OpLoad %51 
                                       f32_4 %423 = OpLoad %415 
                                         f32 %424 = OpDot %422 %423 
                                Private f32* %425 = OpAccessChain %421 %57 
                                                      OpStore %425 %424 
                                       f32_4 %426 = OpLoad %375 
                                       f32_4 %427 = OpLoad %415 
                                         f32 %428 = OpDot %426 %427 
                                Private f32* %429 = OpAccessChain %421 %63 
                                                      OpStore %429 %428 
                                       f32_4 %430 = OpLoad %39 
                                       f32_4 %431 = OpLoad %415 
                                         f32 %432 = OpDot %430 %431 
                                Private f32* %433 = OpAccessChain %421 %53 
                                                      OpStore %433 %432 
                                                      OpBranch %299 
                                             %434 = OpLabel 
                                       f32_3 %435 = OpLoad %416 
                                       f32_4 %436 = OpLoad %39 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %39 %437 
                                Private f32* %438 = OpAccessChain %39 %100 
                                                      OpStore %438 %118 
                              Uniform f32_4* %439 = OpAccessChain %30 %65 
                                       f32_4 %440 = OpLoad %439 
                                       f32_4 %441 = OpLoad %39 
                                         f32 %442 = OpDot %440 %441 
                                Private f32* %443 = OpAccessChain %421 %57 
                                                      OpStore %443 %442 
                              Uniform f32_4* %444 = OpAccessChain %30 %173 
                                       f32_4 %445 = OpLoad %444 
                                       f32_4 %446 = OpLoad %39 
                                         f32 %447 = OpDot %445 %446 
                                Private f32* %448 = OpAccessChain %421 %63 
                                                      OpStore %448 %447 
                              Uniform f32_4* %450 = OpAccessChain %30 %449 
                                       f32_4 %451 = OpLoad %450 
                                       f32_4 %452 = OpLoad %39 
                                         f32 %453 = OpDot %451 %452 
                                Private f32* %454 = OpAccessChain %421 %53 
                                                      OpStore %454 %453 
                                                      OpBranch %299 
                                             %299 = OpLabel 
                                       f32_3 %455 = OpLoad %421 
                                       f32_3 %457 = OpLoad %456 
                                       f32_3 %458 = OpFAdd %455 %457 
                                                      OpStore %421 %458 
                                       f32_3 %459 = OpLoad %421 
                                       f32_3 %461 = OpExtInst %1 40 %459 %460 
                                                      OpStore %421 %461 
                                       f32_3 %463 = OpLoad %421 
                                       f32_3 %464 = OpExtInst %1 30 %463 
                                                      OpStore %462 %464 
                                       f32_3 %465 = OpLoad %462 
                                       f32_3 %468 = OpFMul %465 %467 
                                                      OpStore %462 %468 
                                       f32_3 %469 = OpLoad %462 
                                       f32_3 %470 = OpExtInst %1 29 %469 
                                                      OpStore %462 %470 
                                       f32_3 %471 = OpLoad %462 
                                       f32_3 %474 = OpFMul %471 %473 
                                       f32_3 %477 = OpFAdd %474 %476 
                                                      OpStore %462 %477 
                                       f32_3 %478 = OpLoad %462 
                                       f32_3 %479 = OpExtInst %1 40 %478 %460 
                                                      OpStore %462 %479 
                                       f32_3 %481 = OpLoad %416 
                              Uniform f32_4* %482 = OpAccessChain %30 %60 
                                       f32_4 %483 = OpLoad %482 
                                       f32_3 %484 = OpVectorShuffle %483 %483 0 1 2 
                                         f32 %485 = OpDot %481 %484 
                                                      OpStore %480 %485 
                                         f32 %486 = OpLoad %480 
                                         f32 %487 = OpExtInst %1 40 %486 %117 
                                                      OpStore %480 %487 
                                       f32_3 %488 = OpLoad %22 
                                       f32_3 %489 = OpLoad %237 
                                       f32_3 %490 = OpFMul %488 %489 
                                                      OpStore %237 %490 
                                       f32_3 %491 = OpLoad %22 
                                       f32_3 %492 = OpLoad %462 
                                       f32_3 %493 = OpFMul %491 %492 
                                                      OpStore %421 %493 
                                       f32_3 %496 = OpLoad %237 
                                         f32 %497 = OpLoad %480 
                                       f32_3 %498 = OpCompositeConstruct %497 %497 %497 
                                       f32_3 %499 = OpFMul %496 %498 
                                       f32_3 %500 = OpLoad %421 
                                       f32_3 %501 = OpFAdd %499 %500 
                                       f32_4 %502 = OpLoad %495 
                                       f32_4 %503 = OpVectorShuffle %502 %501 4 5 6 3 
                                                      OpStore %495 %503 
                                 Output f32* %505 = OpAccessChain %495 %100 
                                                      OpStore %505 %118 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
        u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat1.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat6, u_xlat3);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 211
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %63 %189 %201 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 RelaxedPrecision 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 RelaxedPrecision 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 RelaxedPrecision 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %53 SpecId 53 
                                                      OpDecorate %63 Location 63 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %201 Location 201 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                               Private f32_3* %22 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %19 %25 
                                              %27 = OpTypeStruct %19 %19 %19 %26 %7 %7 %19 %19 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 7 
                                              %32 = OpTypePointer Uniform %19 
                                              %37 = OpTypeBool 
                                              %38 = OpTypePointer Private %37 
                                Private bool* %39 = OpVariable Private 
                                          i32 %40 = OpConstant 2 
                                          u32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          f32 %45 = OpConstant 3.674022E-40 
                                         bool %47 = OpConstantFalse 
                                         bool %53 = OpSpecConstantFalse 
                                          u32 %56 = OpConstant 1 
                                              %60 = OpTypePointer Private %19 
                               Private f32_4* %61 = OpVariable Private 
                                              %62 = OpTypePointer Input %7 
                                 Input f32_3* %63 = OpVariable Input 
                                          i32 %66 = OpConstant 3 
                                          i32 %67 = OpConstant 1 
                                          i32 %74 = OpConstant 0 
                                             %105 = OpTypePointer Function %7 
                                         i32 %119 = OpConstant 5 
                                             %120 = OpTypePointer Uniform %7 
                                         i32 %129 = OpConstant 4 
                                             %135 = OpTypePointer Private %6 
                                Private f32* %136 = OpVariable Private 
                                         f32 %139 = OpConstant 3.674022E-40 
                                         f32 %141 = OpConstant 3.674022E-40 
                                Private f32* %143 = OpVariable Private 
                                         u32 %144 = OpConstant 2 
                                         f32 %147 = OpConstant 3.674022E-40 
                                             %154 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %155 = OpTypeSampledImage %154 
                                             %156 = OpTypePointer UniformConstant %155 
 UniformConstant read_only Texture3DSampled* %157 = OpVariable UniformConstant 
                              Private f32_4* %162 = OpVariable Private 
                                         u32 %168 = OpConstant 3 
                              Private f32_3* %170 = OpVariable Private 
                                         f32 %178 = OpConstant 3.674022E-40 
                                         i32 %183 = OpConstant 6 
                                Private f32* %188 = OpVariable Private 
                                Input f32_3* %189 = OpVariable Input 
                                             %200 = OpTypePointer Output %19 
                               Output f32_4* %201 = OpVariable Output 
                                             %208 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %106 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                                        f32_3 %23 = OpLoad %9 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                        f32_3 %36 = OpFMul %23 %35 
                                                      OpStore %22 %36 
                                 Uniform f32* %43 = OpAccessChain %29 %40 %41 
                                          f32 %44 = OpLoad %43 
                                         bool %46 = OpFOrdEqual %44 %45 
                                                      OpStore %39 %46 
                                                      OpSelectionMerge %49 None 
                                                      OpBranchConditional %47 %48 %49 
                                              %48 = OpLabel 
                                         bool %50 = OpLoad %39 
                                                      OpSelectionMerge %52 None 
                                                      OpBranchConditional %50 %51 %52 
                                              %51 = OpLabel 
                                                      OpBranch %52 
                                              %52 = OpLabel 
                                                      OpBranch %49 
                                              %49 = OpLabel 
                                                      OpSelectionMerge %55 None 
                                                      OpBranchConditional %53 %54 %164 
                                              %54 = OpLabel 
                                 Uniform f32* %57 = OpAccessChain %29 %40 %56 
                                          f32 %58 = OpLoad %57 
                                         bool %59 = OpFOrdEqual %58 %45 
                                                      OpStore %39 %59 
                                        f32_3 %64 = OpLoad %63 
                                        f32_3 %65 = OpVectorShuffle %64 %64 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %29 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                        f32_4 %72 = OpLoad %61 
                                        f32_4 %73 = OpVectorShuffle %72 %71 4 5 6 3 
                                                      OpStore %61 %73 
                               Uniform f32_4* %75 = OpAccessChain %29 %66 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                                        f32_3 %78 = OpLoad %63 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 0 0 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %61 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFAdd %80 %82 
                                        f32_4 %84 = OpLoad %61 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %61 %85 
                               Uniform f32_4* %86 = OpAccessChain %29 %66 %40 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpLoad %63 
                                        f32_3 %90 = OpVectorShuffle %89 %89 2 2 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %61 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFAdd %91 %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 6 3 
                                                      OpStore %61 %96 
                                        f32_4 %97 = OpLoad %61 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                               Uniform f32_4* %99 = OpAccessChain %29 %66 %66 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFAdd %98 %101 
                                       f32_4 %103 = OpLoad %61 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %61 %104 
                                        bool %107 = OpLoad %39 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %61 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %106 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_3 %113 = OpLoad %63 
                                                      OpStore %106 %113 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %114 = OpLoad %106 
                                       f32_4 %115 = OpLoad %61 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %61 %116 
                                       f32_4 %117 = OpLoad %61 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %121 = OpAccessChain %29 %119 
                                       f32_3 %122 = OpLoad %121 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %118 %123 
                                       f32_4 %125 = OpLoad %61 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %61 %126 
                                       f32_4 %127 = OpLoad %61 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                              Uniform f32_3* %130 = OpAccessChain %29 %129 
                                       f32_3 %131 = OpLoad %130 
                                       f32_3 %132 = OpFMul %128 %131 
                                       f32_4 %133 = OpLoad %61 
                                       f32_4 %134 = OpVectorShuffle %133 %132 0 4 5 6 
                                                      OpStore %61 %134 
                                Private f32* %137 = OpAccessChain %61 %56 
                                         f32 %138 = OpLoad %137 
                                         f32 %140 = OpFMul %138 %139 
                                         f32 %142 = OpFAdd %140 %141 
                                                      OpStore %136 %142 
                                Uniform f32* %145 = OpAccessChain %29 %40 %144 
                                         f32 %146 = OpLoad %145 
                                         f32 %148 = OpFMul %146 %147 
                                         f32 %149 = OpFAdd %148 %141 
                                                      OpStore %143 %149 
                                         f32 %150 = OpLoad %136 
                                         f32 %151 = OpLoad %143 
                                         f32 %152 = OpExtInst %1 40 %150 %151 
                                Private f32* %153 = OpAccessChain %61 %41 
                                                      OpStore %153 %152 
                  read_only Texture3DSampled %158 = OpLoad %157 
                                       f32_4 %159 = OpLoad %61 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 2 3 
                                       f32_4 %161 = OpImageSampleImplicitLod %158 %160 
                                                      OpStore %61 %161 
                                       f32_4 %163 = OpLoad %61 
                                                      OpStore %162 %163 
                                                      OpBranch %55 
                                             %164 = OpLabel 
                                Private f32* %165 = OpAccessChain %162 %41 
                                                      OpStore %165 %45 
                                Private f32* %166 = OpAccessChain %162 %56 
                                                      OpStore %166 %45 
                                Private f32* %167 = OpAccessChain %162 %144 
                                                      OpStore %167 %45 
                                Private f32* %169 = OpAccessChain %162 %168 
                                                      OpStore %169 %45 
                                                      OpBranch %55 
                                              %55 = OpLabel 
                                       f32_4 %171 = OpLoad %162 
                              Uniform f32_4* %172 = OpAccessChain %29 %67 
                                       f32_4 %173 = OpLoad %172 
                                         f32 %174 = OpDot %171 %173 
                                Private f32* %175 = OpAccessChain %170 %41 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %170 %41 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpExtInst %1 43 %177 %178 %45 
                                Private f32* %180 = OpAccessChain %170 %41 
                                                      OpStore %180 %179 
                                       f32_3 %181 = OpLoad %170 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 0 0 
                              Uniform f32_4* %184 = OpAccessChain %29 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %182 %186 
                                                      OpStore %170 %187 
                                       f32_3 %190 = OpLoad %189 
                              Uniform f32_4* %191 = OpAccessChain %29 %74 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %190 %193 
                                                      OpStore %188 %194 
                                         f32 %195 = OpLoad %188 
                                         f32 %196 = OpExtInst %1 40 %195 %178 
                                                      OpStore %188 %196 
                                       f32_3 %197 = OpLoad %22 
                                       f32_3 %198 = OpLoad %170 
                                       f32_3 %199 = OpFMul %197 %198 
                                                      OpStore %170 %199 
                                         f32 %202 = OpLoad %188 
                                       f32_3 %203 = OpCompositeConstruct %202 %202 %202 
                                       f32_3 %204 = OpLoad %170 
                                       f32_3 %205 = OpFMul %203 %204 
                                       f32_4 %206 = OpLoad %201 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %201 %207 
                                 Output f32* %209 = OpAccessChain %201 %168 
                                                      OpStore %209 %45 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
        u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat1.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat6, u_xlat3);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 398
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %116 %155 %158 %386 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %116 Location 116 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 Location 386 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 14 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                             %101 = OpTypePointer Output %100 
                               Output f32_2* %102 = OpVariable Output 
                                Input f32_4* %103 = OpVariable Input 
                                         i32 %106 = OpConstant 15 
                                             %115 = OpTypePointer Input %53 
                                Input f32_3* %116 = OpVariable Input 
                                         i32 %118 = OpConstant 13 
                                         u32 %123 = OpConstant 0 
                                             %124 = OpTypePointer Private %6 
                                         u32 %137 = OpConstant 2 
                                Private f32* %139 = OpVariable Private 
                                             %154 = OpTypePointer Output %53 
                               Output f32_3* %155 = OpVariable Output 
                               Output f32_3* %158 = OpVariable Output 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %180 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_4 %221 = OpConstantComposite %220 %220 %220 %220 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_4 %230 = OpConstantComposite %229 %229 %229 %229 
                                         i32 %237 = OpConstant 4 
                                             %277 = OpTypePointer Private %53 
                              Private f32_3* %278 = OpVariable Private 
                              Private f32_4* %295 = OpVariable Private 
                              Private f32_3* %301 = OpVariable Private 
                                         i32 %302 = OpConstant 8 
                                         i32 %308 = OpConstant 9 
                                         i32 %314 = OpConstant 10 
                                         i32 %320 = OpConstant 11 
                                         u32 %329 = OpConstant 3 
                                         i32 %331 = OpConstant 5 
                                         i32 %337 = OpConstant 6 
                                         i32 %343 = OpConstant 7 
                                       f32_3 %353 = OpConstantComposite %229 %229 %229 
                                         f32 %361 = OpConstant 3.674022E-40 
                                       f32_3 %362 = OpConstantComposite %361 %361 %361 
                                         f32 %373 = OpConstant 3.674022E-40 
                                       f32_3 %374 = OpConstantComposite %373 %373 %373 
                                         f32 %376 = OpConstant 3.674022E-40 
                                       f32_3 %377 = OpConstantComposite %376 %376 %376 
                               Output f32_3* %386 = OpVariable Output 
                                             %392 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                                      OpStore %102 %114 
                                       f32_3 %117 = OpLoad %116 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 %31 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %117 %121 
                                Private f32* %125 = OpAccessChain %47 %123 
                                                      OpStore %125 %122 
                                       f32_3 %126 = OpLoad %116 
                              Uniform f32_4* %127 = OpAccessChain %23 %118 %26 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %131 = OpAccessChain %47 %86 
                                                      OpStore %131 %130 
                                       f32_3 %132 = OpLoad %116 
                              Uniform f32_4* %133 = OpAccessChain %23 %118 %39 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                Private f32* %138 = OpAccessChain %47 %137 
                                                      OpStore %138 %136 
                                       f32_4 %140 = OpLoad %47 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %47 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %139 %144 
                                         f32 %145 = OpLoad %139 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %139 %146 
                                         f32 %147 = OpLoad %139 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %47 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %47 %153 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                                      OpStore %158 %160 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 0 0 0 0 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %31 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %65 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpFNegate %169 
                              Uniform f32_4* %171 = OpAccessChain %23 %26 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpFAdd %170 %172 
                                                      OpStore %167 %173 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 2 2 2 2 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %39 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                                       f32_4 %183 = OpLoad %167 
                                       f32_4 %184 = OpFMul %182 %183 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %167 
                                       f32_4 %186 = OpLoad %167 
                                       f32_4 %187 = OpFMul %185 %186 
                                                      OpStore %167 %187 
                                       f32_4 %188 = OpLoad %65 
                                       f32_4 %189 = OpLoad %65 
                                       f32_4 %190 = OpFMul %188 %189 
                                       f32_4 %191 = OpLoad %167 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %167 %192 
                                       f32_4 %193 = OpLoad %65 
                                       f32_4 %194 = OpLoad %47 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %180 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %65 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_4 %200 = OpLoad %47 
                                       f32_4 %201 = OpVectorShuffle %200 %200 2 2 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %65 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %65 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %167 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %167 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %217 = OpAccessChain %23 %49 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %222 = OpFAdd %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %224 = OpFDiv %221 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %65 
                                       f32_4 %226 = OpLoad %167 
                                       f32_4 %227 = OpFMul %225 %226 
                                                      OpStore %65 %227 
                                       f32_4 %228 = OpLoad %65 
                                       f32_4 %231 = OpExtInst %1 40 %228 %230 
                                                      OpStore %65 %231 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpLoad %65 
                                       f32_4 %234 = OpFMul %232 %233 
                                                      OpStore %9 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %23 %237 %26 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %65 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %65 %243 
                              Uniform f32_4* %244 = OpAccessChain %23 %237 %31 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %65 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %65 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %65 %254 
                              Uniform f32_4* %255 = OpAccessChain %23 %237 %39 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %65 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %9 %265 
                              Uniform f32_4* %266 = OpAccessChain %23 %237 %49 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %9 
                                       f32_3 %270 = OpVectorShuffle %269 %269 3 3 3 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %9 %276 
                                Private f32* %279 = OpAccessChain %47 %86 
                                         f32 %280 = OpLoad %279 
                                Private f32* %281 = OpAccessChain %47 %86 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %280 %282 
                                Private f32* %284 = OpAccessChain %278 %123 
                                                      OpStore %284 %283 
                                Private f32* %285 = OpAccessChain %47 %123 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %47 %123 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %286 %288 
                                Private f32* %290 = OpAccessChain %278 %123 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFNegate %291 
                                         f32 %293 = OpFAdd %289 %292 
                                Private f32* %294 = OpAccessChain %278 %123 
                                                      OpStore %294 %293 
                                       f32_4 %296 = OpLoad %47 
                                       f32_4 %297 = OpVectorShuffle %296 %296 1 2 2 0 
                                       f32_4 %298 = OpLoad %47 
                                       f32_4 %299 = OpVectorShuffle %298 %298 0 1 2 2 
                                       f32_4 %300 = OpFMul %297 %299 
                                                      OpStore %295 %300 
                              Uniform f32_4* %303 = OpAccessChain %23 %302 
                                       f32_4 %304 = OpLoad %303 
                                       f32_4 %305 = OpLoad %295 
                                         f32 %306 = OpDot %304 %305 
                                Private f32* %307 = OpAccessChain %301 %123 
                                                      OpStore %307 %306 
                              Uniform f32_4* %309 = OpAccessChain %23 %308 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpLoad %295 
                                         f32 %312 = OpDot %310 %311 
                                Private f32* %313 = OpAccessChain %301 %86 
                                                      OpStore %313 %312 
                              Uniform f32_4* %315 = OpAccessChain %23 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_4 %317 = OpLoad %295 
                                         f32 %318 = OpDot %316 %317 
                                Private f32* %319 = OpAccessChain %301 %137 
                                                      OpStore %319 %318 
                              Uniform f32_4* %321 = OpAccessChain %23 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpLoad %278 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_3 %327 = OpLoad %301 
                                       f32_3 %328 = OpFAdd %326 %327 
                                                      OpStore %278 %328 
                                Private f32* %330 = OpAccessChain %47 %329 
                                                      OpStore %330 %220 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpLoad %47 
                                         f32 %335 = OpDot %333 %334 
                                Private f32* %336 = OpAccessChain %301 %123 
                                                      OpStore %336 %335 
                              Uniform f32_4* %338 = OpAccessChain %23 %337 
                                       f32_4 %339 = OpLoad %338 
                                       f32_4 %340 = OpLoad %47 
                                         f32 %341 = OpDot %339 %340 
                                Private f32* %342 = OpAccessChain %301 %86 
                                                      OpStore %342 %341 
                              Uniform f32_4* %344 = OpAccessChain %23 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_4 %346 = OpLoad %47 
                                         f32 %347 = OpDot %345 %346 
                                Private f32* %348 = OpAccessChain %301 %137 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %278 
                                       f32_3 %350 = OpLoad %301 
                                       f32_3 %351 = OpFAdd %349 %350 
                                                      OpStore %278 %351 
                                       f32_3 %352 = OpLoad %278 
                                       f32_3 %354 = OpExtInst %1 40 %352 %353 
                                                      OpStore %278 %354 
                                       f32_3 %355 = OpLoad %278 
                                       f32_3 %356 = OpExtInst %1 30 %355 
                                       f32_4 %357 = OpLoad %47 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %47 %358 
                                       f32_4 %359 = OpLoad %47 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %363 = OpFMul %360 %362 
                                       f32_4 %364 = OpLoad %47 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
                                                      OpStore %47 %365 
                                       f32_4 %366 = OpLoad %47 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpExtInst %1 29 %367 
                                       f32_4 %369 = OpLoad %47 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %47 %370 
                                       f32_4 %371 = OpLoad %47 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %47 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %47 %380 
                                       f32_4 %381 = OpLoad %47 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpExtInst %1 40 %382 %353 
                                       f32_4 %384 = OpLoad %47 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %47 %385 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %47 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                                      OpStore %386 %391 
                                 Output f32* %393 = OpAccessChain %90 %31 %86 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFNegate %394 
                                 Output f32* %396 = OpAccessChain %90 %31 %86 
                                                      OpStore %396 %395 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 218
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %63 %189 %202 %206 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 RelaxedPrecision 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 RelaxedPrecision 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 RelaxedPrecision 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %53 SpecId 53 
                                                      OpDecorate %63 Location 63 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %202 Location 202 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                               Private f32_3* %22 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %19 %25 
                                              %27 = OpTypeStruct %19 %19 %19 %26 %7 %7 %19 %19 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 7 
                                              %32 = OpTypePointer Uniform %19 
                                              %37 = OpTypeBool 
                                              %38 = OpTypePointer Private %37 
                                Private bool* %39 = OpVariable Private 
                                          i32 %40 = OpConstant 2 
                                          u32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          f32 %45 = OpConstant 3.674022E-40 
                                         bool %47 = OpConstantFalse 
                                         bool %53 = OpSpecConstantFalse 
                                          u32 %56 = OpConstant 1 
                                              %60 = OpTypePointer Private %19 
                               Private f32_4* %61 = OpVariable Private 
                                              %62 = OpTypePointer Input %7 
                                 Input f32_3* %63 = OpVariable Input 
                                          i32 %66 = OpConstant 3 
                                          i32 %67 = OpConstant 1 
                                          i32 %74 = OpConstant 0 
                                             %105 = OpTypePointer Function %7 
                                         i32 %119 = OpConstant 5 
                                             %120 = OpTypePointer Uniform %7 
                                         i32 %129 = OpConstant 4 
                                             %135 = OpTypePointer Private %6 
                                Private f32* %136 = OpVariable Private 
                                         f32 %139 = OpConstant 3.674022E-40 
                                         f32 %141 = OpConstant 3.674022E-40 
                                Private f32* %143 = OpVariable Private 
                                         u32 %144 = OpConstant 2 
                                         f32 %147 = OpConstant 3.674022E-40 
                                             %154 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %155 = OpTypeSampledImage %154 
                                             %156 = OpTypePointer UniformConstant %155 
 UniformConstant read_only Texture3DSampled* %157 = OpVariable UniformConstant 
                              Private f32_4* %162 = OpVariable Private 
                                         u32 %168 = OpConstant 3 
                              Private f32_3* %170 = OpVariable Private 
                                         f32 %178 = OpConstant 3.674022E-40 
                                         i32 %183 = OpConstant 6 
                                Private f32* %188 = OpVariable Private 
                                Input f32_3* %189 = OpVariable Input 
                              Private f32_3* %200 = OpVariable Private 
                                Input f32_3* %202 = OpVariable Input 
                                             %205 = OpTypePointer Output %19 
                               Output f32_4* %206 = OpVariable Output 
                                             %215 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %106 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                                        f32_3 %23 = OpLoad %9 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                        f32_3 %36 = OpFMul %23 %35 
                                                      OpStore %22 %36 
                                 Uniform f32* %43 = OpAccessChain %29 %40 %41 
                                          f32 %44 = OpLoad %43 
                                         bool %46 = OpFOrdEqual %44 %45 
                                                      OpStore %39 %46 
                                                      OpSelectionMerge %49 None 
                                                      OpBranchConditional %47 %48 %49 
                                              %48 = OpLabel 
                                         bool %50 = OpLoad %39 
                                                      OpSelectionMerge %52 None 
                                                      OpBranchConditional %50 %51 %52 
                                              %51 = OpLabel 
                                                      OpBranch %52 
                                              %52 = OpLabel 
                                                      OpBranch %49 
                                              %49 = OpLabel 
                                                      OpSelectionMerge %55 None 
                                                      OpBranchConditional %53 %54 %164 
                                              %54 = OpLabel 
                                 Uniform f32* %57 = OpAccessChain %29 %40 %56 
                                          f32 %58 = OpLoad %57 
                                         bool %59 = OpFOrdEqual %58 %45 
                                                      OpStore %39 %59 
                                        f32_3 %64 = OpLoad %63 
                                        f32_3 %65 = OpVectorShuffle %64 %64 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %29 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                        f32_4 %72 = OpLoad %61 
                                        f32_4 %73 = OpVectorShuffle %72 %71 4 5 6 3 
                                                      OpStore %61 %73 
                               Uniform f32_4* %75 = OpAccessChain %29 %66 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                                        f32_3 %78 = OpLoad %63 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 0 0 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %61 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFAdd %80 %82 
                                        f32_4 %84 = OpLoad %61 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %61 %85 
                               Uniform f32_4* %86 = OpAccessChain %29 %66 %40 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpLoad %63 
                                        f32_3 %90 = OpVectorShuffle %89 %89 2 2 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %61 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFAdd %91 %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 6 3 
                                                      OpStore %61 %96 
                                        f32_4 %97 = OpLoad %61 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                               Uniform f32_4* %99 = OpAccessChain %29 %66 %66 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFAdd %98 %101 
                                       f32_4 %103 = OpLoad %61 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %61 %104 
                                        bool %107 = OpLoad %39 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %61 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %106 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_3 %113 = OpLoad %63 
                                                      OpStore %106 %113 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %114 = OpLoad %106 
                                       f32_4 %115 = OpLoad %61 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %61 %116 
                                       f32_4 %117 = OpLoad %61 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %121 = OpAccessChain %29 %119 
                                       f32_3 %122 = OpLoad %121 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %118 %123 
                                       f32_4 %125 = OpLoad %61 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %61 %126 
                                       f32_4 %127 = OpLoad %61 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                              Uniform f32_3* %130 = OpAccessChain %29 %129 
                                       f32_3 %131 = OpLoad %130 
                                       f32_3 %132 = OpFMul %128 %131 
                                       f32_4 %133 = OpLoad %61 
                                       f32_4 %134 = OpVectorShuffle %133 %132 0 4 5 6 
                                                      OpStore %61 %134 
                                Private f32* %137 = OpAccessChain %61 %56 
                                         f32 %138 = OpLoad %137 
                                         f32 %140 = OpFMul %138 %139 
                                         f32 %142 = OpFAdd %140 %141 
                                                      OpStore %136 %142 
                                Uniform f32* %145 = OpAccessChain %29 %40 %144 
                                         f32 %146 = OpLoad %145 
                                         f32 %148 = OpFMul %146 %147 
                                         f32 %149 = OpFAdd %148 %141 
                                                      OpStore %143 %149 
                                         f32 %150 = OpLoad %136 
                                         f32 %151 = OpLoad %143 
                                         f32 %152 = OpExtInst %1 40 %150 %151 
                                Private f32* %153 = OpAccessChain %61 %41 
                                                      OpStore %153 %152 
                  read_only Texture3DSampled %158 = OpLoad %157 
                                       f32_4 %159 = OpLoad %61 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 2 3 
                                       f32_4 %161 = OpImageSampleImplicitLod %158 %160 
                                                      OpStore %61 %161 
                                       f32_4 %163 = OpLoad %61 
                                                      OpStore %162 %163 
                                                      OpBranch %55 
                                             %164 = OpLabel 
                                Private f32* %165 = OpAccessChain %162 %41 
                                                      OpStore %165 %45 
                                Private f32* %166 = OpAccessChain %162 %56 
                                                      OpStore %166 %45 
                                Private f32* %167 = OpAccessChain %162 %144 
                                                      OpStore %167 %45 
                                Private f32* %169 = OpAccessChain %162 %168 
                                                      OpStore %169 %45 
                                                      OpBranch %55 
                                              %55 = OpLabel 
                                       f32_4 %171 = OpLoad %162 
                              Uniform f32_4* %172 = OpAccessChain %29 %67 
                                       f32_4 %173 = OpLoad %172 
                                         f32 %174 = OpDot %171 %173 
                                Private f32* %175 = OpAccessChain %170 %41 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %170 %41 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpExtInst %1 43 %177 %178 %45 
                                Private f32* %180 = OpAccessChain %170 %41 
                                                      OpStore %180 %179 
                                       f32_3 %181 = OpLoad %170 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 0 0 
                              Uniform f32_4* %184 = OpAccessChain %29 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %182 %186 
                                                      OpStore %170 %187 
                                       f32_3 %190 = OpLoad %189 
                              Uniform f32_4* %191 = OpAccessChain %29 %74 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %190 %193 
                                                      OpStore %188 %194 
                                         f32 %195 = OpLoad %188 
                                         f32 %196 = OpExtInst %1 40 %195 %178 
                                                      OpStore %188 %196 
                                       f32_3 %197 = OpLoad %22 
                                       f32_3 %198 = OpLoad %170 
                                       f32_3 %199 = OpFMul %197 %198 
                                                      OpStore %170 %199 
                                       f32_3 %201 = OpLoad %22 
                                       f32_3 %203 = OpLoad %202 
                                       f32_3 %204 = OpFMul %201 %203 
                                                      OpStore %200 %204 
                                       f32_3 %207 = OpLoad %170 
                                         f32 %208 = OpLoad %188 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_3 %210 = OpFMul %207 %209 
                                       f32_3 %211 = OpLoad %200 
                                       f32_3 %212 = OpFAdd %210 %211 
                                       f32_4 %213 = OpLoad %206 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %206 %214 
                                 Output f32* %216 = OpAccessChain %206 %168 
                                                      OpStore %216 %45 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat4;
bool u_xlatb4;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat9) + u_xlat1.x;
    u_xlat9 = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat9;
    u_xlat9 = u_xlat9 * _LightShadowData.z + _LightShadowData.w;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat7.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat7.x, u_xlat4.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat4.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat7.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat7.xy);
    u_xlat9 = u_xlat9 + u_xlat10_2.x;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat4.x = min(u_xlat9, u_xlat4.x);
    u_xlat9 = (u_xlatb1) ? u_xlat4.x : u_xlat9;
    u_xlat1.xyz = vec3(u_xlat9) * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 183
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 %174 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 Location 174 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                               Output f32_4* %162 = OpVariable Output 
                               Output f32_4* %174 = OpVariable Output 
                                         f32 %175 = OpConstant 3.674022E-40 
                                       f32_4 %176 = OpConstantComposite %175 %175 %175 %175 
                                             %177 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad %162 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %162 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %162 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %162 %173 
                                                      OpStore %174 %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFNegate %179 
                                 Output f32* %181 = OpAccessChain %92 %28 %88 
                                                      OpStore %181 %180 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 307
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %40 %240 %285 %297 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 RelaxedPrecision 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 RelaxedPrecision 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 RelaxedPrecision 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpMemberDecorate %28 8 Offset 28 
                                                      OpMemberDecorate %28 9 Offset 28 
                                                      OpMemberDecorate %28 10 RelaxedPrecision 
                                                      OpMemberDecorate %28 10 Offset 28 
                                                      OpMemberDecorate %28 11 RelaxedPrecision 
                                                      OpMemberDecorate %28 11 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %40 Location 40 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %126 SpecId 126 
                                                      OpDecorate %217 DescriptorSet 217 
                                                      OpDecorate %217 Binding 217 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 Location 240 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %249 DescriptorSet 249 
                                                      OpDecorate %249 Binding 249 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 Location 285 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %297 Location 297 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                               Private f32_3* %22 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %19 %25 
                                              %27 = OpTypeArray %19 %25 
                                              %28 = OpTypeStruct %7 %19 %19 %19 %19 %26 %19 %27 %7 %7 %19 %19 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 11 
                                              %33 = OpTypePointer Uniform %19 
                               Private f32_3* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                                 Input f32_3* %40 = OpVariable Input 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %7 
                                              %48 = OpTypePointer Private %19 
                               Private f32_4* %49 = OpVariable Private 
                                          i32 %50 = OpConstant 5 
                                          u32 %51 = OpConstant 2 
                                              %52 = OpTypePointer Uniform %6 
                                          u32 %55 = OpConstant 0 
                                              %56 = OpTypePointer Private %6 
                                          i32 %58 = OpConstant 1 
                                          u32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant 2 
                                 Private f32* %67 = OpVariable Private 
                                          i32 %73 = OpConstant 4 
                                          u32 %93 = OpConstant 3 
                                         i32 %102 = OpConstant 3 
                                         f32 %110 = OpConstant 3.674022E-40 
                                         f32 %111 = OpConstant 3.674022E-40 
                                             %113 = OpTypeBool 
                                             %114 = OpTypePointer Private %113 
                               Private bool* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 6 
                                        bool %120 = OpConstantFalse 
                                        bool %126 = OpSpecConstantFalse 
                               Private bool* %129 = OpVariable Private 
                                         i32 %135 = OpConstant 7 
                              Private f32_3* %172 = OpVariable Private 
                                             %173 = OpTypePointer Function %7 
                                         i32 %184 = OpConstant 9 
                                         i32 %190 = OpConstant 8 
                                         f32 %198 = OpConstant 3.674022E-40 
                                         f32 %200 = OpConstant 3.674022E-40 
                                Private f32* %203 = OpVariable Private 
                                         f32 %206 = OpConstant 3.674022E-40 
                                             %214 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %215 = OpTypeSampledImage %214 
                                             %216 = OpTypePointer UniformConstant %215 
 UniformConstant read_only Texture3DSampled* %217 = OpVariable UniformConstant 
                              Private f32_4* %222 = OpVariable Private 
                              Private f32_3* %229 = OpVariable Private 
                                             %239 = OpTypePointer Input %19 
                                Input f32_4* %240 = OpVariable Input 
                                Private f32* %248 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %249 = OpVariable UniformConstant 
                                Private f32* %255 = OpVariable Private 
                                             %266 = OpTypePointer Function %6 
                                         i32 %279 = OpConstant 10 
                                Private f32* %284 = OpVariable Private 
                                Input f32_3* %285 = OpVariable Input 
                                             %296 = OpTypePointer Output %19 
                               Output f32_4* %297 = OpVariable Output 
                                             %304 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %174 = OpVariable Function 
                               Function f32* %267 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                                        f32_3 %23 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %23 %36 
                                                      OpStore %22 %37 
                                        f32_3 %41 = OpLoad %40 
                                        f32_3 %42 = OpFNegate %41 
                               Uniform f32_3* %45 = OpAccessChain %30 %43 
                                        f32_3 %46 = OpLoad %45 
                                        f32_3 %47 = OpFAdd %42 %46 
                                                      OpStore %38 %47 
                                 Uniform f32* %53 = OpAccessChain %30 %50 %43 %51 
                                          f32 %54 = OpLoad %53 
                                 Private f32* %57 = OpAccessChain %49 %55 
                                                      OpStore %57 %54 
                                 Uniform f32* %59 = OpAccessChain %30 %50 %58 %51 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %62 = OpAccessChain %49 %61 
                                                      OpStore %62 %60 
                                 Uniform f32* %64 = OpAccessChain %30 %50 %63 %51 
                                          f32 %65 = OpLoad %64 
                                 Private f32* %66 = OpAccessChain %49 %51 
                                                      OpStore %66 %65 
                                        f32_3 %68 = OpLoad %38 
                                        f32_4 %69 = OpLoad %49 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                          f32 %71 = OpDot %68 %70 
                                                      OpStore %67 %71 
                                        f32_3 %72 = OpLoad %40 
                               Uniform f32_4* %74 = OpAccessChain %30 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFNegate %76 
                                        f32_3 %78 = OpFAdd %72 %77 
                                                      OpStore %38 %78 
                                        f32_3 %79 = OpLoad %38 
                                        f32_3 %80 = OpLoad %38 
                                          f32 %81 = OpDot %79 %80 
                                 Private f32* %82 = OpAccessChain %38 %55 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %38 %55 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpExtInst %1 31 %84 
                                 Private f32* %86 = OpAccessChain %38 %55 
                                                      OpStore %86 %85 
                                          f32 %87 = OpLoad %67 
                                          f32 %88 = OpFNegate %87 
                                 Private f32* %89 = OpAccessChain %38 %55 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %38 %55 
                                                      OpStore %92 %91 
                                 Uniform f32* %94 = OpAccessChain %30 %73 %93 
                                          f32 %95 = OpLoad %94 
                                 Private f32* %96 = OpAccessChain %38 %55 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFMul %95 %97 
                                          f32 %99 = OpLoad %67 
                                         f32 %100 = OpFAdd %98 %99 
                                                      OpStore %67 %100 
                                         f32 %101 = OpLoad %67 
                                Uniform f32* %103 = OpAccessChain %30 %102 %51 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFMul %101 %104 
                                Uniform f32* %106 = OpAccessChain %30 %102 %93 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFAdd %105 %107 
                                                      OpStore %67 %108 
                                         f32 %109 = OpLoad %67 
                                         f32 %112 = OpExtInst %1 43 %109 %110 %111 
                                                      OpStore %67 %112 
                                Uniform f32* %117 = OpAccessChain %30 %116 %55 
                                         f32 %118 = OpLoad %117 
                                        bool %119 = OpFOrdEqual %118 %111 
                                                      OpStore %115 %119 
                                                      OpSelectionMerge %122 None 
                                                      OpBranchConditional %120 %121 %122 
                                             %121 = OpLabel 
                                        bool %123 = OpLoad %115 
                                                      OpSelectionMerge %125 None 
                                                      OpBranchConditional %123 %124 %125 
                                             %124 = OpLabel 
                                                      OpBranch %125 
                                             %125 = OpLabel 
                                                      OpBranch %122 
                                             %122 = OpLabel 
                                                      OpSelectionMerge %128 None 
                                                      OpBranchConditional %126 %127 %224 
                                             %127 = OpLabel 
                                Uniform f32* %130 = OpAccessChain %30 %116 %61 
                                         f32 %131 = OpLoad %130 
                                        bool %132 = OpFOrdEqual %131 %111 
                                                      OpStore %129 %132 
                                       f32_3 %133 = OpLoad %40 
                                       f32_3 %134 = OpVectorShuffle %133 %133 1 1 1 
                              Uniform f32_4* %136 = OpAccessChain %30 %135 %58 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFMul %134 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %49 %141 
                              Uniform f32_4* %142 = OpAccessChain %30 %135 %43 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpLoad %40 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 0 0 
                                       f32_3 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %49 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFAdd %147 %149 
                                       f32_4 %151 = OpLoad %49 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %49 %152 
                              Uniform f32_4* %153 = OpAccessChain %30 %135 %63 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpLoad %40 
                                       f32_3 %157 = OpVectorShuffle %156 %156 2 2 2 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %49 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %158 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %49 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                              Uniform f32_4* %166 = OpAccessChain %30 %135 %102 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFAdd %165 %168 
                                       f32_4 %170 = OpLoad %49 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 6 3 
                                                      OpStore %49 %171 
                                        bool %175 = OpLoad %129 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %180 
                                             %176 = OpLabel 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                                      OpStore %174 %179 
                                                      OpBranch %177 
                                             %180 = OpLabel 
                                       f32_3 %181 = OpLoad %40 
                                                      OpStore %174 %181 
                                                      OpBranch %177 
                                             %177 = OpLabel 
                                       f32_3 %182 = OpLoad %174 
                                                      OpStore %172 %182 
                                       f32_3 %183 = OpLoad %172 
                              Uniform f32_3* %185 = OpAccessChain %30 %184 
                                       f32_3 %186 = OpLoad %185 
                                       f32_3 %187 = OpFNegate %186 
                                       f32_3 %188 = OpFAdd %183 %187 
                                                      OpStore %172 %188 
                                       f32_3 %189 = OpLoad %172 
                              Uniform f32_3* %191 = OpAccessChain %30 %190 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFMul %189 %192 
                                       f32_4 %194 = OpLoad %49 
                                       f32_4 %195 = OpVectorShuffle %194 %193 0 4 5 6 
                                                      OpStore %49 %195 
                                Private f32* %196 = OpAccessChain %49 %61 
                                         f32 %197 = OpLoad %196 
                                         f32 %199 = OpFMul %197 %198 
                                         f32 %201 = OpFAdd %199 %200 
                                Private f32* %202 = OpAccessChain %172 %55 
                                                      OpStore %202 %201 
                                Uniform f32* %204 = OpAccessChain %30 %116 %51 
                                         f32 %205 = OpLoad %204 
                                         f32 %207 = OpFMul %205 %206 
                                         f32 %208 = OpFAdd %207 %200 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                Private f32* %210 = OpAccessChain %172 %55 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpExtInst %1 40 %209 %211 
                                Private f32* %213 = OpAccessChain %49 %55 
                                                      OpStore %213 %212 
                  read_only Texture3DSampled %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %49 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 2 3 
                                       f32_4 %221 = OpImageSampleImplicitLod %218 %220 
                                                      OpStore %49 %221 
                                       f32_4 %223 = OpLoad %49 
                                                      OpStore %222 %223 
                                                      OpBranch %128 
                                             %224 = OpLabel 
                                Private f32* %225 = OpAccessChain %222 %55 
                                                      OpStore %225 %111 
                                Private f32* %226 = OpAccessChain %222 %61 
                                                      OpStore %226 %111 
                                Private f32* %227 = OpAccessChain %222 %51 
                                                      OpStore %227 %111 
                                Private f32* %228 = OpAccessChain %222 %93 
                                                      OpStore %228 %111 
                                                      OpBranch %128 
                                             %128 = OpLabel 
                                       f32_4 %230 = OpLoad %222 
                              Uniform f32_4* %231 = OpAccessChain %30 %63 
                                       f32_4 %232 = OpLoad %231 
                                         f32 %233 = OpDot %230 %232 
                                Private f32* %234 = OpAccessChain %229 %55 
                                                      OpStore %234 %233 
                                Private f32* %235 = OpAccessChain %229 %55 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpExtInst %1 43 %236 %110 %111 
                                Private f32* %238 = OpAccessChain %229 %55 
                                                      OpStore %238 %237 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_4 %243 = OpLoad %240 
                                       f32_2 %244 = OpVectorShuffle %243 %243 3 3 
                                       f32_2 %245 = OpFDiv %242 %244 
                                       f32_3 %246 = OpLoad %172 
                                       f32_3 %247 = OpVectorShuffle %246 %245 3 4 2 
                                                      OpStore %172 %247 
                  read_only Texture2DSampled %250 = OpLoad %249 
                                       f32_3 %251 = OpLoad %172 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 1 
                                       f32_4 %253 = OpImageSampleImplicitLod %250 %252 
                                         f32 %254 = OpCompositeExtract %253 0 
                                                      OpStore %248 %254 
                                         f32 %256 = OpLoad %67 
                                         f32 %257 = OpLoad %248 
                                         f32 %258 = OpFAdd %256 %257 
                                                      OpStore %255 %258 
                                         f32 %259 = OpLoad %255 
                                         f32 %260 = OpExtInst %1 43 %259 %110 %111 
                                                      OpStore %255 %260 
                                         f32 %261 = OpLoad %255 
                                Private f32* %262 = OpAccessChain %229 %55 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpExtInst %1 37 %261 %263 
                                Private f32* %265 = OpAccessChain %229 %55 
                                                      OpStore %265 %264 
                                        bool %268 = OpLoad %115 
                                                      OpSelectionMerge %270 None 
                                                      OpBranchConditional %268 %269 %273 
                                             %269 = OpLabel 
                                Private f32* %271 = OpAccessChain %229 %55 
                                         f32 %272 = OpLoad %271 
                                                      OpStore %267 %272 
                                                      OpBranch %270 
                                             %273 = OpLabel 
                                         f32 %274 = OpLoad %255 
                                                      OpStore %267 %274 
                                                      OpBranch %270 
                                             %270 = OpLabel 
                                         f32 %275 = OpLoad %267 
                                Private f32* %276 = OpAccessChain %229 %55 
                                                      OpStore %276 %275 
                                       f32_3 %277 = OpLoad %229 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 0 0 
                              Uniform f32_4* %280 = OpAccessChain %30 %279 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpFMul %278 %282 
                                                      OpStore %229 %283 
                                       f32_3 %286 = OpLoad %285 
                              Uniform f32_4* %287 = OpAccessChain %30 %58 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                         f32 %290 = OpDot %286 %289 
                                                      OpStore %284 %290 
                                         f32 %291 = OpLoad %284 
                                         f32 %292 = OpExtInst %1 40 %291 %110 
                                                      OpStore %284 %292 
                                       f32_3 %293 = OpLoad %22 
                                       f32_3 %294 = OpLoad %229 
                                       f32_3 %295 = OpFMul %293 %294 
                                                      OpStore %229 %295 
                                         f32 %298 = OpLoad %284 
                                       f32_3 %299 = OpCompositeConstruct %298 %298 %298 
                                       f32_3 %300 = OpLoad %229 
                                       f32_3 %301 = OpFMul %299 %300 
                                       f32_4 %302 = OpLoad %297 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %297 %303 
                                 Output f32* %305 = OpAccessChain %297 %93 
                                                      OpStore %305 %111 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat2);
    u_xlat4.y = dot(unity_SHBg, u_xlat2);
    u_xlat4.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
vec2 u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat18) + u_xlat1.x;
    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat18;
    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat13.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13.x, u_xlat7.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat13.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat13.xy);
    u_xlat18 = u_xlat18 + u_xlat10_2.x;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat7.x = min(u_xlat18, u_xlat7.x);
    u_xlat18 = (u_xlatb1) ? u_xlat7.x : u_xlat18;
    u_xlat7.xyz = vec3(u_xlat18) * _LightColor0.xyz;
    if(u_xlatb1){
        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat1.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat18 = max(u_xlat18, u_xlat1.x);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = vs_TEXCOORD1.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat5);
        u_xlat3.y = dot(u_xlat10_4, u_xlat5);
        u_xlat3.z = dot(u_xlat10_2, u_xlat5);
    } else {
        u_xlat2.xyz = vs_TEXCOORD1.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat18 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 398
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %103 %104 %117 %156 %159 %352 %379 %391 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %104 Location 104 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %352 Location 352 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %379 Location 379 
                                                      OpDecorate %391 Location 391 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 10 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 12 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                               Output f32_2* %103 = OpVariable Output 
                                Input f32_4* %104 = OpVariable Input 
                                         i32 %107 = OpConstant 13 
                                             %116 = OpTypePointer Input %53 
                                Input f32_3* %117 = OpVariable Input 
                                         i32 %119 = OpConstant 11 
                                         u32 %124 = OpConstant 0 
                                             %125 = OpTypePointer Private %6 
                                         u32 %138 = OpConstant 2 
                                Private f32* %140 = OpVariable Private 
                                             %155 = OpTypePointer Output %53 
                               Output f32_3* %156 = OpVariable Output 
                               Output f32_3* %159 = OpVariable Output 
                              Private f32_4* %162 = OpVariable Private 
                              Private f32_4* %169 = OpVariable Private 
                              Private f32_4* %182 = OpVariable Private 
                                         f32 %213 = OpConstant 3.674022E-40 
                                       f32_4 %214 = OpConstantComposite %213 %213 %213 %213 
                                         i32 %219 = OpConstant 4 
                                         f32 %223 = OpConstant 3.674022E-40 
                                       f32_4 %224 = OpConstantComposite %223 %223 %223 %223 
                                         f32 %232 = OpConstant 3.674022E-40 
                                       f32_4 %233 = OpConstantComposite %232 %232 %232 %232 
                                         i32 %240 = OpConstant 5 
                                         f32 %282 = OpConstant 3.674022E-40 
                                       f32_3 %283 = OpConstantComposite %282 %282 %282 
                                         f32 %285 = OpConstant 3.674022E-40 
                                       f32_3 %286 = OpConstantComposite %285 %285 %285 
                                         f32 %295 = OpConstant 3.674022E-40 
                                       f32_3 %296 = OpConstantComposite %295 %295 %295 
                                             %300 = OpTypePointer Private %53 
                              Private f32_3* %301 = OpVariable Private 
                              Private f32_4* %318 = OpVariable Private 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %325 = OpConstant 6 
                                         i32 %331 = OpConstant 7 
                                         i32 %337 = OpConstant 8 
                                         i32 %343 = OpConstant 9 
                               Output f32_3* %352 = OpVariable Output 
                                             %362 = OpTypePointer Uniform %6 
                                         f32 %369 = OpConstant 3.674022E-40 
                                         u32 %371 = OpConstant 3 
                                       f32_2 %375 = OpConstantComposite %369 %369 
                               Output f32_4* %379 = OpVariable Output 
                               Output f32_4* %391 = OpVariable Output 
                                             %392 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                              Uniform f32_4* %108 = OpAccessChain %23 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_2 %111 = OpFMul %106 %110 
                              Uniform f32_4* %112 = OpAccessChain %23 %107 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                                       f32_2 %115 = OpFAdd %111 %114 
                                                      OpStore %103 %115 
                                       f32_3 %118 = OpLoad %117 
                              Uniform f32_4* %120 = OpAccessChain %23 %119 %31 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %118 %122 
                                Private f32* %126 = OpAccessChain %65 %124 
                                                      OpStore %126 %123 
                                       f32_3 %127 = OpLoad %117 
                              Uniform f32_4* %128 = OpAccessChain %23 %119 %26 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %132 = OpAccessChain %65 %93 
                                                      OpStore %132 %131 
                                       f32_3 %133 = OpLoad %117 
                              Uniform f32_4* %134 = OpAccessChain %23 %119 %39 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %139 = OpAccessChain %65 %138 
                                                      OpStore %139 %137 
                                       f32_4 %141 = OpLoad %65 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %65 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %142 %144 
                                                      OpStore %140 %145 
                                         f32 %146 = OpLoad %140 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %140 %147 
                                         f32 %148 = OpLoad %140 
                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
                                       f32_4 %150 = OpLoad %65 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %65 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %65 %154 
                                       f32_4 %157 = OpLoad %65 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                                      OpStore %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                                      OpStore %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFNegate %164 
                              Uniform f32_4* %166 = OpAccessChain %23 %26 
                                       f32_4 %167 = OpLoad %166 
                                       f32_4 %168 = OpFAdd %165 %167 
                                                      OpStore %162 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 1 1 1 1 
                                       f32_4 %172 = OpFNegate %171 
                              Uniform f32_4* %173 = OpAccessChain %23 %39 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpFAdd %172 %174 
                                                      OpStore %169 %175 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 2 2 2 2 
                                       f32_4 %178 = OpFNegate %177 
                              Uniform f32_4* %179 = OpAccessChain %23 %49 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpFAdd %178 %180 
                                                      OpStore %9 %181 
                                       f32_4 %183 = OpLoad %65 
                                       f32_4 %184 = OpVectorShuffle %183 %183 1 1 1 1 
                                       f32_4 %185 = OpLoad %169 
                                       f32_4 %186 = OpFMul %184 %185 
                                                      OpStore %182 %186 
                                       f32_4 %187 = OpLoad %169 
                                       f32_4 %188 = OpLoad %169 
                                       f32_4 %189 = OpFMul %187 %188 
                                                      OpStore %169 %189 
                                       f32_4 %190 = OpLoad %162 
                                       f32_4 %191 = OpLoad %162 
                                       f32_4 %192 = OpFMul %190 %191 
                                       f32_4 %193 = OpLoad %169 
                                       f32_4 %194 = OpFAdd %192 %193 
                                                      OpStore %169 %194 
                                       f32_4 %195 = OpLoad %162 
                                       f32_4 %196 = OpLoad %65 
                                       f32_4 %197 = OpVectorShuffle %196 %196 0 0 0 0 
                                       f32_4 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %182 
                                       f32_4 %200 = OpFAdd %198 %199 
                                                      OpStore %162 %200 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpLoad %65 
                                       f32_4 %203 = OpVectorShuffle %202 %202 2 2 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                       f32_4 %205 = OpLoad %162 
                                       f32_4 %206 = OpFAdd %204 %205 
                                                      OpStore %162 %206 
                                       f32_4 %207 = OpLoad %9 
                                       f32_4 %208 = OpLoad %9 
                                       f32_4 %209 = OpFMul %207 %208 
                                       f32_4 %210 = OpLoad %169 
                                       f32_4 %211 = OpFAdd %209 %210 
                                                      OpStore %9 %211 
                                       f32_4 %212 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 40 %212 %214 
                                                      OpStore %9 %215 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpExtInst %1 32 %216 
                                                      OpStore %169 %217 
                                       f32_4 %218 = OpLoad %9 
                              Uniform f32_4* %220 = OpAccessChain %23 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpFMul %218 %221 
                                       f32_4 %225 = OpFAdd %222 %224 
                                                      OpStore %9 %225 
                                       f32_4 %226 = OpLoad %9 
                                       f32_4 %227 = OpFDiv %224 %226 
                                                      OpStore %9 %227 
                                       f32_4 %228 = OpLoad %162 
                                       f32_4 %229 = OpLoad %169 
                                       f32_4 %230 = OpFMul %228 %229 
                                                      OpStore %162 %230 
                                       f32_4 %231 = OpLoad %162 
                                       f32_4 %234 = OpExtInst %1 40 %231 %233 
                                                      OpStore %162 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpLoad %162 
                                       f32_4 %237 = OpFMul %235 %236 
                                                      OpStore %9 %237 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 1 1 1 
                              Uniform f32_4* %241 = OpAccessChain %23 %240 %26 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %162 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %162 %246 
                              Uniform f32_4* %247 = OpAccessChain %23 %240 %31 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_4 %250 = OpLoad %9 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_4 %253 = OpLoad %162 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %162 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %162 %257 
                              Uniform f32_4* %258 = OpAccessChain %23 %240 %39 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 2 2 2 
                                       f32_3 %263 = OpFMul %260 %262 
                                       f32_4 %264 = OpLoad %162 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFAdd %263 %265 
                                       f32_4 %267 = OpLoad %9 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %9 %268 
                              Uniform f32_4* %269 = OpAccessChain %23 %240 %49 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFAdd %274 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                       f32_4 %280 = OpLoad %9 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %162 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %162 %289 
                                       f32_4 %290 = OpLoad %9 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_4 %292 = OpLoad %162 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_3 %297 = OpFAdd %294 %296 
                                       f32_4 %298 = OpLoad %162 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %162 %299 
                                Private f32* %302 = OpAccessChain %65 %93 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %65 %93 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                Private f32* %307 = OpAccessChain %301 %124 
                                                      OpStore %307 %306 
                                Private f32* %308 = OpAccessChain %65 %124 
                                         f32 %309 = OpLoad %308 
                                Private f32* %310 = OpAccessChain %65 %124 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFMul %309 %311 
                                Private f32* %313 = OpAccessChain %301 %124 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpFAdd %312 %315 
                                Private f32* %317 = OpAccessChain %301 %124 
                                                      OpStore %317 %316 
                                       f32_4 %319 = OpLoad %65 
                                       f32_4 %320 = OpVectorShuffle %319 %319 1 2 2 0 
                                       f32_4 %321 = OpLoad %65 
                                       f32_4 %322 = OpVectorShuffle %321 %321 0 1 2 2 
                                       f32_4 %323 = OpFMul %320 %322 
                                                      OpStore %318 %323 
                              Uniform f32_4* %326 = OpAccessChain %23 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_4 %328 = OpLoad %318 
                                         f32 %329 = OpDot %327 %328 
                                Private f32* %330 = OpAccessChain %324 %124 
                                                      OpStore %330 %329 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpLoad %318 
                                         f32 %335 = OpDot %333 %334 
                                Private f32* %336 = OpAccessChain %324 %93 
                                                      OpStore %336 %335 
                              Uniform f32_4* %338 = OpAccessChain %23 %337 
                                       f32_4 %339 = OpLoad %338 
                                       f32_4 %340 = OpLoad %318 
                                         f32 %341 = OpDot %339 %340 
                                Private f32* %342 = OpAccessChain %324 %138 
                                                      OpStore %342 %341 
                              Uniform f32_4* %344 = OpAccessChain %23 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_3 %347 = OpLoad %301 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 0 0 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_3 %350 = OpLoad %324 
                                       f32_3 %351 = OpFAdd %349 %350 
                                                      OpStore %301 %351 
                                       f32_4 %353 = OpLoad %9 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_4 %355 = OpLoad %162 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFMul %354 %356 
                                       f32_3 %358 = OpLoad %301 
                                       f32_3 %359 = OpFAdd %357 %358 
                                                      OpStore %352 %359 
                                Private f32* %360 = OpAccessChain %47 %93 
                                         f32 %361 = OpLoad %360 
                                Uniform f32* %363 = OpAccessChain %23 %31 %124 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %361 %364 
                                Private f32* %366 = OpAccessChain %9 %124 
                                                      OpStore %366 %365 
                                Private f32* %367 = OpAccessChain %9 %124 
                                         f32 %368 = OpLoad %367 
                                         f32 %370 = OpFMul %368 %369 
                                Private f32* %372 = OpAccessChain %9 %371 
                                                      OpStore %372 %370 
                                       f32_4 %373 = OpLoad %47 
                                       f32_2 %374 = OpVectorShuffle %373 %373 0 3 
                                       f32_2 %376 = OpFMul %374 %375 
                                       f32_4 %377 = OpLoad %9 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 1 5 3 
                                                      OpStore %9 %378 
                                       f32_4 %380 = OpLoad %47 
                                       f32_2 %381 = OpVectorShuffle %380 %380 2 3 
                                       f32_4 %382 = OpLoad %379 
                                       f32_4 %383 = OpVectorShuffle %382 %381 0 1 4 5 
                                                      OpStore %379 %383 
                                       f32_4 %384 = OpLoad %9 
                                       f32_2 %385 = OpVectorShuffle %384 %384 2 2 
                                       f32_4 %386 = OpLoad %9 
                                       f32_2 %387 = OpVectorShuffle %386 %386 0 3 
                                       f32_2 %388 = OpFAdd %385 %387 
                                       f32_4 %389 = OpLoad %379 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 2 3 
                                                      OpStore %379 %390 
                                                      OpStore %391 %233 
                                 Output f32* %393 = OpAccessChain %97 %31 %93 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFNegate %394 
                                 Output f32* %396 = OpAccessChain %97 %31 %93 
                                                      OpStore %396 %395 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 507
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %41 %249 %416 %456 %495 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 RelaxedPrecision 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 RelaxedPrecision 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 RelaxedPrecision 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 RelaxedPrecision 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 RelaxedPrecision 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 RelaxedPrecision 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpMemberDecorate %28 8 Offset 28 
                                                      OpMemberDecorate %28 9 Offset 28 
                                                      OpMemberDecorate %28 10 Offset 28 
                                                      OpMemberDecorate %28 11 Offset 28 
                                                      OpMemberDecorate %28 12 Offset 28 
                                                      OpMemberDecorate %28 13 RelaxedPrecision 
                                                      OpMemberDecorate %28 13 Offset 28 
                                                      OpMemberDecorate %28 14 RelaxedPrecision 
                                                      OpMemberDecorate %28 14 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %133 SpecId 133 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %249 Location 249 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %258 DescriptorSet 258 
                                                      OpDecorate %258 Binding 258 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %416 Location 416 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %495 Location 495 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                               Private f32_3* %22 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %19 %25 
                                              %27 = OpTypeArray %19 %25 
                                              %28 = OpTypeStruct %7 %19 %19 %19 %19 %19 %19 %19 %26 %19 %27 %7 %7 %19 %19 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 14 
                                              %33 = OpTypePointer Uniform %19 
                                              %38 = OpTypePointer Private %19 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                                 Input f32_3* %41 = OpVariable Input 
                                          i32 %44 = OpConstant 0 
                                              %45 = OpTypePointer Uniform %7 
                               Private f32_4* %51 = OpVariable Private 
                                          i32 %52 = OpConstant 8 
                                          u32 %53 = OpConstant 2 
                                              %54 = OpTypePointer Uniform %6 
                                          u32 %57 = OpConstant 0 
                                              %58 = OpTypePointer Private %6 
                                          i32 %60 = OpConstant 1 
                                          u32 %63 = OpConstant 1 
                                          i32 %65 = OpConstant 2 
                                 Private f32* %69 = OpVariable Private 
                                          i32 %76 = OpConstant 7 
                                         u32 %100 = OpConstant 3 
                                         i32 %109 = OpConstant 6 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         f32 %118 = OpConstant 3.674022E-40 
                                             %120 = OpTypeBool 
                                             %121 = OpTypePointer Private %120 
                               Private bool* %122 = OpVariable Private 
                                         i32 %123 = OpConstant 9 
                                        bool %127 = OpConstantFalse 
                                        bool %133 = OpSpecConstantFalse 
                               Private bool* %136 = OpVariable Private 
                                         i32 %142 = OpConstant 10 
                                         i32 %173 = OpConstant 3 
                              Private f32_3* %180 = OpVariable Private 
                                             %181 = OpTypePointer Function %7 
                                         i32 %192 = OpConstant 12 
                                         i32 %198 = OpConstant 11 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         f32 %208 = OpConstant 3.674022E-40 
                                Private f32* %211 = OpVariable Private 
                                         f32 %214 = OpConstant 3.674022E-40 
                                             %222 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %223 = OpTypeSampledImage %222 
                                             %224 = OpTypePointer UniformConstant %223 
 UniformConstant read_only Texture3DSampled* %225 = OpVariable UniformConstant 
                              Private f32_4* %230 = OpVariable Private 
                              Private f32_3* %237 = OpVariable Private 
                                         i32 %239 = OpConstant 5 
                                             %248 = OpTypePointer Input %19 
                                Input f32_4* %249 = OpVariable Input 
                                Private f32* %257 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %258 = OpVariable UniformConstant 
                                Private f32* %264 = OpVariable Private 
                                             %275 = OpTypePointer Function %6 
                                         i32 %288 = OpConstant 13 
                               Private bool* %300 = OpVariable Private 
                              Private f32_4* %375 = OpVariable Private 
                                       f32_3 %397 = OpConstantComposite %206 %117 %117 
                                       f32_3 %407 = OpConstantComposite %214 %117 %117 
                              Private f32_4* %415 = OpVariable Private 
                                Input f32_3* %416 = OpVariable Input 
                              Private f32_3* %421 = OpVariable Private 
                                         i32 %449 = OpConstant 4 
                                Input f32_3* %456 = OpVariable Input 
                                       f32_3 %460 = OpConstantComposite %117 %117 %117 
                              Private f32_3* %462 = OpVariable Private 
                                         f32 %466 = OpConstant 3.674022E-40 
                                       f32_3 %467 = OpConstantComposite %466 %466 %466 
                                         f32 %472 = OpConstant 3.674022E-40 
                                       f32_3 %473 = OpConstantComposite %472 %472 %472 
                                         f32 %475 = OpConstant 3.674022E-40 
                                       f32_3 %476 = OpConstantComposite %475 %475 %475 
                                Private f32* %480 = OpVariable Private 
                                             %494 = OpTypePointer Output %19 
                               Output f32_4* %495 = OpVariable Output 
                                             %504 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %182 = OpVariable Function 
                               Function f32* %276 = OpVariable Function 
                             Function f32_3* %342 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                                        f32_3 %23 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %23 %36 
                                                      OpStore %22 %37 
                                        f32_3 %42 = OpLoad %41 
                                        f32_3 %43 = OpFNegate %42 
                               Uniform f32_3* %46 = OpAccessChain %30 %44 
                                        f32_3 %47 = OpLoad %46 
                                        f32_3 %48 = OpFAdd %43 %47 
                                        f32_4 %49 = OpLoad %39 
                                        f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                                      OpStore %39 %50 
                                 Uniform f32* %55 = OpAccessChain %30 %52 %44 %53 
                                          f32 %56 = OpLoad %55 
                                 Private f32* %59 = OpAccessChain %51 %57 
                                                      OpStore %59 %56 
                                 Uniform f32* %61 = OpAccessChain %30 %52 %60 %53 
                                          f32 %62 = OpLoad %61 
                                 Private f32* %64 = OpAccessChain %51 %63 
                                                      OpStore %64 %62 
                                 Uniform f32* %66 = OpAccessChain %30 %52 %65 %53 
                                          f32 %67 = OpLoad %66 
                                 Private f32* %68 = OpAccessChain %51 %53 
                                                      OpStore %68 %67 
                                        f32_4 %70 = OpLoad %39 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_4 %72 = OpLoad %51 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                          f32 %74 = OpDot %71 %73 
                                                      OpStore %69 %74 
                                        f32_3 %75 = OpLoad %41 
                               Uniform f32_4* %77 = OpAccessChain %30 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFNegate %79 
                                        f32_3 %81 = OpFAdd %75 %80 
                                        f32_4 %82 = OpLoad %39 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %39 %83 
                                        f32_4 %84 = OpLoad %39 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_4 %86 = OpLoad %39 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                          f32 %88 = OpDot %85 %87 
                                 Private f32* %89 = OpAccessChain %39 %57 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %39 %57 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpExtInst %1 31 %91 
                                 Private f32* %93 = OpAccessChain %39 %57 
                                                      OpStore %93 %92 
                                          f32 %94 = OpLoad %69 
                                          f32 %95 = OpFNegate %94 
                                 Private f32* %96 = OpAccessChain %39 %57 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFAdd %95 %97 
                                 Private f32* %99 = OpAccessChain %39 %57 
                                                      OpStore %99 %98 
                                Uniform f32* %101 = OpAccessChain %30 %76 %100 
                                         f32 %102 = OpLoad %101 
                                Private f32* %103 = OpAccessChain %39 %57 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFMul %102 %104 
                                         f32 %106 = OpLoad %69 
                                         f32 %107 = OpFAdd %105 %106 
                                                      OpStore %69 %107 
                                         f32 %108 = OpLoad %69 
                                Uniform f32* %110 = OpAccessChain %30 %109 %53 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFMul %108 %111 
                                Uniform f32* %113 = OpAccessChain %30 %109 %100 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFAdd %112 %114 
                                                      OpStore %69 %115 
                                         f32 %116 = OpLoad %69 
                                         f32 %119 = OpExtInst %1 43 %116 %117 %118 
                                                      OpStore %69 %119 
                                Uniform f32* %124 = OpAccessChain %30 %123 %57 
                                         f32 %125 = OpLoad %124 
                                        bool %126 = OpFOrdEqual %125 %118 
                                                      OpStore %122 %126 
                                                      OpSelectionMerge %129 None 
                                                      OpBranchConditional %127 %128 %129 
                                             %128 = OpLabel 
                                        bool %130 = OpLoad %122 
                                                      OpSelectionMerge %132 None 
                                                      OpBranchConditional %130 %131 %132 
                                             %131 = OpLabel 
                                                      OpBranch %132 
                                             %132 = OpLabel 
                                                      OpBranch %129 
                                             %129 = OpLabel 
                                                      OpSelectionMerge %135 None 
                                                      OpBranchConditional %133 %134 %232 
                                             %134 = OpLabel 
                                Uniform f32* %137 = OpAccessChain %30 %123 %63 
                                         f32 %138 = OpLoad %137 
                                        bool %139 = OpFOrdEqual %138 %118 
                                                      OpStore %136 %139 
                                       f32_3 %140 = OpLoad %41 
                                       f32_3 %141 = OpVectorShuffle %140 %140 1 1 1 
                              Uniform f32_4* %143 = OpAccessChain %30 %142 %60 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %141 %145 
                                       f32_4 %147 = OpLoad %51 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %51 %148 
                              Uniform f32_4* %149 = OpAccessChain %30 %142 %44 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpLoad %41 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 0 0 
                                       f32_3 %154 = OpFMul %151 %153 
                                       f32_4 %155 = OpLoad %51 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_3 %157 = OpFAdd %154 %156 
                                       f32_4 %158 = OpLoad %51 
                                       f32_4 %159 = OpVectorShuffle %158 %157 4 5 6 3 
                                                      OpStore %51 %159 
                              Uniform f32_4* %160 = OpAccessChain %30 %142 %65 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpLoad %41 
                                       f32_3 %164 = OpVectorShuffle %163 %163 2 2 2 
                                       f32_3 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %51 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %165 %167 
                                       f32_4 %169 = OpLoad %51 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %51 %170 
                                       f32_4 %171 = OpLoad %51 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                              Uniform f32_4* %174 = OpAccessChain %30 %142 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFAdd %172 %176 
                                       f32_4 %178 = OpLoad %51 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 6 3 
                                                      OpStore %51 %179 
                                        bool %183 = OpLoad %136 
                                                      OpSelectionMerge %185 None 
                                                      OpBranchConditional %183 %184 %188 
                                             %184 = OpLabel 
                                       f32_4 %186 = OpLoad %51 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                                      OpStore %182 %187 
                                                      OpBranch %185 
                                             %188 = OpLabel 
                                       f32_3 %189 = OpLoad %41 
                                                      OpStore %182 %189 
                                                      OpBranch %185 
                                             %185 = OpLabel 
                                       f32_3 %190 = OpLoad %182 
                                                      OpStore %180 %190 
                                       f32_3 %191 = OpLoad %180 
                              Uniform f32_3* %193 = OpAccessChain %30 %192 
                                       f32_3 %194 = OpLoad %193 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %191 %195 
                                                      OpStore %180 %196 
                                       f32_3 %197 = OpLoad %180 
                              Uniform f32_3* %199 = OpAccessChain %30 %198 
                                       f32_3 %200 = OpLoad %199 
                                       f32_3 %201 = OpFMul %197 %200 
                                       f32_4 %202 = OpLoad %51 
                                       f32_4 %203 = OpVectorShuffle %202 %201 0 4 5 6 
                                                      OpStore %51 %203 
                                Private f32* %204 = OpAccessChain %51 %63 
                                         f32 %205 = OpLoad %204 
                                         f32 %207 = OpFMul %205 %206 
                                         f32 %209 = OpFAdd %207 %208 
                                Private f32* %210 = OpAccessChain %180 %57 
                                                      OpStore %210 %209 
                                Uniform f32* %212 = OpAccessChain %30 %123 %53 
                                         f32 %213 = OpLoad %212 
                                         f32 %215 = OpFMul %213 %214 
                                         f32 %216 = OpFAdd %215 %208 
                                                      OpStore %211 %216 
                                         f32 %217 = OpLoad %211 
                                Private f32* %218 = OpAccessChain %180 %57 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 40 %217 %219 
                                Private f32* %221 = OpAccessChain %51 %57 
                                                      OpStore %221 %220 
                  read_only Texture3DSampled %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %51 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 2 3 
                                       f32_4 %229 = OpImageSampleImplicitLod %226 %228 
                                                      OpStore %51 %229 
                                       f32_4 %231 = OpLoad %51 
                                                      OpStore %230 %231 
                                                      OpBranch %135 
                                             %232 = OpLabel 
                                Private f32* %233 = OpAccessChain %230 %57 
                                                      OpStore %233 %118 
                                Private f32* %234 = OpAccessChain %230 %63 
                                                      OpStore %234 %118 
                                Private f32* %235 = OpAccessChain %230 %53 
                                                      OpStore %235 %118 
                                Private f32* %236 = OpAccessChain %230 %100 
                                                      OpStore %236 %118 
                                                      OpBranch %135 
                                             %135 = OpLabel 
                                       f32_4 %238 = OpLoad %230 
                              Uniform f32_4* %240 = OpAccessChain %30 %239 
                                       f32_4 %241 = OpLoad %240 
                                         f32 %242 = OpDot %238 %241 
                                Private f32* %243 = OpAccessChain %237 %57 
                                                      OpStore %243 %242 
                                Private f32* %244 = OpAccessChain %237 %57 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpExtInst %1 43 %245 %117 %118 
                                Private f32* %247 = OpAccessChain %237 %57 
                                                      OpStore %247 %246 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 1 
                                       f32_4 %252 = OpLoad %249 
                                       f32_2 %253 = OpVectorShuffle %252 %252 3 3 
                                       f32_2 %254 = OpFDiv %251 %253 
                                       f32_3 %255 = OpLoad %180 
                                       f32_3 %256 = OpVectorShuffle %255 %254 3 4 2 
                                                      OpStore %180 %256 
                  read_only Texture2DSampled %259 = OpLoad %258 
                                       f32_3 %260 = OpLoad %180 
                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
                                       f32_4 %262 = OpImageSampleImplicitLod %259 %261 
                                         f32 %263 = OpCompositeExtract %262 0 
                                                      OpStore %257 %263 
                                         f32 %265 = OpLoad %69 
                                         f32 %266 = OpLoad %257 
                                         f32 %267 = OpFAdd %265 %266 
                                                      OpStore %264 %267 
                                         f32 %268 = OpLoad %264 
                                         f32 %269 = OpExtInst %1 43 %268 %117 %118 
                                                      OpStore %264 %269 
                                         f32 %270 = OpLoad %264 
                                Private f32* %271 = OpAccessChain %237 %57 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 37 %270 %272 
                                Private f32* %274 = OpAccessChain %237 %57 
                                                      OpStore %274 %273 
                                        bool %277 = OpLoad %122 
                                                      OpSelectionMerge %279 None 
                                                      OpBranchConditional %277 %278 %282 
                                             %278 = OpLabel 
                                Private f32* %280 = OpAccessChain %237 %57 
                                         f32 %281 = OpLoad %280 
                                                      OpStore %276 %281 
                                                      OpBranch %279 
                                             %282 = OpLabel 
                                         f32 %283 = OpLoad %264 
                                                      OpStore %276 %283 
                                                      OpBranch %279 
                                             %279 = OpLabel 
                                         f32 %284 = OpLoad %276 
                                Private f32* %285 = OpAccessChain %237 %57 
                                                      OpStore %285 %284 
                                       f32_3 %286 = OpLoad %237 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 0 0 
                              Uniform f32_4* %289 = OpAccessChain %30 %288 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFMul %287 %291 
                                                      OpStore %237 %292 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %127 %293 %294 
                                             %293 = OpLabel 
                                        bool %295 = OpLoad %122 
                                                      OpSelectionMerge %297 None 
                                                      OpBranchConditional %295 %296 %297 
                                             %296 = OpLabel 
                                                      OpBranch %297 
                                             %297 = OpLabel 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                                      OpSelectionMerge %299 None 
                                                      OpBranchConditional %133 %298 %434 
                                             %298 = OpLabel 
                                Uniform f32* %301 = OpAccessChain %30 %123 %63 
                                         f32 %302 = OpLoad %301 
                                        bool %303 = OpFOrdEqual %302 %118 
                                                      OpStore %300 %303 
                                       f32_3 %304 = OpLoad %41 
                                       f32_3 %305 = OpVectorShuffle %304 %304 1 1 1 
                              Uniform f32_4* %306 = OpAccessChain %30 %142 %60 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFMul %305 %308 
                                       f32_4 %310 = OpLoad %39 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %39 %311 
                              Uniform f32_4* %312 = OpAccessChain %30 %142 %44 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpLoad %41 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 0 0 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %39 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %39 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %39 %322 
                              Uniform f32_4* %323 = OpAccessChain %30 %142 %65 
                                       f32_4 %324 = OpLoad %323 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpLoad %41 
                                       f32_3 %327 = OpVectorShuffle %326 %326 2 2 2 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %39 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFAdd %328 %330 
                                       f32_4 %332 = OpLoad %39 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 6 3 
                                                      OpStore %39 %333 
                                       f32_4 %334 = OpLoad %39 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                              Uniform f32_4* %336 = OpAccessChain %30 %142 %173 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFAdd %335 %338 
                                       f32_4 %340 = OpLoad %39 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %39 %341 
                                        bool %343 = OpLoad %300 
                                                      OpSelectionMerge %345 None 
                                                      OpBranchConditional %343 %344 %348 
                                             %344 = OpLabel 
                                       f32_4 %346 = OpLoad %39 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                                      OpStore %342 %347 
                                                      OpBranch %345 
                                             %348 = OpLabel 
                                       f32_3 %349 = OpLoad %41 
                                                      OpStore %342 %349 
                                                      OpBranch %345 
                                             %345 = OpLabel 
                                       f32_3 %350 = OpLoad %342 
                                       f32_4 %351 = OpLoad %39 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %39 %352 
                                       f32_4 %353 = OpLoad %39 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                              Uniform f32_3* %355 = OpAccessChain %30 %192 
                                       f32_3 %356 = OpLoad %355 
                                       f32_3 %357 = OpFNegate %356 
                                       f32_3 %358 = OpFAdd %354 %357 
                                       f32_4 %359 = OpLoad %39 
                                       f32_4 %360 = OpVectorShuffle %359 %358 4 5 6 3 
                                                      OpStore %39 %360 
                                       f32_4 %361 = OpLoad %39 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                              Uniform f32_3* %363 = OpAccessChain %30 %198 
                                       f32_3 %364 = OpLoad %363 
                                       f32_3 %365 = OpFMul %362 %364 
                                       f32_4 %366 = OpLoad %39 
                                       f32_4 %367 = OpVectorShuffle %366 %365 0 4 5 6 
                                                      OpStore %39 %367 
                                Private f32* %368 = OpAccessChain %39 %63 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %369 %206 
                                                      OpStore %69 %370 
                                Uniform f32* %371 = OpAccessChain %30 %123 %53 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpFMul %372 %214 
                                Private f32* %374 = OpAccessChain %180 %57 
                                                      OpStore %374 %373 
                                Uniform f32* %376 = OpAccessChain %30 %123 %53 
                                         f32 %377 = OpLoad %376 
                                         f32 %378 = OpFNegate %377 
                                         f32 %379 = OpFMul %378 %214 
                                         f32 %380 = OpFAdd %379 %206 
                                Private f32* %381 = OpAccessChain %375 %57 
                                                      OpStore %381 %380 
                                         f32 %382 = OpLoad %69 
                                Private f32* %383 = OpAccessChain %180 %57 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpExtInst %1 40 %382 %384 
                                                      OpStore %69 %385 
                                Private f32* %386 = OpAccessChain %375 %57 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpLoad %69 
                                         f32 %389 = OpExtInst %1 37 %387 %388 
                                Private f32* %390 = OpAccessChain %39 %57 
                                                      OpStore %390 %389 
                  read_only Texture3DSampled %391 = OpLoad %225 
                                       f32_4 %392 = OpLoad %39 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 2 3 
                                       f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                                                      OpStore %51 %394 
                                       f32_4 %395 = OpLoad %39 
                                       f32_3 %396 = OpVectorShuffle %395 %395 0 2 3 
                                       f32_3 %398 = OpFAdd %396 %397 
                                       f32_4 %399 = OpLoad %375 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %375 %400 
                  read_only Texture3DSampled %401 = OpLoad %225 
                                       f32_4 %402 = OpLoad %375 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_4 %404 = OpImageSampleImplicitLod %401 %403 
                                                      OpStore %375 %404 
                                       f32_4 %405 = OpLoad %39 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 2 3 
                                       f32_3 %408 = OpFAdd %406 %407 
                                       f32_4 %409 = OpLoad %39 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %39 %410 
                  read_only Texture3DSampled %411 = OpLoad %225 
                                       f32_4 %412 = OpLoad %39 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpImageSampleImplicitLod %411 %413 
                                                      OpStore %39 %414 
                                       f32_3 %417 = OpLoad %416 
                                       f32_4 %418 = OpLoad %415 
                                       f32_4 %419 = OpVectorShuffle %418 %417 4 5 6 3 
                                                      OpStore %415 %419 
                                Private f32* %420 = OpAccessChain %415 %100 
                                                      OpStore %420 %118 
                                       f32_4 %422 = OpLoad %51 
                                       f32_4 %423 = OpLoad %415 
                                         f32 %424 = OpDot %422 %423 
                                Private f32* %425 = OpAccessChain %421 %57 
                                                      OpStore %425 %424 
                                       f32_4 %426 = OpLoad %375 
                                       f32_4 %427 = OpLoad %415 
                                         f32 %428 = OpDot %426 %427 
                                Private f32* %429 = OpAccessChain %421 %63 
                                                      OpStore %429 %428 
                                       f32_4 %430 = OpLoad %39 
                                       f32_4 %431 = OpLoad %415 
                                         f32 %432 = OpDot %430 %431 
                                Private f32* %433 = OpAccessChain %421 %53 
                                                      OpStore %433 %432 
                                                      OpBranch %299 
                                             %434 = OpLabel 
                                       f32_3 %435 = OpLoad %416 
                                       f32_4 %436 = OpLoad %39 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %39 %437 
                                Private f32* %438 = OpAccessChain %39 %100 
                                                      OpStore %438 %118 
                              Uniform f32_4* %439 = OpAccessChain %30 %65 
                                       f32_4 %440 = OpLoad %439 
                                       f32_4 %441 = OpLoad %39 
                                         f32 %442 = OpDot %440 %441 
                                Private f32* %443 = OpAccessChain %421 %57 
                                                      OpStore %443 %442 
                              Uniform f32_4* %444 = OpAccessChain %30 %173 
                                       f32_4 %445 = OpLoad %444 
                                       f32_4 %446 = OpLoad %39 
                                         f32 %447 = OpDot %445 %446 
                                Private f32* %448 = OpAccessChain %421 %63 
                                                      OpStore %448 %447 
                              Uniform f32_4* %450 = OpAccessChain %30 %449 
                                       f32_4 %451 = OpLoad %450 
                                       f32_4 %452 = OpLoad %39 
                                         f32 %453 = OpDot %451 %452 
                                Private f32* %454 = OpAccessChain %421 %53 
                                                      OpStore %454 %453 
                                                      OpBranch %299 
                                             %299 = OpLabel 
                                       f32_3 %455 = OpLoad %421 
                                       f32_3 %457 = OpLoad %456 
                                       f32_3 %458 = OpFAdd %455 %457 
                                                      OpStore %421 %458 
                                       f32_3 %459 = OpLoad %421 
                                       f32_3 %461 = OpExtInst %1 40 %459 %460 
                                                      OpStore %421 %461 
                                       f32_3 %463 = OpLoad %421 
                                       f32_3 %464 = OpExtInst %1 30 %463 
                                                      OpStore %462 %464 
                                       f32_3 %465 = OpLoad %462 
                                       f32_3 %468 = OpFMul %465 %467 
                                                      OpStore %462 %468 
                                       f32_3 %469 = OpLoad %462 
                                       f32_3 %470 = OpExtInst %1 29 %469 
                                                      OpStore %462 %470 
                                       f32_3 %471 = OpLoad %462 
                                       f32_3 %474 = OpFMul %471 %473 
                                       f32_3 %477 = OpFAdd %474 %476 
                                                      OpStore %462 %477 
                                       f32_3 %478 = OpLoad %462 
                                       f32_3 %479 = OpExtInst %1 40 %478 %460 
                                                      OpStore %462 %479 
                                       f32_3 %481 = OpLoad %416 
                              Uniform f32_4* %482 = OpAccessChain %30 %60 
                                       f32_4 %483 = OpLoad %482 
                                       f32_3 %484 = OpVectorShuffle %483 %483 0 1 2 
                                         f32 %485 = OpDot %481 %484 
                                                      OpStore %480 %485 
                                         f32 %486 = OpLoad %480 
                                         f32 %487 = OpExtInst %1 40 %486 %117 
                                                      OpStore %480 %487 
                                       f32_3 %488 = OpLoad %22 
                                       f32_3 %489 = OpLoad %237 
                                       f32_3 %490 = OpFMul %488 %489 
                                                      OpStore %237 %490 
                                       f32_3 %491 = OpLoad %22 
                                       f32_3 %492 = OpLoad %462 
                                       f32_3 %493 = OpFMul %491 %492 
                                                      OpStore %421 %493 
                                       f32_3 %496 = OpLoad %237 
                                         f32 %497 = OpLoad %480 
                                       f32_3 %498 = OpCompositeConstruct %497 %497 %497 
                                       f32_3 %499 = OpFMul %496 %498 
                                       f32_3 %500 = OpLoad %421 
                                       f32_3 %501 = OpFAdd %499 %500 
                                       f32_4 %502 = OpLoad %495 
                                       f32_4 %503 = OpVectorShuffle %502 %501 4 5 6 3 
                                                      OpStore %495 %503 
                                 Output f32* %505 = OpAccessChain %495 %100 
                                                      OpStore %505 %118 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" }
  Blend One One, One One
  ZWrite Off
  GpuProgramID 88119
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10_2 = texture(_LightTexture0, vec2(u_xlat13));
    u_xlat12 = u_xlat12 * u_xlat10_2.w;
    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 268
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %48 %248 %258 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 RelaxedPrecision 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %48 Location 48 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %106 SpecId 106 
                                                      OpDecorate %203 DescriptorSet 203 
                                                      OpDecorate %203 Binding 203 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %230 DescriptorSet 230 
                                                      OpDecorate %230 Binding 230 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 Location 248 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %258 Location 258 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeArray %14 %16 
                                              %19 = OpTypeStruct %14 %14 %14 %17 %7 %7 %14 %18 %14 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                              %24 = OpTypePointer Uniform %14 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %42 = OpTypeSampledImage %41 
                                              %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2DSampled* %44 = OpVariable UniformConstant 
                                              %46 = OpTypeVector %6 2 
                                              %47 = OpTypePointer Input %46 
                                 Input f32_2* %48 = OpVariable Input 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %54 = OpConstant 8 
                               Private f32_3* %59 = OpVariable Private 
                                          i32 %62 = OpConstant 7 
                                          i32 %63 = OpConstant 1 
                                          i32 %76 = OpConstant 2 
                                          i32 %86 = OpConstant 3 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          u32 %94 = OpConstant 0 
                                              %95 = OpTypePointer Uniform %6 
                                          f32 %98 = OpConstant 3.674022E-40 
                                        bool %100 = OpConstantFalse 
                                        bool %106 = OpSpecConstantFalse 
                                         u32 %109 = OpConstant 1 
                                             %113 = OpTypePointer Private %14 
                              Private f32_4* %114 = OpVariable Private 
                                             %153 = OpTypePointer Function %7 
                                         i32 %167 = OpConstant 5 
                                             %168 = OpTypePointer Uniform %7 
                                         i32 %177 = OpConstant 4 
                                         f32 %185 = OpConstant 3.674022E-40 
                                         f32 %187 = OpConstant 3.674022E-40 
                                Private f32* %189 = OpVariable Private 
                                         u32 %190 = OpConstant 2 
                                         f32 %193 = OpConstant 3.674022E-40 
                                             %200 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %201 = OpTypeSampledImage %200 
                                             %202 = OpTypePointer UniformConstant %201 
 UniformConstant read_only Texture3DSampled* %203 = OpVariable UniformConstant 
                              Private f32_4* %208 = OpVariable Private 
                                         u32 %214 = OpConstant 3 
                              Private f32_3* %216 = OpVariable Private 
                                         f32 %224 = OpConstant 3.674022E-40 
 UniformConstant read_only Texture2DSampled* %230 = OpVariable UniformConstant 
                                         i32 %242 = OpConstant 6 
                                Private f32* %247 = OpVariable Private 
                                Input f32_3* %248 = OpVariable Input 
                                             %257 = OpTypePointer Output %14 
                               Output f32_4* %258 = OpVariable Output 
                                             %265 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %154 = OpVariable Function 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFAdd %13 %27 
                                                      OpStore %9 %28 
                                        f32_3 %31 = OpLoad %9 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpDot %31 %32 
                                                      OpStore %30 %33 
                                          f32 %34 = OpLoad %30 
                                          f32 %35 = OpExtInst %1 32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFMul %37 %38 
                                                      OpStore %9 %39 
                   read_only Texture2DSampled %45 = OpLoad %44 
                                        f32_2 %49 = OpLoad %48 
                                        f32_4 %50 = OpImageSampleImplicitLod %45 %49 
                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
                                                      OpStore %40 %51 
                                        f32_3 %53 = OpLoad %40 
                               Uniform f32_4* %55 = OpAccessChain %21 %54 
                                        f32_4 %56 = OpLoad %55 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                        f32_3 %58 = OpFMul %53 %57 
                                                      OpStore %52 %58 
                                        f32_3 %60 = OpLoad %11 
                                        f32_3 %61 = OpVectorShuffle %60 %60 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %62 %63 
                                        f32_4 %65 = OpLoad %64 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                        f32_3 %67 = OpFMul %61 %66 
                                                      OpStore %59 %67 
                               Uniform f32_4* %68 = OpAccessChain %21 %62 %23 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpLoad %11 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 0 0 
                                        f32_3 %73 = OpFMul %70 %72 
                                        f32_3 %74 = OpLoad %59 
                                        f32_3 %75 = OpFAdd %73 %74 
                                                      OpStore %59 %75 
                               Uniform f32_4* %77 = OpAccessChain %21 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpLoad %11 
                                        f32_3 %81 = OpVectorShuffle %80 %80 2 2 2 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_3 %83 = OpLoad %59 
                                        f32_3 %84 = OpFAdd %82 %83 
                                                      OpStore %59 %84 
                                        f32_3 %85 = OpLoad %59 
                               Uniform f32_4* %87 = OpAccessChain %21 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFAdd %85 %89 
                                                      OpStore %59 %90 
                                 Uniform f32* %96 = OpAccessChain %21 %76 %94 
                                          f32 %97 = OpLoad %96 
                                         bool %99 = OpFOrdEqual %97 %98 
                                                      OpStore %93 %99 
                                                      OpSelectionMerge %102 None 
                                                      OpBranchConditional %100 %101 %102 
                                             %101 = OpLabel 
                                        bool %103 = OpLoad %93 
                                                      OpSelectionMerge %105 None 
                                                      OpBranchConditional %103 %104 %105 
                                             %104 = OpLabel 
                                                      OpBranch %105 
                                             %105 = OpLabel 
                                                      OpBranch %102 
                                             %102 = OpLabel 
                                                      OpSelectionMerge %108 None 
                                                      OpBranchConditional %106 %107 %210 
                                             %107 = OpLabel 
                                Uniform f32* %110 = OpAccessChain %21 %76 %109 
                                         f32 %111 = OpLoad %110 
                                        bool %112 = OpFOrdEqual %111 %98 
                                                      OpStore %93 %112 
                                       f32_3 %115 = OpLoad %11 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %86 %63 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %114 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %114 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %86 %23 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpLoad %11 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %114 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %114 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %114 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %86 %76 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpLoad %11 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %114 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %114 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %114 %144 
                                       f32_4 %145 = OpLoad %114 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                              Uniform f32_4* %147 = OpAccessChain %21 %86 %86 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFAdd %146 %149 
                                       f32_4 %151 = OpLoad %114 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %114 %152 
                                        bool %155 = OpLoad %93 
                                                      OpSelectionMerge %157 None 
                                                      OpBranchConditional %155 %156 %160 
                                             %156 = OpLabel 
                                       f32_4 %158 = OpLoad %114 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                                      OpStore %154 %159 
                                                      OpBranch %157 
                                             %160 = OpLabel 
                                       f32_3 %161 = OpLoad %11 
                                                      OpStore %154 %161 
                                                      OpBranch %157 
                                             %157 = OpLabel 
                                       f32_3 %162 = OpLoad %154 
                                       f32_4 %163 = OpLoad %114 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %114 %164 
                                       f32_4 %165 = OpLoad %114 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                              Uniform f32_3* %169 = OpAccessChain %21 %167 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFNegate %170 
                                       f32_3 %172 = OpFAdd %166 %171 
                                       f32_4 %173 = OpLoad %114 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %114 %174 
                                       f32_4 %175 = OpLoad %114 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                              Uniform f32_3* %178 = OpAccessChain %21 %177 
                                       f32_3 %179 = OpLoad %178 
                                       f32_3 %180 = OpFMul %176 %179 
                                       f32_4 %181 = OpLoad %114 
                                       f32_4 %182 = OpVectorShuffle %181 %180 0 4 5 6 
                                                      OpStore %114 %182 
                                Private f32* %183 = OpAccessChain %114 %109 
                                         f32 %184 = OpLoad %183 
                                         f32 %186 = OpFMul %184 %185 
                                         f32 %188 = OpFAdd %186 %187 
                                                      OpStore %30 %188 
                                Uniform f32* %191 = OpAccessChain %21 %76 %190 
                                         f32 %192 = OpLoad %191 
                                         f32 %194 = OpFMul %192 %193 
                                         f32 %195 = OpFAdd %194 %187 
                                                      OpStore %189 %195 
                                         f32 %196 = OpLoad %30 
                                         f32 %197 = OpLoad %189 
                                         f32 %198 = OpExtInst %1 40 %196 %197 
                                Private f32* %199 = OpAccessChain %114 %94 
                                                      OpStore %199 %198 
                  read_only Texture3DSampled %204 = OpLoad %203 
                                       f32_4 %205 = OpLoad %114 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 2 3 
                                       f32_4 %207 = OpImageSampleImplicitLod %204 %206 
                                                      OpStore %114 %207 
                                       f32_4 %209 = OpLoad %114 
                                                      OpStore %208 %209 
                                                      OpBranch %108 
                                             %210 = OpLabel 
                                Private f32* %211 = OpAccessChain %208 %94 
                                                      OpStore %211 %98 
                                Private f32* %212 = OpAccessChain %208 %109 
                                                      OpStore %212 %98 
                                Private f32* %213 = OpAccessChain %208 %190 
                                                      OpStore %213 %98 
                                Private f32* %215 = OpAccessChain %208 %214 
                                                      OpStore %215 %98 
                                                      OpBranch %108 
                                             %108 = OpLabel 
                                       f32_4 %217 = OpLoad %208 
                              Uniform f32_4* %218 = OpAccessChain %21 %63 
                                       f32_4 %219 = OpLoad %218 
                                         f32 %220 = OpDot %217 %219 
                                Private f32* %221 = OpAccessChain %216 %94 
                                                      OpStore %221 %220 
                                Private f32* %222 = OpAccessChain %216 %94 
                                         f32 %223 = OpLoad %222 
                                         f32 %225 = OpExtInst %1 43 %223 %224 %98 
                                Private f32* %226 = OpAccessChain %216 %94 
                                                      OpStore %226 %225 
                                       f32_3 %227 = OpLoad %59 
                                       f32_3 %228 = OpLoad %59 
                                         f32 %229 = OpDot %227 %228 
                                                      OpStore %30 %229 
                  read_only Texture2DSampled %231 = OpLoad %230 
                                         f32 %232 = OpLoad %30 
                                       f32_2 %233 = OpCompositeConstruct %232 %232 
                                       f32_4 %234 = OpImageSampleImplicitLod %231 %233 
                                         f32 %235 = OpCompositeExtract %234 3 
                                                      OpStore %30 %235 
                                Private f32* %236 = OpAccessChain %216 %94 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpLoad %30 
                                         f32 %239 = OpFMul %237 %238 
                                                      OpStore %30 %239 
                                         f32 %240 = OpLoad %30 
                                       f32_3 %241 = OpCompositeConstruct %240 %240 %240 
                              Uniform f32_4* %243 = OpAccessChain %21 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_3 %246 = OpFMul %241 %245 
                                                      OpStore %216 %246 
                                       f32_3 %249 = OpLoad %248 
                                       f32_3 %250 = OpLoad %9 
                                         f32 %251 = OpDot %249 %250 
                                                      OpStore %247 %251 
                                         f32 %252 = OpLoad %247 
                                         f32 %253 = OpExtInst %1 40 %252 %224 
                                                      OpStore %247 %253 
                                       f32_3 %254 = OpLoad %52 
                                       f32_3 %255 = OpLoad %216 
                                       f32_3 %256 = OpFMul %254 %255 
                                                      OpStore %216 %256 
                                         f32 %259 = OpLoad %247 
                                       f32_3 %260 = OpCompositeConstruct %259 %259 %259 
                                       f32_3 %261 = OpLoad %216 
                                       f32_3 %262 = OpFMul %260 %261 
                                       f32_4 %263 = OpLoad %258 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 6 3 
                                                      OpStore %258 %264 
                                 Output f32* %266 = OpAccessChain %258 %214 
                                                      OpStore %266 %98 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
        u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat1.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat6, u_xlat3);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 211
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %63 %189 %201 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 RelaxedPrecision 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 RelaxedPrecision 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 RelaxedPrecision 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %53 SpecId 53 
                                                      OpDecorate %63 Location 63 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %201 Location 201 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                               Private f32_3* %22 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %19 %25 
                                              %27 = OpTypeStruct %19 %19 %19 %26 %7 %7 %19 %19 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 7 
                                              %32 = OpTypePointer Uniform %19 
                                              %37 = OpTypeBool 
                                              %38 = OpTypePointer Private %37 
                                Private bool* %39 = OpVariable Private 
                                          i32 %40 = OpConstant 2 
                                          u32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          f32 %45 = OpConstant 3.674022E-40 
                                         bool %47 = OpConstantFalse 
                                         bool %53 = OpSpecConstantFalse 
                                          u32 %56 = OpConstant 1 
                                              %60 = OpTypePointer Private %19 
                               Private f32_4* %61 = OpVariable Private 
                                              %62 = OpTypePointer Input %7 
                                 Input f32_3* %63 = OpVariable Input 
                                          i32 %66 = OpConstant 3 
                                          i32 %67 = OpConstant 1 
                                          i32 %74 = OpConstant 0 
                                             %105 = OpTypePointer Function %7 
                                         i32 %119 = OpConstant 5 
                                             %120 = OpTypePointer Uniform %7 
                                         i32 %129 = OpConstant 4 
                                             %135 = OpTypePointer Private %6 
                                Private f32* %136 = OpVariable Private 
                                         f32 %139 = OpConstant 3.674022E-40 
                                         f32 %141 = OpConstant 3.674022E-40 
                                Private f32* %143 = OpVariable Private 
                                         u32 %144 = OpConstant 2 
                                         f32 %147 = OpConstant 3.674022E-40 
                                             %154 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %155 = OpTypeSampledImage %154 
                                             %156 = OpTypePointer UniformConstant %155 
 UniformConstant read_only Texture3DSampled* %157 = OpVariable UniformConstant 
                              Private f32_4* %162 = OpVariable Private 
                                         u32 %168 = OpConstant 3 
                              Private f32_3* %170 = OpVariable Private 
                                         f32 %178 = OpConstant 3.674022E-40 
                                         i32 %183 = OpConstant 6 
                                Private f32* %188 = OpVariable Private 
                                Input f32_3* %189 = OpVariable Input 
                                             %200 = OpTypePointer Output %19 
                               Output f32_4* %201 = OpVariable Output 
                                             %208 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %106 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                                        f32_3 %23 = OpLoad %9 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                        f32_3 %36 = OpFMul %23 %35 
                                                      OpStore %22 %36 
                                 Uniform f32* %43 = OpAccessChain %29 %40 %41 
                                          f32 %44 = OpLoad %43 
                                         bool %46 = OpFOrdEqual %44 %45 
                                                      OpStore %39 %46 
                                                      OpSelectionMerge %49 None 
                                                      OpBranchConditional %47 %48 %49 
                                              %48 = OpLabel 
                                         bool %50 = OpLoad %39 
                                                      OpSelectionMerge %52 None 
                                                      OpBranchConditional %50 %51 %52 
                                              %51 = OpLabel 
                                                      OpBranch %52 
                                              %52 = OpLabel 
                                                      OpBranch %49 
                                              %49 = OpLabel 
                                                      OpSelectionMerge %55 None 
                                                      OpBranchConditional %53 %54 %164 
                                              %54 = OpLabel 
                                 Uniform f32* %57 = OpAccessChain %29 %40 %56 
                                          f32 %58 = OpLoad %57 
                                         bool %59 = OpFOrdEqual %58 %45 
                                                      OpStore %39 %59 
                                        f32_3 %64 = OpLoad %63 
                                        f32_3 %65 = OpVectorShuffle %64 %64 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %29 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpFMul %65 %70 
                                        f32_4 %72 = OpLoad %61 
                                        f32_4 %73 = OpVectorShuffle %72 %71 4 5 6 3 
                                                      OpStore %61 %73 
                               Uniform f32_4* %75 = OpAccessChain %29 %66 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                                        f32_3 %78 = OpLoad %63 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 0 0 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %61 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFAdd %80 %82 
                                        f32_4 %84 = OpLoad %61 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %61 %85 
                               Uniform f32_4* %86 = OpAccessChain %29 %66 %40 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpLoad %63 
                                        f32_3 %90 = OpVectorShuffle %89 %89 2 2 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %61 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFAdd %91 %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 6 3 
                                                      OpStore %61 %96 
                                        f32_4 %97 = OpLoad %61 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                               Uniform f32_4* %99 = OpAccessChain %29 %66 %66 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFAdd %98 %101 
                                       f32_4 %103 = OpLoad %61 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %61 %104 
                                        bool %107 = OpLoad %39 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %61 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %106 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_3 %113 = OpLoad %63 
                                                      OpStore %106 %113 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %114 = OpLoad %106 
                                       f32_4 %115 = OpLoad %61 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %61 %116 
                                       f32_4 %117 = OpLoad %61 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_3* %121 = OpAccessChain %29 %119 
                                       f32_3 %122 = OpLoad %121 
                                       f32_3 %123 = OpFNegate %122 
                                       f32_3 %124 = OpFAdd %118 %123 
                                       f32_4 %125 = OpLoad %61 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %61 %126 
                                       f32_4 %127 = OpLoad %61 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                              Uniform f32_3* %130 = OpAccessChain %29 %129 
                                       f32_3 %131 = OpLoad %130 
                                       f32_3 %132 = OpFMul %128 %131 
                                       f32_4 %133 = OpLoad %61 
                                       f32_4 %134 = OpVectorShuffle %133 %132 0 4 5 6 
                                                      OpStore %61 %134 
                                Private f32* %137 = OpAccessChain %61 %56 
                                         f32 %138 = OpLoad %137 
                                         f32 %140 = OpFMul %138 %139 
                                         f32 %142 = OpFAdd %140 %141 
                                                      OpStore %136 %142 
                                Uniform f32* %145 = OpAccessChain %29 %40 %144 
                                         f32 %146 = OpLoad %145 
                                         f32 %148 = OpFMul %146 %147 
                                         f32 %149 = OpFAdd %148 %141 
                                                      OpStore %143 %149 
                                         f32 %150 = OpLoad %136 
                                         f32 %151 = OpLoad %143 
                                         f32 %152 = OpExtInst %1 40 %150 %151 
                                Private f32* %153 = OpAccessChain %61 %41 
                                                      OpStore %153 %152 
                  read_only Texture3DSampled %158 = OpLoad %157 
                                       f32_4 %159 = OpLoad %61 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 2 3 
                                       f32_4 %161 = OpImageSampleImplicitLod %158 %160 
                                                      OpStore %61 %161 
                                       f32_4 %163 = OpLoad %61 
                                                      OpStore %162 %163 
                                                      OpBranch %55 
                                             %164 = OpLabel 
                                Private f32* %165 = OpAccessChain %162 %41 
                                                      OpStore %165 %45 
                                Private f32* %166 = OpAccessChain %162 %56 
                                                      OpStore %166 %45 
                                Private f32* %167 = OpAccessChain %162 %144 
                                                      OpStore %167 %45 
                                Private f32* %169 = OpAccessChain %162 %168 
                                                      OpStore %169 %45 
                                                      OpBranch %55 
                                              %55 = OpLabel 
                                       f32_4 %171 = OpLoad %162 
                              Uniform f32_4* %172 = OpAccessChain %29 %67 
                                       f32_4 %173 = OpLoad %172 
                                         f32 %174 = OpDot %171 %173 
                                Private f32* %175 = OpAccessChain %170 %41 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %170 %41 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpExtInst %1 43 %177 %178 %45 
                                Private f32* %180 = OpAccessChain %170 %41 
                                                      OpStore %180 %179 
                                       f32_3 %181 = OpLoad %170 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 0 0 
                              Uniform f32_4* %184 = OpAccessChain %29 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %182 %186 
                                                      OpStore %170 %187 
                                       f32_3 %190 = OpLoad %189 
                              Uniform f32_4* %191 = OpAccessChain %29 %74 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %190 %193 
                                                      OpStore %188 %194 
                                         f32 %195 = OpLoad %188 
                                         f32 %196 = OpExtInst %1 40 %195 %178 
                                                      OpStore %188 %196 
                                       f32_3 %197 = OpLoad %22 
                                       f32_3 %198 = OpLoad %170 
                                       f32_3 %199 = OpFMul %197 %198 
                                                      OpStore %170 %199 
                                         f32 %202 = OpLoad %188 
                                       f32_3 %203 = OpCompositeConstruct %202 %202 %202 
                                       f32_3 %204 = OpLoad %170 
                                       f32_3 %205 = OpFMul %203 %204 
                                       f32_4 %206 = OpLoad %201 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %201 %207 
                                 Output f32* %209 = OpAccessChain %201 %168 
                                                      OpStore %209 %45 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlatb13 = 0.0<u_xlat2.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat3.xy = u_xlat2.xy / u_xlat2.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat3.xy);
    u_xlat13 = u_xlat13 * u_xlat10_3.w;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat13 = u_xlat13 * u_xlat10_2.w;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 299
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %48 %279 %289 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 RelaxedPrecision 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %48 Location 48 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %103 SpecId 103 
                                                      OpDecorate %199 DescriptorSet 199 
                                                      OpDecorate %199 Binding 199 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %244 DescriptorSet 244 
                                                      OpDecorate %244 Binding 244 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %257 DescriptorSet 257 
                                                      OpDecorate %257 Binding 257 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 Location 279 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %289 Location 289 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeArray %14 %16 
                                              %19 = OpTypeStruct %14 %14 %14 %17 %7 %7 %14 %18 %14 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                              %24 = OpTypePointer Uniform %14 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %42 = OpTypeSampledImage %41 
                                              %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2DSampled* %44 = OpVariable UniformConstant 
                                              %46 = OpTypeVector %6 2 
                                              %47 = OpTypePointer Input %46 
                                 Input f32_2* %48 = OpVariable Input 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %54 = OpConstant 8 
                                              %59 = OpTypePointer Private %14 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %63 = OpConstant 7 
                                          i32 %64 = OpConstant 1 
                                          i32 %75 = OpConstant 2 
                                          i32 %84 = OpConstant 3 
                                              %88 = OpTypeBool 
                                              %89 = OpTypePointer Private %88 
                                Private bool* %90 = OpVariable Private 
                                          u32 %91 = OpConstant 0 
                                              %92 = OpTypePointer Uniform %6 
                                          f32 %95 = OpConstant 3.674022E-40 
                                         bool %97 = OpConstantFalse 
                                        bool %103 = OpSpecConstantFalse 
                                         u32 %106 = OpConstant 1 
                              Private f32_4* %110 = OpVariable Private 
                                             %149 = OpTypePointer Function %7 
                                         i32 %163 = OpConstant 5 
                                             %164 = OpTypePointer Uniform %7 
                                         i32 %173 = OpConstant 4 
                                         f32 %181 = OpConstant 3.674022E-40 
                                         f32 %183 = OpConstant 3.674022E-40 
                                Private f32* %185 = OpVariable Private 
                                         u32 %186 = OpConstant 2 
                                         f32 %189 = OpConstant 3.674022E-40 
                                             %196 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %197 = OpTypeSampledImage %196 
                                             %198 = OpTypePointer UniformConstant %197 
 UniformConstant read_only Texture3DSampled* %199 = OpVariable UniformConstant 
                              Private f32_4* %204 = OpVariable Private 
                                         u32 %210 = OpConstant 3 
                              Private f32_3* %212 = OpVariable Private 
                                         f32 %220 = OpConstant 3.674022E-40 
                                Private f32* %226 = OpVariable Private 
                                             %227 = OpTypePointer Function %6 
                                             %234 = OpTypePointer Private %46 
                              Private f32_2* %235 = OpVariable Private 
                                       f32_2 %242 = OpConstantComposite %189 %189 
 UniformConstant read_only Texture2DSampled* %244 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %257 = OpVariable UniformConstant 
                                         i32 %273 = OpConstant 6 
                                Private f32* %278 = OpVariable Private 
                                Input f32_3* %279 = OpVariable Input 
                                             %288 = OpTypePointer Output %14 
                               Output f32_4* %289 = OpVariable Output 
                                             %296 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %150 = OpVariable Function 
                               Function f32* %228 = OpVariable Function 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFAdd %13 %27 
                                                      OpStore %9 %28 
                                        f32_3 %31 = OpLoad %9 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpDot %31 %32 
                                                      OpStore %30 %33 
                                          f32 %34 = OpLoad %30 
                                          f32 %35 = OpExtInst %1 32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFMul %37 %38 
                                                      OpStore %9 %39 
                   read_only Texture2DSampled %45 = OpLoad %44 
                                        f32_2 %49 = OpLoad %48 
                                        f32_4 %50 = OpImageSampleImplicitLod %45 %49 
                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
                                                      OpStore %40 %51 
                                        f32_3 %53 = OpLoad %40 
                               Uniform f32_4* %55 = OpAccessChain %21 %54 
                                        f32_4 %56 = OpLoad %55 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                        f32_3 %58 = OpFMul %53 %57 
                                                      OpStore %52 %58 
                                        f32_3 %61 = OpLoad %11 
                                        f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
                               Uniform f32_4* %65 = OpAccessChain %21 %63 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpFMul %62 %66 
                                                      OpStore %60 %67 
                               Uniform f32_4* %68 = OpAccessChain %21 %63 %23 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpLoad %11 
                                        f32_4 %71 = OpVectorShuffle %70 %70 0 0 0 0 
                                        f32_4 %72 = OpFMul %69 %71 
                                        f32_4 %73 = OpLoad %60 
                                        f32_4 %74 = OpFAdd %72 %73 
                                                      OpStore %60 %74 
                               Uniform f32_4* %76 = OpAccessChain %21 %63 %75 
                                        f32_4 %77 = OpLoad %76 
                                        f32_3 %78 = OpLoad %11 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %60 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %60 %82 
                                        f32_4 %83 = OpLoad %60 
                               Uniform f32_4* %85 = OpAccessChain %21 %63 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpFAdd %83 %86 
                                                      OpStore %60 %87 
                                 Uniform f32* %93 = OpAccessChain %21 %75 %91 
                                          f32 %94 = OpLoad %93 
                                         bool %96 = OpFOrdEqual %94 %95 
                                                      OpStore %90 %96 
                                                      OpSelectionMerge %99 None 
                                                      OpBranchConditional %97 %98 %99 
                                              %98 = OpLabel 
                                        bool %100 = OpLoad %90 
                                                      OpSelectionMerge %102 None 
                                                      OpBranchConditional %100 %101 %102 
                                             %101 = OpLabel 
                                                      OpBranch %102 
                                             %102 = OpLabel 
                                                      OpBranch %99 
                                              %99 = OpLabel 
                                                      OpSelectionMerge %105 None 
                                                      OpBranchConditional %103 %104 %206 
                                             %104 = OpLabel 
                                Uniform f32* %107 = OpAccessChain %21 %75 %106 
                                         f32 %108 = OpLoad %107 
                                        bool %109 = OpFOrdEqual %108 %95 
                                                      OpStore %90 %109 
                                       f32_3 %111 = OpLoad %11 
                                       f32_3 %112 = OpVectorShuffle %111 %111 1 1 1 
                              Uniform f32_4* %113 = OpAccessChain %21 %84 %64 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFMul %112 %115 
                                       f32_4 %117 = OpLoad %110 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %110 %118 
                              Uniform f32_4* %119 = OpAccessChain %21 %84 %23 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpLoad %11 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 0 0 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %110 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %110 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %110 %129 
                              Uniform f32_4* %130 = OpAccessChain %21 %84 %75 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpLoad %11 
                                       f32_3 %134 = OpVectorShuffle %133 %133 2 2 2 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %110 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %110 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %110 %140 
                                       f32_4 %141 = OpLoad %110 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                              Uniform f32_4* %143 = OpAccessChain %21 %84 %84 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFAdd %142 %145 
                                       f32_4 %147 = OpLoad %110 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %110 %148 
                                        bool %151 = OpLoad %90 
                                                      OpSelectionMerge %153 None 
                                                      OpBranchConditional %151 %152 %156 
                                             %152 = OpLabel 
                                       f32_4 %154 = OpLoad %110 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                                      OpStore %150 %155 
                                                      OpBranch %153 
                                             %156 = OpLabel 
                                       f32_3 %157 = OpLoad %11 
                                                      OpStore %150 %157 
                                                      OpBranch %153 
                                             %153 = OpLabel 
                                       f32_3 %158 = OpLoad %150 
                                       f32_4 %159 = OpLoad %110 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %110 %160 
                                       f32_4 %161 = OpLoad %110 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                              Uniform f32_3* %165 = OpAccessChain %21 %163 
                                       f32_3 %166 = OpLoad %165 
                                       f32_3 %167 = OpFNegate %166 
                                       f32_3 %168 = OpFAdd %162 %167 
                                       f32_4 %169 = OpLoad %110 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %110 %170 
                                       f32_4 %171 = OpLoad %110 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                              Uniform f32_3* %174 = OpAccessChain %21 %173 
                                       f32_3 %175 = OpLoad %174 
                                       f32_3 %176 = OpFMul %172 %175 
                                       f32_4 %177 = OpLoad %110 
                                       f32_4 %178 = OpVectorShuffle %177 %176 0 4 5 6 
                                                      OpStore %110 %178 
                                Private f32* %179 = OpAccessChain %110 %106 
                                         f32 %180 = OpLoad %179 
                                         f32 %182 = OpFMul %180 %181 
                                         f32 %184 = OpFAdd %182 %183 
                                                      OpStore %30 %184 
                                Uniform f32* %187 = OpAccessChain %21 %75 %186 
                                         f32 %188 = OpLoad %187 
                                         f32 %190 = OpFMul %188 %189 
                                         f32 %191 = OpFAdd %190 %183 
                                                      OpStore %185 %191 
                                         f32 %192 = OpLoad %30 
                                         f32 %193 = OpLoad %185 
                                         f32 %194 = OpExtInst %1 40 %192 %193 
                                Private f32* %195 = OpAccessChain %110 %91 
                                                      OpStore %195 %194 
                  read_only Texture3DSampled %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %110 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 2 3 
                                       f32_4 %203 = OpImageSampleImplicitLod %200 %202 
                                                      OpStore %110 %203 
                                       f32_4 %205 = OpLoad %110 
                                                      OpStore %204 %205 
                                                      OpBranch %105 
                                             %206 = OpLabel 
                                Private f32* %207 = OpAccessChain %204 %91 
                                                      OpStore %207 %95 
                                Private f32* %208 = OpAccessChain %204 %106 
                                                      OpStore %208 %95 
                                Private f32* %209 = OpAccessChain %204 %186 
                                                      OpStore %209 %95 
                                Private f32* %211 = OpAccessChain %204 %210 
                                                      OpStore %211 %95 
                                                      OpBranch %105 
                                             %105 = OpLabel 
                                       f32_4 %213 = OpLoad %204 
                              Uniform f32_4* %214 = OpAccessChain %21 %64 
                                       f32_4 %215 = OpLoad %214 
                                         f32 %216 = OpDot %213 %215 
                                Private f32* %217 = OpAccessChain %212 %91 
                                                      OpStore %217 %216 
                                Private f32* %218 = OpAccessChain %212 %91 
                                         f32 %219 = OpLoad %218 
                                         f32 %221 = OpExtInst %1 43 %219 %220 %95 
                                Private f32* %222 = OpAccessChain %212 %91 
                                                      OpStore %222 %221 
                                Private f32* %223 = OpAccessChain %60 %186 
                                         f32 %224 = OpLoad %223 
                                        bool %225 = OpFOrdLessThan %220 %224 
                                                      OpStore %90 %225 
                                        bool %229 = OpLoad %90 
                                                      OpSelectionMerge %231 None 
                                                      OpBranchConditional %229 %230 %232 
                                             %230 = OpLabel 
                                                      OpStore %228 %95 
                                                      OpBranch %231 
                                             %232 = OpLabel 
                                                      OpStore %228 %220 
                                                      OpBranch %231 
                                             %231 = OpLabel 
                                         f32 %233 = OpLoad %228 
                                                      OpStore %226 %233 
                                       f32_4 %236 = OpLoad %60 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_4 %238 = OpLoad %60 
                                       f32_2 %239 = OpVectorShuffle %238 %238 3 3 
                                       f32_2 %240 = OpFDiv %237 %239 
                                                      OpStore %235 %240 
                                       f32_2 %241 = OpLoad %235 
                                       f32_2 %243 = OpFAdd %241 %242 
                                                      OpStore %235 %243 
                  read_only Texture2DSampled %245 = OpLoad %244 
                                       f32_2 %246 = OpLoad %235 
                                       f32_4 %247 = OpImageSampleImplicitLod %245 %246 
                                         f32 %248 = OpCompositeExtract %247 3 
                                                      OpStore %30 %248 
                                         f32 %249 = OpLoad %30 
                                         f32 %250 = OpLoad %226 
                                         f32 %251 = OpFMul %249 %250 
                                                      OpStore %226 %251 
                                       f32_4 %252 = OpLoad %60 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_4 %254 = OpLoad %60 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                         f32 %256 = OpDot %253 %255 
                                                      OpStore %30 %256 
                  read_only Texture2DSampled %258 = OpLoad %257 
                                         f32 %259 = OpLoad %30 
                                       f32_2 %260 = OpCompositeConstruct %259 %259 
                                       f32_4 %261 = OpImageSampleImplicitLod %258 %260 
                                         f32 %262 = OpCompositeExtract %261 3 
                                                      OpStore %30 %262 
                                         f32 %263 = OpLoad %30 
                                         f32 %264 = OpLoad %226 
                                         f32 %265 = OpFMul %263 %264 
                                                      OpStore %226 %265 
                                Private f32* %266 = OpAccessChain %212 %91 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpLoad %226 
                                         f32 %269 = OpFMul %267 %268 
                                Private f32* %270 = OpAccessChain %212 %91 
                                                      OpStore %270 %269 
                                       f32_3 %271 = OpLoad %212 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
                              Uniform f32_4* %274 = OpAccessChain %21 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFMul %272 %276 
                                                      OpStore %212 %277 
                                       f32_3 %280 = OpLoad %279 
                                       f32_3 %281 = OpLoad %9 
                                         f32 %282 = OpDot %280 %281 
                                                      OpStore %278 %282 
                                         f32 %283 = OpLoad %278 
                                         f32 %284 = OpExtInst %1 40 %283 %220 
                                                      OpStore %278 %284 
                                       f32_3 %285 = OpLoad %52 
                                       f32_3 %286 = OpLoad %212 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %212 %287 
                                         f32 %290 = OpLoad %278 
                                       f32_3 %291 = OpCompositeConstruct %290 %290 %290 
                                       f32_3 %292 = OpLoad %212 
                                       f32_3 %293 = OpFMul %291 %292 
                                       f32_4 %294 = OpLoad %289 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %289 %295 
                                 Output f32* %297 = OpAccessChain %289 %210 
                                                      OpStore %297 %95 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat16_13;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat10_2 = texture(_LightTexture0, u_xlat2.xyz);
    u_xlat16_13 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat12 = u_xlat12 * u_xlat16_13;
    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 279
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %48 %259 %269 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 RelaxedPrecision 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %48 Location 48 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %106 SpecId 106 
                                                      OpDecorate %203 DescriptorSet 203 
                                                      OpDecorate %203 Binding 203 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %230 DescriptorSet 230 
                                                      OpDecorate %230 Binding 230 
                                                      OpDecorate %239 DescriptorSet 239 
                                                      OpDecorate %239 Binding 239 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 Location 259 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %269 Location 269 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeArray %14 %16 
                                              %19 = OpTypeStruct %14 %14 %14 %17 %7 %7 %14 %18 %14 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                              %24 = OpTypePointer Uniform %14 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %42 = OpTypeSampledImage %41 
                                              %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2DSampled* %44 = OpVariable UniformConstant 
                                              %46 = OpTypeVector %6 2 
                                              %47 = OpTypePointer Input %46 
                                 Input f32_2* %48 = OpVariable Input 
                               Private f32_3* %52 = OpVariable Private 
                                          i32 %54 = OpConstant 8 
                               Private f32_3* %59 = OpVariable Private 
                                          i32 %62 = OpConstant 7 
                                          i32 %63 = OpConstant 1 
                                          i32 %76 = OpConstant 2 
                                          i32 %86 = OpConstant 3 
                                              %91 = OpTypeBool 
                                              %92 = OpTypePointer Private %91 
                                Private bool* %93 = OpVariable Private 
                                          u32 %94 = OpConstant 0 
                                              %95 = OpTypePointer Uniform %6 
                                          f32 %98 = OpConstant 3.674022E-40 
                                        bool %100 = OpConstantFalse 
                                        bool %106 = OpSpecConstantFalse 
                                         u32 %109 = OpConstant 1 
                                             %113 = OpTypePointer Private %14 
                              Private f32_4* %114 = OpVariable Private 
                                             %153 = OpTypePointer Function %7 
                                         i32 %167 = OpConstant 5 
                                             %168 = OpTypePointer Uniform %7 
                                         i32 %177 = OpConstant 4 
                                         f32 %185 = OpConstant 3.674022E-40 
                                         f32 %187 = OpConstant 3.674022E-40 
                                Private f32* %189 = OpVariable Private 
                                         u32 %190 = OpConstant 2 
                                         f32 %193 = OpConstant 3.674022E-40 
                                             %200 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %201 = OpTypeSampledImage %200 
                                             %202 = OpTypePointer UniformConstant %201 
 UniformConstant read_only Texture3DSampled* %203 = OpVariable UniformConstant 
                              Private f32_4* %208 = OpVariable Private 
                                         u32 %214 = OpConstant 3 
                              Private f32_3* %216 = OpVariable Private 
                                         f32 %224 = OpConstant 3.674022E-40 
 UniformConstant read_only Texture2DSampled* %230 = OpVariable UniformConstant 
                                             %236 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %237 = OpTypeSampledImage %236 
                                             %238 = OpTypePointer UniformConstant %237 
UniformConstant read_only TextureCubeSampled* %239 = OpVariable UniformConstant 
                                         i32 %253 = OpConstant 6 
                                Private f32* %258 = OpVariable Private 
                                Input f32_3* %259 = OpVariable Input 
                                             %268 = OpTypePointer Output %14 
                               Output f32_4* %269 = OpVariable Output 
                                             %276 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %154 = OpVariable Function 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFAdd %13 %27 
                                                      OpStore %9 %28 
                                        f32_3 %31 = OpLoad %9 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpDot %31 %32 
                                                      OpStore %30 %33 
                                          f32 %34 = OpLoad %30 
                                          f32 %35 = OpExtInst %1 32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFMul %37 %38 
                                                      OpStore %9 %39 
                   read_only Texture2DSampled %45 = OpLoad %44 
                                        f32_2 %49 = OpLoad %48 
                                        f32_4 %50 = OpImageSampleImplicitLod %45 %49 
                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
                                                      OpStore %40 %51 
                                        f32_3 %53 = OpLoad %40 
                               Uniform f32_4* %55 = OpAccessChain %21 %54 
                                        f32_4 %56 = OpLoad %55 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                        f32_3 %58 = OpFMul %53 %57 
                                                      OpStore %52 %58 
                                        f32_3 %60 = OpLoad %11 
                                        f32_3 %61 = OpVectorShuffle %60 %60 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %62 %63 
                                        f32_4 %65 = OpLoad %64 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                        f32_3 %67 = OpFMul %61 %66 
                                                      OpStore %59 %67 
                               Uniform f32_4* %68 = OpAccessChain %21 %62 %23 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_3 %71 = OpLoad %11 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 0 0 
                                        f32_3 %73 = OpFMul %70 %72 
                                        f32_3 %74 = OpLoad %59 
                                        f32_3 %75 = OpFAdd %73 %74 
                                                      OpStore %59 %75 
                               Uniform f32_4* %77 = OpAccessChain %21 %62 %76 
                                        f32_4 %78 = OpLoad %77 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpLoad %11 
                                        f32_3 %81 = OpVectorShuffle %80 %80 2 2 2 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_3 %83 = OpLoad %59 
                                        f32_3 %84 = OpFAdd %82 %83 
                                                      OpStore %59 %84 
                                        f32_3 %85 = OpLoad %59 
                               Uniform f32_4* %87 = OpAccessChain %21 %62 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFAdd %85 %89 
                                                      OpStore %59 %90 
                                 Uniform f32* %96 = OpAccessChain %21 %76 %94 
                                          f32 %97 = OpLoad %96 
                                         bool %99 = OpFOrdEqual %97 %98 
                                                      OpStore %93 %99 
                                                      OpSelectionMerge %102 None 
                                                      OpBranchConditional %100 %101 %102 
                                             %101 = OpLabel 
                                        bool %103 = OpLoad %93 
                                                      OpSelectionMerge %105 None 
                                                      OpBranchConditional %103 %104 %105 
                                             %104 = OpLabel 
                                                      OpBranch %105 
                                             %105 = OpLabel 
                                                      OpBranch %102 
                                             %102 = OpLabel 
                                                      OpSelectionMerge %108 None 
                                                      OpBranchConditional %106 %107 %210 
                                             %107 = OpLabel 
                                Uniform f32* %110 = OpAccessChain %21 %76 %109 
                                         f32 %111 = OpLoad %110 
                                        bool %112 = OpFOrdEqual %111 %98 
                                                      OpStore %93 %112 
                                       f32_3 %115 = OpLoad %11 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %86 %63 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %114 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %114 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %86 %23 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpLoad %11 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %114 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %114 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %114 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %86 %76 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpLoad %11 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %114 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %114 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %114 %144 
                                       f32_4 %145 = OpLoad %114 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                              Uniform f32_4* %147 = OpAccessChain %21 %86 %86 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFAdd %146 %149 
                                       f32_4 %151 = OpLoad %114 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %114 %152 
                                        bool %155 = OpLoad %93 
                                                      OpSelectionMerge %157 None 
                                                      OpBranchConditional %155 %156 %160 
                                             %156 = OpLabel 
                                       f32_4 %158 = OpLoad %114 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                                      OpStore %154 %159 
                                                      OpBranch %157 
                                             %160 = OpLabel 
                                       f32_3 %161 = OpLoad %11 
                                                      OpStore %154 %161 
                                                      OpBranch %157 
                                             %157 = OpLabel 
                                       f32_3 %162 = OpLoad %154 
                                       f32_4 %163 = OpLoad %114 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %114 %164 
                                       f32_4 %165 = OpLoad %114 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                              Uniform f32_3* %169 = OpAccessChain %21 %167 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFNegate %170 
                                       f32_3 %172 = OpFAdd %166 %171 
                                       f32_4 %173 = OpLoad %114 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %114 %174 
                                       f32_4 %175 = OpLoad %114 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                              Uniform f32_3* %178 = OpAccessChain %21 %177 
                                       f32_3 %179 = OpLoad %178 
                                       f32_3 %180 = OpFMul %176 %179 
                                       f32_4 %181 = OpLoad %114 
                                       f32_4 %182 = OpVectorShuffle %181 %180 0 4 5 6 
                                                      OpStore %114 %182 
                                Private f32* %183 = OpAccessChain %114 %109 
                                         f32 %184 = OpLoad %183 
                                         f32 %186 = OpFMul %184 %185 
                                         f32 %188 = OpFAdd %186 %187 
                                                      OpStore %30 %188 
                                Uniform f32* %191 = OpAccessChain %21 %76 %190 
                                         f32 %192 = OpLoad %191 
                                         f32 %194 = OpFMul %192 %193 
                                         f32 %195 = OpFAdd %194 %187 
                                                      OpStore %189 %195 
                                         f32 %196 = OpLoad %30 
                                         f32 %197 = OpLoad %189 
                                         f32 %198 = OpExtInst %1 40 %196 %197 
                                Private f32* %199 = OpAccessChain %114 %94 
                                                      OpStore %199 %198 
                  read_only Texture3DSampled %204 = OpLoad %203 
                                       f32_4 %205 = OpLoad %114 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 2 3 
                                       f32_4 %207 = OpImageSampleImplicitLod %204 %206 
                                                      OpStore %114 %207 
                                       f32_4 %209 = OpLoad %114 
                                                      OpStore %208 %209 
                                                      OpBranch %108 
                                             %210 = OpLabel 
                                Private f32* %211 = OpAccessChain %208 %94 
                                                      OpStore %211 %98 
                                Private f32* %212 = OpAccessChain %208 %109 
                                                      OpStore %212 %98 
                                Private f32* %213 = OpAccessChain %208 %190 
                                                      OpStore %213 %98 
                                Private f32* %215 = OpAccessChain %208 %214 
                                                      OpStore %215 %98 
                                                      OpBranch %108 
                                             %108 = OpLabel 
                                       f32_4 %217 = OpLoad %208 
                              Uniform f32_4* %218 = OpAccessChain %21 %63 
                                       f32_4 %219 = OpLoad %218 
                                         f32 %220 = OpDot %217 %219 
                                Private f32* %221 = OpAccessChain %216 %94 
                                                      OpStore %221 %220 
                                Private f32* %222 = OpAccessChain %216 %94 
                                         f32 %223 = OpLoad %222 
                                         f32 %225 = OpExtInst %1 43 %223 %224 %98 
                                Private f32* %226 = OpAccessChain %216 %94 
                                                      OpStore %226 %225 
                                       f32_3 %227 = OpLoad %59 
                                       f32_3 %228 = OpLoad %59 
                                         f32 %229 = OpDot %227 %228 
                                                      OpStore %30 %229 
                  read_only Texture2DSampled %231 = OpLoad %230 
                                         f32 %232 = OpLoad %30 
                                       f32_2 %233 = OpCompositeConstruct %232 %232 
                                       f32_4 %234 = OpImageSampleImplicitLod %231 %233 
                                         f32 %235 = OpCompositeExtract %234 3 
                                                      OpStore %30 %235 
                read_only TextureCubeSampled %240 = OpLoad %239 
                                       f32_3 %241 = OpLoad %59 
                                       f32_4 %242 = OpImageSampleImplicitLod %240 %241 
                                         f32 %243 = OpCompositeExtract %242 3 
                                                      OpStore %189 %243 
                                         f32 %244 = OpLoad %30 
                                         f32 %245 = OpLoad %189 
                                         f32 %246 = OpFMul %244 %245 
                                                      OpStore %30 %246 
                                Private f32* %247 = OpAccessChain %216 %94 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpLoad %30 
                                         f32 %250 = OpFMul %248 %249 
                                                      OpStore %30 %250 
                                         f32 %251 = OpLoad %30 
                                       f32_3 %252 = OpCompositeConstruct %251 %251 %251 
                              Uniform f32_4* %254 = OpAccessChain %21 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFMul %252 %256 
                                                      OpStore %216 %257 
                                       f32_3 %260 = OpLoad %259 
                                       f32_3 %261 = OpLoad %9 
                                         f32 %262 = OpDot %260 %261 
                                                      OpStore %258 %262 
                                         f32 %263 = OpLoad %258 
                                         f32 %264 = OpExtInst %1 40 %263 %224 
                                                      OpStore %258 %264 
                                       f32_3 %265 = OpLoad %52 
                                       f32_3 %266 = OpLoad %216 
                                       f32_3 %267 = OpFMul %265 %266 
                                                      OpStore %216 %267 
                                         f32 %270 = OpLoad %258 
                                       f32_3 %271 = OpCompositeConstruct %270 %270 %270 
                                       f32_3 %272 = OpLoad %216 
                                       f32_3 %273 = OpFMul %271 %272 
                                       f32_4 %274 = OpLoad %269 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
                                                      OpStore %269 %275 
                                 Output f32* %277 = OpAccessChain %269 %214 
                                                      OpStore %277 %98 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
float u_xlat7;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
        u_xlat7 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat9, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat9 = u_xlat9 * u_xlat10_1.w;
    u_xlat1.xyz = vec3(u_xlat9) * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 251
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %41 %229 %241 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %28 0 RelaxedPrecision 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 RelaxedPrecision 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpMemberDecorate %28 6 RelaxedPrecision 
                                                      OpMemberDecorate %28 6 Offset 28 
                                                      OpMemberDecorate %28 7 Offset 28 
                                                      OpMemberDecorate %28 8 RelaxedPrecision 
                                                      OpMemberDecorate %28 8 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %89 SpecId 89 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 DescriptorSet 212 
                                                      OpDecorate %212 Binding 212 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 Location 229 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %241 Location 241 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                               Private f32_3* %22 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 4 
                                              %26 = OpTypeArray %19 %25 
                                              %27 = OpTypeArray %19 %25 
                                              %28 = OpTypeStruct %19 %19 %19 %26 %7 %7 %19 %27 %19 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 8 
                                              %33 = OpTypePointer Uniform %19 
                                              %38 = OpTypePointer Private %15 
                               Private f32_2* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                                 Input f32_3* %41 = OpVariable Input 
                                          i32 %44 = OpConstant 7 
                                          i32 %45 = OpConstant 1 
                                          i32 %50 = OpConstant 0 
                                          i32 %59 = OpConstant 2 
                                          i32 %69 = OpConstant 3 
                                              %74 = OpTypeBool 
                                              %75 = OpTypePointer Private %74 
                                Private bool* %76 = OpVariable Private 
                                          u32 %77 = OpConstant 0 
                                              %78 = OpTypePointer Uniform %6 
                                          f32 %81 = OpConstant 3.674022E-40 
                                         bool %83 = OpConstantFalse 
                                         bool %89 = OpSpecConstantFalse 
                                          u32 %92 = OpConstant 1 
                                              %96 = OpTypePointer Private %19 
                               Private f32_4* %97 = OpVariable Private 
                                             %136 = OpTypePointer Function %7 
                                         i32 %150 = OpConstant 5 
                                             %151 = OpTypePointer Uniform %7 
                                         i32 %160 = OpConstant 4 
                                             %166 = OpTypePointer Private %6 
                                Private f32* %167 = OpVariable Private 
                                         f32 %170 = OpConstant 3.674022E-40 
                                         f32 %172 = OpConstant 3.674022E-40 
                                Private f32* %174 = OpVariable Private 
                                         u32 %175 = OpConstant 2 
                                         f32 %178 = OpConstant 3.674022E-40 
                                             %185 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %186 = OpTypeSampledImage %185 
                                             %187 = OpTypePointer UniformConstant %186 
 UniformConstant read_only Texture3DSampled* %188 = OpVariable UniformConstant 
                              Private f32_4* %193 = OpVariable Private 
                                         u32 %199 = OpConstant 3 
                              Private f32_3* %201 = OpVariable Private 
                                         f32 %209 = OpConstant 3.674022E-40 
 UniformConstant read_only Texture2DSampled* %212 = OpVariable UniformConstant 
                                         i32 %223 = OpConstant 6 
                                Private f32* %228 = OpVariable Private 
                                Input f32_3* %229 = OpVariable Input 
                                             %240 = OpTypePointer Output %19 
                               Output f32_4* %241 = OpVariable Output 
                                             %248 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %137 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                                        f32_3 %23 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %23 %36 
                                                      OpStore %22 %37 
                                        f32_3 %42 = OpLoad %41 
                                        f32_2 %43 = OpVectorShuffle %42 %42 1 1 
                               Uniform f32_4* %46 = OpAccessChain %30 %44 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %43 %48 
                                                      OpStore %39 %49 
                               Uniform f32_4* %51 = OpAccessChain %30 %44 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                        f32_3 %54 = OpLoad %41 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 0 
                                        f32_2 %56 = OpFMul %53 %55 
                                        f32_2 %57 = OpLoad %39 
                                        f32_2 %58 = OpFAdd %56 %57 
                                                      OpStore %39 %58 
                               Uniform f32_4* %60 = OpAccessChain %30 %44 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                        f32_3 %63 = OpLoad %41 
                                        f32_2 %64 = OpVectorShuffle %63 %63 2 2 
                                        f32_2 %65 = OpFMul %62 %64 
                                        f32_2 %66 = OpLoad %39 
                                        f32_2 %67 = OpFAdd %65 %66 
                                                      OpStore %39 %67 
                                        f32_2 %68 = OpLoad %39 
                               Uniform f32_4* %70 = OpAccessChain %30 %44 %69 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                        f32_2 %73 = OpFAdd %68 %72 
                                                      OpStore %39 %73 
                                 Uniform f32* %79 = OpAccessChain %30 %59 %77 
                                          f32 %80 = OpLoad %79 
                                         bool %82 = OpFOrdEqual %80 %81 
                                                      OpStore %76 %82 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %85 
                                              %84 = OpLabel 
                                         bool %86 = OpLoad %76 
                                                      OpSelectionMerge %88 None 
                                                      OpBranchConditional %86 %87 %88 
                                              %87 = OpLabel 
                                                      OpBranch %88 
                                              %88 = OpLabel 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                                      OpSelectionMerge %91 None 
                                                      OpBranchConditional %89 %90 %195 
                                              %90 = OpLabel 
                                 Uniform f32* %93 = OpAccessChain %30 %59 %92 
                                          f32 %94 = OpLoad %93 
                                         bool %95 = OpFOrdEqual %94 %81 
                                                      OpStore %76 %95 
                                        f32_3 %98 = OpLoad %41 
                                        f32_3 %99 = OpVectorShuffle %98 %98 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %30 %69 %45 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFMul %99 %102 
                                       f32_4 %104 = OpLoad %97 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %97 %105 
                              Uniform f32_4* %106 = OpAccessChain %30 %69 %50 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpLoad %41 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 0 0 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %97 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %97 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %97 %116 
                              Uniform f32_4* %117 = OpAccessChain %30 %69 %59 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpLoad %41 
                                       f32_3 %121 = OpVectorShuffle %120 %120 2 2 2 
                                       f32_3 %122 = OpFMul %119 %121 
                                       f32_4 %123 = OpLoad %97 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_3 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad %97 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 6 3 
                                                      OpStore %97 %127 
                                       f32_4 %128 = OpLoad %97 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                              Uniform f32_4* %130 = OpAccessChain %30 %69 %69 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFAdd %129 %132 
                                       f32_4 %134 = OpLoad %97 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                      OpStore %97 %135 
                                        bool %138 = OpLoad %76 
                                                      OpSelectionMerge %140 None 
                                                      OpBranchConditional %138 %139 %143 
                                             %139 = OpLabel 
                                       f32_4 %141 = OpLoad %97 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                                      OpStore %137 %142 
                                                      OpBranch %140 
                                             %143 = OpLabel 
                                       f32_3 %144 = OpLoad %41 
                                                      OpStore %137 %144 
                                                      OpBranch %140 
                                             %140 = OpLabel 
                                       f32_3 %145 = OpLoad %137 
                                       f32_4 %146 = OpLoad %97 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %97 %147 
                                       f32_4 %148 = OpLoad %97 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_3* %152 = OpAccessChain %30 %150 
                                       f32_3 %153 = OpLoad %152 
                                       f32_3 %154 = OpFNegate %153 
                                       f32_3 %155 = OpFAdd %149 %154 
                                       f32_4 %156 = OpLoad %97 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %97 %157 
                                       f32_4 %158 = OpLoad %97 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                              Uniform f32_3* %161 = OpAccessChain %30 %160 
                                       f32_3 %162 = OpLoad %161 
                                       f32_3 %163 = OpFMul %159 %162 
                                       f32_4 %164 = OpLoad %97 
                                       f32_4 %165 = OpVectorShuffle %164 %163 0 4 5 6 
                                                      OpStore %97 %165 
                                Private f32* %168 = OpAccessChain %97 %92 
                                         f32 %169 = OpLoad %168 
                                         f32 %171 = OpFMul %169 %170 
                                         f32 %173 = OpFAdd %171 %172 
                                                      OpStore %167 %173 
                                Uniform f32* %176 = OpAccessChain %30 %59 %175 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpFMul %177 %178 
                                         f32 %180 = OpFAdd %179 %172 
                                                      OpStore %174 %180 
                                         f32 %181 = OpLoad %167 
                                         f32 %182 = OpLoad %174 
                                         f32 %183 = OpExtInst %1 40 %181 %182 
                                Private f32* %184 = OpAccessChain %97 %77 
                                                      OpStore %184 %183 
                  read_only Texture3DSampled %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %97 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 2 3 
                                       f32_4 %192 = OpImageSampleImplicitLod %189 %191 
                                                      OpStore %97 %192 
                                       f32_4 %194 = OpLoad %97 
                                                      OpStore %193 %194 
                                                      OpBranch %91 
                                             %195 = OpLabel 
                                Private f32* %196 = OpAccessChain %193 %77 
                                                      OpStore %196 %81 
                                Private f32* %197 = OpAccessChain %193 %92 
                                                      OpStore %197 %81 
                                Private f32* %198 = OpAccessChain %193 %175 
                                                      OpStore %198 %81 
                                Private f32* %200 = OpAccessChain %193 %199 
                                                      OpStore %200 %81 
                                                      OpBranch %91 
                                              %91 = OpLabel 
                                       f32_4 %202 = OpLoad %193 
                              Uniform f32_4* %203 = OpAccessChain %30 %45 
                                       f32_4 %204 = OpLoad %203 
                                         f32 %205 = OpDot %202 %204 
                                Private f32* %206 = OpAccessChain %201 %77 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %201 %77 
                                         f32 %208 = OpLoad %207 
                                         f32 %210 = OpExtInst %1 43 %208 %209 %81 
                                Private f32* %211 = OpAccessChain %201 %77 
                                                      OpStore %211 %210 
                  read_only Texture2DSampled %213 = OpLoad %212 
                                       f32_2 %214 = OpLoad %39 
                                       f32_4 %215 = OpImageSampleImplicitLod %213 %214 
                                         f32 %216 = OpCompositeExtract %215 3 
                                                      OpStore %167 %216 
                                Private f32* %217 = OpAccessChain %201 %77 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpLoad %167 
                                         f32 %220 = OpFMul %218 %219 
                                                      OpStore %167 %220 
                                         f32 %221 = OpLoad %167 
                                       f32_3 %222 = OpCompositeConstruct %221 %221 %221 
                              Uniform f32_4* %224 = OpAccessChain %30 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpFMul %222 %226 
                                                      OpStore %201 %227 
                                       f32_3 %230 = OpLoad %229 
                              Uniform f32_4* %231 = OpAccessChain %30 %50 
                                       f32_4 %232 = OpLoad %231 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                         f32 %234 = OpDot %230 %233 
                                                      OpStore %228 %234 
                                         f32 %235 = OpLoad %228 
                                         f32 %236 = OpExtInst %1 40 %235 %209 
                                                      OpStore %228 %236 
                                       f32_3 %237 = OpLoad %22 
                                       f32_3 %238 = OpLoad %201 
                                       f32_3 %239 = OpFMul %237 %238 
                                                      OpStore %201 %239 
                                         f32 %242 = OpLoad %228 
                                       f32_3 %243 = OpCompositeConstruct %242 %242 %242 
                                       f32_3 %244 = OpLoad %201 
                                       f32_3 %245 = OpFMul %243 %244 
                                       f32_4 %246 = OpLoad %241 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %241 %247 
                                 Output f32* %249 = OpAccessChain %241 %199 
                                                      OpStore %249 %81 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
}
}
 Pass {
  Name "PREPASS"
  LOD 200
  Tags { "LIGHTMODE" = "PREPASSBASE" "RenderType" = "Opaque" }
  GpuProgramID 156603
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec3 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

in  vec3 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 138
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %96 %126 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate %126 Location 126 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypePointer Input %50 
                                 Input f32_3* %96 = OpVariable Input 
                                         u32 %102 = OpConstant 0 
                                             %103 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 2 
                                Private f32* %118 = OpVariable Private 
                               Output f32_3* %126 = OpVariable Output 
                                             %132 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_3 %97 = OpLoad %96 
                               Uniform f32_4* %98 = OpAccessChain %21 %24 %23 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                         f32 %101 = OpDot %97 %100 
                                Private f32* %104 = OpAccessChain %9 %102 
                                                      OpStore %104 %101 
                                       f32_3 %105 = OpLoad %96 
                              Uniform f32_4* %106 = OpAccessChain %21 %24 %24 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %105 %108 
                                Private f32* %110 = OpAccessChain %9 %81 
                                                      OpStore %110 %109 
                                       f32_3 %111 = OpLoad %96 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %36 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %117 = OpAccessChain %9 %116 
                                                      OpStore %117 %115 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %9 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %120 %122 
                                                      OpStore %118 %123 
                                         f32 %124 = OpLoad %118 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %118 %125 
                                         f32 %127 = OpLoad %118 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %128 %130 
                                                      OpStore %126 %131 
                                 Output f32* %133 = OpAccessChain %85 %23 %81 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFNegate %134 
                                 Output f32* %136 = OpAccessChain %85 %23 %81 
                                                      OpStore %136 %135 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 26
; Schema: 0
                     OpCapability Shader 
              %1 = OpExtInstImport "GLSL.std.450" 
                     OpMemoryModel Logical GLSL450 
                     OpEntryPoint Fragment %4 "main" %9 %12 
                     OpExecutionMode %4 OriginUpperLeft 
                     OpDecorate %9 RelaxedPrecision 
                     OpDecorate %9 Location 9 
                     OpDecorate %12 Location 12 
              %2 = OpTypeVoid 
              %3 = OpTypeFunction %2 
              %6 = OpTypeFloat 32 
              %7 = OpTypeVector %6 4 
              %8 = OpTypePointer Output %7 
Output f32_4* %9 = OpVariable Output 
             %10 = OpTypeVector %6 3 
             %11 = OpTypePointer Input %10 
Input f32_3* %12 = OpVariable Input 
         f32 %14 = OpConstant 3.674022E-40 
       f32_3 %15 = OpConstantComposite %14 %14 %14 
         f32 %20 = OpConstant 3.674022E-40 
             %21 = OpTypeInt 32 0 
         u32 %22 = OpConstant 3 
             %23 = OpTypePointer Output %6 
         void %4 = OpFunction None %3 
              %5 = OpLabel 
       f32_3 %13 = OpLoad %12 
       f32_3 %16 = OpFMul %13 %15 
       f32_3 %17 = OpFAdd %16 %15 
       f32_4 %18 = OpLoad %9 
       f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
                     OpStore %9 %19 
 Output f32* %24 = OpAccessChain %9 %22 
                     OpStore %24 %20 
                     OpReturn
                     OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
 Pass {
  Name "PREPASS"
  LOD 200
  Tags { "LIGHTMODE" = "PREPASSFINAL" "RenderType" = "Opaque" }
  ZWrite Off
  GpuProgramID 259371
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat16_0.xyz = log2(u_xlat10_0.xyz);
    u_xlat0.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %283 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                               Output f32_2* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                               Output f32_4* %129 = OpVariable Output 
                               Output f32_4* %141 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                               Output f32_3* %283 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore %100 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad %129 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore %129 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %129 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore %129 %140 
                                                      OpStore %141 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore %283 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 73
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %12 %37 %44 %61 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %12 Location 12 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %25 RelaxedPrecision 
                                                    OpDecorate %25 DescriptorSet 25 
                                                    OpDecorate %25 Binding 25 
                                                    OpDecorate %26 RelaxedPrecision 
                                                    OpDecorate %30 RelaxedPrecision 
                                                    OpDecorate %31 RelaxedPrecision 
                                                    OpDecorate %32 RelaxedPrecision 
                                                    OpDecorate %33 RelaxedPrecision 
                                                    OpDecorate %34 RelaxedPrecision 
                                                    OpDecorate %35 RelaxedPrecision 
                                                    OpDecorate %37 Location 37 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %41 RelaxedPrecision 
                                                    OpDecorate %41 DescriptorSet 41 
                                                    OpDecorate %41 Binding 41 
                                                    OpDecorate %42 RelaxedPrecision 
                                                    OpDecorate %44 Location 44 
                                                    OpDecorate %47 RelaxedPrecision 
                                                    OpDecorate %48 RelaxedPrecision 
                                                    OpDecorate %49 RelaxedPrecision 
                                                    OpMemberDecorate %50 0 RelaxedPrecision 
                                                    OpMemberDecorate %50 0 Offset 50 
                                                    OpDecorate %50 Block 
                                                    OpDecorate %52 DescriptorSet 52 
                                                    OpDecorate %52 Binding 52 
                                                    OpDecorate %57 RelaxedPrecision 
                                                    OpDecorate %58 RelaxedPrecision 
                                                    OpDecorate %59 RelaxedPrecision 
                                                    OpDecorate %61 RelaxedPrecision 
                                                    OpDecorate %61 Location 61 
                                                    OpDecorate %63 RelaxedPrecision 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 3 
                                             %8 = OpTypePointer Private %7 
                              Private f32_3* %9 = OpVariable Private 
                                            %10 = OpTypeVector %6 4 
                                            %11 = OpTypePointer Input %10 
                               Input f32_4* %12 = OpVariable Input 
                                            %13 = OpTypeVector %6 2 
                             Private f32_3* %21 = OpVariable Private 
                                            %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %23 = OpTypeSampledImage %22 
                                            %24 = OpTypePointer UniformConstant %23 
UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                             Private f32_3* %31 = OpVariable Private 
                                            %36 = OpTypePointer Input %7 
                               Input f32_3* %37 = OpVariable Input 
                             Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2DSampled* %41 = OpVariable UniformConstant 
                                            %43 = OpTypePointer Input %13 
                               Input f32_2* %44 = OpVariable Input 
                             Private f32_3* %48 = OpVariable Private 
                                            %50 = OpTypeStruct %10 
                                            %51 = OpTypePointer Uniform %50 
                   Uniform struct {f32_4;}* %52 = OpVariable Uniform 
                                            %53 = OpTypeInt 32 1 
                                        i32 %54 = OpConstant 0 
                                            %55 = OpTypePointer Uniform %10 
                                            %60 = OpTypePointer Output %10 
                              Output f32_4* %61 = OpVariable Output 
                                        f32 %67 = OpConstant 3.674022E-40 
                                            %68 = OpTypeInt 32 0 
                                        u32 %69 = OpConstant 3 
                                            %70 = OpTypePointer Output %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                                      f32_4 %14 = OpLoad %12 
                                      f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                      f32_4 %16 = OpLoad %12 
                                      f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                      f32_2 %18 = OpFDiv %15 %17 
                                      f32_3 %19 = OpLoad %9 
                                      f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                                    OpStore %9 %20 
                 read_only Texture2DSampled %26 = OpLoad %25 
                                      f32_3 %27 = OpLoad %9 
                                      f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                      f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                      f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                                    OpStore %21 %30 
                                      f32_3 %32 = OpLoad %21 
                                      f32_3 %33 = OpExtInst %1 30 %32 
                                                    OpStore %31 %33 
                                      f32_3 %34 = OpLoad %31 
                                      f32_3 %35 = OpFNegate %34 
                                      f32_3 %38 = OpLoad %37 
                                      f32_3 %39 = OpFAdd %35 %38 
                                                    OpStore %9 %39 
                 read_only Texture2DSampled %42 = OpLoad %41 
                                      f32_2 %45 = OpLoad %44 
                                      f32_4 %46 = OpImageSampleImplicitLod %42 %45 
                                      f32_3 %47 = OpVectorShuffle %46 %46 0 1 2 
                                                    OpStore %40 %47 
                                      f32_3 %49 = OpLoad %40 
                             Uniform f32_4* %56 = OpAccessChain %52 %54 
                                      f32_4 %57 = OpLoad %56 
                                      f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                                      f32_3 %59 = OpFMul %49 %58 
                                                    OpStore %48 %59 
                                      f32_3 %62 = OpLoad %9 
                                      f32_3 %63 = OpLoad %48 
                                      f32_3 %64 = OpFMul %62 %63 
                                      f32_4 %65 = OpLoad %61 
                                      f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                                    OpStore %61 %66 
                                Output f32* %71 = OpAccessChain %61 %69 
                                                    OpStore %71 %67 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat16_0.xyz = log2(u_xlat10_0.xyz);
    u_xlat0.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %283 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                               Output f32_2* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                               Output f32_4* %129 = OpVariable Output 
                               Output f32_4* %141 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                               Output f32_3* %283 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore %100 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad %129 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore %129 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %129 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore %129 %140 
                                                      OpStore %141 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore %283 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 73
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %12 %37 %44 %61 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %12 Location 12 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %25 RelaxedPrecision 
                                                    OpDecorate %25 DescriptorSet 25 
                                                    OpDecorate %25 Binding 25 
                                                    OpDecorate %26 RelaxedPrecision 
                                                    OpDecorate %30 RelaxedPrecision 
                                                    OpDecorate %31 RelaxedPrecision 
                                                    OpDecorate %32 RelaxedPrecision 
                                                    OpDecorate %33 RelaxedPrecision 
                                                    OpDecorate %34 RelaxedPrecision 
                                                    OpDecorate %35 RelaxedPrecision 
                                                    OpDecorate %37 Location 37 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %41 RelaxedPrecision 
                                                    OpDecorate %41 DescriptorSet 41 
                                                    OpDecorate %41 Binding 41 
                                                    OpDecorate %42 RelaxedPrecision 
                                                    OpDecorate %44 Location 44 
                                                    OpDecorate %47 RelaxedPrecision 
                                                    OpDecorate %48 RelaxedPrecision 
                                                    OpDecorate %49 RelaxedPrecision 
                                                    OpMemberDecorate %50 0 RelaxedPrecision 
                                                    OpMemberDecorate %50 0 Offset 50 
                                                    OpDecorate %50 Block 
                                                    OpDecorate %52 DescriptorSet 52 
                                                    OpDecorate %52 Binding 52 
                                                    OpDecorate %57 RelaxedPrecision 
                                                    OpDecorate %58 RelaxedPrecision 
                                                    OpDecorate %59 RelaxedPrecision 
                                                    OpDecorate %61 RelaxedPrecision 
                                                    OpDecorate %61 Location 61 
                                                    OpDecorate %63 RelaxedPrecision 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 3 
                                             %8 = OpTypePointer Private %7 
                              Private f32_3* %9 = OpVariable Private 
                                            %10 = OpTypeVector %6 4 
                                            %11 = OpTypePointer Input %10 
                               Input f32_4* %12 = OpVariable Input 
                                            %13 = OpTypeVector %6 2 
                             Private f32_3* %21 = OpVariable Private 
                                            %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %23 = OpTypeSampledImage %22 
                                            %24 = OpTypePointer UniformConstant %23 
UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                             Private f32_3* %31 = OpVariable Private 
                                            %36 = OpTypePointer Input %7 
                               Input f32_3* %37 = OpVariable Input 
                             Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2DSampled* %41 = OpVariable UniformConstant 
                                            %43 = OpTypePointer Input %13 
                               Input f32_2* %44 = OpVariable Input 
                             Private f32_3* %48 = OpVariable Private 
                                            %50 = OpTypeStruct %10 
                                            %51 = OpTypePointer Uniform %50 
                   Uniform struct {f32_4;}* %52 = OpVariable Uniform 
                                            %53 = OpTypeInt 32 1 
                                        i32 %54 = OpConstant 0 
                                            %55 = OpTypePointer Uniform %10 
                                            %60 = OpTypePointer Output %10 
                              Output f32_4* %61 = OpVariable Output 
                                        f32 %67 = OpConstant 3.674022E-40 
                                            %68 = OpTypeInt 32 0 
                                        u32 %69 = OpConstant 3 
                                            %70 = OpTypePointer Output %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                                      f32_4 %14 = OpLoad %12 
                                      f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                      f32_4 %16 = OpLoad %12 
                                      f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                      f32_2 %18 = OpFDiv %15 %17 
                                      f32_3 %19 = OpLoad %9 
                                      f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                                    OpStore %9 %20 
                 read_only Texture2DSampled %26 = OpLoad %25 
                                      f32_3 %27 = OpLoad %9 
                                      f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                      f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                      f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                                    OpStore %21 %30 
                                      f32_3 %32 = OpLoad %21 
                                      f32_3 %33 = OpExtInst %1 30 %32 
                                                    OpStore %31 %33 
                                      f32_3 %34 = OpLoad %31 
                                      f32_3 %35 = OpFNegate %34 
                                      f32_3 %38 = OpLoad %37 
                                      f32_3 %39 = OpFAdd %35 %38 
                                                    OpStore %9 %39 
                 read_only Texture2DSampled %42 = OpLoad %41 
                                      f32_2 %45 = OpLoad %44 
                                      f32_4 %46 = OpImageSampleImplicitLod %42 %45 
                                      f32_3 %47 = OpVectorShuffle %46 %46 0 1 2 
                                                    OpStore %40 %47 
                                      f32_3 %49 = OpLoad %40 
                             Uniform f32_4* %56 = OpAccessChain %52 %54 
                                      f32_4 %57 = OpLoad %56 
                                      f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                                      f32_3 %59 = OpFMul %49 %58 
                                                    OpStore %48 %59 
                                      f32_3 %62 = OpLoad %9 
                                      f32_3 %63 = OpLoad %48 
                                      f32_3 %64 = OpFMul %62 %63 
                                      f32_4 %65 = OpLoad %61 
                                      f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                                    OpStore %61 %66 
                                Output f32* %71 = OpAccessChain %61 %69 
                                                    OpStore %71 %67 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %283 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                               Output f32_2* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                               Output f32_4* %129 = OpVariable Output 
                               Output f32_4* %141 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                               Output f32_3* %283 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore %100 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad %129 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore %129 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %129 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore %129 %140 
                                                      OpStore %141 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore %283 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 69
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %12 %33 %40 %57 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %12 Location 12 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %25 RelaxedPrecision 
                                                    OpDecorate %25 DescriptorSet 25 
                                                    OpDecorate %25 Binding 25 
                                                    OpDecorate %26 RelaxedPrecision 
                                                    OpDecorate %30 RelaxedPrecision 
                                                    OpDecorate %31 RelaxedPrecision 
                                                    OpDecorate %33 Location 33 
                                                    OpDecorate %36 RelaxedPrecision 
                                                    OpDecorate %37 RelaxedPrecision 
                                                    OpDecorate %37 DescriptorSet 37 
                                                    OpDecorate %37 Binding 37 
                                                    OpDecorate %38 RelaxedPrecision 
                                                    OpDecorate %40 Location 40 
                                                    OpDecorate %43 RelaxedPrecision 
                                                    OpDecorate %44 RelaxedPrecision 
                                                    OpDecorate %45 RelaxedPrecision 
                                                    OpMemberDecorate %46 0 RelaxedPrecision 
                                                    OpMemberDecorate %46 0 Offset 46 
                                                    OpDecorate %46 Block 
                                                    OpDecorate %48 DescriptorSet 48 
                                                    OpDecorate %48 Binding 48 
                                                    OpDecorate %53 RelaxedPrecision 
                                                    OpDecorate %54 RelaxedPrecision 
                                                    OpDecorate %55 RelaxedPrecision 
                                                    OpDecorate %57 RelaxedPrecision 
                                                    OpDecorate %57 Location 57 
                                                    OpDecorate %59 RelaxedPrecision 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 3 
                                             %8 = OpTypePointer Private %7 
                              Private f32_3* %9 = OpVariable Private 
                                            %10 = OpTypeVector %6 4 
                                            %11 = OpTypePointer Input %10 
                               Input f32_4* %12 = OpVariable Input 
                                            %13 = OpTypeVector %6 2 
                             Private f32_3* %21 = OpVariable Private 
                                            %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %23 = OpTypeSampledImage %22 
                                            %24 = OpTypePointer UniformConstant %23 
UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                            %32 = OpTypePointer Input %7 
                               Input f32_3* %33 = OpVariable Input 
                             Private f32_3* %36 = OpVariable Private 
UniformConstant read_only Texture2DSampled* %37 = OpVariable UniformConstant 
                                            %39 = OpTypePointer Input %13 
                               Input f32_2* %40 = OpVariable Input 
                             Private f32_3* %44 = OpVariable Private 
                                            %46 = OpTypeStruct %10 
                                            %47 = OpTypePointer Uniform %46 
                   Uniform struct {f32_4;}* %48 = OpVariable Uniform 
                                            %49 = OpTypeInt 32 1 
                                        i32 %50 = OpConstant 0 
                                            %51 = OpTypePointer Uniform %10 
                                            %56 = OpTypePointer Output %10 
                              Output f32_4* %57 = OpVariable Output 
                                        f32 %63 = OpConstant 3.674022E-40 
                                            %64 = OpTypeInt 32 0 
                                        u32 %65 = OpConstant 3 
                                            %66 = OpTypePointer Output %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                                      f32_4 %14 = OpLoad %12 
                                      f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                      f32_4 %16 = OpLoad %12 
                                      f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                      f32_2 %18 = OpFDiv %15 %17 
                                      f32_3 %19 = OpLoad %9 
                                      f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                                    OpStore %9 %20 
                 read_only Texture2DSampled %26 = OpLoad %25 
                                      f32_3 %27 = OpLoad %9 
                                      f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                      f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                      f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                                    OpStore %21 %30 
                                      f32_3 %31 = OpLoad %21 
                                      f32_3 %34 = OpLoad %33 
                                      f32_3 %35 = OpFAdd %31 %34 
                                                    OpStore %9 %35 
                 read_only Texture2DSampled %38 = OpLoad %37 
                                      f32_2 %41 = OpLoad %40 
                                      f32_4 %42 = OpImageSampleImplicitLod %38 %41 
                                      f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                                    OpStore %36 %43 
                                      f32_3 %45 = OpLoad %36 
                             Uniform f32_4* %52 = OpAccessChain %48 %50 
                                      f32_4 %53 = OpLoad %52 
                                      f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                      f32_3 %55 = OpFMul %45 %54 
                                                    OpStore %44 %55 
                                      f32_3 %58 = OpLoad %9 
                                      f32_3 %59 = OpLoad %44 
                                      f32_3 %60 = OpFMul %58 %59 
                                      f32_4 %61 = OpLoad %57 
                                      f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
                                                    OpStore %57 %62 
                                Output f32* %67 = OpAccessChain %57 %65 
                                                    OpStore %67 %63 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 200
  Tags { "LIGHTMODE" = "DEFERRED" "RenderType" = "Opaque" }
  GpuProgramID 310841
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec3 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %263 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                                Output f32_2* %99 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                               Output f32_3* %151 = OpVariable Output 
                               Output f32_4* %154 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                                             %157 = OpTypePointer Private %51 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                       f32_3 %230 = OpConstantComposite %155 %155 %155 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                               Output f32_3* %263 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore %99 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                                      OpStore %154 %156 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %83 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %120 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %120 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %120 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %83 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %134 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %9 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %9 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %120 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %9 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %83 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %9 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %134 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %158 %231 
                                       f32_3 %232 = OpLoad %158 
                                       f32_3 %233 = OpExtInst %1 30 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpExtInst %1 29 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %9 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 40 %259 %230 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                                      OpStore %263 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 75
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %35 %42 %45 %56 %61 %71 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %22 RelaxedPrecision 
                                                    OpDecorate %23 RelaxedPrecision 
                                                    OpMemberDecorate %24 0 RelaxedPrecision 
                                                    OpMemberDecorate %24 0 Offset 24 
                                                    OpDecorate %24 Block 
                                                    OpDecorate %26 DescriptorSet 26 
                                                    OpDecorate %26 Binding 26 
                                                    OpDecorate %31 RelaxedPrecision 
                                                    OpDecorate %32 RelaxedPrecision 
                                                    OpDecorate %33 RelaxedPrecision 
                                                    OpDecorate %35 RelaxedPrecision 
                                                    OpDecorate %35 Location 35 
                                                    OpDecorate %36 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %42 RelaxedPrecision 
                                                    OpDecorate %42 Location 42 
                                                    OpDecorate %43 RelaxedPrecision 
                                                    OpDecorate %44 RelaxedPrecision 
                                                    OpDecorate %45 RelaxedPrecision 
                                                    OpDecorate %45 Location 45 
                                                    OpDecorate %46 RelaxedPrecision 
                                                    OpDecorate %47 RelaxedPrecision 
                                                    OpDecorate %48 RelaxedPrecision 
                                                    OpDecorate %56 RelaxedPrecision 
                                                    OpDecorate %56 Location 56 
                                                    OpDecorate %61 Location 61 
                                                    OpDecorate %71 RelaxedPrecision 
                                                    OpDecorate %71 Location 71 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 3 
                                             %8 = OpTypePointer Private %7 
                              Private f32_3* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %19 = OpTypeVector %6 4 
                             Private f32_3* %22 = OpVariable Private 
                                            %24 = OpTypeStruct %19 
                                            %25 = OpTypePointer Uniform %24 
                   Uniform struct {f32_4;}* %26 = OpVariable Uniform 
                                            %27 = OpTypeInt 32 1 
                                        i32 %28 = OpConstant 0 
                                            %29 = OpTypePointer Uniform %19 
                                            %34 = OpTypePointer Output %19 
                              Output f32_4* %35 = OpVariable Output 
                             Private f32_3* %39 = OpVariable Private 
                                            %41 = OpTypePointer Input %7 
                               Input f32_3* %42 = OpVariable Input 
                              Output f32_4* %45 = OpVariable Output 
                                        f32 %51 = OpConstant 3.674022E-40 
                                            %52 = OpTypeInt 32 0 
                                        u32 %53 = OpConstant 3 
                                            %54 = OpTypePointer Output %6 
                              Output f32_4* %56 = OpVariable Output 
                                        f32 %57 = OpConstant 3.674022E-40 
                                      f32_4 %58 = OpConstantComposite %57 %57 %57 %57 
                                            %59 = OpTypePointer Private %19 
                             Private f32_4* %60 = OpVariable Private 
                               Input f32_3* %61 = OpVariable Input 
                                        f32 %63 = OpConstant 3.674022E-40 
                                      f32_3 %64 = OpConstantComposite %63 %63 %63 
                                            %69 = OpTypePointer Private %6 
                              Output f32_4* %71 = OpVariable Output 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                      f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                    OpStore %9 %21 
                                      f32_3 %23 = OpLoad %9 
                             Uniform f32_4* %30 = OpAccessChain %26 %28 
                                      f32_4 %31 = OpLoad %30 
                                      f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                      f32_3 %33 = OpFMul %23 %32 
                                                    OpStore %22 %33 
                                      f32_3 %36 = OpLoad %22 
                                      f32_4 %37 = OpLoad %35 
                                      f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                    OpStore %35 %38 
                                      f32_3 %40 = OpLoad %22 
                                      f32_3 %43 = OpLoad %42 
                                      f32_3 %44 = OpFMul %40 %43 
                                                    OpStore %39 %44 
                                      f32_3 %46 = OpLoad %39 
                                      f32_3 %47 = OpFNegate %46 
                                      f32_3 %48 = OpExtInst %1 29 %47 
                                      f32_4 %49 = OpLoad %45 
                                      f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                                    OpStore %45 %50 
                                Output f32* %55 = OpAccessChain %35 %53 
                                                    OpStore %55 %51 
                                                    OpStore %56 %58 
                                      f32_3 %62 = OpLoad %61 
                                      f32_3 %65 = OpFMul %62 %64 
                                      f32_3 %66 = OpFAdd %65 %64 
                                      f32_4 %67 = OpLoad %60 
                                      f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                                    OpStore %60 %68 
                               Private f32* %70 = OpAccessChain %60 %53 
                                                    OpStore %70 %51 
                                      f32_4 %72 = OpLoad %60 
                                                    OpStore %71 %72 
                                Output f32* %73 = OpAccessChain %45 %53 
                                                    OpStore %73 %51 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %146 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                               Output f32_4* %146 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                                      OpStore %146 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 65
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %35 %44 %50 %60 %62 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %22 RelaxedPrecision 
                                                    OpDecorate %23 RelaxedPrecision 
                                                    OpMemberDecorate %24 0 RelaxedPrecision 
                                                    OpMemberDecorate %24 0 Offset 24 
                                                    OpDecorate %24 Block 
                                                    OpDecorate %26 DescriptorSet 26 
                                                    OpDecorate %26 Binding 26 
                                                    OpDecorate %31 RelaxedPrecision 
                                                    OpDecorate %32 RelaxedPrecision 
                                                    OpDecorate %33 RelaxedPrecision 
                                                    OpDecorate %35 RelaxedPrecision 
                                                    OpDecorate %35 Location 35 
                                                    OpDecorate %36 RelaxedPrecision 
                                                    OpDecorate %44 RelaxedPrecision 
                                                    OpDecorate %44 Location 44 
                                                    OpDecorate %50 Location 50 
                                                    OpDecorate %60 RelaxedPrecision 
                                                    OpDecorate %60 Location 60 
                                                    OpDecorate %62 RelaxedPrecision 
                                                    OpDecorate %62 Location 62 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 3 
                                             %8 = OpTypePointer Private %7 
                              Private f32_3* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %19 = OpTypeVector %6 4 
                             Private f32_3* %22 = OpVariable Private 
                                            %24 = OpTypeStruct %19 
                                            %25 = OpTypePointer Uniform %24 
                   Uniform struct {f32_4;}* %26 = OpVariable Uniform 
                                            %27 = OpTypeInt 32 1 
                                        i32 %28 = OpConstant 0 
                                            %29 = OpTypePointer Uniform %19 
                                            %34 = OpTypePointer Output %19 
                              Output f32_4* %35 = OpVariable Output 
                                        f32 %39 = OpConstant 3.674022E-40 
                                            %40 = OpTypeInt 32 0 
                                        u32 %41 = OpConstant 3 
                                            %42 = OpTypePointer Output %6 
                              Output f32_4* %44 = OpVariable Output 
                                        f32 %45 = OpConstant 3.674022E-40 
                                      f32_4 %46 = OpConstantComposite %45 %45 %45 %45 
                                            %47 = OpTypePointer Private %19 
                             Private f32_4* %48 = OpVariable Private 
                                            %49 = OpTypePointer Input %7 
                               Input f32_3* %50 = OpVariable Input 
                                        f32 %52 = OpConstant 3.674022E-40 
                                      f32_3 %53 = OpConstantComposite %52 %52 %52 
                                            %58 = OpTypePointer Private %6 
                              Output f32_4* %60 = OpVariable Output 
                              Output f32_4* %62 = OpVariable Output 
                                      f32_4 %63 = OpConstantComposite %39 %39 %39 %39 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                      f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                    OpStore %9 %21 
                                      f32_3 %23 = OpLoad %9 
                             Uniform f32_4* %30 = OpAccessChain %26 %28 
                                      f32_4 %31 = OpLoad %30 
                                      f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                      f32_3 %33 = OpFMul %23 %32 
                                                    OpStore %22 %33 
                                      f32_3 %36 = OpLoad %22 
                                      f32_4 %37 = OpLoad %35 
                                      f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                    OpStore %35 %38 
                                Output f32* %43 = OpAccessChain %35 %41 
                                                    OpStore %43 %39 
                                                    OpStore %44 %46 
                                      f32_3 %51 = OpLoad %50 
                                      f32_3 %54 = OpFMul %51 %53 
                                      f32_3 %55 = OpFAdd %54 %53 
                                      f32_4 %56 = OpLoad %48 
                                      f32_4 %57 = OpVectorShuffle %56 %55 4 5 6 3 
                                                    OpStore %48 %57 
                               Private f32* %59 = OpAccessChain %48 %41 
                                                    OpStore %59 %39 
                                      f32_4 %61 = OpLoad %48 
                                                    OpStore %60 %61 
                                                    OpStore %62 %63 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec3 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target3.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %263 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                                Output f32_2* %99 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                               Output f32_3* %151 = OpVariable Output 
                               Output f32_4* %154 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                                             %157 = OpTypePointer Private %51 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                       f32_3 %230 = OpConstantComposite %155 %155 %155 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                               Output f32_3* %263 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore %99 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                                      OpStore %154 %156 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %83 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %120 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %120 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %120 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %83 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %134 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %9 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %9 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %120 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %9 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %83 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %9 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %134 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %158 %231 
                                       f32_3 %232 = OpLoad %158 
                                       f32_3 %233 = OpExtInst %1 30 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpExtInst %1 29 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %9 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 40 %259 %230 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                                      OpStore %263 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 71
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %35 %39 %42 %52 %57 %67 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %22 RelaxedPrecision 
                                                    OpDecorate %23 RelaxedPrecision 
                                                    OpMemberDecorate %24 0 RelaxedPrecision 
                                                    OpMemberDecorate %24 0 Offset 24 
                                                    OpDecorate %24 Block 
                                                    OpDecorate %26 DescriptorSet 26 
                                                    OpDecorate %26 Binding 26 
                                                    OpDecorate %31 RelaxedPrecision 
                                                    OpDecorate %32 RelaxedPrecision 
                                                    OpDecorate %33 RelaxedPrecision 
                                                    OpDecorate %35 RelaxedPrecision 
                                                    OpDecorate %35 Location 35 
                                                    OpDecorate %36 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %39 Location 39 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %42 RelaxedPrecision 
                                                    OpDecorate %42 Location 42 
                                                    OpDecorate %43 RelaxedPrecision 
                                                    OpDecorate %44 RelaxedPrecision 
                                                    OpDecorate %52 RelaxedPrecision 
                                                    OpDecorate %52 Location 52 
                                                    OpDecorate %57 Location 57 
                                                    OpDecorate %67 RelaxedPrecision 
                                                    OpDecorate %67 Location 67 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 3 
                                             %8 = OpTypePointer Private %7 
                              Private f32_3* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %19 = OpTypeVector %6 4 
                             Private f32_3* %22 = OpVariable Private 
                                            %24 = OpTypeStruct %19 
                                            %25 = OpTypePointer Uniform %24 
                   Uniform struct {f32_4;}* %26 = OpVariable Uniform 
                                            %27 = OpTypeInt 32 1 
                                        i32 %28 = OpConstant 0 
                                            %29 = OpTypePointer Uniform %19 
                                            %34 = OpTypePointer Output %19 
                              Output f32_4* %35 = OpVariable Output 
                              Output f32_4* %39 = OpVariable Output 
                                            %41 = OpTypePointer Input %7 
                               Input f32_3* %42 = OpVariable Input 
                                        f32 %47 = OpConstant 3.674022E-40 
                                            %48 = OpTypeInt 32 0 
                                        u32 %49 = OpConstant 3 
                                            %50 = OpTypePointer Output %6 
                              Output f32_4* %52 = OpVariable Output 
                                        f32 %53 = OpConstant 3.674022E-40 
                                      f32_4 %54 = OpConstantComposite %53 %53 %53 %53 
                                            %55 = OpTypePointer Private %19 
                             Private f32_4* %56 = OpVariable Private 
                               Input f32_3* %57 = OpVariable Input 
                                        f32 %59 = OpConstant 3.674022E-40 
                                      f32_3 %60 = OpConstantComposite %59 %59 %59 
                                            %65 = OpTypePointer Private %6 
                              Output f32_4* %67 = OpVariable Output 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                      f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                    OpStore %9 %21 
                                      f32_3 %23 = OpLoad %9 
                             Uniform f32_4* %30 = OpAccessChain %26 %28 
                                      f32_4 %31 = OpLoad %30 
                                      f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                      f32_3 %33 = OpFMul %23 %32 
                                                    OpStore %22 %33 
                                      f32_3 %36 = OpLoad %22 
                                      f32_4 %37 = OpLoad %35 
                                      f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                    OpStore %35 %38 
                                      f32_3 %40 = OpLoad %22 
                                      f32_3 %43 = OpLoad %42 
                                      f32_3 %44 = OpFMul %40 %43 
                                      f32_4 %45 = OpLoad %39 
                                      f32_4 %46 = OpVectorShuffle %45 %44 4 5 6 3 
                                                    OpStore %39 %46 
                                Output f32* %51 = OpAccessChain %35 %49 
                                                    OpStore %51 %47 
                                                    OpStore %52 %54 
                                      f32_3 %58 = OpLoad %57 
                                      f32_3 %61 = OpFMul %58 %60 
                                      f32_3 %62 = OpFAdd %61 %60 
                                      f32_4 %63 = OpLoad %56 
                                      f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                    OpStore %56 %64 
                               Private f32* %66 = OpAccessChain %56 %49 
                                                    OpStore %66 %47 
                                      f32_4 %68 = OpLoad %56 
                                                    OpStore %67 %68 
                                Output f32* %69 = OpAccessChain %39 %49 
                                                    OpStore %69 %47 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
}
}
 Pass {
  Name "META"
  LOD 200
  Tags { "LIGHTMODE" = "META" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 333421
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat3 = unity_OneOverOutputBoost;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 237
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %177 %178 %221 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %221 Location 221 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                             %176 = OpTypePointer Output %33 
                               Output f32_2* %177 = OpVariable Output 
                                Input f32_4* %178 = OpVariable Input 
                                         i32 %181 = OpConstant 5 
                                             %220 = OpTypePointer Output %56 
                               Output f32_3* %221 = OpVariable Output 
                                             %231 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                              Uniform f32_4* %182 = OpAccessChain %42 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFMul %180 %184 
                              Uniform f32_4* %186 = OpAccessChain %42 %181 
                                       f32_4 %187 = OpLoad %186 
                                       f32_2 %188 = OpVectorShuffle %187 %187 2 3 
                                       f32_2 %189 = OpFAdd %185 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %13 
                                       f32_3 %191 = OpVectorShuffle %190 %190 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %42 %120 %121 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFMul %191 %194 
                                       f32_4 %196 = OpLoad %21 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %21 %197 
                              Uniform f32_4* %198 = OpAccessChain %42 %120 %120 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %13 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %21 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFAdd %203 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %21 %208 
                              Uniform f32_4* %209 = OpAccessChain %42 %120 %44 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_4 %212 = OpLoad %13 
                                       f32_3 %213 = OpVectorShuffle %212 %212 2 2 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %21 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %21 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %21 %219 
                              Uniform f32_4* %222 = OpAccessChain %42 %120 %92 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_4 %225 = OpLoad %13 
                                       f32_3 %226 = OpVectorShuffle %225 %225 3 3 3 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %21 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFAdd %227 %229 
                                                      OpStore %221 %230 
                                 Output f32* %232 = OpAccessChain %166 %120 %162 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFNegate %233 
                                 Output f32* %235 = OpAccessChain %166 %120 %162 
                                                      OpStore %235 %234 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 122
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %108 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %23 RelaxedPrecision 
                                                    OpDecorate %24 RelaxedPrecision 
                                                    OpMemberDecorate %27 0 RelaxedPrecision 
                                                    OpMemberDecorate %27 0 Offset 27 
                                                    OpMemberDecorate %27 1 Offset 27 
                                                    OpMemberDecorate %27 2 Offset 27 
                                                    OpMemberDecorate %27 3 Offset 27 
                                                    OpDecorate %27 Block 
                                                    OpDecorate %29 DescriptorSet 29 
                                                    OpDecorate %29 Binding 29 
                                                    OpDecorate %34 RelaxedPrecision 
                                                    OpDecorate %35 RelaxedPrecision 
                                                    OpDecorate %36 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %41 RelaxedPrecision 
                                                    OpDecorate %55 RelaxedPrecision 
                                                    OpDecorate %56 RelaxedPrecision 
                                                    OpDecorate %58 RelaxedPrecision 
                                                    OpDecorate %59 RelaxedPrecision 
                                                    OpDecorate %104 RelaxedPrecision 
                                                    OpDecorate %108 RelaxedPrecision 
                                                    OpDecorate %108 Location 108 
                                                    OpDecorate %119 RelaxedPrecision 
                                                    OpDecorate %120 RelaxedPrecision 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 3 
                                             %8 = OpTypePointer Private %7 
                              Private f32_3* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %19 = OpTypeVector %6 4 
                                            %22 = OpTypePointer Private %19 
                             Private f32_4* %23 = OpVariable Private 
                                            %25 = OpTypeInt 32 0 
                                            %26 = OpTypeVector %25 4 
                                            %27 = OpTypeStruct %19 %26 %6 %6 
                                            %28 = OpTypePointer Uniform %27 
  Uniform struct {f32_4; u32_4; f32; f32;}* %29 = OpVariable Uniform 
                                            %30 = OpTypeInt 32 1 
                                        i32 %31 = OpConstant 0 
                                            %32 = OpTypePointer Uniform %19 
                                            %44 = OpTypePointer Private %6 
                               Private f32* %45 = OpVariable Private 
                                        i32 %46 = OpConstant 2 
                                            %47 = OpTypePointer Uniform %6 
                                        f32 %51 = OpConstant 3.674022E-40 
                                        f32 %52 = OpConstant 3.674022E-40 
                             Private f32_3* %54 = OpVariable Private 
                                        i32 %63 = OpConstant 3 
                                            %76 = OpTypePointer Function %7 
                                        i32 %78 = OpConstant 1 
                                            %79 = OpTypeBool 
                                            %80 = OpTypeVector %79 4 
                                            %81 = OpTypePointer Uniform %26 
                                        u32 %85 = OpConstant 0 
                                      f32_3 %91 = OpConstantComposite %51 %51 %51 
                                            %95 = OpTypePointer Function %6 
                                       u32 %105 = OpConstant 3 
                                           %107 = OpTypePointer Output %19 
                             Output f32_4* %108 = OpVariable Output 
                                           %109 = OpTypePointer Function %19 
                                     f32_4 %117 = OpConstantComposite %51 %51 %51 %52 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                            Function f32_3* %77 = OpVariable Function 
                              Function f32* %96 = OpVariable Function 
                           Function f32_4* %110 = OpVariable Function 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                      f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                    OpStore %9 %21 
                                      f32_3 %24 = OpLoad %9 
                             Uniform f32_4* %33 = OpAccessChain %29 %31 
                                      f32_4 %34 = OpLoad %33 
                                      f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                      f32_3 %36 = OpFMul %24 %35 
                                      f32_4 %37 = OpLoad %23 
                                      f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                    OpStore %23 %38 
                                      f32_4 %39 = OpLoad %23 
                                      f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                      f32_3 %41 = OpExtInst %1 30 %40 
                                      f32_4 %42 = OpLoad %23 
                                      f32_4 %43 = OpVectorShuffle %42 %41 4 5 6 3 
                                                    OpStore %23 %43 
                               Uniform f32* %48 = OpAccessChain %29 %46 
                                        f32 %49 = OpLoad %48 
                                                    OpStore %45 %49 
                                        f32 %50 = OpLoad %45 
                                        f32 %53 = OpExtInst %1 43 %50 %51 %52 
                                                    OpStore %45 %53 
                                      f32_4 %55 = OpLoad %23 
                                      f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32 %57 = OpLoad %45 
                                      f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                                      f32_3 %59 = OpFMul %56 %58 
                                                    OpStore %54 %59 
                                      f32_3 %60 = OpLoad %54 
                                      f32_3 %61 = OpExtInst %1 29 %60 
                                                    OpStore %54 %61 
                                      f32_3 %62 = OpLoad %54 
                               Uniform f32* %64 = OpAccessChain %29 %63 
                                        f32 %65 = OpLoad %64 
                               Uniform f32* %66 = OpAccessChain %29 %63 
                                        f32 %67 = OpLoad %66 
                               Uniform f32* %68 = OpAccessChain %29 %63 
                                        f32 %69 = OpLoad %68 
                                      f32_3 %70 = OpCompositeConstruct %65 %67 %69 
                                        f32 %71 = OpCompositeExtract %70 0 
                                        f32 %72 = OpCompositeExtract %70 1 
                                        f32 %73 = OpCompositeExtract %70 2 
                                      f32_3 %74 = OpCompositeConstruct %71 %72 %73 
                                      f32_3 %75 = OpExtInst %1 37 %62 %74 
                                                    OpStore %54 %75 
                             Uniform u32_4* %82 = OpAccessChain %29 %78 
                                      u32_4 %83 = OpLoad %82 
                                        u32 %84 = OpCompositeExtract %83 0 
                                       bool %86 = OpINotEqual %84 %85 
                                                    OpSelectionMerge %88 None 
                                                    OpBranchConditional %86 %87 %90 
                                            %87 = OpLabel 
                                      f32_3 %89 = OpLoad %54 
                                                    OpStore %77 %89 
                                                    OpBranch %88 
                                            %90 = OpLabel 
                                                    OpStore %77 %91 
                                                    OpBranch %88 
                                            %88 = OpLabel 
                                      f32_3 %92 = OpLoad %77 
                                      f32_4 %93 = OpLoad %23 
                                      f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                                    OpStore %23 %94 
                             Uniform u32_4* %97 = OpAccessChain %29 %78 
                                      u32_4 %98 = OpLoad %97 
                                        u32 %99 = OpCompositeExtract %98 0 
                                      bool %100 = OpINotEqual %99 %85 
                                                    OpSelectionMerge %102 None 
                                                    OpBranchConditional %100 %101 %103 
                                           %101 = OpLabel 
                                                    OpStore %96 %52 
                                                    OpBranch %102 
                                           %103 = OpLabel 
                                                    OpStore %96 %51 
                                                    OpBranch %102 
                                           %102 = OpLabel 
                                       f32 %104 = OpLoad %96 
                              Private f32* %106 = OpAccessChain %23 %105 
                                                    OpStore %106 %104 
                            Uniform u32_4* %111 = OpAccessChain %29 %78 
                                     u32_4 %112 = OpLoad %111 
                                       u32 %113 = OpCompositeExtract %112 1 
                                      bool %114 = OpINotEqual %113 %85 
                                                    OpSelectionMerge %116 None 
                                                    OpBranchConditional %114 %115 %118 
                                           %115 = OpLabel 
                                                    OpStore %110 %117 
                                                    OpBranch %116 
                                           %118 = OpLabel 
                                     f32_4 %119 = OpLoad %23 
                                                    OpStore %110 %119 
                                                    OpBranch %116 
                                           %116 = OpLabel 
                                     f32_4 %120 = OpLoad %110 
                                                    OpStore %108 %120 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "EDITOR_VISUALIZATION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "EDITOR_VISUALIZATION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	int unity_VisualizationMode;
uniform 	int _CheckAlbedo;
uniform 	vec4 _AlbedoCompareColor;
uniform 	float _AlbedoMinLuminance;
uniform 	float _AlbedoMaxLuminance;
uniform 	float _AlbedoHueTolerance;
uniform 	float _AlbedoSaturationTolerance;
uniform 	vec4 unity_MaterialValidateLowColor;
uniform 	vec4 unity_MaterialValidateHighColor;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
float u_xlat9;
bool u_xlatb9;
vec2 u_xlat11;
vec2 u_xlat12;
vec2 u_xlat14;
bool u_xlatb14;
float u_xlat16;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    if(unity_VisualizationMode == 0) {
        u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
        u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
        u_xlatb2.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
        u_xlat3.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
        u_xlatb4.xyz = lessThan(u_xlat1.xyzx, vec4(1.0, 1.0, 1.0, 0.0)).xyz;
        u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
        u_xlat5.xyz = u_xlat5.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
        u_xlat5.xyz = log2(u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
        u_xlat5.xyz = exp2(u_xlat5.xyz);
        u_xlat6.xyz = log2(u_xlat1.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
        u_xlat6.xyz = exp2(u_xlat6.xyz);
        u_xlat4.x = (u_xlatb4.x) ? u_xlat5.x : u_xlat6.x;
        u_xlat4.y = (u_xlatb4.y) ? u_xlat5.y : u_xlat6.y;
        u_xlat4.z = (u_xlatb4.z) ? u_xlat5.z : u_xlat6.z;
        u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat4.x;
        u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat4.y;
        u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat4.z;
        u_xlat3.x = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
        u_xlat21 = dot(u_xlat2.xyz, vec3(0.333299994, 0.333299994, 0.333299994));
        u_xlat21 = (_CheckAlbedo != 0) ? u_xlat3.x : u_xlat21;
        if(_CheckAlbedo == 0) {
            u_xlatb22 = u_xlat21<0.0120000001;
            u_xlatb2.x = 0.899999976<u_xlat21;
            u_xlat3.y = 0.0;
            u_xlat2 = (u_xlatb2.x) ? unity_MaterialValidateHighColor : u_xlat3.xxxy;
            SV_Target0 = (bool(u_xlatb22)) ? unity_MaterialValidateLowColor : u_xlat2;
        } else {
            u_xlatb22 = u_xlat21<_AlbedoMinLuminance;
            if(u_xlatb22){
                SV_Target0 = unity_MaterialValidateLowColor;
            } else {
                u_xlatb21 = _AlbedoMaxLuminance<u_xlat21;
                if(u_xlatb21){
                    SV_Target0 = unity_MaterialValidateHighColor;
                } else {
                    u_xlatb2.xy = lessThan(u_xlat1.yxyy, u_xlat1.zzzz).xy;
                    u_xlatb21 = u_xlatb2.y && u_xlatb2.x;
                    if(u_xlatb21){
                        u_xlatb21 = u_xlat1.z!=0.0;
                        u_xlatb22 = u_xlat1.y<u_xlat1.x;
                        u_xlat22 = (u_xlatb22) ? u_xlat1.y : u_xlat1.x;
                        u_xlat22 = u_xlat10_0.z * _Color.z + (-u_xlat22);
                        u_xlatb2.x = u_xlat22!=0.0;
                        u_xlat11.y = u_xlat22 / u_xlat1.z;
                        u_xlat16 = u_xlat10_0.x * _Color.x + (-u_xlat1.y);
                        u_xlat22 = u_xlat16 / u_xlat22;
                        u_xlat11.x = u_xlat22 + 4.0;
                        u_xlat12.x = u_xlat16 + 4.0;
                        u_xlat12.y = 0.0;
                        u_xlat4.yz = (u_xlatb2.x) ? u_xlat11.xy : u_xlat12.xy;
                        u_xlat22 = u_xlat4.y * 0.166666672;
                        u_xlatb2.x = u_xlat4.y<36.0;
                        u_xlat16 = u_xlat4.y * 0.166666672 + 1.0;
                        u_xlat4.x = (u_xlatb2.x) ? u_xlat16 : u_xlat22;
                        u_xlat2.xz = mix(vec2(0.0, 0.0), u_xlat4.xz, vec2(bvec2(u_xlatb21)));
                    } else {
                        u_xlatb21 = u_xlat1.x<u_xlat1.y;
                        if(u_xlatb21){
                            u_xlatb21 = u_xlat1.y!=0.0;
                            u_xlat22 = (u_xlatb2.y) ? u_xlat1.x : u_xlat1.z;
                            u_xlat22 = u_xlat10_0.y * _Color.y + (-u_xlat22);
                            u_xlatb9 = u_xlat22!=0.0;
                            u_xlat11.y = u_xlat22 / u_xlat1.y;
                            u_xlat14.x = u_xlat10_0.z * _Color.z + (-u_xlat1.x);
                            u_xlat22 = u_xlat14.x / u_xlat22;
                            u_xlat11.x = u_xlat22 + 2.0;
                            u_xlat12.x = u_xlat14.x + 2.0;
                            u_xlat12.y = 0.0;
                            u_xlat4.yz = (bool(u_xlatb9)) ? u_xlat11.xy : u_xlat12.xy;
                            u_xlat14.x = u_xlat4.y * 0.166666672;
                            u_xlatb22 = u_xlat4.y<36.0;
                            u_xlat9 = u_xlat4.y * 0.166666672 + 1.0;
                            u_xlat4.x = (u_xlatb22) ? u_xlat9 : u_xlat14.x;
                            u_xlat2.xz = mix(vec2(0.0, 0.0), u_xlat4.xz, vec2(bvec2(u_xlatb21)));
                        } else {
                            u_xlatb14 = u_xlat1.x!=0.0;
                            u_xlatb21 = u_xlat1.z<u_xlat1.y;
                            u_xlat21 = (u_xlatb21) ? u_xlat1.z : u_xlat1.y;
                            u_xlat0.x = u_xlat10_0.x * _Color.x + (-u_xlat21);
                            u_xlatb21 = u_xlat0.x!=0.0;
                            u_xlat11.y = u_xlat0.x / u_xlat1.x;
                            u_xlat8.x = u_xlat10_0.y * _Color.y + (-u_xlat1.z);
                            u_xlat11.x = u_xlat8.x / u_xlat0.x;
                            u_xlat8.y = 0.0;
                            u_xlat1.yz = (bool(u_xlatb21)) ? u_xlat11.xy : u_xlat8.xy;
                            u_xlat0.x = u_xlat1.y * 0.166666672;
                            u_xlatb7 = u_xlat1.y<36.0;
                            u_xlat21 = u_xlat1.y * 0.166666672 + 1.0;
                            u_xlat1.x = (u_xlatb7) ? u_xlat21 : u_xlat0.x;
                            u_xlat2.xz = mix(vec2(0.0, 0.0), u_xlat1.xz, vec2(bvec2(u_xlatb14)));
                        //ENDIF
                        }
                    //ENDIF
                    }
                    u_xlatb0.xy = lessThan(_AlbedoCompareColor.yxyy, _AlbedoCompareColor.zzzz).xy;
                    u_xlatb0.x = u_xlatb0.y && u_xlatb0.x;
                    if(u_xlatb0.x){
                        u_xlatb0.x = _AlbedoCompareColor.z!=0.0;
                        u_xlat7 = min(_AlbedoCompareColor.y, _AlbedoCompareColor.x);
                        u_xlat7 = (-u_xlat7) + _AlbedoCompareColor.z;
                        u_xlatb14 = u_xlat7!=0.0;
                        u_xlat8.y = u_xlat7 / _AlbedoCompareColor.z;
                        u_xlat21 = (-_AlbedoCompareColor.y) + _AlbedoCompareColor.x;
                        u_xlat7 = u_xlat21 / u_xlat7;
                        u_xlat8.x = u_xlat7 + 4.0;
                        u_xlat11.x = u_xlat21 + 4.0;
                        u_xlat11.y = 0.0;
                        u_xlat1.yz = (bool(u_xlatb14)) ? u_xlat8.xy : u_xlat11.xy;
                        u_xlat7 = u_xlat1.y * 0.166666672;
                        u_xlatb14 = u_xlat1.y<36.0;
                        u_xlat21 = u_xlat1.y * 0.166666672 + 1.0;
                        u_xlat1.x = (u_xlatb14) ? u_xlat21 : u_xlat7;
                        u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat1.xz, vec2(u_xlatb0.xx));
                    } else {
                        u_xlatb14 = _AlbedoCompareColor.x<_AlbedoCompareColor.y;
                        if(u_xlatb14){
                            u_xlatb14 = _AlbedoCompareColor.y!=0.0;
                            u_xlat21 = min(_AlbedoCompareColor.x, _AlbedoCompareColor.z);
                            u_xlat21 = (-u_xlat21) + _AlbedoCompareColor.y;
                            u_xlatb1.x = u_xlat21!=0.0;
                            u_xlat8.y = u_xlat21 / _AlbedoCompareColor.y;
                            u_xlat22 = (-_AlbedoCompareColor.x) + _AlbedoCompareColor.z;
                            u_xlat21 = u_xlat22 / u_xlat21;
                            u_xlat8.x = u_xlat21 + 2.0;
                            u_xlat11.x = u_xlat22 + 2.0;
                            u_xlat11.y = 0.0;
                            u_xlat1.yz = (u_xlatb1.x) ? u_xlat8.xy : u_xlat11.xy;
                            u_xlat21 = u_xlat1.y * 0.166666672;
                            u_xlatb22 = u_xlat1.y<36.0;
                            u_xlat8.x = u_xlat1.y * 0.166666672 + 1.0;
                            u_xlat1.x = (u_xlatb22) ? u_xlat8.x : u_xlat21;
                            u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat1.xz, vec2(bvec2(u_xlatb14)));
                        } else {
                            u_xlatb14 = _AlbedoCompareColor.x!=0.0;
                            u_xlat21 = min(_AlbedoCompareColor.z, _AlbedoCompareColor.y);
                            u_xlat21 = (-u_xlat21) + _AlbedoCompareColor.x;
                            u_xlatb1.x = u_xlat21!=0.0;
                            u_xlat8.y = u_xlat21 / _AlbedoCompareColor.x;
                            u_xlat11.x = (-_AlbedoCompareColor.z) + _AlbedoCompareColor.y;
                            u_xlat8.x = u_xlat11.x / u_xlat21;
                            u_xlat11.y = 0.0;
                            u_xlat1.yz = (u_xlatb1.x) ? u_xlat8.xy : u_xlat11.xy;
                            u_xlat21 = u_xlat1.y * 0.166666672;
                            u_xlatb22 = u_xlat1.y<36.0;
                            u_xlat8.x = u_xlat1.y * 0.166666672 + 1.0;
                            u_xlat1.x = (u_xlatb22) ? u_xlat8.x : u_xlat21;
                            u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat1.xz, vec2(bvec2(u_xlatb14)));
                        //ENDIF
                        }
                    //ENDIF
                    }
                    u_xlat14.xy = u_xlat0.yx + (-vec2(_AlbedoSaturationTolerance, _AlbedoHueTolerance));
                    u_xlatb1.xy = lessThan(u_xlat2.zxzz, u_xlat14.xyxx).xy;
                    u_xlat14.x = u_xlat14.y + 1.0;
                    u_xlatb14 = u_xlat2.x<u_xlat14.x;
                    u_xlatb14 = u_xlatb14 && u_xlatb1.y;
                    u_xlatb14 = u_xlatb14 || u_xlatb1.x;
                    u_xlat0.xy = u_xlat0.yx + vec2(_AlbedoSaturationTolerance, _AlbedoHueTolerance);
                    u_xlatb0.xw = lessThan(u_xlat0.xxxy, u_xlat2.zzzx).xw;
                    u_xlat7 = u_xlat0.y + -1.0;
                    u_xlatb7 = u_xlat7<u_xlat2.x;
                    u_xlatb7 = u_xlatb7 && u_xlatb0.w;
                    u_xlatb0.x = u_xlatb7 || u_xlatb0.x;
                    u_xlat3.z = 0.0;
                    u_xlat1 = (u_xlatb0.x) ? unity_MaterialValidateHighColor : u_xlat3.xxxz;
                    SV_Target0 = (bool(u_xlatb14)) ? unity_MaterialValidateLowColor : u_xlat1;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    } else {
        u_xlatb0.x = unity_VisualizationMode==1;
        SV_Target0 = mix(vec4(0.0, 0.0, 0.0, 0.0), unity_MaterialValidateLowColor, vec4(u_xlatb0.xxxx));
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "EDITOR_VISUALIZATION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 237
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %177 %178 %221 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %221 Location 221 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                             %176 = OpTypePointer Output %33 
                               Output f32_2* %177 = OpVariable Output 
                                Input f32_4* %178 = OpVariable Input 
                                         i32 %181 = OpConstant 5 
                                             %220 = OpTypePointer Output %56 
                               Output f32_3* %221 = OpVariable Output 
                                             %231 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                              Uniform f32_4* %182 = OpAccessChain %42 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFMul %180 %184 
                              Uniform f32_4* %186 = OpAccessChain %42 %181 
                                       f32_4 %187 = OpLoad %186 
                                       f32_2 %188 = OpVectorShuffle %187 %187 2 3 
                                       f32_2 %189 = OpFAdd %185 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %13 
                                       f32_3 %191 = OpVectorShuffle %190 %190 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %42 %120 %121 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFMul %191 %194 
                                       f32_4 %196 = OpLoad %21 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %21 %197 
                              Uniform f32_4* %198 = OpAccessChain %42 %120 %120 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %13 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %21 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFAdd %203 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %21 %208 
                              Uniform f32_4* %209 = OpAccessChain %42 %120 %44 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_4 %212 = OpLoad %13 
                                       f32_3 %213 = OpVectorShuffle %212 %212 2 2 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %21 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %21 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %21 %219 
                              Uniform f32_4* %222 = OpAccessChain %42 %120 %92 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_4 %225 = OpLoad %13 
                                       f32_3 %226 = OpVectorShuffle %225 %225 3 3 3 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %21 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFAdd %227 %229 
                                                      OpStore %221 %230 
                                 Output f32* %232 = OpAccessChain %166 %120 %162 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFNegate %233 
                                 Output f32* %235 = OpAccessChain %166 %120 %162 
                                                      OpStore %235 %234 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 1097
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %38 %244 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpMemberDecorate %13 0 RelaxedPrecision 
                                                      OpMemberDecorate %13 0 Offset 13 
                                                      OpMemberDecorate %13 1 Offset 13 
                                                      OpMemberDecorate %13 2 Offset 13 
                                                      OpMemberDecorate %13 3 RelaxedPrecision 
                                                      OpMemberDecorate %13 3 Offset 13 
                                                      OpMemberDecorate %13 4 RelaxedPrecision 
                                                      OpMemberDecorate %13 4 Offset 13 
                                                      OpMemberDecorate %13 5 RelaxedPrecision 
                                                      OpMemberDecorate %13 5 Offset 13 
                                                      OpMemberDecorate %13 6 RelaxedPrecision 
                                                      OpMemberDecorate %13 6 Offset 13 
                                                      OpMemberDecorate %13 7 RelaxedPrecision 
                                                      OpMemberDecorate %13 7 Offset 13 
                                                      OpMemberDecorate %13 8 RelaxedPrecision 
                                                      OpMemberDecorate %13 8 Offset 13 
                                                      OpMemberDecorate %13 9 RelaxedPrecision 
                                                      OpMemberDecorate %13 9 Offset 13 
                                                      OpDecorate %13 Block 
                                                      OpDecorate %15 DescriptorSet 15 
                                                      OpDecorate %15 Binding 15 
                                                      OpDecorate %24 SpecId 24 
                                                      OpDecorate %30 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %38 Location 38 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %215 SpecId 215 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %244 Location 244 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %534 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %537 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %564 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %567 RelaxedPrecision 
                                                      OpDecorate %568 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %577 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %597 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %634 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %643 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %674 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %678 RelaxedPrecision 
                                                      OpDecorate %679 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %682 RelaxedPrecision 
                                                      OpDecorate %686 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %701 RelaxedPrecision 
                                                      OpDecorate %704 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %707 RelaxedPrecision 
                                                      OpDecorate %709 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %712 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %740 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %759 RelaxedPrecision 
                                                      OpDecorate %766 RelaxedPrecision 
                                                      OpDecorate %767 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %774 RelaxedPrecision 
                                                      OpDecorate %776 RelaxedPrecision 
                                                      OpDecorate %786 SpecId 786 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %795 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %804 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %808 RelaxedPrecision 
                                                      OpDecorate %813 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %818 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %827 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %831 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %836 RelaxedPrecision 
                                                      OpDecorate %837 RelaxedPrecision 
                                                      OpDecorate %854 RelaxedPrecision 
                                                      OpDecorate %856 RelaxedPrecision 
                                                      OpDecorate %859 RelaxedPrecision 
                                                      OpDecorate %860 RelaxedPrecision 
                                                      OpDecorate %862 RelaxedPrecision 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %869 RelaxedPrecision 
                                                      OpDecorate %877 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %887 RelaxedPrecision 
                                                      OpDecorate %888 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %895 RelaxedPrecision 
                                                      OpDecorate %900 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %906 RelaxedPrecision 
                                                      OpDecorate %907 RelaxedPrecision 
                                                      OpDecorate %909 RelaxedPrecision 
                                                      OpDecorate %910 RelaxedPrecision 
                                                      OpDecorate %913 RelaxedPrecision 
                                                      OpDecorate %918 RelaxedPrecision 
                                                      OpDecorate %920 RelaxedPrecision 
                                                      OpDecorate %921 RelaxedPrecision 
                                                      OpDecorate %923 RelaxedPrecision 
                                                      OpDecorate %925 RelaxedPrecision 
                                                      OpDecorate %926 RelaxedPrecision 
                                                      OpDecorate %928 RelaxedPrecision 
                                                      OpDecorate %929 RelaxedPrecision 
                                                      OpDecorate %932 RelaxedPrecision 
                                                      OpDecorate %934 RelaxedPrecision 
                                                      OpDecorate %935 RelaxedPrecision 
                                                      OpDecorate %943 RelaxedPrecision 
                                                      OpDecorate %945 RelaxedPrecision 
                                                      OpDecorate %946 RelaxedPrecision 
                                                      OpDecorate %950 RelaxedPrecision 
                                                      OpDecorate %951 RelaxedPrecision 
                                                      OpDecorate %954 RelaxedPrecision 
                                                      OpDecorate %959 RelaxedPrecision 
                                                      OpDecorate %960 RelaxedPrecision 
                                                      OpDecorate %961 RelaxedPrecision 
                                                      OpDecorate %967 RelaxedPrecision 
                                                      OpDecorate %970 RelaxedPrecision 
                                                      OpDecorate %971 RelaxedPrecision 
                                                      OpDecorate %978 RelaxedPrecision 
                                                      OpDecorate %979 RelaxedPrecision 
                                                      OpDecorate %981 RelaxedPrecision 
                                                      OpDecorate %984 RelaxedPrecision 
                                                      OpDecorate %985 RelaxedPrecision 
                                                      OpDecorate %988 RelaxedPrecision 
                                                      OpDecorate %991 RelaxedPrecision 
                                                      OpDecorate %992 RelaxedPrecision 
                                                      OpDecorate %993 RelaxedPrecision 
                                                      OpDecorate %994 RelaxedPrecision 
                                                      OpDecorate %995 RelaxedPrecision 
                                                      OpDecorate %996 RelaxedPrecision 
                                                      OpDecorate %997 RelaxedPrecision 
                                                      OpDecorate %998 RelaxedPrecision 
                                                      OpDecorate %999 RelaxedPrecision 
                                                      OpDecorate %1002 RelaxedPrecision 
                                                      OpDecorate %1003 RelaxedPrecision 
                                                      OpDecorate %1006 RelaxedPrecision 
                                                      OpDecorate %1008 RelaxedPrecision 
                                                      OpDecorate %1023 RelaxedPrecision 
                                                      OpDecorate %1024 RelaxedPrecision 
                                                      OpDecorate %1026 RelaxedPrecision 
                                                      OpDecorate %1028 RelaxedPrecision 
                                                      OpDecorate %1029 RelaxedPrecision 
                                                      OpDecorate %1030 RelaxedPrecision 
                                                      OpDecorate %1033 RelaxedPrecision 
                                                      OpDecorate %1034 RelaxedPrecision 
                                                      OpDecorate %1035 RelaxedPrecision 
                                                      OpDecorate %1036 RelaxedPrecision 
                                                      OpDecorate %1037 RelaxedPrecision 
                                                      OpDecorate %1040 RelaxedPrecision 
                                                      OpDecorate %1042 RelaxedPrecision 
                                                      OpDecorate %1043 RelaxedPrecision 
                                                      OpDecorate %1045 RelaxedPrecision 
                                                      OpDecorate %1058 RelaxedPrecision 
                                                      OpDecorate %1065 RelaxedPrecision 
                                                      OpDecorate %1067 RelaxedPrecision 
                                                      OpDecorate %1068 RelaxedPrecision 
                                                      OpDecorate %1069 RelaxedPrecision 
                                                      OpDecorate %1076 RelaxedPrecision 
                                                      OpDecorate %1078 RelaxedPrecision 
                                                      OpDecorate %1079 RelaxedPrecision 
                                                      OpDecorate %1092 RelaxedPrecision 
                                                      OpDecorate %1095 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                          bool %7 = OpConstantFalse 
                                              %10 = OpTypeFloat 32 
                                              %11 = OpTypeVector %10 4 
                                              %12 = OpTypeInt 32 1 
                                              %13 = OpTypeStruct %11 %12 %12 %11 %10 %10 %10 %10 %11 %11 
                                              %14 = OpTypePointer Uniform %13 
Uniform struct {f32_4; i32; i32; f32_4; f32; f32; f32; f32; f32_4; f32_4;}* %15 = OpVariable Uniform 
                                          i32 %16 = OpConstant 1 
                                              %17 = OpTypePointer Uniform %12 
                                          i32 %20 = OpConstant 0 
                                         bool %24 = OpSpecConstantFalse 
                                         bool %25 = OpSpecConstantOp System.Collections.Generic.List`1[SpirV.ObjectReference] 
                                              %28 = OpTypeVector %10 3 
                                              %29 = OpTypePointer Private %28 
                               Private f32_3* %30 = OpVariable Private 
                                              %31 = OpTypeImage %10 Dim2D 0 0 0 1 Unknown 
                                              %32 = OpTypeSampledImage %31 
                                              %33 = OpTypePointer UniformConstant %32 
  UniformConstant read_only Texture2DSampled* %34 = OpVariable UniformConstant 
                                              %36 = OpTypeVector %10 2 
                                              %37 = OpTypePointer Input %36 
                                 Input f32_2* %38 = OpVariable Input 
                               Private f32_3* %42 = OpVariable Private 
                                              %44 = OpTypePointer Uniform %11 
                                              %49 = OpTypeVector %6 3 
                                              %50 = OpTypePointer Private %49 
                              Private bool_3* %51 = OpVariable Private 
                                          f32 %52 = OpConstant 3.674022E-40 
                                          f32 %53 = OpConstant 3.674022E-40 
                                        f32_4 %54 = OpConstantComposite %52 %52 %52 %53 
                                              %57 = OpTypeVector %6 4 
                               Private f32_3* %60 = OpVariable Private 
                                          f32 %62 = OpConstant 3.674022E-40 
                                        f32_3 %63 = OpConstantComposite %62 %62 %62 
                              Private bool_3* %65 = OpVariable Private 
                                          f32 %68 = OpConstant 3.674022E-40 
                                        f32_4 %69 = OpConstantComposite %68 %68 %68 %53 
                               Private f32_3* %72 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                        f32_3 %79 = OpConstantComposite %78 %78 %78 
                                          f32 %82 = OpConstant 3.674022E-40 
                                        f32_3 %83 = OpConstantComposite %82 %82 %82 
                                          f32 %88 = OpConstant 3.674022E-40 
                                        f32_3 %89 = OpConstantComposite %88 %88 %88 
                               Private f32_3* %91 = OpVariable Private 
                               Private f32_3* %94 = OpVariable Private 
                                          f32 %98 = OpConstant 3.674022E-40 
                                        f32_3 %99 = OpConstantComposite %98 %98 %98 
                              Private f32_3* %103 = OpVariable Private 
                                             %104 = OpTypePointer Function %10 
                                             %110 = OpTypeInt 32 0 
                                         u32 %111 = OpConstant 0 
                                             %112 = OpTypePointer Private %10 
                                         u32 %125 = OpConstant 1 
                                         u32 %138 = OpConstant 2 
                              Private f32_3* %146 = OpVariable Private 
                              Private f32_3* %183 = OpVariable Private 
                                         f32 %185 = OpConstant 3.674022E-40 
                                         f32 %186 = OpConstant 3.674022E-40 
                                         f32 %187 = OpConstant 3.674022E-40 
                                       f32_3 %188 = OpConstantComposite %185 %186 %187 
                                Private f32* %191 = OpVariable Private 
                                         f32 %193 = OpConstant 3.674022E-40 
                                       f32_3 %194 = OpConstantComposite %193 %193 %193 
                                         i32 %197 = OpConstant 2 
                                        bool %215 = OpSpecConstantFalse 
                                        bool %216 = OpSpecConstantOp System.Collections.Generic.List`1[SpirV.ObjectReference] 
                                             %219 = OpTypePointer Private %6 
                               Private bool* %220 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                               Private bool* %224 = OpVariable Private 
                                         f32 %225 = OpConstant 3.674022E-40 
                                             %229 = OpTypePointer Private %11 
                              Private f32_4* %230 = OpVariable Private 
                                             %231 = OpTypePointer Function %11 
                                         i32 %236 = OpConstant 9 
                                             %243 = OpTypePointer Output %11 
                               Output f32_4* %244 = OpVariable Output 
                                         i32 %249 = OpConstant 8 
                                         i32 %257 = OpConstant 4 
                                             %258 = OpTypePointer Uniform %10 
                                         i32 %268 = OpConstant 5 
                                             %279 = OpTypeVector %6 2 
                                             %280 = OpTypePointer Private %279 
                             Private bool_2* %281 = OpVariable Private 
                              Private f32_3* %304 = OpVariable Private 
                              Private f32_3* %334 = OpVariable Private 
                                         f32 %353 = OpConstant 3.674022E-40 
                                Private f32* %356 = OpVariable Private 
                                         f32 %380 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                                             %401 = OpTypePointer Function %36 
                                       f32_2 %409 = OpConstantComposite %53 %53 
                                             %450 = OpTypePointer Private %36 
                              Private f32_2* %451 = OpVariable Private 
                              Private f32_2* %458 = OpVariable Private 
                              Private f32_2* %475 = OpVariable Private 
                                         f32 %478 = OpConstant 3.674022E-40 
                              Private f32_3* %496 = OpVariable Private 
                               Private bool* %510 = OpVariable Private 
                             Private bool_2* %570 = OpVariable Private 
                              Private f32_2* %582 = OpVariable Private 
                                Private f32* %611 = OpVariable Private 
                                         i32 %646 = OpConstant 3 
                             Private bool_2* %684 = OpVariable Private 
                                       f32_2 %711 = OpConstantComposite %353 %353 
                                        bool %786 = OpSpecConstantFalse 
                                Private f32* %834 = OpVariable Private 
                              Private f32_2* %923 = OpVariable Private 
                                         i32 %986 = OpConstant 7 
                                         i32 %989 = OpConstant 6 
                                        f32 %1041 = OpConstant 3.674022E-40 
                             Private f32_4* %1058 = OpVariable Private 
                                      f32_4 %1094 = OpConstantComposite %53 %53 %53 %53 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %105 = OpVariable Function 
                               Function f32* %120 = OpVariable Function 
                               Function f32* %133 = OpVariable Function 
                               Function f32* %147 = OpVariable Function 
                               Function f32* %159 = OpVariable Function 
                               Function f32* %171 = OpVariable Function 
                               Function f32* %196 = OpVariable Function 
                             Function f32_4* %232 = OpVariable Function 
                             Function f32_4* %245 = OpVariable Function 
                               Function f32* %305 = OpVariable Function 
                               Function f32* %360 = OpVariable Function 
                               Function f32* %370 = OpVariable Function 
                               Function f32* %391 = OpVariable Function 
                             Function f32_2* %402 = OpVariable Function 
                               Function f32* %425 = OpVariable Function 
                               Function f32* %485 = OpVariable Function 
                               Function f32* %497 = OpVariable Function 
                               Function f32* %519 = OpVariable Function 
                             Function f32_2* %530 = OpVariable Function 
                               Function f32* %549 = OpVariable Function 
                             Function f32_2* %600 = OpVariable Function 
                               Function f32* %625 = OpVariable Function 
                             Function f32_2* %636 = OpVariable Function 
                               Function f32* %713 = OpVariable Function 
                               Function f32* %725 = OpVariable Function 
                               Function f32* %749 = OpVariable Function 
                             Function f32_2* %761 = OpVariable Function 
                               Function f32* %838 = OpVariable Function 
                               Function f32* %849 = OpVariable Function 
                               Function f32* %871 = OpVariable Function 
                             Function f32_2* %882 = OpVariable Function 
                             Function f32_2* %938 = OpVariable Function 
                               Function f32* %962 = OpVariable Function 
                             Function f32_2* %973 = OpVariable Function 
                            Function f32_4* %1059 = OpVariable Function 
                            Function f32_4* %1070 = OpVariable Function 
                            Function f32_4* %1086 = OpVariable Function 
                                                      OpSelectionMerge %9 None 
                                                      OpBranchConditional %7 %8 %9 
                                               %8 = OpLabel 
                                 Uniform i32* %18 = OpAccessChain %15 %16 
                                          i32 %19 = OpLoad %18 
                                         bool %21 = OpIEqual %19 %20 
                                                      OpSelectionMerge %23 None 
                                                      OpBranchConditional %21 %22 %23 
                                              %22 = OpLabel 
                                                      OpBranch %23 
                                              %23 = OpLabel 
                                                      OpBranch %9 
                                               %9 = OpLabel 
                                                      OpSelectionMerge %27 None 
                                                      OpBranchConditional %25 %26 %1080 
                                              %26 = OpLabel 
                   read_only Texture2DSampled %35 = OpLoad %34 
                                        f32_2 %39 = OpLoad %38 
                                        f32_4 %40 = OpImageSampleImplicitLod %35 %39 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                                      OpStore %30 %41 
                                        f32_3 %43 = OpLoad %30 
                               Uniform f32_4* %45 = OpAccessChain %15 %20 
                                        f32_4 %46 = OpLoad %45 
                                        f32_3 %47 = OpVectorShuffle %46 %46 0 1 2 
                                        f32_3 %48 = OpFMul %43 %47 
                                                      OpStore %42 %48 
                                        f32_3 %55 = OpLoad %42 
                                        f32_4 %56 = OpVectorShuffle %55 %55 0 1 2 0 
                                       bool_4 %58 = OpFOrdGreaterThanEqual %54 %56 
                                       bool_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                                      OpStore %51 %59 
                                        f32_3 %61 = OpLoad %42 
                                        f32_3 %64 = OpFMul %61 %63 
                                                      OpStore %60 %64 
                                        f32_3 %66 = OpLoad %42 
                                        f32_4 %67 = OpVectorShuffle %66 %66 0 1 2 0 
                                       bool_4 %70 = OpFOrdLessThan %67 %69 
                                       bool_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                                      OpStore %65 %71 
                                        f32_3 %73 = OpLoad %30 
                               Uniform f32_4* %74 = OpAccessChain %15 %20 
                                        f32_4 %75 = OpLoad %74 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFMul %73 %76 
                                        f32_3 %80 = OpFAdd %77 %79 
                                                      OpStore %72 %80 
                                        f32_3 %81 = OpLoad %72 
                                        f32_3 %84 = OpFMul %81 %83 
                                                      OpStore %72 %84 
                                        f32_3 %85 = OpLoad %72 
                                        f32_3 %86 = OpExtInst %1 30 %85 
                                                      OpStore %72 %86 
                                        f32_3 %87 = OpLoad %72 
                                        f32_3 %90 = OpFMul %87 %89 
                                                      OpStore %72 %90 
                                        f32_3 %92 = OpLoad %72 
                                        f32_3 %93 = OpExtInst %1 29 %92 
                                                      OpStore %91 %93 
                                        f32_3 %95 = OpLoad %42 
                                        f32_3 %96 = OpExtInst %1 30 %95 
                                                      OpStore %94 %96 
                                        f32_3 %97 = OpLoad %94 
                                       f32_3 %100 = OpFMul %97 %99 
                                                      OpStore %94 %100 
                                       f32_3 %101 = OpLoad %94 
                                       f32_3 %102 = OpExtInst %1 29 %101 
                                                      OpStore %94 %102 
                                      bool_3 %106 = OpLoad %65 
                                        bool %107 = OpCompositeExtract %106 0 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %115 
                                             %108 = OpLabel 
                                Private f32* %113 = OpAccessChain %91 %111 
                                         f32 %114 = OpLoad %113 
                                                      OpStore %105 %114 
                                                      OpBranch %109 
                                             %115 = OpLabel 
                                Private f32* %116 = OpAccessChain %94 %111 
                                         f32 %117 = OpLoad %116 
                                                      OpStore %105 %117 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                         f32 %118 = OpLoad %105 
                                Private f32* %119 = OpAccessChain %103 %111 
                                                      OpStore %119 %118 
                                      bool_3 %121 = OpLoad %65 
                                        bool %122 = OpCompositeExtract %121 1 
                                                      OpSelectionMerge %124 None 
                                                      OpBranchConditional %122 %123 %128 
                                             %123 = OpLabel 
                                Private f32* %126 = OpAccessChain %91 %125 
                                         f32 %127 = OpLoad %126 
                                                      OpStore %120 %127 
                                                      OpBranch %124 
                                             %128 = OpLabel 
                                Private f32* %129 = OpAccessChain %94 %125 
                                         f32 %130 = OpLoad %129 
                                                      OpStore %120 %130 
                                                      OpBranch %124 
                                             %124 = OpLabel 
                                         f32 %131 = OpLoad %120 
                                Private f32* %132 = OpAccessChain %103 %125 
                                                      OpStore %132 %131 
                                      bool_3 %134 = OpLoad %65 
                                        bool %135 = OpCompositeExtract %134 2 
                                                      OpSelectionMerge %137 None 
                                                      OpBranchConditional %135 %136 %141 
                                             %136 = OpLabel 
                                Private f32* %139 = OpAccessChain %91 %138 
                                         f32 %140 = OpLoad %139 
                                                      OpStore %133 %140 
                                                      OpBranch %137 
                                             %141 = OpLabel 
                                Private f32* %142 = OpAccessChain %94 %138 
                                         f32 %143 = OpLoad %142 
                                                      OpStore %133 %143 
                                                      OpBranch %137 
                                             %137 = OpLabel 
                                         f32 %144 = OpLoad %133 
                                Private f32* %145 = OpAccessChain %103 %138 
                                                      OpStore %145 %144 
                                      bool_3 %148 = OpLoad %51 
                                        bool %149 = OpCompositeExtract %148 0 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %154 
                                             %150 = OpLabel 
                                Private f32* %152 = OpAccessChain %60 %111 
                                         f32 %153 = OpLoad %152 
                                                      OpStore %147 %153 
                                                      OpBranch %151 
                                             %154 = OpLabel 
                                Private f32* %155 = OpAccessChain %103 %111 
                                         f32 %156 = OpLoad %155 
                                                      OpStore %147 %156 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                         f32 %157 = OpLoad %147 
                                Private f32* %158 = OpAccessChain %146 %111 
                                                      OpStore %158 %157 
                                      bool_3 %160 = OpLoad %51 
                                        bool %161 = OpCompositeExtract %160 1 
                                                      OpSelectionMerge %163 None 
                                                      OpBranchConditional %161 %162 %166 
                                             %162 = OpLabel 
                                Private f32* %164 = OpAccessChain %60 %125 
                                         f32 %165 = OpLoad %164 
                                                      OpStore %159 %165 
                                                      OpBranch %163 
                                             %166 = OpLabel 
                                Private f32* %167 = OpAccessChain %103 %125 
                                         f32 %168 = OpLoad %167 
                                                      OpStore %159 %168 
                                                      OpBranch %163 
                                             %163 = OpLabel 
                                         f32 %169 = OpLoad %159 
                                Private f32* %170 = OpAccessChain %146 %125 
                                                      OpStore %170 %169 
                                      bool_3 %172 = OpLoad %51 
                                        bool %173 = OpCompositeExtract %172 2 
                                                      OpSelectionMerge %175 None 
                                                      OpBranchConditional %173 %174 %178 
                                             %174 = OpLabel 
                                Private f32* %176 = OpAccessChain %60 %138 
                                         f32 %177 = OpLoad %176 
                                                      OpStore %171 %177 
                                                      OpBranch %175 
                                             %178 = OpLabel 
                                Private f32* %179 = OpAccessChain %103 %138 
                                         f32 %180 = OpLoad %179 
                                                      OpStore %171 %180 
                                                      OpBranch %175 
                                             %175 = OpLabel 
                                         f32 %181 = OpLoad %171 
                                Private f32* %182 = OpAccessChain %146 %138 
                                                      OpStore %182 %181 
                                       f32_3 %184 = OpLoad %146 
                                         f32 %189 = OpDot %184 %188 
                                Private f32* %190 = OpAccessChain %183 %111 
                                                      OpStore %190 %189 
                                       f32_3 %192 = OpLoad %146 
                                         f32 %195 = OpDot %192 %194 
                                                      OpStore %191 %195 
                                Uniform i32* %198 = OpAccessChain %15 %197 
                                         i32 %199 = OpLoad %198 
                                        bool %200 = OpINotEqual %199 %20 
                                                      OpSelectionMerge %202 None 
                                                      OpBranchConditional %200 %201 %205 
                                             %201 = OpLabel 
                                Private f32* %203 = OpAccessChain %183 %111 
                                         f32 %204 = OpLoad %203 
                                                      OpStore %196 %204 
                                                      OpBranch %202 
                                             %205 = OpLabel 
                                         f32 %206 = OpLoad %191 
                                                      OpStore %196 %206 
                                                      OpBranch %202 
                                             %202 = OpLabel 
                                         f32 %207 = OpLoad %196 
                                                      OpStore %191 %207 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %7 %208 %209 
                                             %208 = OpLabel 
                                Uniform i32* %210 = OpAccessChain %15 %197 
                                         i32 %211 = OpLoad %210 
                                        bool %212 = OpIEqual %211 %20 
                                                      OpSelectionMerge %214 None 
                                                      OpBranchConditional %212 %213 %214 
                                             %213 = OpLabel 
                                                      OpBranch %214 
                                             %214 = OpLabel 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                                      OpSelectionMerge %218 None 
                                                      OpBranchConditional %216 %217 %255 
                                             %217 = OpLabel 
                                         f32 %221 = OpLoad %191 
                                        bool %223 = OpFOrdLessThan %221 %222 
                                                      OpStore %220 %223 
                                         f32 %226 = OpLoad %191 
                                        bool %227 = OpFOrdLessThan %225 %226 
                                                      OpStore %224 %227 
                                Private f32* %228 = OpAccessChain %183 %125 
                                                      OpStore %228 %53 
                                        bool %233 = OpLoad %224 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %233 %234 %239 
                                             %234 = OpLabel 
                              Uniform f32_4* %237 = OpAccessChain %15 %236 
                                       f32_4 %238 = OpLoad %237 
                                                      OpStore %232 %238 
                                                      OpBranch %235 
                                             %239 = OpLabel 
                                       f32_3 %240 = OpLoad %183 
                                       f32_4 %241 = OpVectorShuffle %240 %240 0 0 0 1 
                                                      OpStore %232 %241 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                       f32_4 %242 = OpLoad %232 
                                                      OpStore %230 %242 
                                        bool %246 = OpLoad %220 
                                                      OpSelectionMerge %248 None 
                                                      OpBranchConditional %246 %247 %252 
                                             %247 = OpLabel 
                              Uniform f32_4* %250 = OpAccessChain %15 %249 
                                       f32_4 %251 = OpLoad %250 
                                                      OpStore %245 %251 
                                                      OpBranch %248 
                                             %252 = OpLabel 
                                       f32_4 %253 = OpLoad %230 
                                                      OpStore %245 %253 
                                                      OpBranch %248 
                                             %248 = OpLabel 
                                       f32_4 %254 = OpLoad %245 
                                                      OpStore %244 %254 
                                                      OpBranch %218 
                                             %255 = OpLabel 
                                         f32 %256 = OpLoad %191 
                                Uniform f32* %259 = OpAccessChain %15 %257 
                                         f32 %260 = OpLoad %259 
                                        bool %261 = OpFOrdLessThan %256 %260 
                                                      OpStore %220 %261 
                                        bool %262 = OpLoad %220 
                                                      OpSelectionMerge %264 None 
                                                      OpBranchConditional %262 %263 %267 
                                             %263 = OpLabel 
                              Uniform f32_4* %265 = OpAccessChain %15 %249 
                                       f32_4 %266 = OpLoad %265 
                                                      OpStore %244 %266 
                                                      OpBranch %264 
                                             %267 = OpLabel 
                                Uniform f32* %269 = OpAccessChain %15 %268 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpLoad %191 
                                        bool %272 = OpFOrdLessThan %270 %271 
                                                      OpStore %220 %272 
                                        bool %273 = OpLoad %220 
                                                      OpSelectionMerge %275 None 
                                                      OpBranchConditional %273 %274 %278 
                                             %274 = OpLabel 
                              Uniform f32_4* %276 = OpAccessChain %15 %236 
                                       f32_4 %277 = OpLoad %276 
                                                      OpStore %244 %277 
                                                      OpBranch %275 
                                             %278 = OpLabel 
                                       f32_3 %282 = OpLoad %42 
                                       f32_4 %283 = OpVectorShuffle %282 %282 1 0 1 1 
                                       f32_3 %284 = OpLoad %42 
                                       f32_4 %285 = OpVectorShuffle %284 %284 2 2 2 2 
                                      bool_4 %286 = OpFOrdLessThan %283 %285 
                                      bool_2 %287 = OpVectorShuffle %286 %286 0 1 
                                                      OpStore %281 %287 
                                      bool_2 %288 = OpLoad %281 
                                        bool %289 = OpCompositeExtract %288 1 
                                      bool_2 %290 = OpLoad %281 
                                        bool %291 = OpCompositeExtract %290 0 
                                        bool %292 = OpLogicalAnd %289 %291 
                                                      OpStore %220 %292 
                                        bool %293 = OpLoad %220 
                                                      OpSelectionMerge %295 None 
                                                      OpBranchConditional %293 %294 %413 
                                             %294 = OpLabel 
                                Private f32* %296 = OpAccessChain %42 %138 
                                         f32 %297 = OpLoad %296 
                                        bool %298 = OpFOrdNotEqual %297 %53 
                                                      OpStore %220 %298 
                                Private f32* %299 = OpAccessChain %42 %125 
                                         f32 %300 = OpLoad %299 
                                Private f32* %301 = OpAccessChain %42 %111 
                                         f32 %302 = OpLoad %301 
                                        bool %303 = OpFOrdLessThan %300 %302 
                                                      OpStore %224 %303 
                                        bool %306 = OpLoad %224 
                                                      OpSelectionMerge %308 None 
                                                      OpBranchConditional %306 %307 %311 
                                             %307 = OpLabel 
                                Private f32* %309 = OpAccessChain %42 %125 
                                         f32 %310 = OpLoad %309 
                                                      OpStore %305 %310 
                                                      OpBranch %308 
                                             %311 = OpLabel 
                                Private f32* %312 = OpAccessChain %42 %111 
                                         f32 %313 = OpLoad %312 
                                                      OpStore %305 %313 
                                                      OpBranch %308 
                                             %308 = OpLabel 
                                         f32 %314 = OpLoad %305 
                                Private f32* %315 = OpAccessChain %304 %111 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %30 %138 
                                         f32 %317 = OpLoad %316 
                                Uniform f32* %318 = OpAccessChain %15 %20 %138 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFMul %317 %319 
                                Private f32* %321 = OpAccessChain %304 %111 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                         f32 %324 = OpFAdd %320 %323 
                                Private f32* %325 = OpAccessChain %304 %111 
                                                      OpStore %325 %324 
                                Private f32* %326 = OpAccessChain %304 %111 
                                         f32 %327 = OpLoad %326 
                                        bool %328 = OpFOrdNotEqual %327 %53 
                                                      OpStore %224 %328 
                                Private f32* %329 = OpAccessChain %304 %111 
                                         f32 %330 = OpLoad %329 
                                Private f32* %331 = OpAccessChain %42 %138 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFDiv %330 %332 
                                                      OpStore %191 %333 
                                Private f32* %335 = OpAccessChain %30 %111 
                                         f32 %336 = OpLoad %335 
                                Uniform f32* %337 = OpAccessChain %15 %20 %111 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %336 %338 
                                Private f32* %340 = OpAccessChain %42 %125 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %339 %342 
                                Private f32* %344 = OpAccessChain %334 %111 
                                                      OpStore %344 %343 
                                Private f32* %345 = OpAccessChain %334 %111 
                                         f32 %346 = OpLoad %345 
                                Private f32* %347 = OpAccessChain %304 %111 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFDiv %346 %348 
                                Private f32* %350 = OpAccessChain %304 %111 
                                                      OpStore %350 %349 
                                Private f32* %351 = OpAccessChain %304 %111 
                                         f32 %352 = OpLoad %351 
                                         f32 %354 = OpFAdd %352 %353 
                                Private f32* %355 = OpAccessChain %60 %111 
                                                      OpStore %355 %354 
                                Private f32* %357 = OpAccessChain %334 %111 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFAdd %358 %353 
                                                      OpStore %356 %359 
                                        bool %361 = OpLoad %224 
                                                      OpSelectionMerge %363 None 
                                                      OpBranchConditional %361 %362 %366 
                                             %362 = OpLabel 
                                Private f32* %364 = OpAccessChain %60 %111 
                                         f32 %365 = OpLoad %364 
                                                      OpStore %360 %365 
                                                      OpBranch %363 
                                             %366 = OpLabel 
                                         f32 %367 = OpLoad %356 
                                                      OpStore %360 %367 
                                                      OpBranch %363 
                                             %363 = OpLabel 
                                         f32 %368 = OpLoad %360 
                                Private f32* %369 = OpAccessChain %304 %111 
                                                      OpStore %369 %368 
                                        bool %371 = OpLoad %224 
                                                      OpSelectionMerge %373 None 
                                                      OpBranchConditional %371 %372 %375 
                                             %372 = OpLabel 
                                         f32 %374 = OpLoad %191 
                                                      OpStore %370 %374 
                                                      OpBranch %373 
                                             %375 = OpLabel 
                                                      OpStore %370 %53 
                                                      OpBranch %373 
                                             %373 = OpLabel 
                                         f32 %376 = OpLoad %370 
                                Private f32* %377 = OpAccessChain %334 %138 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %304 %111 
                                         f32 %379 = OpLoad %378 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %191 %381 
                                Private f32* %382 = OpAccessChain %304 %111 
                                         f32 %383 = OpLoad %382 
                                        bool %385 = OpFOrdLessThan %383 %384 
                                                      OpStore %224 %385 
                                Private f32* %386 = OpAccessChain %304 %111 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %387 %380 
                                         f32 %389 = OpFAdd %388 %68 
                                Private f32* %390 = OpAccessChain %304 %111 
                                                      OpStore %390 %389 
                                        bool %392 = OpLoad %224 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %392 %393 %397 
                                             %393 = OpLabel 
                                Private f32* %395 = OpAccessChain %304 %111 
                                         f32 %396 = OpLoad %395 
                                                      OpStore %391 %396 
                                                      OpBranch %394 
                                             %397 = OpLabel 
                                         f32 %398 = OpLoad %191 
                                                      OpStore %391 %398 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %399 = OpLoad %391 
                                Private f32* %400 = OpAccessChain %334 %111 
                                                      OpStore %400 %399 
                                        bool %403 = OpLoad %220 
                                                      OpSelectionMerge %405 None 
                                                      OpBranchConditional %403 %404 %408 
                                             %404 = OpLabel 
                                       f32_3 %406 = OpLoad %334 
                                       f32_2 %407 = OpVectorShuffle %406 %406 0 2 
                                                      OpStore %402 %407 
                                                      OpBranch %405 
                                             %408 = OpLabel 
                                                      OpStore %402 %409 
                                                      OpBranch %405 
                                             %405 = OpLabel 
                                       f32_2 %410 = OpLoad %402 
                                       f32_3 %411 = OpLoad %304 
                                       f32_3 %412 = OpVectorShuffle %411 %410 3 1 4 
                                                      OpStore %304 %412 
                                                      OpBranch %295 
                                             %413 = OpLabel 
                                Private f32* %414 = OpAccessChain %42 %111 
                                         f32 %415 = OpLoad %414 
                                Private f32* %416 = OpAccessChain %42 %125 
                                         f32 %417 = OpLoad %416 
                                        bool %418 = OpFOrdLessThan %415 %417 
                                                      OpStore %220 %418 
                                        bool %419 = OpLoad %220 
                                                      OpSelectionMerge %421 None 
                                                      OpBranchConditional %419 %420 %540 
                                             %420 = OpLabel 
                                Private f32* %422 = OpAccessChain %42 %125 
                                         f32 %423 = OpLoad %422 
                                        bool %424 = OpFOrdNotEqual %423 %53 
                                                      OpStore %220 %424 
                                      bool_2 %426 = OpLoad %281 
                                        bool %427 = OpCompositeExtract %426 1 
                                                      OpSelectionMerge %429 None 
                                                      OpBranchConditional %427 %428 %432 
                                             %428 = OpLabel 
                                Private f32* %430 = OpAccessChain %42 %111 
                                         f32 %431 = OpLoad %430 
                                                      OpStore %425 %431 
                                                      OpBranch %429 
                                             %432 = OpLabel 
                                Private f32* %433 = OpAccessChain %42 %138 
                                         f32 %434 = OpLoad %433 
                                                      OpStore %425 %434 
                                                      OpBranch %429 
                                             %429 = OpLabel 
                                         f32 %435 = OpLoad %425 
                                Private f32* %436 = OpAccessChain %334 %111 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %30 %125 
                                         f32 %438 = OpLoad %437 
                                Uniform f32* %439 = OpAccessChain %15 %20 %125 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpFMul %438 %440 
                                Private f32* %442 = OpAccessChain %334 %111 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFNegate %443 
                                         f32 %445 = OpFAdd %441 %444 
                                Private f32* %446 = OpAccessChain %334 %111 
                                                      OpStore %446 %445 
                                Private f32* %447 = OpAccessChain %334 %111 
                                         f32 %448 = OpLoad %447 
                                        bool %449 = OpFOrdNotEqual %448 %53 
                                                      OpStore %224 %449 
                                Private f32* %452 = OpAccessChain %334 %111 
                                         f32 %453 = OpLoad %452 
                                Private f32* %454 = OpAccessChain %42 %125 
                                         f32 %455 = OpLoad %454 
                                         f32 %456 = OpFDiv %453 %455 
                                Private f32* %457 = OpAccessChain %451 %111 
                                                      OpStore %457 %456 
                                Private f32* %459 = OpAccessChain %30 %138 
                                         f32 %460 = OpLoad %459 
                                Uniform f32* %461 = OpAccessChain %15 %20 %138 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %460 %462 
                                Private f32* %464 = OpAccessChain %42 %111 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFNegate %465 
                                         f32 %467 = OpFAdd %463 %466 
                                Private f32* %468 = OpAccessChain %458 %111 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %458 %111 
                                         f32 %470 = OpLoad %469 
                                Private f32* %471 = OpAccessChain %334 %111 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFDiv %470 %472 
                                Private f32* %474 = OpAccessChain %334 %111 
                                                      OpStore %474 %473 
                                Private f32* %476 = OpAccessChain %334 %111 
                                         f32 %477 = OpLoad %476 
                                         f32 %479 = OpFAdd %477 %478 
                                Private f32* %480 = OpAccessChain %475 %111 
                                                      OpStore %480 %479 
                                Private f32* %481 = OpAccessChain %458 %111 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFAdd %482 %478 
                                Private f32* %484 = OpAccessChain %60 %111 
                                                      OpStore %484 %483 
                                        bool %486 = OpLoad %224 
                                                      OpSelectionMerge %488 None 
                                                      OpBranchConditional %486 %487 %491 
                                             %487 = OpLabel 
                                Private f32* %489 = OpAccessChain %475 %111 
                                         f32 %490 = OpLoad %489 
                                                      OpStore %485 %490 
                                                      OpBranch %488 
                                             %491 = OpLabel 
                                Private f32* %492 = OpAccessChain %60 %111 
                                         f32 %493 = OpLoad %492 
                                                      OpStore %485 %493 
                                                      OpBranch %488 
                                             %488 = OpLabel 
                                         f32 %494 = OpLoad %485 
                                Private f32* %495 = OpAccessChain %334 %111 
                                                      OpStore %495 %494 
                                        bool %498 = OpLoad %224 
                                                      OpSelectionMerge %500 None 
                                                      OpBranchConditional %498 %499 %503 
                                             %499 = OpLabel 
                                Private f32* %501 = OpAccessChain %451 %111 
                                         f32 %502 = OpLoad %501 
                                                      OpStore %497 %502 
                                                      OpBranch %500 
                                             %503 = OpLabel 
                                                      OpStore %497 %53 
                                                      OpBranch %500 
                                             %500 = OpLabel 
                                         f32 %504 = OpLoad %497 
                                Private f32* %505 = OpAccessChain %496 %138 
                                                      OpStore %505 %504 
                                Private f32* %506 = OpAccessChain %334 %111 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpFMul %507 %380 
                                Private f32* %509 = OpAccessChain %451 %111 
                                                      OpStore %509 %508 
                                Private f32* %511 = OpAccessChain %334 %111 
                                         f32 %512 = OpLoad %511 
                                        bool %513 = OpFOrdLessThan %512 %384 
                                                      OpStore %510 %513 
                                Private f32* %514 = OpAccessChain %334 %111 
                                         f32 %515 = OpLoad %514 
                                         f32 %516 = OpFMul %515 %380 
                                         f32 %517 = OpFAdd %516 %68 
                                Private f32* %518 = OpAccessChain %334 %111 
                                                      OpStore %518 %517 
                                        bool %520 = OpLoad %510 
                                                      OpSelectionMerge %522 None 
                                                      OpBranchConditional %520 %521 %525 
                                             %521 = OpLabel 
                                Private f32* %523 = OpAccessChain %334 %111 
                                         f32 %524 = OpLoad %523 
                                                      OpStore %519 %524 
                                                      OpBranch %522 
                                             %525 = OpLabel 
                                Private f32* %526 = OpAccessChain %451 %111 
                                         f32 %527 = OpLoad %526 
                                                      OpStore %519 %527 
                                                      OpBranch %522 
                                             %522 = OpLabel 
                                         f32 %528 = OpLoad %519 
                                Private f32* %529 = OpAccessChain %496 %111 
                                                      OpStore %529 %528 
                                        bool %531 = OpLoad %220 
                                                      OpSelectionMerge %533 None 
                                                      OpBranchConditional %531 %532 %536 
                                             %532 = OpLabel 
                                       f32_3 %534 = OpLoad %496 
                                       f32_2 %535 = OpVectorShuffle %534 %534 0 2 
                                                      OpStore %530 %535 
                                                      OpBranch %533 
                                             %536 = OpLabel 
                                                      OpStore %530 %409 
                                                      OpBranch %533 
                                             %533 = OpLabel 
                                       f32_2 %537 = OpLoad %530 
                                       f32_3 %538 = OpLoad %304 
                                       f32_3 %539 = OpVectorShuffle %538 %537 3 1 4 
                                                      OpStore %304 %539 
                                                      OpBranch %421 
                                             %540 = OpLabel 
                                Private f32* %541 = OpAccessChain %42 %111 
                                         f32 %542 = OpLoad %541 
                                        bool %543 = OpFOrdNotEqual %542 %53 
                                                      OpStore %510 %543 
                                Private f32* %544 = OpAccessChain %42 %138 
                                         f32 %545 = OpLoad %544 
                                Private f32* %546 = OpAccessChain %42 %125 
                                         f32 %547 = OpLoad %546 
                                        bool %548 = OpFOrdLessThan %545 %547 
                                                      OpStore %220 %548 
                                        bool %550 = OpLoad %220 
                                                      OpSelectionMerge %552 None 
                                                      OpBranchConditional %550 %551 %555 
                                             %551 = OpLabel 
                                Private f32* %553 = OpAccessChain %42 %138 
                                         f32 %554 = OpLoad %553 
                                                      OpStore %549 %554 
                                                      OpBranch %552 
                                             %555 = OpLabel 
                                Private f32* %556 = OpAccessChain %42 %125 
                                         f32 %557 = OpLoad %556 
                                                      OpStore %549 %557 
                                                      OpBranch %552 
                                             %552 = OpLabel 
                                         f32 %558 = OpLoad %549 
                                Private f32* %559 = OpAccessChain %334 %111 
                                                      OpStore %559 %558 
                                Private f32* %560 = OpAccessChain %30 %111 
                                         f32 %561 = OpLoad %560 
                                Uniform f32* %562 = OpAccessChain %15 %20 %111 
                                         f32 %563 = OpLoad %562 
                                         f32 %564 = OpFMul %561 %563 
                                Private f32* %565 = OpAccessChain %334 %111 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFNegate %566 
                                         f32 %568 = OpFAdd %564 %567 
                                Private f32* %569 = OpAccessChain %334 %111 
                                                      OpStore %569 %568 
                                Private f32* %571 = OpAccessChain %334 %111 
                                         f32 %572 = OpLoad %571 
                                        bool %573 = OpFOrdNotEqual %572 %53 
                                      bool_2 %574 = OpLoad %570 
                                      bool_2 %575 = OpCompositeInsert %573 %574 0 
                                                      OpStore %570 %575 
                                Private f32* %576 = OpAccessChain %334 %111 
                                         f32 %577 = OpLoad %576 
                                Private f32* %578 = OpAccessChain %42 %111 
                                         f32 %579 = OpLoad %578 
                                         f32 %580 = OpFDiv %577 %579 
                                Private f32* %581 = OpAccessChain %451 %125 
                                                      OpStore %581 %580 
                                Private f32* %583 = OpAccessChain %30 %125 
                                         f32 %584 = OpLoad %583 
                                Uniform f32* %585 = OpAccessChain %15 %20 %125 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %584 %586 
                                Private f32* %588 = OpAccessChain %42 %138 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpFNegate %589 
                                         f32 %591 = OpFAdd %587 %590 
                                Private f32* %592 = OpAccessChain %582 %111 
                                                      OpStore %592 %591 
                                Private f32* %593 = OpAccessChain %582 %111 
                                         f32 %594 = OpLoad %593 
                                Private f32* %595 = OpAccessChain %334 %111 
                                         f32 %596 = OpLoad %595 
                                         f32 %597 = OpFDiv %594 %596 
                                Private f32* %598 = OpAccessChain %451 %111 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %582 %125 
                                                      OpStore %599 %53 
                                      bool_2 %601 = OpLoad %570 
                                        bool %602 = OpCompositeExtract %601 0 
                                                      OpSelectionMerge %604 None 
                                                      OpBranchConditional %602 %603 %606 
                                             %603 = OpLabel 
                                       f32_2 %605 = OpLoad %451 
                                                      OpStore %600 %605 
                                                      OpBranch %604 
                                             %606 = OpLabel 
                                       f32_2 %607 = OpLoad %582 
                                                      OpStore %600 %607 
                                                      OpBranch %604 
                                             %604 = OpLabel 
                                       f32_2 %608 = OpLoad %600 
                                       f32_3 %609 = OpLoad %334 
                                       f32_3 %610 = OpVectorShuffle %609 %608 0 3 4 
                                                      OpStore %334 %610 
                                Private f32* %612 = OpAccessChain %334 %125 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpFMul %613 %380 
                                                      OpStore %611 %614 
                                Private f32* %615 = OpAccessChain %334 %125 
                                         f32 %616 = OpLoad %615 
                                        bool %617 = OpFOrdLessThan %616 %384 
                                      bool_2 %618 = OpLoad %570 
                                      bool_2 %619 = OpCompositeInsert %617 %618 0 
                                                      OpStore %570 %619 
                                Private f32* %620 = OpAccessChain %334 %125 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFMul %621 %380 
                                         f32 %623 = OpFAdd %622 %68 
                                Private f32* %624 = OpAccessChain %451 %111 
                                                      OpStore %624 %623 
                                      bool_2 %626 = OpLoad %570 
                                        bool %627 = OpCompositeExtract %626 0 
                                                      OpSelectionMerge %629 None 
                                                      OpBranchConditional %627 %628 %632 
                                             %628 = OpLabel 
                                Private f32* %630 = OpAccessChain %451 %111 
                                         f32 %631 = OpLoad %630 
                                                      OpStore %625 %631 
                                                      OpBranch %629 
                                             %632 = OpLabel 
                                         f32 %633 = OpLoad %611 
                                                      OpStore %625 %633 
                                                      OpBranch %629 
                                             %629 = OpLabel 
                                         f32 %634 = OpLoad %625 
                                Private f32* %635 = OpAccessChain %334 %111 
                                                      OpStore %635 %634 
                                        bool %637 = OpLoad %510 
                                                      OpSelectionMerge %639 None 
                                                      OpBranchConditional %637 %638 %642 
                                             %638 = OpLabel 
                                       f32_3 %640 = OpLoad %334 
                                       f32_2 %641 = OpVectorShuffle %640 %640 0 2 
                                                      OpStore %636 %641 
                                                      OpBranch %639 
                                             %642 = OpLabel 
                                                      OpStore %636 %409 
                                                      OpBranch %639 
                                             %639 = OpLabel 
                                       f32_2 %643 = OpLoad %636 
                                       f32_3 %644 = OpLoad %304 
                                       f32_3 %645 = OpVectorShuffle %644 %643 3 1 4 
                                                      OpStore %304 %645 
                                                      OpBranch %421 
                                             %421 = OpLabel 
                                                      OpBranch %295 
                                             %295 = OpLabel 
                              Uniform f32_4* %647 = OpAccessChain %15 %646 
                                       f32_4 %648 = OpLoad %647 
                                       f32_4 %649 = OpVectorShuffle %648 %648 1 0 1 1 
                              Uniform f32_4* %650 = OpAccessChain %15 %646 
                                       f32_4 %651 = OpLoad %650 
                                       f32_4 %652 = OpVectorShuffle %651 %651 2 2 2 2 
                                      bool_4 %653 = OpFOrdLessThan %649 %652 
                                      bool_2 %654 = OpVectorShuffle %653 %653 0 1 
                                                      OpStore %570 %654 
                                      bool_2 %655 = OpLoad %570 
                                        bool %656 = OpCompositeExtract %655 1 
                                      bool_2 %657 = OpLoad %570 
                                        bool %658 = OpCompositeExtract %657 0 
                                        bool %659 = OpLogicalAnd %656 %658 
                                      bool_2 %660 = OpLoad %570 
                                      bool_2 %661 = OpCompositeInsert %659 %660 0 
                                                      OpStore %570 %661 
                                      bool_2 %662 = OpLoad %570 
                                        bool %663 = OpCompositeExtract %662 0 
                                                      OpSelectionMerge %665 None 
                                                      OpBranchConditional %663 %664 %772 
                                             %664 = OpLabel 
                                Uniform f32* %666 = OpAccessChain %15 %646 %138 
                                         f32 %667 = OpLoad %666 
                                        bool %668 = OpFOrdNotEqual %667 %53 
                                      bool_2 %669 = OpLoad %570 
                                      bool_2 %670 = OpCompositeInsert %668 %669 0 
                                                      OpStore %570 %670 
                                Uniform f32* %671 = OpAccessChain %15 %646 %125 
                                         f32 %672 = OpLoad %671 
                                Uniform f32* %673 = OpAccessChain %15 %646 %111 
                                         f32 %674 = OpLoad %673 
                                         f32 %675 = OpExtInst %1 37 %672 %674 
                                Private f32* %676 = OpAccessChain %334 %111 
                                                      OpStore %676 %675 
                                Private f32* %677 = OpAccessChain %334 %111 
                                         f32 %678 = OpLoad %677 
                                         f32 %679 = OpFNegate %678 
                                Uniform f32* %680 = OpAccessChain %15 %646 %138 
                                         f32 %681 = OpLoad %680 
                                         f32 %682 = OpFAdd %679 %681 
                                Private f32* %683 = OpAccessChain %334 %111 
                                                      OpStore %683 %682 
                                Private f32* %685 = OpAccessChain %334 %111 
                                         f32 %686 = OpLoad %685 
                                        bool %687 = OpFOrdNotEqual %686 %53 
                                      bool_2 %688 = OpLoad %684 
                                      bool_2 %689 = OpCompositeInsert %687 %688 0 
                                                      OpStore %684 %689 
                                Private f32* %690 = OpAccessChain %334 %111 
                                         f32 %691 = OpLoad %690 
                                Uniform f32* %692 = OpAccessChain %15 %646 %138 
                                         f32 %693 = OpLoad %692 
                                         f32 %694 = OpFDiv %691 %693 
                                Private f32* %695 = OpAccessChain %451 %111 
                                                      OpStore %695 %694 
                                Uniform f32* %696 = OpAccessChain %15 %646 %125 
                                         f32 %697 = OpLoad %696 
                                         f32 %698 = OpFNegate %697 
                                Uniform f32* %699 = OpAccessChain %15 %646 %111 
                                         f32 %700 = OpLoad %699 
                                         f32 %701 = OpFAdd %698 %700 
                                Private f32* %702 = OpAccessChain %334 %138 
                                                      OpStore %702 %701 
                                Private f32* %703 = OpAccessChain %334 %138 
                                         f32 %704 = OpLoad %703 
                                Private f32* %705 = OpAccessChain %334 %111 
                                         f32 %706 = OpLoad %705 
                                         f32 %707 = OpFDiv %704 %706 
                                Private f32* %708 = OpAccessChain %334 %111 
                                                      OpStore %708 %707 
                                       f32_3 %709 = OpLoad %334 
                                       f32_2 %710 = OpVectorShuffle %709 %709 0 2 
                                       f32_2 %712 = OpFAdd %710 %711 
                                                      OpStore %475 %712 
                                      bool_2 %714 = OpLoad %684 
                                        bool %715 = OpCompositeExtract %714 0 
                                                      OpSelectionMerge %717 None 
                                                      OpBranchConditional %715 %716 %720 
                                             %716 = OpLabel 
                                Private f32* %718 = OpAccessChain %475 %111 
                                         f32 %719 = OpLoad %718 
                                                      OpStore %713 %719 
                                                      OpBranch %717 
                                             %720 = OpLabel 
                                Private f32* %721 = OpAccessChain %475 %125 
                                         f32 %722 = OpLoad %721 
                                                      OpStore %713 %722 
                                                      OpBranch %717 
                                             %717 = OpLabel 
                                         f32 %723 = OpLoad %713 
                                Private f32* %724 = OpAccessChain %334 %111 
                                                      OpStore %724 %723 
                                      bool_2 %726 = OpLoad %684 
                                        bool %727 = OpCompositeExtract %726 0 
                                                      OpSelectionMerge %729 None 
                                                      OpBranchConditional %727 %728 %732 
                                             %728 = OpLabel 
                                Private f32* %730 = OpAccessChain %451 %111 
                                         f32 %731 = OpLoad %730 
                                                      OpStore %725 %731 
                                                      OpBranch %729 
                                             %732 = OpLabel 
                                                      OpStore %725 %53 
                                                      OpBranch %729 
                                             %729 = OpLabel 
                                         f32 %733 = OpLoad %725 
                                Private f32* %734 = OpAccessChain %496 %138 
                                                      OpStore %734 %733 
                                Private f32* %735 = OpAccessChain %334 %111 
                                         f32 %736 = OpLoad %735 
                                         f32 %737 = OpFMul %736 %380 
                                Private f32* %738 = OpAccessChain %451 %111 
                                                      OpStore %738 %737 
                                Private f32* %739 = OpAccessChain %334 %111 
                                         f32 %740 = OpLoad %739 
                                        bool %741 = OpFOrdLessThan %740 %384 
                                      bool_2 %742 = OpLoad %684 
                                      bool_2 %743 = OpCompositeInsert %741 %742 0 
                                                      OpStore %684 %743 
                                Private f32* %744 = OpAccessChain %334 %111 
                                         f32 %745 = OpLoad %744 
                                         f32 %746 = OpFMul %745 %380 
                                         f32 %747 = OpFAdd %746 %68 
                                Private f32* %748 = OpAccessChain %334 %111 
                                                      OpStore %748 %747 
                                      bool_2 %750 = OpLoad %684 
                                        bool %751 = OpCompositeExtract %750 0 
                                                      OpSelectionMerge %753 None 
                                                      OpBranchConditional %751 %752 %756 
                                             %752 = OpLabel 
                                Private f32* %754 = OpAccessChain %334 %111 
                                         f32 %755 = OpLoad %754 
                                                      OpStore %749 %755 
                                                      OpBranch %753 
                                             %756 = OpLabel 
                                Private f32* %757 = OpAccessChain %451 %111 
                                         f32 %758 = OpLoad %757 
                                                      OpStore %749 %758 
                                                      OpBranch %753 
                                             %753 = OpLabel 
                                         f32 %759 = OpLoad %749 
                                Private f32* %760 = OpAccessChain %496 %111 
                                                      OpStore %760 %759 
                                      bool_2 %762 = OpLoad %570 
                                        bool %763 = OpCompositeExtract %762 0 
                                                      OpSelectionMerge %765 None 
                                                      OpBranchConditional %763 %764 %768 
                                             %764 = OpLabel 
                                       f32_3 %766 = OpLoad %496 
                                       f32_2 %767 = OpVectorShuffle %766 %766 0 2 
                                                      OpStore %761 %767 
                                                      OpBranch %765 
                                             %768 = OpLabel 
                                                      OpStore %761 %409 
                                                      OpBranch %765 
                                             %765 = OpLabel 
                                       f32_2 %769 = OpLoad %761 
                                       f32_3 %770 = OpLoad %334 
                                       f32_3 %771 = OpVectorShuffle %770 %769 3 4 2 
                                                      OpStore %334 %771 
                                                      OpBranch %665 
                                             %772 = OpLabel 
                                Uniform f32* %773 = OpAccessChain %15 %646 %111 
                                         f32 %774 = OpLoad %773 
                                Uniform f32* %775 = OpAccessChain %15 %646 %125 
                                         f32 %776 = OpLoad %775 
                                        bool %777 = OpFOrdLessThan %774 %776 
                                      bool_2 %778 = OpLoad %570 
                                      bool_2 %779 = OpCompositeInsert %777 %778 0 
                                                      OpStore %570 %779 
                                                      OpSelectionMerge %781 None 
                                                      OpBranchConditional %7 %780 %781 
                                             %780 = OpLabel 
                                      bool_2 %782 = OpLoad %570 
                                        bool %783 = OpCompositeExtract %782 0 
                                                      OpSelectionMerge %785 None 
                                                      OpBranchConditional %783 %784 %785 
                                             %784 = OpLabel 
                                                      OpBranch %785 
                                             %785 = OpLabel 
                                                      OpBranch %781 
                                             %781 = OpLabel 
                                                      OpSelectionMerge %788 None 
                                                      OpBranchConditional %786 %787 %893 
                                             %787 = OpLabel 
                                Uniform f32* %789 = OpAccessChain %15 %646 %125 
                                         f32 %790 = OpLoad %789 
                                        bool %791 = OpFOrdNotEqual %790 %53 
                                      bool_2 %792 = OpLoad %570 
                                      bool_2 %793 = OpCompositeInsert %791 %792 0 
                                                      OpStore %570 %793 
                                Uniform f32* %794 = OpAccessChain %15 %646 %111 
                                         f32 %795 = OpLoad %794 
                                Uniform f32* %796 = OpAccessChain %15 %646 %138 
                                         f32 %797 = OpLoad %796 
                                         f32 %798 = OpExtInst %1 37 %795 %797 
                                Private f32* %799 = OpAccessChain %458 %111 
                                                      OpStore %799 %798 
                                Private f32* %800 = OpAccessChain %458 %111 
                                         f32 %801 = OpLoad %800 
                                         f32 %802 = OpFNegate %801 
                                Uniform f32* %803 = OpAccessChain %15 %646 %125 
                                         f32 %804 = OpLoad %803 
                                         f32 %805 = OpFAdd %802 %804 
                                Private f32* %806 = OpAccessChain %458 %111 
                                                      OpStore %806 %805 
                                Private f32* %807 = OpAccessChain %458 %111 
                                         f32 %808 = OpLoad %807 
                                        bool %809 = OpFOrdNotEqual %808 %53 
                                      bool_2 %810 = OpLoad %684 
                                      bool_2 %811 = OpCompositeInsert %809 %810 0 
                                                      OpStore %684 %811 
                                Private f32* %812 = OpAccessChain %458 %111 
                                         f32 %813 = OpLoad %812 
                                Uniform f32* %814 = OpAccessChain %15 %646 %125 
                                         f32 %815 = OpLoad %814 
                                         f32 %816 = OpFDiv %813 %815 
                                                      OpStore %611 %816 
                                Uniform f32* %817 = OpAccessChain %15 %646 %111 
                                         f32 %818 = OpLoad %817 
                                         f32 %819 = OpFNegate %818 
                                Uniform f32* %820 = OpAccessChain %15 %646 %138 
                                         f32 %821 = OpLoad %820 
                                         f32 %822 = OpFAdd %819 %821 
                                Private f32* %823 = OpAccessChain %496 %111 
                                                      OpStore %823 %822 
                                Private f32* %824 = OpAccessChain %496 %111 
                                         f32 %825 = OpLoad %824 
                                Private f32* %826 = OpAccessChain %458 %111 
                                         f32 %827 = OpLoad %826 
                                         f32 %828 = OpFDiv %825 %827 
                                Private f32* %829 = OpAccessChain %458 %111 
                                                      OpStore %829 %828 
                                Private f32* %830 = OpAccessChain %458 %111 
                                         f32 %831 = OpLoad %830 
                                         f32 %832 = OpFAdd %831 %478 
                                Private f32* %833 = OpAccessChain %475 %111 
                                                      OpStore %833 %832 
                                Private f32* %835 = OpAccessChain %496 %111 
                                         f32 %836 = OpLoad %835 
                                         f32 %837 = OpFAdd %836 %478 
                                                      OpStore %834 %837 
                                      bool_2 %839 = OpLoad %684 
                                        bool %840 = OpCompositeExtract %839 0 
                                                      OpSelectionMerge %842 None 
                                                      OpBranchConditional %840 %841 %845 
                                             %841 = OpLabel 
                                Private f32* %843 = OpAccessChain %475 %111 
                                         f32 %844 = OpLoad %843 
                                                      OpStore %838 %844 
                                                      OpBranch %842 
                                             %845 = OpLabel 
                                         f32 %846 = OpLoad %834 
                                                      OpStore %838 %846 
                                                      OpBranch %842 
                                             %842 = OpLabel 
                                         f32 %847 = OpLoad %838 
                                Private f32* %848 = OpAccessChain %458 %111 
                                                      OpStore %848 %847 
                                      bool_2 %850 = OpLoad %684 
                                        bool %851 = OpCompositeExtract %850 0 
                                                      OpSelectionMerge %853 None 
                                                      OpBranchConditional %851 %852 %855 
                                             %852 = OpLabel 
                                         f32 %854 = OpLoad %611 
                                                      OpStore %849 %854 
                                                      OpBranch %853 
                                             %855 = OpLabel 
                                                      OpStore %849 %53 
                                                      OpBranch %853 
                                             %853 = OpLabel 
                                         f32 %856 = OpLoad %849 
                                Private f32* %857 = OpAccessChain %496 %138 
                                                      OpStore %857 %856 
                                Private f32* %858 = OpAccessChain %458 %111 
                                         f32 %859 = OpLoad %858 
                                         f32 %860 = OpFMul %859 %380 
                                                      OpStore %611 %860 
                                Private f32* %861 = OpAccessChain %458 %111 
                                         f32 %862 = OpLoad %861 
                                        bool %863 = OpFOrdLessThan %862 %384 
                                      bool_2 %864 = OpLoad %684 
                                      bool_2 %865 = OpCompositeInsert %863 %864 0 
                                                      OpStore %684 %865 
                                Private f32* %866 = OpAccessChain %458 %111 
                                         f32 %867 = OpLoad %866 
                                         f32 %868 = OpFMul %867 %380 
                                         f32 %869 = OpFAdd %868 %68 
                                Private f32* %870 = OpAccessChain %458 %111 
                                                      OpStore %870 %869 
                                      bool_2 %872 = OpLoad %684 
                                        bool %873 = OpCompositeExtract %872 0 
                                                      OpSelectionMerge %875 None 
                                                      OpBranchConditional %873 %874 %878 
                                             %874 = OpLabel 
                                Private f32* %876 = OpAccessChain %458 %111 
                                         f32 %877 = OpLoad %876 
                                                      OpStore %871 %877 
                                                      OpBranch %875 
                                             %878 = OpLabel 
                                         f32 %879 = OpLoad %611 
                                                      OpStore %871 %879 
                                                      OpBranch %875 
                                             %875 = OpLabel 
                                         f32 %880 = OpLoad %871 
                                Private f32* %881 = OpAccessChain %496 %111 
                                                      OpStore %881 %880 
                                      bool_2 %883 = OpLoad %570 
                                        bool %884 = OpCompositeExtract %883 0 
                                                      OpSelectionMerge %886 None 
                                                      OpBranchConditional %884 %885 %889 
                                             %885 = OpLabel 
                                       f32_3 %887 = OpLoad %496 
                                       f32_2 %888 = OpVectorShuffle %887 %887 0 2 
                                                      OpStore %882 %888 
                                                      OpBranch %886 
                                             %889 = OpLabel 
                                                      OpStore %882 %409 
                                                      OpBranch %886 
                                             %886 = OpLabel 
                                       f32_2 %890 = OpLoad %882 
                                       f32_3 %891 = OpLoad %334 
                                       f32_3 %892 = OpVectorShuffle %891 %890 3 4 2 
                                                      OpStore %334 %892 
                                                      OpBranch %788 
                                             %893 = OpLabel 
                                Uniform f32* %894 = OpAccessChain %15 %646 %111 
                                         f32 %895 = OpLoad %894 
                                        bool %896 = OpFOrdNotEqual %895 %53 
                                      bool_2 %897 = OpLoad %570 
                                      bool_2 %898 = OpCompositeInsert %896 %897 0 
                                                      OpStore %570 %898 
                                Uniform f32* %899 = OpAccessChain %15 %646 %138 
                                         f32 %900 = OpLoad %899 
                                Uniform f32* %901 = OpAccessChain %15 %646 %125 
                                         f32 %902 = OpLoad %901 
                                         f32 %903 = OpExtInst %1 37 %900 %902 
                                Private f32* %904 = OpAccessChain %458 %111 
                                                      OpStore %904 %903 
                                Private f32* %905 = OpAccessChain %458 %111 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFNegate %906 
                                Uniform f32* %908 = OpAccessChain %15 %646 %111 
                                         f32 %909 = OpLoad %908 
                                         f32 %910 = OpFAdd %907 %909 
                                Private f32* %911 = OpAccessChain %458 %111 
                                                      OpStore %911 %910 
                                Private f32* %912 = OpAccessChain %458 %111 
                                         f32 %913 = OpLoad %912 
                                        bool %914 = OpFOrdNotEqual %913 %53 
                                      bool_2 %915 = OpLoad %684 
                                      bool_2 %916 = OpCompositeInsert %914 %915 0 
                                                      OpStore %684 %916 
                                Private f32* %917 = OpAccessChain %458 %111 
                                         f32 %918 = OpLoad %917 
                                Uniform f32* %919 = OpAccessChain %15 %646 %111 
                                         f32 %920 = OpLoad %919 
                                         f32 %921 = OpFDiv %918 %920 
                                Private f32* %922 = OpAccessChain %582 %125 
                                                      OpStore %922 %921 
                                Uniform f32* %924 = OpAccessChain %15 %646 %138 
                                         f32 %925 = OpLoad %924 
                                         f32 %926 = OpFNegate %925 
                                Uniform f32* %927 = OpAccessChain %15 %646 %125 
                                         f32 %928 = OpLoad %927 
                                         f32 %929 = OpFAdd %926 %928 
                                Private f32* %930 = OpAccessChain %923 %111 
                                                      OpStore %930 %929 
                                Private f32* %931 = OpAccessChain %923 %111 
                                         f32 %932 = OpLoad %931 
                                Private f32* %933 = OpAccessChain %458 %111 
                                         f32 %934 = OpLoad %933 
                                         f32 %935 = OpFDiv %932 %934 
                                Private f32* %936 = OpAccessChain %582 %111 
                                                      OpStore %936 %935 
                                Private f32* %937 = OpAccessChain %923 %125 
                                                      OpStore %937 %53 
                                      bool_2 %939 = OpLoad %684 
                                        bool %940 = OpCompositeExtract %939 0 
                                                      OpSelectionMerge %942 None 
                                                      OpBranchConditional %940 %941 %944 
                                             %941 = OpLabel 
                                       f32_2 %943 = OpLoad %582 
                                                      OpStore %938 %943 
                                                      OpBranch %942 
                                             %944 = OpLabel 
                                       f32_2 %945 = OpLoad %923 
                                                      OpStore %938 %945 
                                                      OpBranch %942 
                                             %942 = OpLabel 
                                       f32_2 %946 = OpLoad %938 
                                       f32_3 %947 = OpLoad %496 
                                       f32_3 %948 = OpVectorShuffle %947 %946 0 3 4 
                                                      OpStore %496 %948 
                                Private f32* %949 = OpAccessChain %496 %125 
                                         f32 %950 = OpLoad %949 
                                         f32 %951 = OpFMul %950 %380 
                                Private f32* %952 = OpAccessChain %458 %111 
                                                      OpStore %952 %951 
                                Private f32* %953 = OpAccessChain %496 %125 
                                         f32 %954 = OpLoad %953 
                                        bool %955 = OpFOrdLessThan %954 %384 
                                      bool_2 %956 = OpLoad %684 
                                      bool_2 %957 = OpCompositeInsert %955 %956 0 
                                                      OpStore %684 %957 
                                Private f32* %958 = OpAccessChain %496 %125 
                                         f32 %959 = OpLoad %958 
                                         f32 %960 = OpFMul %959 %380 
                                         f32 %961 = OpFAdd %960 %68 
                                                      OpStore %611 %961 
                                      bool_2 %963 = OpLoad %684 
                                        bool %964 = OpCompositeExtract %963 0 
                                                      OpSelectionMerge %966 None 
                                                      OpBranchConditional %964 %965 %968 
                                             %965 = OpLabel 
                                         f32 %967 = OpLoad %611 
                                                      OpStore %962 %967 
                                                      OpBranch %966 
                                             %968 = OpLabel 
                                Private f32* %969 = OpAccessChain %458 %111 
                                         f32 %970 = OpLoad %969 
                                                      OpStore %962 %970 
                                                      OpBranch %966 
                                             %966 = OpLabel 
                                         f32 %971 = OpLoad %962 
                                Private f32* %972 = OpAccessChain %496 %111 
                                                      OpStore %972 %971 
                                      bool_2 %974 = OpLoad %570 
                                        bool %975 = OpCompositeExtract %974 0 
                                                      OpSelectionMerge %977 None 
                                                      OpBranchConditional %975 %976 %980 
                                             %976 = OpLabel 
                                       f32_3 %978 = OpLoad %496 
                                       f32_2 %979 = OpVectorShuffle %978 %978 0 2 
                                                      OpStore %973 %979 
                                                      OpBranch %977 
                                             %980 = OpLabel 
                                                      OpStore %973 %409 
                                                      OpBranch %977 
                                             %977 = OpLabel 
                                       f32_2 %981 = OpLoad %973 
                                       f32_3 %982 = OpLoad %334 
                                       f32_3 %983 = OpVectorShuffle %982 %981 3 4 2 
                                                      OpStore %334 %983 
                                                      OpBranch %788 
                                             %788 = OpLabel 
                                                      OpBranch %665 
                                             %665 = OpLabel 
                                       f32_3 %984 = OpLoad %334 
                                       f32_2 %985 = OpVectorShuffle %984 %984 1 0 
                                Uniform f32* %987 = OpAccessChain %15 %986 
                                         f32 %988 = OpLoad %987 
                                Uniform f32* %990 = OpAccessChain %15 %989 
                                         f32 %991 = OpLoad %990 
                                       f32_2 %992 = OpCompositeConstruct %988 %991 
                                       f32_2 %993 = OpFNegate %992 
                                       f32_2 %994 = OpFAdd %985 %993 
                                                      OpStore %458 %994 
                                       f32_3 %995 = OpLoad %304 
                                       f32_4 %996 = OpVectorShuffle %995 %995 2 0 2 2 
                                       f32_2 %997 = OpLoad %458 
                                       f32_4 %998 = OpVectorShuffle %997 %997 0 1 0 0 
                                      bool_4 %999 = OpFOrdLessThan %996 %998 
                                     bool_2 %1000 = OpVectorShuffle %999 %999 0 1 
                                                      OpStore %570 %1000 
                               Private f32* %1001 = OpAccessChain %458 %125 
                                        f32 %1002 = OpLoad %1001 
                                        f32 %1003 = OpFAdd %1002 %68 
                               Private f32* %1004 = OpAccessChain %458 %111 
                                                      OpStore %1004 %1003 
                               Private f32* %1005 = OpAccessChain %304 %111 
                                        f32 %1006 = OpLoad %1005 
                               Private f32* %1007 = OpAccessChain %458 %111 
                                        f32 %1008 = OpLoad %1007 
                                       bool %1009 = OpFOrdLessThan %1006 %1008 
                                                      OpStore %510 %1009 
                                       bool %1010 = OpLoad %510 
                                     bool_2 %1011 = OpLoad %570 
                                       bool %1012 = OpCompositeExtract %1011 1 
                                       bool %1013 = OpLogicalAnd %1010 %1012 
                                     bool_2 %1014 = OpLoad %684 
                                     bool_2 %1015 = OpCompositeInsert %1013 %1014 0 
                                                      OpStore %684 %1015 
                                     bool_2 %1016 = OpLoad %684 
                                       bool %1017 = OpCompositeExtract %1016 0 
                                     bool_2 %1018 = OpLoad %570 
                                       bool %1019 = OpCompositeExtract %1018 0 
                                       bool %1020 = OpLogicalOr %1017 %1019 
                                     bool_2 %1021 = OpLoad %570 
                                     bool_2 %1022 = OpCompositeInsert %1020 %1021 0 
                                                      OpStore %570 %1022 
                                      f32_3 %1023 = OpLoad %334 
                                      f32_2 %1024 = OpVectorShuffle %1023 %1023 1 0 
                               Uniform f32* %1025 = OpAccessChain %15 %986 
                                        f32 %1026 = OpLoad %1025 
                               Uniform f32* %1027 = OpAccessChain %15 %989 
                                        f32 %1028 = OpLoad %1027 
                                      f32_2 %1029 = OpCompositeConstruct %1026 %1028 
                                      f32_2 %1030 = OpFAdd %1024 %1029 
                                      f32_3 %1031 = OpLoad %334 
                                      f32_3 %1032 = OpVectorShuffle %1031 %1030 3 4 2 
                                                      OpStore %334 %1032 
                                      f32_3 %1033 = OpLoad %334 
                                      f32_4 %1034 = OpVectorShuffle %1033 %1033 0 1 0 0 
                                      f32_3 %1035 = OpLoad %304 
                                      f32_4 %1036 = OpVectorShuffle %1035 %1035 2 0 2 2 
                                     bool_4 %1037 = OpFOrdLessThan %1034 %1036 
                                     bool_2 %1038 = OpVectorShuffle %1037 %1037 0 1 
                                                      OpStore %684 %1038 
                               Private f32* %1039 = OpAccessChain %334 %125 
                                        f32 %1040 = OpLoad %1039 
                                        f32 %1042 = OpFAdd %1040 %1041 
                                                      OpStore %191 %1042 
                                        f32 %1043 = OpLoad %191 
                               Private f32* %1044 = OpAccessChain %304 %111 
                                        f32 %1045 = OpLoad %1044 
                                       bool %1046 = OpFOrdLessThan %1043 %1045 
                                                      OpStore %220 %1046 
                                       bool %1047 = OpLoad %220 
                                     bool_2 %1048 = OpLoad %684 
                                       bool %1049 = OpCompositeExtract %1048 1 
                                       bool %1050 = OpLogicalAnd %1047 %1049 
                                                      OpStore %510 %1050 
                                       bool %1051 = OpLoad %510 
                                     bool_2 %1052 = OpLoad %684 
                                       bool %1053 = OpCompositeExtract %1052 0 
                                       bool %1054 = OpLogicalOr %1051 %1053 
                                     bool_2 %1055 = OpLoad %684 
                                     bool_2 %1056 = OpCompositeInsert %1054 %1055 0 
                                                      OpStore %684 %1056 
                               Private f32* %1057 = OpAccessChain %183 %138 
                                                      OpStore %1057 %53 
                                     bool_2 %1060 = OpLoad %684 
                                       bool %1061 = OpCompositeExtract %1060 0 
                                                      OpSelectionMerge %1063 None 
                                                      OpBranchConditional %1061 %1062 %1066 
                                            %1062 = OpLabel 
                             Uniform f32_4* %1064 = OpAccessChain %15 %236 
                                      f32_4 %1065 = OpLoad %1064 
                                                      OpStore %1059 %1065 
                                                      OpBranch %1063 
                                            %1066 = OpLabel 
                                      f32_3 %1067 = OpLoad %183 
                                      f32_4 %1068 = OpVectorShuffle %1067 %1067 0 0 0 2 
                                                      OpStore %1059 %1068 
                                                      OpBranch %1063 
                                            %1063 = OpLabel 
                                      f32_4 %1069 = OpLoad %1059 
                                                      OpStore %1058 %1069 
                                     bool_2 %1071 = OpLoad %570 
                                       bool %1072 = OpCompositeExtract %1071 0 
                                                      OpSelectionMerge %1074 None 
                                                      OpBranchConditional %1072 %1073 %1077 
                                            %1073 = OpLabel 
                             Uniform f32_4* %1075 = OpAccessChain %15 %249 
                                      f32_4 %1076 = OpLoad %1075 
                                                      OpStore %1070 %1076 
                                                      OpBranch %1074 
                                            %1077 = OpLabel 
                                      f32_4 %1078 = OpLoad %1058 
                                                      OpStore %1070 %1078 
                                                      OpBranch %1074 
                                            %1074 = OpLabel 
                                      f32_4 %1079 = OpLoad %1070 
                                                      OpStore %244 %1079 
                                                      OpBranch %275 
                                             %275 = OpLabel 
                                                      OpBranch %264 
                                             %264 = OpLabel 
                                                      OpBranch %218 
                                             %218 = OpLabel 
                                                      OpBranch %27 
                                            %1080 = OpLabel 
                               Uniform i32* %1081 = OpAccessChain %15 %16 
                                        i32 %1082 = OpLoad %1081 
                                       bool %1083 = OpIEqual %1082 %16 
                                     bool_2 %1084 = OpLoad %570 
                                     bool_2 %1085 = OpCompositeInsert %1083 %1084 0 
                                                      OpStore %570 %1085 
                                     bool_2 %1087 = OpLoad %570 
                                       bool %1088 = OpCompositeExtract %1087 0 
                                                      OpSelectionMerge %1090 None 
                                                      OpBranchConditional %1088 %1089 %1093 
                                            %1089 = OpLabel 
                             Uniform f32_4* %1091 = OpAccessChain %15 %249 
                                      f32_4 %1092 = OpLoad %1091 
                                                      OpStore %1086 %1092 
                                                      OpBranch %1090 
                                            %1093 = OpLabel 
                                                      OpStore %1086 %1094 
                                                      OpBranch %1090 
                                            %1090 = OpLabel 
                                      f32_4 %1095 = OpLoad %1086 
                                                      OpStore %244 %1095 
                                                      OpBranch %27 
                                              %27 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "EDITOR_VISUALIZATION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "EDITOR_VISUALIZATION" }
""
}
SubProgram "vulkan " {
Keywords { "EDITOR_VISUALIZATION" }
""
}
}
}
}
Fallback "Legacy Shaders/VertexLit"
}