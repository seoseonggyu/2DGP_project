//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/CutoutEmissiveGodrayExperimental" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_Perpendicular ("Is Perpendicular Tilt", Float) = 1
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
_EmissivePower ("Emissive Power", Float) = 0
_EmissiveColorPower ("Emissive Color Power", Float) = 7
_EmissiveColor ("Emissive Color", Color) = (1,1,1,1)
_LightScale ("Light Scale", Float) = 1.5
_HeightOffGround ("HeightOffGround", Float) = 10
_MeshBoundsCenter ("Mesh Bounds", Vector) = (0,0,0,0)
_MeshBoundsExtents ("Mesh Extents", Vector) = (1,1,1,1)
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 12717
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
float u_xlat10;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb3 = 0.0<_Perpendicular;
    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat3 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(_EmissivePower) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 226
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %152 %164 %165 %179 %207 %213 %216 %218 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %150 0 BuiltIn 150 
                                                      OpMemberDecorate %150 1 BuiltIn 150 
                                                      OpMemberDecorate %150 2 BuiltIn 150 
                                                      OpDecorate %150 Block 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %216 Location 216 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %218 Location 218 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %79 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                               Private f32_4* %97 = OpVariable Private 
                                             %100 = OpTypePointer Uniform %7 
                              Private f32_4* %129 = OpVariable Private 
                                             %149 = OpTypeArray %6 %13 
                                             %150 = OpTypeStruct %7 %6 %149 
                                             %151 = OpTypePointer Output %150 
        Output struct {f32_4; f32; f32[1];}* %152 = OpVariable Output 
                                             %160 = OpTypePointer Output %7 
                                             %162 = OpTypeVector %6 2 
                                             %163 = OpTypePointer Output %162 
                               Output f32_2* %164 = OpVariable Output 
                                Input f32_4* %165 = OpVariable Input 
                                         i32 %168 = OpConstant 4 
                                             %177 = OpTypeVector %6 3 
                                             %178 = OpTypePointer Input %177 
                                Input f32_3* %179 = OpVariable Input 
                                Private f32* %198 = OpVariable Private 
                                             %206 = OpTypePointer Output %177 
                               Output f32_3* %207 = OpVariable Output 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %216 = OpVariable Output 
                               Output f32_3* %218 = OpVariable Output 
                                       f32_3 %219 = OpConstantComposite %75 %75 %75 
                                             %220 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %81 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %76 = OpAccessChain %23 %54 
                                          f32 %77 = OpLoad %76 
                                         bool %78 = OpFOrdLessThan %75 %77 
                                                      OpStore %74 %78 
                                         bool %82 = OpLoad %74 
                                                      OpSelectionMerge %84 None 
                                                      OpBranchConditional %82 %83 %86 
                                              %83 = OpLabel 
                                                      OpStore %81 %85 
                                                      OpBranch %84 
                                              %86 = OpLabel 
                                                      OpStore %81 %87 
                                                      OpBranch %84 
                                              %84 = OpLabel 
                                          f32 %88 = OpLoad %81 
                                                      OpStore %79 %88 
                                 Private f32* %89 = OpAccessChain %9 %31 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpLoad %79 
                                          f32 %92 = OpFMul %90 %91 
                                   Input f32* %93 = OpAccessChain %11 %46 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %31 
                                                      OpStore %96 %95 
                                        f32_4 %98 = OpLoad %11 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %23 %25 %26 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                              Uniform f32_4* %104 = OpAccessChain %23 %25 %25 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %11 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %97 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %97 %110 
                              Uniform f32_4* %111 = OpAccessChain %23 %25 %43 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 0 0 0 0 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %97 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %23 %25 %54 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %97 %121 
                              Uniform f32_4* %122 = OpAccessChain %23 %25 %54 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %11 
                                       f32_4 %125 = OpVectorShuffle %124 %124 3 3 3 3 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %9 %128 
                                       f32_4 %130 = OpLoad %97 
                                       f32_4 %131 = OpVectorShuffle %130 %130 1 1 1 1 
                              Uniform f32_4* %132 = OpAccessChain %23 %43 %26 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpFMul %131 %133 
                                                      OpStore %129 %134 
                              Uniform f32_4* %135 = OpAccessChain %23 %43 %25 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %97 
                                       f32_4 %138 = OpVectorShuffle %137 %137 0 0 0 0 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %129 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %129 %141 
                              Uniform f32_4* %142 = OpAccessChain %23 %43 %43 
                                       f32_4 %143 = OpLoad %142 
                                       f32_4 %144 = OpLoad %97 
                                       f32_4 %145 = OpVectorShuffle %144 %144 2 2 2 2 
                                       f32_4 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %129 
                                       f32_4 %148 = OpFAdd %146 %147 
                                                      OpStore %129 %148 
                              Uniform f32_4* %153 = OpAccessChain %23 %43 %54 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpLoad %97 
                                       f32_4 %156 = OpVectorShuffle %155 %155 3 3 3 3 
                                       f32_4 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %129 
                                       f32_4 %159 = OpFAdd %157 %158 
                               Output f32_4* %161 = OpAccessChain %152 %25 
                                                      OpStore %161 %159 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                              Uniform f32_4* %169 = OpAccessChain %23 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                                       f32_2 %172 = OpFMul %167 %171 
                              Uniform f32_4* %173 = OpAccessChain %23 %168 
                                       f32_4 %174 = OpLoad %173 
                                       f32_2 %175 = OpVectorShuffle %174 %174 2 3 
                                       f32_2 %176 = OpFAdd %172 %175 
                                                      OpStore %164 %176 
                                       f32_3 %180 = OpLoad %179 
                              Uniform f32_4* %181 = OpAccessChain %23 %26 %25 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %180 %183 
                                Private f32* %185 = OpAccessChain %97 %31 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %179 
                              Uniform f32_4* %187 = OpAccessChain %23 %26 %26 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %186 %189 
                                Private f32* %191 = OpAccessChain %97 %13 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %179 
                              Uniform f32_4* %193 = OpAccessChain %23 %26 %43 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %97 %46 
                                                      OpStore %197 %196 
                                       f32_4 %199 = OpLoad %97 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %97 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                         f32 %203 = OpDot %200 %202 
                                                      OpStore %198 %203 
                                         f32 %204 = OpLoad %198 
                                         f32 %205 = OpExtInst %1 32 %204 
                                                      OpStore %198 %205 
                                         f32 %208 = OpLoad %198 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %97 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                                      OpStore %207 %212 
                                       f32_4 %214 = OpLoad %9 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                                      OpStore %213 %215 
                                       f32_4 %217 = OpLoad %9 
                                                      OpStore %216 %217 
                                                      OpStore %218 %219 
                                 Output f32* %221 = OpAccessChain %152 %25 %13 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpFNegate %222 
                                 Output f32* %224 = OpAccessChain %152 %25 %13 
                                                      OpStore %224 %223 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 232
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %99 %210 %216 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpMemberDecorate %31 5 RelaxedPrecision 
                                                      OpMemberDecorate %31 5 Offset 31 
                                                      OpMemberDecorate %31 6 Offset 31 
                                                      OpMemberDecorate %31 7 Offset 31 
                                                      OpMemberDecorate %31 8 RelaxedPrecision 
                                                      OpMemberDecorate %31 8 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %90 SpecId 90 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %216 Location 216 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                               Private f32_3* %26 = OpVariable Private 
                                              %28 = OpTypeInt 32 0 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeStruct %7 %7 %30 %20 %20 %7 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 7 
                                              %36 = OpTypePointer Uniform %6 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %52 = OpConstant 3 
                                              %53 = OpTypePointer Private %6 
                                          i32 %56 = OpConstant 8 
                                          u32 %61 = OpConstant 0 
                                              %63 = OpTypeBool 
                                              %64 = OpTypePointer Private %63 
                                Private bool* %65 = OpVariable Private 
                                          f32 %68 = OpConstant 3.674022E-40 
                                          i32 %71 = OpConstant 0 
                                          i32 %72 = OpConstant 1 
                                          i32 %74 = OpConstant -1 
                                          f32 %82 = OpConstant 3.674022E-40 
                                         bool %84 = OpConstantFalse 
                                         bool %90 = OpSpecConstantFalse 
                                          u32 %93 = OpConstant 1 
                               Private f32_3* %97 = OpVariable Private 
                                              %98 = OpTypePointer Input %20 
                                 Input f32_3* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 2 
                                             %103 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 3 
                                             %130 = OpTypePointer Function %20 
                                         i32 %140 = OpConstant 4 
                                             %141 = OpTypePointer Uniform %20 
                              Private f32_4* %146 = OpVariable Private 
                                Private f32* %153 = OpVariable Private 
                                         f32 %156 = OpConstant 3.674022E-40 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         u32 %160 = OpConstant 2 
                                         f32 %163 = OpConstant 3.674022E-40 
                                             %172 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %173 = OpTypeSampledImage %172 
                                             %174 = OpTypePointer UniformConstant %173 
 UniformConstant read_only Texture3DSampled* %175 = OpVariable UniformConstant 
                              Private f32_3* %186 = OpVariable Private 
                              Private f32_3* %196 = OpVariable Private 
                                         i32 %199 = OpConstant 5 
                                Input f32_3* %210 = OpVariable Input 
                                             %215 = OpTypePointer Output %7 
                               Output f32_4* %216 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                         i32 %221 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %131 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                                        f32_3 %25 = OpExtInst %1 30 %24 
                                                      OpStore %22 %25 
                                        f32_3 %27 = OpLoad %22 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                 Uniform f32* %39 = OpAccessChain %33 %35 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %41 = OpAccessChain %33 %35 
                                          f32 %42 = OpLoad %41 
                                        f32_3 %43 = OpCompositeConstruct %38 %40 %42 
                                          f32 %44 = OpCompositeExtract %43 0 
                                          f32 %45 = OpCompositeExtract %43 1 
                                          f32 %46 = OpCompositeExtract %43 2 
                                        f32_3 %47 = OpCompositeConstruct %44 %45 %46 
                                        f32_3 %48 = OpFMul %27 %47 
                                                      OpStore %26 %48 
                                        f32_3 %49 = OpLoad %26 
                                        f32_3 %50 = OpExtInst %1 29 %49 
                                                      OpStore %26 %50 
                                 Private f32* %54 = OpAccessChain %9 %52 
                                          f32 %55 = OpLoad %54 
                                 Uniform f32* %57 = OpAccessChain %33 %56 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFNegate %58 
                                          f32 %60 = OpFAdd %55 %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Private f32* %66 = OpAccessChain %51 %61 
                                          f32 %67 = OpLoad %66 
                                         bool %69 = OpFOrdLessThan %67 %68 
                                                      OpStore %65 %69 
                                         bool %70 = OpLoad %65 
                                          i32 %73 = OpSelect %70 %72 %71 
                                          i32 %75 = OpIMul %73 %74 
                                         bool %76 = OpINotEqual %75 %71 
                                                      OpSelectionMerge %78 None 
                                                      OpBranchConditional %76 %77 %78 
                                              %77 = OpLabel 
                                                      OpKill
                                              %78 = OpLabel 
                                 Uniform f32* %80 = OpAccessChain %33 %72 %61 
                                          f32 %81 = OpLoad %80 
                                         bool %83 = OpFOrdEqual %81 %82 
                                                      OpStore %65 %83 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %86 
                                              %85 = OpLabel 
                                         bool %87 = OpLoad %65 
                                                      OpSelectionMerge %89 None 
                                                      OpBranchConditional %87 %88 %89 
                                              %88 = OpLabel 
                                                      OpBranch %89 
                                              %89 = OpLabel 
                                                      OpBranch %86 
                                              %86 = OpLabel 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %181 
                                              %91 = OpLabel 
                                 Uniform f32* %94 = OpAccessChain %33 %72 %93 
                                          f32 %95 = OpLoad %94 
                                         bool %96 = OpFOrdEqual %95 %82 
                                                      OpStore %65 %96 
                                       f32_3 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 1 1 1 
                              Uniform f32_4* %104 = OpAccessChain %33 %102 %72 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFMul %101 %106 
                                                      OpStore %97 %107 
                              Uniform f32_4* %108 = OpAccessChain %33 %102 %71 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpLoad %99 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_3 %114 = OpLoad %97 
                                       f32_3 %115 = OpFAdd %113 %114 
                                                      OpStore %97 %115 
                              Uniform f32_4* %116 = OpAccessChain %33 %102 %102 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpLoad %99 
                                       f32_3 %120 = OpVectorShuffle %119 %119 2 2 2 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_3 %122 = OpLoad %97 
                                       f32_3 %123 = OpFAdd %121 %122 
                                                      OpStore %97 %123 
                                       f32_3 %124 = OpLoad %97 
                              Uniform f32_4* %126 = OpAccessChain %33 %102 %125 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_3 %129 = OpFAdd %124 %128 
                                                      OpStore %97 %129 
                                        bool %132 = OpLoad %65 
                                                      OpSelectionMerge %134 None 
                                                      OpBranchConditional %132 %133 %136 
                                             %133 = OpLabel 
                                       f32_3 %135 = OpLoad %97 
                                                      OpStore %131 %135 
                                                      OpBranch %134 
                                             %136 = OpLabel 
                                       f32_3 %137 = OpLoad %99 
                                                      OpStore %131 %137 
                                                      OpBranch %134 
                                             %134 = OpLabel 
                                       f32_3 %138 = OpLoad %131 
                                                      OpStore %97 %138 
                                       f32_3 %139 = OpLoad %97 
                              Uniform f32_3* %142 = OpAccessChain %33 %140 
                                       f32_3 %143 = OpLoad %142 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %139 %144 
                                                      OpStore %97 %145 
                                       f32_3 %147 = OpLoad %97 
                              Uniform f32_3* %148 = OpAccessChain %33 %125 
                                       f32_3 %149 = OpLoad %148 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %146 
                                       f32_4 %152 = OpVectorShuffle %151 %150 0 4 5 6 
                                                      OpStore %146 %152 
                                Private f32* %154 = OpAccessChain %146 %93 
                                         f32 %155 = OpLoad %154 
                                         f32 %157 = OpFMul %155 %156 
                                         f32 %159 = OpFAdd %157 %158 
                                                      OpStore %153 %159 
                                Uniform f32* %161 = OpAccessChain %33 %72 %160 
                                         f32 %162 = OpLoad %161 
                                         f32 %164 = OpFMul %162 %163 
                                         f32 %165 = OpFAdd %164 %158 
                                Private f32* %166 = OpAccessChain %97 %61 
                                                      OpStore %166 %165 
                                         f32 %167 = OpLoad %153 
                                Private f32* %168 = OpAccessChain %97 %61 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpExtInst %1 40 %167 %169 
                                Private f32* %171 = OpAccessChain %146 %61 
                                                      OpStore %171 %170 
                  read_only Texture3DSampled %176 = OpLoad %175 
                                       f32_4 %177 = OpLoad %146 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 2 3 
                                       f32_4 %179 = OpImageSampleImplicitLod %176 %178 
                                                      OpStore %146 %179 
                                       f32_4 %180 = OpLoad %146 
                                                      OpStore %51 %180 
                                                      OpBranch %92 
                                             %181 = OpLabel 
                                Private f32* %182 = OpAccessChain %51 %61 
                                                      OpStore %182 %82 
                                Private f32* %183 = OpAccessChain %51 %93 
                                                      OpStore %183 %82 
                                Private f32* %184 = OpAccessChain %51 %160 
                                                      OpStore %184 %82 
                                Private f32* %185 = OpAccessChain %51 %52 
                                                      OpStore %185 %82 
                                                      OpBranch %92 
                                              %92 = OpLabel 
                                       f32_4 %187 = OpLoad %51 
                              Uniform f32_4* %188 = OpAccessChain %33 %71 
                                       f32_4 %189 = OpLoad %188 
                                         f32 %190 = OpDot %187 %189 
                                Private f32* %191 = OpAccessChain %186 %61 
                                                      OpStore %191 %190 
                                Private f32* %192 = OpAccessChain %186 %61 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpExtInst %1 43 %193 %68 %82 
                                Private f32* %195 = OpAccessChain %186 %61 
                                                      OpStore %195 %194 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                              Uniform f32_4* %200 = OpAccessChain %33 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFMul %198 %202 
                                                      OpStore %196 %203 
                                       f32_3 %204 = OpLoad %186 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 0 0 
                                       f32_3 %206 = OpLoad %196 
                                       f32_3 %207 = OpFMul %205 %206 
                                                      OpStore %186 %207 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_3 %213 = OpLoad %186 
                                       f32_3 %214 = OpFAdd %212 %213 
                                                      OpStore %186 %214 
                                Private f32* %217 = OpAccessChain %9 %52 
                                         f32 %218 = OpLoad %217 
                                 Output f32* %220 = OpAccessChain %216 %52 
                                                      OpStore %220 %218 
                                Uniform f32* %222 = OpAccessChain %33 %221 
                                         f32 %223 = OpLoad %222 
                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
                                       f32_3 %225 = OpLoad %26 
                                       f32_3 %226 = OpFMul %224 %225 
                                       f32_3 %227 = OpLoad %186 
                                       f32_3 %228 = OpFAdd %226 %227 
                                       f32_4 %229 = OpLoad %216 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %216 %230 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat13;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb4 = 0.0<_Perpendicular;
    u_xlat4 = (u_xlatb4) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat0.x = u_xlat1.y * u_xlat1.y;
    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat1);
    u_xlat2.y = dot(unity_SHAg, u_xlat1);
    u_xlat2.z = dot(unity_SHAb, u_xlat1);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(_EmissivePower) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 339
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %155 %167 %168 %182 %218 %221 %224 %330 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 RelaxedPrecision 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 RelaxedPrecision 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 RelaxedPrecision 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %153 0 BuiltIn 153 
                                                      OpMemberDecorate %153 1 BuiltIn 153 
                                                      OpMemberDecorate %153 2 BuiltIn 153 
                                                      OpDecorate %153 Block 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %182 Location 182 
                                                      OpDecorate %218 Location 218 
                                                      OpDecorate %221 Location 221 
                                                      OpDecorate %224 Location 224 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %330 Location 330 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 7 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %34 = OpConstant 0 
                                          i32 %44 = OpConstant 2 
                                          u32 %47 = OpConstant 2 
                                          i32 %55 = OpConstant 3 
                                          u32 %58 = OpConstant 3 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %76 = OpConstant 3.674022E-40 
                                          i32 %77 = OpConstant 10 
                                 Private f32* %81 = OpVariable Private 
                                              %82 = OpTypePointer Function %6 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %89 = OpConstant 3.674022E-40 
                               Private f32_4* %99 = OpVariable Private 
                                             %102 = OpTypePointer Uniform %7 
                              Private f32_4* %131 = OpVariable Private 
                                         i32 %134 = OpConstant 9 
                                             %152 = OpTypeArray %6 %13 
                                             %153 = OpTypeStruct %7 %6 %152 
                                             %154 = OpTypePointer Output %153 
        Output struct {f32_4; f32; f32[1];}* %155 = OpVariable Output 
                                             %163 = OpTypePointer Output %7 
                                             %165 = OpTypeVector %6 2 
                                             %166 = OpTypePointer Output %165 
                               Output f32_2* %167 = OpVariable Output 
                                Input f32_4* %168 = OpVariable Input 
                                         i32 %171 = OpConstant 11 
                                             %180 = OpTypeVector %6 3 
                                             %181 = OpTypePointer Input %180 
                                Input f32_3* %182 = OpVariable Input 
                                         i32 %184 = OpConstant 8 
                                Private f32* %202 = OpVariable Private 
                                             %217 = OpTypePointer Output %180 
                               Output f32_3* %218 = OpVariable Output 
                               Output f32_3* %221 = OpVariable Output 
                               Output f32_4* %224 = OpVariable Output 
                                             %226 = OpTypePointer Private %180 
                              Private f32_3* %227 = OpVariable Private 
                              Private f32_4* %244 = OpVariable Private 
                              Private f32_3* %250 = OpVariable Private 
                                         i32 %256 = OpConstant 4 
                                         i32 %262 = OpConstant 5 
                                         i32 %268 = OpConstant 6 
                                       f32_3 %297 = OpConstantComposite %76 %76 %76 
                                         f32 %305 = OpConstant 3.674022E-40 
                                       f32_3 %306 = OpConstantComposite %305 %305 %305 
                                         f32 %317 = OpConstant 3.674022E-40 
                                       f32_3 %318 = OpConstantComposite %317 %317 %317 
                                         f32 %320 = OpConstant 3.674022E-40 
                                       f32_3 %321 = OpConstantComposite %320 %320 %320 
                               Output f32_3* %330 = OpVariable Output 
                                             %333 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %83 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %35 = OpAccessChain %23 %25 %34 %13 
                                          f32 %36 = OpLoad %35 
                                   Input f32* %37 = OpAccessChain %11 %31 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFMul %36 %38 
                                 Private f32* %40 = OpAccessChain %9 %31 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpFAdd %39 %41 
                                 Private f32* %43 = OpAccessChain %9 %31 
                                                      OpStore %43 %42 
                                 Uniform f32* %45 = OpAccessChain %23 %25 %44 %13 
                                          f32 %46 = OpLoad %45 
                                   Input f32* %48 = OpAccessChain %11 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFMul %46 %49 
                                 Private f32* %51 = OpAccessChain %9 %31 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpFAdd %50 %52 
                                 Private f32* %54 = OpAccessChain %9 %31 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %23 %25 %55 %13 
                                          f32 %57 = OpLoad %56 
                                   Input f32* %59 = OpAccessChain %11 %58 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %57 %60 
                                 Private f32* %62 = OpAccessChain %9 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %9 %31 
                                          f32 %67 = OpLoad %66 
                                 Uniform f32* %68 = OpAccessChain %23 %25 %55 %13 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %67 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %78 = OpAccessChain %23 %77 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %76 %79 
                                                      OpStore %75 %80 
                                         bool %84 = OpLoad %75 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %88 
                                              %85 = OpLabel 
                                                      OpStore %83 %87 
                                                      OpBranch %86 
                                              %88 = OpLabel 
                                                      OpStore %83 %89 
                                                      OpBranch %86 
                                              %86 = OpLabel 
                                          f32 %90 = OpLoad %83 
                                                      OpStore %81 %90 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpLoad %81 
                                          f32 %94 = OpFMul %92 %93 
                                   Input f32* %95 = OpAccessChain %11 %47 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %100 = OpLoad %11 
                                       f32_4 %101 = OpVectorShuffle %100 %100 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %25 %26 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %101 %104 
                                                      OpStore %99 %105 
                              Uniform f32_4* %106 = OpAccessChain %23 %25 %34 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %11 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %99 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %99 %112 
                              Uniform f32_4* %113 = OpAccessChain %23 %25 %44 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %115 0 0 0 0 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %99 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %9 %119 
                                       f32_4 %120 = OpLoad %9 
                              Uniform f32_4* %121 = OpAccessChain %23 %25 %55 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpFAdd %120 %122 
                                                      OpStore %99 %123 
                              Uniform f32_4* %124 = OpAccessChain %23 %25 %55 
                                       f32_4 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %11 
                                       f32_4 %127 = OpVectorShuffle %126 %126 3 3 3 3 
                                       f32_4 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpFAdd %128 %129 
                                                      OpStore %9 %130 
                                       f32_4 %132 = OpLoad %99 
                                       f32_4 %133 = OpVectorShuffle %132 %132 1 1 1 1 
                              Uniform f32_4* %135 = OpAccessChain %23 %134 %26 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpFMul %133 %136 
                                                      OpStore %131 %137 
                              Uniform f32_4* %138 = OpAccessChain %23 %134 %34 
                                       f32_4 %139 = OpLoad %138 
                                       f32_4 %140 = OpLoad %99 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 0 0 0 
                                       f32_4 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %131 
                                       f32_4 %144 = OpFAdd %142 %143 
                                                      OpStore %131 %144 
                              Uniform f32_4* %145 = OpAccessChain %23 %134 %44 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpLoad %99 
                                       f32_4 %148 = OpVectorShuffle %147 %147 2 2 2 2 
                                       f32_4 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %131 
                                       f32_4 %151 = OpFAdd %149 %150 
                                                      OpStore %131 %151 
                              Uniform f32_4* %156 = OpAccessChain %23 %134 %55 
                                       f32_4 %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %99 
                                       f32_4 %159 = OpVectorShuffle %158 %158 3 3 3 3 
                                       f32_4 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %131 
                                       f32_4 %162 = OpFAdd %160 %161 
                               Output f32_4* %164 = OpAccessChain %155 %34 
                                                      OpStore %164 %162 
                                       f32_4 %169 = OpLoad %168 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                              Uniform f32_4* %172 = OpAccessChain %23 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_2 %175 = OpFMul %170 %174 
                              Uniform f32_4* %176 = OpAccessChain %23 %171 
                                       f32_4 %177 = OpLoad %176 
                                       f32_2 %178 = OpVectorShuffle %177 %177 2 3 
                                       f32_2 %179 = OpFAdd %175 %178 
                                                      OpStore %167 %179 
                                       f32_3 %183 = OpLoad %182 
                              Uniform f32_4* %185 = OpAccessChain %23 %184 %34 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                         f32 %188 = OpDot %183 %187 
                                Private f32* %189 = OpAccessChain %99 %31 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %182 
                              Uniform f32_4* %191 = OpAccessChain %23 %184 %26 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %190 %193 
                                Private f32* %195 = OpAccessChain %99 %13 
                                                      OpStore %195 %194 
                                       f32_3 %196 = OpLoad %182 
                              Uniform f32_4* %197 = OpAccessChain %23 %184 %44 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                         f32 %200 = OpDot %196 %199 
                                Private f32* %201 = OpAccessChain %99 %47 
                                                      OpStore %201 %200 
                                       f32_4 %203 = OpLoad %99 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %99 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                         f32 %207 = OpDot %204 %206 
                                                      OpStore %202 %207 
                                         f32 %208 = OpLoad %202 
                                         f32 %209 = OpExtInst %1 32 %208 
                                                      OpStore %202 %209 
                                         f32 %210 = OpLoad %202 
                                       f32_3 %211 = OpCompositeConstruct %210 %210 %210 
                                       f32_4 %212 = OpLoad %99 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %99 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 6 3 
                                                      OpStore %99 %216 
                                       f32_4 %219 = OpLoad %99 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                                      OpStore %218 %220 
                                       f32_4 %222 = OpLoad %9 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                                      OpStore %221 %223 
                                       f32_4 %225 = OpLoad %9 
                                                      OpStore %224 %225 
                                Private f32* %228 = OpAccessChain %99 %13 
                                         f32 %229 = OpLoad %228 
                                Private f32* %230 = OpAccessChain %99 %13 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %229 %231 
                                Private f32* %233 = OpAccessChain %227 %31 
                                                      OpStore %233 %232 
                                Private f32* %234 = OpAccessChain %99 %31 
                                         f32 %235 = OpLoad %234 
                                Private f32* %236 = OpAccessChain %99 %31 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFMul %235 %237 
                                Private f32* %239 = OpAccessChain %227 %31 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFNegate %240 
                                         f32 %242 = OpFAdd %238 %241 
                                Private f32* %243 = OpAccessChain %227 %31 
                                                      OpStore %243 %242 
                                       f32_4 %245 = OpLoad %99 
                                       f32_4 %246 = OpVectorShuffle %245 %245 1 2 2 0 
                                       f32_4 %247 = OpLoad %99 
                                       f32_4 %248 = OpVectorShuffle %247 %247 0 1 2 2 
                                       f32_4 %249 = OpFMul %246 %248 
                                                      OpStore %244 %249 
                              Uniform f32_4* %251 = OpAccessChain %23 %55 
                                       f32_4 %252 = OpLoad %251 
                                       f32_4 %253 = OpLoad %244 
                                         f32 %254 = OpDot %252 %253 
                                Private f32* %255 = OpAccessChain %250 %31 
                                                      OpStore %255 %254 
                              Uniform f32_4* %257 = OpAccessChain %23 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_4 %259 = OpLoad %244 
                                         f32 %260 = OpDot %258 %259 
                                Private f32* %261 = OpAccessChain %250 %13 
                                                      OpStore %261 %260 
                              Uniform f32_4* %263 = OpAccessChain %23 %262 
                                       f32_4 %264 = OpLoad %263 
                                       f32_4 %265 = OpLoad %244 
                                         f32 %266 = OpDot %264 %265 
                                Private f32* %267 = OpAccessChain %250 %47 
                                                      OpStore %267 %266 
                              Uniform f32_4* %269 = OpAccessChain %23 %268 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpLoad %227 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 0 0 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_3 %275 = OpLoad %250 
                                       f32_3 %276 = OpFAdd %274 %275 
                                                      OpStore %227 %276 
                                Private f32* %277 = OpAccessChain %99 %58 
                                                      OpStore %277 %89 
                              Uniform f32_4* %278 = OpAccessChain %23 %34 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpLoad %99 
                                         f32 %281 = OpDot %279 %280 
                                Private f32* %282 = OpAccessChain %250 %31 
                                                      OpStore %282 %281 
                              Uniform f32_4* %283 = OpAccessChain %23 %26 
                                       f32_4 %284 = OpLoad %283 
                                       f32_4 %285 = OpLoad %99 
                                         f32 %286 = OpDot %284 %285 
                                Private f32* %287 = OpAccessChain %250 %13 
                                                      OpStore %287 %286 
                              Uniform f32_4* %288 = OpAccessChain %23 %44 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpLoad %99 
                                         f32 %291 = OpDot %289 %290 
                                Private f32* %292 = OpAccessChain %250 %47 
                                                      OpStore %292 %291 
                                       f32_3 %293 = OpLoad %227 
                                       f32_3 %294 = OpLoad %250 
                                       f32_3 %295 = OpFAdd %293 %294 
                                                      OpStore %227 %295 
                                       f32_3 %296 = OpLoad %227 
                                       f32_3 %298 = OpExtInst %1 40 %296 %297 
                                                      OpStore %227 %298 
                                       f32_3 %299 = OpLoad %227 
                                       f32_3 %300 = OpExtInst %1 30 %299 
                                       f32_4 %301 = OpLoad %99 
                                       f32_4 %302 = OpVectorShuffle %301 %300 4 5 6 3 
                                                      OpStore %99 %302 
                                       f32_4 %303 = OpLoad %99 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %99 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %99 %309 
                                       f32_4 %310 = OpLoad %99 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpExtInst %1 29 %311 
                                       f32_4 %313 = OpLoad %99 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %99 %314 
                                       f32_4 %315 = OpLoad %99 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %319 = OpFMul %316 %318 
                                       f32_3 %322 = OpFAdd %319 %321 
                                       f32_4 %323 = OpLoad %99 
                                       f32_4 %324 = OpVectorShuffle %323 %322 4 5 6 3 
                                                      OpStore %99 %324 
                                       f32_4 %325 = OpLoad %99 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_3 %327 = OpExtInst %1 40 %326 %297 
                                       f32_4 %328 = OpLoad %99 
                                       f32_4 %329 = OpVectorShuffle %328 %327 4 5 6 3 
                                                      OpStore %99 %329 
                                       f32_4 %331 = OpLoad %99 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                                                      OpStore %330 %332 
                                 Output f32* %334 = OpAccessChain %155 %34 %13 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFNegate %335 
                                 Output f32* %337 = OpAccessChain %155 %34 %13 
                                                      OpStore %337 %336 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 232
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %99 %210 %216 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpMemberDecorate %31 5 RelaxedPrecision 
                                                      OpMemberDecorate %31 5 Offset 31 
                                                      OpMemberDecorate %31 6 Offset 31 
                                                      OpMemberDecorate %31 7 Offset 31 
                                                      OpMemberDecorate %31 8 RelaxedPrecision 
                                                      OpMemberDecorate %31 8 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %90 SpecId 90 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %216 Location 216 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                               Private f32_3* %26 = OpVariable Private 
                                              %28 = OpTypeInt 32 0 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeStruct %7 %7 %30 %20 %20 %7 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 7 
                                              %36 = OpTypePointer Uniform %6 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %52 = OpConstant 3 
                                              %53 = OpTypePointer Private %6 
                                          i32 %56 = OpConstant 8 
                                          u32 %61 = OpConstant 0 
                                              %63 = OpTypeBool 
                                              %64 = OpTypePointer Private %63 
                                Private bool* %65 = OpVariable Private 
                                          f32 %68 = OpConstant 3.674022E-40 
                                          i32 %71 = OpConstant 0 
                                          i32 %72 = OpConstant 1 
                                          i32 %74 = OpConstant -1 
                                          f32 %82 = OpConstant 3.674022E-40 
                                         bool %84 = OpConstantFalse 
                                         bool %90 = OpSpecConstantFalse 
                                          u32 %93 = OpConstant 1 
                               Private f32_3* %97 = OpVariable Private 
                                              %98 = OpTypePointer Input %20 
                                 Input f32_3* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 2 
                                             %103 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 3 
                                             %130 = OpTypePointer Function %20 
                                         i32 %140 = OpConstant 4 
                                             %141 = OpTypePointer Uniform %20 
                              Private f32_4* %146 = OpVariable Private 
                                Private f32* %153 = OpVariable Private 
                                         f32 %156 = OpConstant 3.674022E-40 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         u32 %160 = OpConstant 2 
                                         f32 %163 = OpConstant 3.674022E-40 
                                             %172 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %173 = OpTypeSampledImage %172 
                                             %174 = OpTypePointer UniformConstant %173 
 UniformConstant read_only Texture3DSampled* %175 = OpVariable UniformConstant 
                              Private f32_3* %186 = OpVariable Private 
                              Private f32_3* %196 = OpVariable Private 
                                         i32 %199 = OpConstant 5 
                                Input f32_3* %210 = OpVariable Input 
                                             %215 = OpTypePointer Output %7 
                               Output f32_4* %216 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                         i32 %221 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %131 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                                        f32_3 %25 = OpExtInst %1 30 %24 
                                                      OpStore %22 %25 
                                        f32_3 %27 = OpLoad %22 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                 Uniform f32* %39 = OpAccessChain %33 %35 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %41 = OpAccessChain %33 %35 
                                          f32 %42 = OpLoad %41 
                                        f32_3 %43 = OpCompositeConstruct %38 %40 %42 
                                          f32 %44 = OpCompositeExtract %43 0 
                                          f32 %45 = OpCompositeExtract %43 1 
                                          f32 %46 = OpCompositeExtract %43 2 
                                        f32_3 %47 = OpCompositeConstruct %44 %45 %46 
                                        f32_3 %48 = OpFMul %27 %47 
                                                      OpStore %26 %48 
                                        f32_3 %49 = OpLoad %26 
                                        f32_3 %50 = OpExtInst %1 29 %49 
                                                      OpStore %26 %50 
                                 Private f32* %54 = OpAccessChain %9 %52 
                                          f32 %55 = OpLoad %54 
                                 Uniform f32* %57 = OpAccessChain %33 %56 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFNegate %58 
                                          f32 %60 = OpFAdd %55 %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Private f32* %66 = OpAccessChain %51 %61 
                                          f32 %67 = OpLoad %66 
                                         bool %69 = OpFOrdLessThan %67 %68 
                                                      OpStore %65 %69 
                                         bool %70 = OpLoad %65 
                                          i32 %73 = OpSelect %70 %72 %71 
                                          i32 %75 = OpIMul %73 %74 
                                         bool %76 = OpINotEqual %75 %71 
                                                      OpSelectionMerge %78 None 
                                                      OpBranchConditional %76 %77 %78 
                                              %77 = OpLabel 
                                                      OpKill
                                              %78 = OpLabel 
                                 Uniform f32* %80 = OpAccessChain %33 %72 %61 
                                          f32 %81 = OpLoad %80 
                                         bool %83 = OpFOrdEqual %81 %82 
                                                      OpStore %65 %83 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %86 
                                              %85 = OpLabel 
                                         bool %87 = OpLoad %65 
                                                      OpSelectionMerge %89 None 
                                                      OpBranchConditional %87 %88 %89 
                                              %88 = OpLabel 
                                                      OpBranch %89 
                                              %89 = OpLabel 
                                                      OpBranch %86 
                                              %86 = OpLabel 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %181 
                                              %91 = OpLabel 
                                 Uniform f32* %94 = OpAccessChain %33 %72 %93 
                                          f32 %95 = OpLoad %94 
                                         bool %96 = OpFOrdEqual %95 %82 
                                                      OpStore %65 %96 
                                       f32_3 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 1 1 1 
                              Uniform f32_4* %104 = OpAccessChain %33 %102 %72 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFMul %101 %106 
                                                      OpStore %97 %107 
                              Uniform f32_4* %108 = OpAccessChain %33 %102 %71 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpLoad %99 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_3 %114 = OpLoad %97 
                                       f32_3 %115 = OpFAdd %113 %114 
                                                      OpStore %97 %115 
                              Uniform f32_4* %116 = OpAccessChain %33 %102 %102 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpLoad %99 
                                       f32_3 %120 = OpVectorShuffle %119 %119 2 2 2 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_3 %122 = OpLoad %97 
                                       f32_3 %123 = OpFAdd %121 %122 
                                                      OpStore %97 %123 
                                       f32_3 %124 = OpLoad %97 
                              Uniform f32_4* %126 = OpAccessChain %33 %102 %125 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_3 %129 = OpFAdd %124 %128 
                                                      OpStore %97 %129 
                                        bool %132 = OpLoad %65 
                                                      OpSelectionMerge %134 None 
                                                      OpBranchConditional %132 %133 %136 
                                             %133 = OpLabel 
                                       f32_3 %135 = OpLoad %97 
                                                      OpStore %131 %135 
                                                      OpBranch %134 
                                             %136 = OpLabel 
                                       f32_3 %137 = OpLoad %99 
                                                      OpStore %131 %137 
                                                      OpBranch %134 
                                             %134 = OpLabel 
                                       f32_3 %138 = OpLoad %131 
                                                      OpStore %97 %138 
                                       f32_3 %139 = OpLoad %97 
                              Uniform f32_3* %142 = OpAccessChain %33 %140 
                                       f32_3 %143 = OpLoad %142 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %139 %144 
                                                      OpStore %97 %145 
                                       f32_3 %147 = OpLoad %97 
                              Uniform f32_3* %148 = OpAccessChain %33 %125 
                                       f32_3 %149 = OpLoad %148 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %146 
                                       f32_4 %152 = OpVectorShuffle %151 %150 0 4 5 6 
                                                      OpStore %146 %152 
                                Private f32* %154 = OpAccessChain %146 %93 
                                         f32 %155 = OpLoad %154 
                                         f32 %157 = OpFMul %155 %156 
                                         f32 %159 = OpFAdd %157 %158 
                                                      OpStore %153 %159 
                                Uniform f32* %161 = OpAccessChain %33 %72 %160 
                                         f32 %162 = OpLoad %161 
                                         f32 %164 = OpFMul %162 %163 
                                         f32 %165 = OpFAdd %164 %158 
                                Private f32* %166 = OpAccessChain %97 %61 
                                                      OpStore %166 %165 
                                         f32 %167 = OpLoad %153 
                                Private f32* %168 = OpAccessChain %97 %61 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpExtInst %1 40 %167 %169 
                                Private f32* %171 = OpAccessChain %146 %61 
                                                      OpStore %171 %170 
                  read_only Texture3DSampled %176 = OpLoad %175 
                                       f32_4 %177 = OpLoad %146 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 2 3 
                                       f32_4 %179 = OpImageSampleImplicitLod %176 %178 
                                                      OpStore %146 %179 
                                       f32_4 %180 = OpLoad %146 
                                                      OpStore %51 %180 
                                                      OpBranch %92 
                                             %181 = OpLabel 
                                Private f32* %182 = OpAccessChain %51 %61 
                                                      OpStore %182 %82 
                                Private f32* %183 = OpAccessChain %51 %93 
                                                      OpStore %183 %82 
                                Private f32* %184 = OpAccessChain %51 %160 
                                                      OpStore %184 %82 
                                Private f32* %185 = OpAccessChain %51 %52 
                                                      OpStore %185 %82 
                                                      OpBranch %92 
                                              %92 = OpLabel 
                                       f32_4 %187 = OpLoad %51 
                              Uniform f32_4* %188 = OpAccessChain %33 %71 
                                       f32_4 %189 = OpLoad %188 
                                         f32 %190 = OpDot %187 %189 
                                Private f32* %191 = OpAccessChain %186 %61 
                                                      OpStore %191 %190 
                                Private f32* %192 = OpAccessChain %186 %61 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpExtInst %1 43 %193 %68 %82 
                                Private f32* %195 = OpAccessChain %186 %61 
                                                      OpStore %195 %194 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                              Uniform f32_4* %200 = OpAccessChain %33 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFMul %198 %202 
                                                      OpStore %196 %203 
                                       f32_3 %204 = OpLoad %186 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 0 0 
                                       f32_3 %206 = OpLoad %196 
                                       f32_3 %207 = OpFMul %205 %206 
                                                      OpStore %186 %207 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_3 %213 = OpLoad %186 
                                       f32_3 %214 = OpFAdd %212 %213 
                                                      OpStore %186 %214 
                                Private f32* %217 = OpAccessChain %9 %52 
                                         f32 %218 = OpLoad %217 
                                 Output f32* %220 = OpAccessChain %216 %52 
                                                      OpStore %220 %218 
                                Uniform f32* %222 = OpAccessChain %33 %221 
                                         f32 %223 = OpLoad %222 
                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
                                       f32_3 %225 = OpLoad %26 
                                       f32_3 %226 = OpFMul %224 %225 
                                       f32_3 %227 = OpLoad %186 
                                       f32_3 %228 = OpFAdd %226 %227 
                                       f32_4 %229 = OpLoad %216 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %216 %230 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
float u_xlat11;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb3 = 0.0<_Perpendicular;
    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat3 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    vs_TEXCOORD1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(_EmissivePower) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 259
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %160 %166 %167 %181 %209 %215 %218 %220 %239 %251 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %158 0 BuiltIn 158 
                                                      OpMemberDecorate %158 1 BuiltIn 158 
                                                      OpMemberDecorate %158 2 BuiltIn 158 
                                                      OpDecorate %158 Block 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %181 Location 181 
                                                      OpDecorate %209 Location 209 
                                                      OpDecorate %215 Location 215 
                                                      OpDecorate %218 Location 218 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %239 Location 239 
                                                      OpDecorate %251 Location 251 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %18 %19 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                          i32 %33 = OpConstant 0 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          i32 %76 = OpConstant 4 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Function %6 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                               Private f32_4* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                              Private f32_4* %130 = OpVariable Private 
                                             %157 = OpTypeArray %6 %13 
                                             %158 = OpTypeStruct %7 %6 %157 
                                             %159 = OpTypePointer Output %158 
        Output struct {f32_4; f32; f32[1];}* %160 = OpVariable Output 
                                             %162 = OpTypePointer Output %7 
                                             %164 = OpTypeVector %6 2 
                                             %165 = OpTypePointer Output %164 
                               Output f32_2* %166 = OpVariable Output 
                                Input f32_4* %167 = OpVariable Input 
                                         i32 %170 = OpConstant 5 
                                             %179 = OpTypeVector %6 3 
                                             %180 = OpTypePointer Input %179 
                                Input f32_3* %181 = OpVariable Input 
                                Private f32* %200 = OpVariable Private 
                                             %208 = OpTypePointer Output %179 
                               Output f32_3* %209 = OpVariable Output 
                               Output f32_3* %215 = OpVariable Output 
                               Output f32_4* %218 = OpVariable Output 
                               Output f32_3* %220 = OpVariable Output 
                                       f32_3 %221 = OpConstantComposite %75 %75 %75 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_2 %235 = OpConstantComposite %230 %230 
                               Output f32_4* %239 = OpVariable Output 
                               Output f32_4* %251 = OpVariable Output 
                                       f32_4 %252 = OpConstantComposite %75 %75 %75 %75 
                                             %253 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %82 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %27 = OpAccessChain %23 %25 %25 %13 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFMul %16 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %33 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %30 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %30 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %30 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %30 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %30 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %30 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %30 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %30 
                                                      OpStore %71 %70 
                                 Uniform f32* %77 = OpAccessChain %23 %76 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %75 %78 
                                                      OpStore %74 %79 
                                         bool %83 = OpLoad %74 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %87 
                                              %84 = OpLabel 
                                                      OpStore %82 %86 
                                                      OpBranch %85 
                                              %87 = OpLabel 
                                                      OpStore %82 %88 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %89 = OpLoad %82 
                                                      OpStore %80 %89 
                                 Private f32* %90 = OpAccessChain %9 %30 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpLoad %80 
                                          f32 %93 = OpFMul %91 %92 
                                   Input f32* %94 = OpAccessChain %11 %46 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %30 
                                                      OpStore %97 %96 
                                        f32_4 %99 = OpLoad %11 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %25 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpFMul %100 %103 
                                                      OpStore %98 %104 
                              Uniform f32_4* %105 = OpAccessChain %23 %25 %33 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %11 
                                       f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %98 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %98 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %43 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %114 0 0 0 0 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %98 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %23 %25 %54 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %98 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %54 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %11 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %9 %129 
                                       f32_4 %131 = OpLoad %98 
                                       f32_4 %132 = OpVectorShuffle %131 %131 1 1 1 1 
                              Uniform f32_4* %133 = OpAccessChain %23 %54 %25 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpFMul %132 %134 
                                                      OpStore %130 %135 
                              Uniform f32_4* %136 = OpAccessChain %23 %54 %33 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %98 
                                       f32_4 %139 = OpVectorShuffle %138 %138 0 0 0 0 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %130 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %130 %142 
                              Uniform f32_4* %143 = OpAccessChain %23 %54 %43 
                                       f32_4 %144 = OpLoad %143 
                                       f32_4 %145 = OpLoad %98 
                                       f32_4 %146 = OpVectorShuffle %145 %145 2 2 2 2 
                                       f32_4 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %130 
                                       f32_4 %149 = OpFAdd %147 %148 
                                                      OpStore %130 %149 
                              Uniform f32_4* %150 = OpAccessChain %23 %54 %54 
                                       f32_4 %151 = OpLoad %150 
                                       f32_4 %152 = OpLoad %98 
                                       f32_4 %153 = OpVectorShuffle %152 %152 3 3 3 3 
                                       f32_4 %154 = OpFMul %151 %153 
                                       f32_4 %155 = OpLoad %130 
                                       f32_4 %156 = OpFAdd %154 %155 
                                                      OpStore %98 %156 
                                       f32_4 %161 = OpLoad %98 
                               Output f32_4* %163 = OpAccessChain %160 %33 
                                                      OpStore %163 %161 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 1 
                              Uniform f32_4* %171 = OpAccessChain %23 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_2 %174 = OpFMul %169 %173 
                              Uniform f32_4* %175 = OpAccessChain %23 %170 
                                       f32_4 %176 = OpLoad %175 
                                       f32_2 %177 = OpVectorShuffle %176 %176 2 3 
                                       f32_2 %178 = OpFAdd %174 %177 
                                                      OpStore %166 %178 
                                       f32_3 %182 = OpLoad %181 
                              Uniform f32_4* %183 = OpAccessChain %23 %43 %33 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %182 %185 
                                Private f32* %187 = OpAccessChain %130 %30 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %181 
                              Uniform f32_4* %189 = OpAccessChain %23 %43 %25 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %188 %191 
                                Private f32* %193 = OpAccessChain %130 %13 
                                                      OpStore %193 %192 
                                       f32_3 %194 = OpLoad %181 
                              Uniform f32_4* %195 = OpAccessChain %23 %43 %43 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %194 %197 
                                Private f32* %199 = OpAccessChain %130 %46 
                                                      OpStore %199 %198 
                                       f32_4 %201 = OpLoad %130 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %130 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpDot %202 %204 
                                                      OpStore %200 %205 
                                         f32 %206 = OpLoad %200 
                                         f32 %207 = OpExtInst %1 32 %206 
                                                      OpStore %200 %207 
                                         f32 %210 = OpLoad %200 
                                       f32_3 %211 = OpCompositeConstruct %210 %210 %210 
                                       f32_4 %212 = OpLoad %130 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                                      OpStore %209 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                                      OpStore %215 %217 
                                       f32_4 %219 = OpLoad %9 
                                                      OpStore %218 %219 
                                                      OpStore %220 %221 
                                Private f32* %222 = OpAccessChain %98 %13 
                                         f32 %223 = OpLoad %222 
                                Uniform f32* %224 = OpAccessChain %23 %33 %30 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                Private f32* %227 = OpAccessChain %9 %30 
                                                      OpStore %227 %226 
                                Private f32* %228 = OpAccessChain %9 %30 
                                         f32 %229 = OpLoad %228 
                                         f32 %231 = OpFMul %229 %230 
                                Private f32* %232 = OpAccessChain %9 %57 
                                                      OpStore %232 %231 
                                       f32_4 %233 = OpLoad %98 
                                       f32_2 %234 = OpVectorShuffle %233 %233 0 3 
                                       f32_2 %236 = OpFMul %234 %235 
                                       f32_4 %237 = OpLoad %9 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 1 5 3 
                                                      OpStore %9 %238 
                                       f32_4 %240 = OpLoad %98 
                                       f32_2 %241 = OpVectorShuffle %240 %240 2 3 
                                       f32_4 %242 = OpLoad %239 
                                       f32_4 %243 = OpVectorShuffle %242 %241 0 1 4 5 
                                                      OpStore %239 %243 
                                       f32_4 %244 = OpLoad %9 
                                       f32_2 %245 = OpVectorShuffle %244 %244 2 2 
                                       f32_4 %246 = OpLoad %9 
                                       f32_2 %247 = OpVectorShuffle %246 %246 0 3 
                                       f32_2 %248 = OpFAdd %245 %247 
                                       f32_4 %249 = OpLoad %239 
                                       f32_4 %250 = OpVectorShuffle %249 %248 4 5 2 3 
                                                      OpStore %239 %250 
                                                      OpStore %251 %252 
                                 Output f32* %254 = OpAccessChain %160 %33 %13 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFNegate %255 
                                 Output f32* %257 = OpAccessChain %160 %33 %13 
                                                      OpStore %257 %256 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 337
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %83 %260 %315 %321 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 RelaxedPrecision 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 RelaxedPrecision 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpMemberDecorate %32 9 RelaxedPrecision 
                                                      OpMemberDecorate %32 9 Offset 32 
                                                      OpMemberDecorate %32 10 Offset 32 
                                                      OpMemberDecorate %32 11 Offset 32 
                                                      OpMemberDecorate %32 12 RelaxedPrecision 
                                                      OpMemberDecorate %32 12 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %158 SpecId 158 
                                                      OpDecorate %238 DescriptorSet 238 
                                                      OpDecorate %238 Binding 238 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %260 Location 260 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %321 Location 321 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                               Private f32_3* %26 = OpVariable Private 
                                              %28 = OpTypeInt 32 0 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeArray %7 %29 
                                              %32 = OpTypeStruct %20 %7 %7 %7 %30 %7 %31 %20 %20 %7 %6 %6 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32;}* %34 = OpVariable Uniform 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 11 
                                              %37 = OpTypePointer Uniform %6 
                               Private f32_4* %52 = OpVariable Private 
                                          u32 %53 = OpConstant 3 
                                              %54 = OpTypePointer Private %6 
                                          i32 %57 = OpConstant 12 
                                          u32 %62 = OpConstant 0 
                                              %64 = OpTypeBool 
                                              %65 = OpTypePointer Private %64 
                                Private bool* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          i32 %72 = OpConstant 0 
                                          i32 %73 = OpConstant 1 
                                          i32 %75 = OpConstant -1 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypePointer Input %20 
                                 Input f32_3* %83 = OpVariable Input 
                                              %86 = OpTypePointer Uniform %20 
                               Private f32_3* %90 = OpVariable Private 
                                          i32 %91 = OpConstant 4 
                                          u32 %92 = OpConstant 2 
                                          u32 %98 = OpConstant 1 
                                         i32 %100 = OpConstant 2 
                                Private f32* %104 = OpVariable Private 
                                         i32 %109 = OpConstant 3 
                                             %110 = OpTypePointer Uniform %7 
                                         f32 %145 = OpConstant 3.674022E-40 
                               Private bool* %147 = OpVariable Private 
                                         i32 %148 = OpConstant 5 
                                        bool %152 = OpConstantFalse 
                                        bool %158 = OpSpecConstantFalse 
                               Private bool* %161 = OpVariable Private 
                                         i32 %167 = OpConstant 6 
                              Private f32_3* %193 = OpVariable Private 
                                             %194 = OpTypePointer Function %20 
                                         i32 %204 = OpConstant 8 
                              Private f32_4* %209 = OpVariable Private 
                                         i32 %211 = OpConstant 7 
                                         f32 %219 = OpConstant 3.674022E-40 
                                         f32 %221 = OpConstant 3.674022E-40 
                                Private f32* %224 = OpVariable Private 
                                         f32 %227 = OpConstant 3.674022E-40 
                                             %235 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %236 = OpTypeSampledImage %235 
                                             %237 = OpTypePointer UniformConstant %236 
 UniformConstant read_only Texture3DSampled* %238 = OpVariable UniformConstant 
                              Private f32_3* %249 = OpVariable Private 
                                             %259 = OpTypePointer Input %7 
                                Input f32_4* %260 = OpVariable Input 
                                Private f32* %268 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %269 = OpVariable UniformConstant 
                              Private f32_3* %275 = OpVariable Private 
                                             %290 = OpTypePointer Function %6 
                                         i32 %304 = OpConstant 9 
                                Input f32_3* %315 = OpVariable Input 
                                             %320 = OpTypePointer Output %7 
                               Output f32_4* %321 = OpVariable Output 
                                             %324 = OpTypePointer Output %6 
                                         i32 %326 = OpConstant 10 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %195 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                                        f32_3 %25 = OpExtInst %1 30 %24 
                                                      OpStore %22 %25 
                                        f32_3 %27 = OpLoad %22 
                                 Uniform f32* %38 = OpAccessChain %34 %36 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %34 %36 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %34 %36 
                                          f32 %43 = OpLoad %42 
                                        f32_3 %44 = OpCompositeConstruct %39 %41 %43 
                                          f32 %45 = OpCompositeExtract %44 0 
                                          f32 %46 = OpCompositeExtract %44 1 
                                          f32 %47 = OpCompositeExtract %44 2 
                                        f32_3 %48 = OpCompositeConstruct %45 %46 %47 
                                        f32_3 %49 = OpFMul %27 %48 
                                                      OpStore %26 %49 
                                        f32_3 %50 = OpLoad %26 
                                        f32_3 %51 = OpExtInst %1 29 %50 
                                                      OpStore %26 %51 
                                 Private f32* %55 = OpAccessChain %9 %53 
                                          f32 %56 = OpLoad %55 
                                 Uniform f32* %58 = OpAccessChain %34 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFNegate %59 
                                          f32 %61 = OpFAdd %56 %60 
                                 Private f32* %63 = OpAccessChain %52 %62 
                                                      OpStore %63 %61 
                                 Private f32* %67 = OpAccessChain %52 %62 
                                          f32 %68 = OpLoad %67 
                                         bool %70 = OpFOrdLessThan %68 %69 
                                                      OpStore %66 %70 
                                         bool %71 = OpLoad %66 
                                          i32 %74 = OpSelect %71 %73 %72 
                                          i32 %76 = OpIMul %74 %75 
                                         bool %77 = OpINotEqual %76 %72 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %79 
                                              %78 = OpLabel 
                                                      OpKill
                                              %79 = OpLabel 
                                        f32_3 %84 = OpLoad %83 
                                        f32_3 %85 = OpFNegate %84 
                               Uniform f32_3* %87 = OpAccessChain %34 %72 
                                        f32_3 %88 = OpLoad %87 
                                        f32_3 %89 = OpFAdd %85 %88 
                                                      OpStore %81 %89 
                                 Uniform f32* %93 = OpAccessChain %34 %91 %72 %92 
                                          f32 %94 = OpLoad %93 
                                 Private f32* %95 = OpAccessChain %90 %62 
                                                      OpStore %95 %94 
                                 Uniform f32* %96 = OpAccessChain %34 %91 %73 %92 
                                          f32 %97 = OpLoad %96 
                                 Private f32* %99 = OpAccessChain %90 %98 
                                                      OpStore %99 %97 
                                Uniform f32* %101 = OpAccessChain %34 %91 %100 %92 
                                         f32 %102 = OpLoad %101 
                                Private f32* %103 = OpAccessChain %90 %92 
                                                      OpStore %103 %102 
                                       f32_3 %105 = OpLoad %81 
                                       f32_3 %106 = OpLoad %90 
                                         f32 %107 = OpDot %105 %106 
                                                      OpStore %104 %107 
                                       f32_3 %108 = OpLoad %83 
                              Uniform f32_4* %111 = OpAccessChain %34 %109 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFNegate %113 
                                       f32_3 %115 = OpFAdd %108 %114 
                                                      OpStore %81 %115 
                                       f32_3 %116 = OpLoad %81 
                                       f32_3 %117 = OpLoad %81 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %119 = OpAccessChain %81 %62 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %81 %62 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpExtInst %1 31 %121 
                                Private f32* %123 = OpAccessChain %81 %62 
                                                      OpStore %123 %122 
                                         f32 %124 = OpLoad %104 
                                         f32 %125 = OpFNegate %124 
                                Private f32* %126 = OpAccessChain %81 %62 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFAdd %125 %127 
                                Private f32* %129 = OpAccessChain %81 %62 
                                                      OpStore %129 %128 
                                Uniform f32* %130 = OpAccessChain %34 %109 %53 
                                         f32 %131 = OpLoad %130 
                                Private f32* %132 = OpAccessChain %81 %62 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFMul %131 %133 
                                         f32 %135 = OpLoad %104 
                                         f32 %136 = OpFAdd %134 %135 
                                                      OpStore %104 %136 
                                         f32 %137 = OpLoad %104 
                                Uniform f32* %138 = OpAccessChain %34 %100 %92 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %137 %139 
                                Uniform f32* %141 = OpAccessChain %34 %100 %53 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFAdd %140 %142 
                                                      OpStore %104 %143 
                                         f32 %144 = OpLoad %104 
                                         f32 %146 = OpExtInst %1 43 %144 %69 %145 
                                                      OpStore %104 %146 
                                Uniform f32* %149 = OpAccessChain %34 %148 %62 
                                         f32 %150 = OpLoad %149 
                                        bool %151 = OpFOrdEqual %150 %145 
                                                      OpStore %147 %151 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %154 
                                             %153 = OpLabel 
                                        bool %155 = OpLoad %147 
                                                      OpSelectionMerge %157 None 
                                                      OpBranchConditional %155 %156 %157 
                                             %156 = OpLabel 
                                                      OpBranch %157 
                                             %157 = OpLabel 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                                      OpSelectionMerge %160 None 
                                                      OpBranchConditional %158 %159 %244 
                                             %159 = OpLabel 
                                Uniform f32* %162 = OpAccessChain %34 %148 %98 
                                         f32 %163 = OpLoad %162 
                                        bool %164 = OpFOrdEqual %163 %145 
                                                      OpStore %161 %164 
                                       f32_3 %165 = OpLoad %83 
                                       f32_3 %166 = OpVectorShuffle %165 %165 1 1 1 
                              Uniform f32_4* %168 = OpAccessChain %34 %167 %73 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %166 %170 
                                                      OpStore %90 %171 
                              Uniform f32_4* %172 = OpAccessChain %34 %167 %72 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpLoad %83 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 0 0 
                                       f32_3 %177 = OpFMul %174 %176 
                                       f32_3 %178 = OpLoad %90 
                                       f32_3 %179 = OpFAdd %177 %178 
                                                      OpStore %90 %179 
                              Uniform f32_4* %180 = OpAccessChain %34 %167 %100 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpLoad %83 
                                       f32_3 %184 = OpVectorShuffle %183 %183 2 2 2 
                                       f32_3 %185 = OpFMul %182 %184 
                                       f32_3 %186 = OpLoad %90 
                                       f32_3 %187 = OpFAdd %185 %186 
                                                      OpStore %90 %187 
                                       f32_3 %188 = OpLoad %90 
                              Uniform f32_4* %189 = OpAccessChain %34 %167 %109 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %188 %191 
                                                      OpStore %90 %192 
                                        bool %196 = OpLoad %161 
                                                      OpSelectionMerge %198 None 
                                                      OpBranchConditional %196 %197 %200 
                                             %197 = OpLabel 
                                       f32_3 %199 = OpLoad %90 
                                                      OpStore %195 %199 
                                                      OpBranch %198 
                                             %200 = OpLabel 
                                       f32_3 %201 = OpLoad %83 
                                                      OpStore %195 %201 
                                                      OpBranch %198 
                                             %198 = OpLabel 
                                       f32_3 %202 = OpLoad %195 
                                                      OpStore %193 %202 
                                       f32_3 %203 = OpLoad %193 
                              Uniform f32_3* %205 = OpAccessChain %34 %204 
                                       f32_3 %206 = OpLoad %205 
                                       f32_3 %207 = OpFNegate %206 
                                       f32_3 %208 = OpFAdd %203 %207 
                                                      OpStore %193 %208 
                                       f32_3 %210 = OpLoad %193 
                              Uniform f32_3* %212 = OpAccessChain %34 %211 
                                       f32_3 %213 = OpLoad %212 
                                       f32_3 %214 = OpFMul %210 %213 
                                       f32_4 %215 = OpLoad %209 
                                       f32_4 %216 = OpVectorShuffle %215 %214 0 4 5 6 
                                                      OpStore %209 %216 
                                Private f32* %217 = OpAccessChain %209 %98 
                                         f32 %218 = OpLoad %217 
                                         f32 %220 = OpFMul %218 %219 
                                         f32 %222 = OpFAdd %220 %221 
                                Private f32* %223 = OpAccessChain %193 %62 
                                                      OpStore %223 %222 
                                Uniform f32* %225 = OpAccessChain %34 %148 %92 
                                         f32 %226 = OpLoad %225 
                                         f32 %228 = OpFMul %226 %227 
                                         f32 %229 = OpFAdd %228 %221 
                                                      OpStore %224 %229 
                                         f32 %230 = OpLoad %224 
                                Private f32* %231 = OpAccessChain %193 %62 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpExtInst %1 40 %230 %232 
                                Private f32* %234 = OpAccessChain %209 %62 
                                                      OpStore %234 %233 
                  read_only Texture3DSampled %239 = OpLoad %238 
                                       f32_4 %240 = OpLoad %209 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 2 3 
                                       f32_4 %242 = OpImageSampleImplicitLod %239 %241 
                                                      OpStore %209 %242 
                                       f32_4 %243 = OpLoad %209 
                                                      OpStore %52 %243 
                                                      OpBranch %160 
                                             %244 = OpLabel 
                                Private f32* %245 = OpAccessChain %52 %62 
                                                      OpStore %245 %145 
                                Private f32* %246 = OpAccessChain %52 %98 
                                                      OpStore %246 %145 
                                Private f32* %247 = OpAccessChain %52 %92 
                                                      OpStore %247 %145 
                                Private f32* %248 = OpAccessChain %52 %53 
                                                      OpStore %248 %145 
                                                      OpBranch %160 
                                             %160 = OpLabel 
                                       f32_4 %250 = OpLoad %52 
                              Uniform f32_4* %251 = OpAccessChain %34 %73 
                                       f32_4 %252 = OpLoad %251 
                                         f32 %253 = OpDot %250 %252 
                                Private f32* %254 = OpAccessChain %249 %62 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %249 %62 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpExtInst %1 43 %256 %69 %145 
                                Private f32* %258 = OpAccessChain %249 %62 
                                                      OpStore %258 %257 
                                       f32_4 %261 = OpLoad %260 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %260 
                                       f32_2 %264 = OpVectorShuffle %263 %263 3 3 
                                       f32_2 %265 = OpFDiv %262 %264 
                                       f32_3 %266 = OpLoad %193 
                                       f32_3 %267 = OpVectorShuffle %266 %265 3 4 2 
                                                      OpStore %193 %267 
                  read_only Texture2DSampled %270 = OpLoad %269 
                                       f32_3 %271 = OpLoad %193 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                       f32_4 %273 = OpImageSampleImplicitLod %270 %272 
                                         f32 %274 = OpCompositeExtract %273 0 
                                                      OpStore %268 %274 
                                         f32 %276 = OpLoad %104 
                                         f32 %277 = OpLoad %268 
                                         f32 %278 = OpFAdd %276 %277 
                                Private f32* %279 = OpAccessChain %275 %62 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %275 %62 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 43 %281 %69 %145 
                                Private f32* %283 = OpAccessChain %275 %62 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %275 %62 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %249 %62 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpExtInst %1 37 %285 %287 
                                Private f32* %289 = OpAccessChain %249 %62 
                                                      OpStore %289 %288 
                                        bool %292 = OpLoad %147 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %292 %293 %297 
                                             %293 = OpLabel 
                                Private f32* %295 = OpAccessChain %249 %62 
                                         f32 %296 = OpLoad %295 
                                                      OpStore %291 %296 
                                                      OpBranch %294 
                                             %297 = OpLabel 
                                Private f32* %298 = OpAccessChain %275 %62 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %291 %299 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                         f32 %300 = OpLoad %291 
                                Private f32* %301 = OpAccessChain %249 %62 
                                                      OpStore %301 %300 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                              Uniform f32_4* %305 = OpAccessChain %34 %304 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %303 %307 
                                                      OpStore %275 %308 
                                       f32_3 %309 = OpLoad %249 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 0 0 
                                       f32_3 %311 = OpLoad %275 
                                       f32_3 %312 = OpFMul %310 %311 
                                                      OpStore %249 %312 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %316 = OpLoad %315 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %318 = OpLoad %249 
                                       f32_3 %319 = OpFAdd %317 %318 
                                                      OpStore %249 %319 
                                Private f32* %322 = OpAccessChain %9 %53 
                                         f32 %323 = OpLoad %322 
                                 Output f32* %325 = OpAccessChain %321 %53 
                                                      OpStore %325 %323 
                                Uniform f32* %327 = OpAccessChain %34 %326 
                                         f32 %328 = OpLoad %327 
                                       f32_3 %329 = OpCompositeConstruct %328 %328 %328 
                                       f32_3 %330 = OpLoad %26 
                                       f32_3 %331 = OpFMul %329 %330 
                                       f32_3 %332 = OpLoad %249 
                                       f32_3 %333 = OpFAdd %331 %332 
                                       f32_4 %334 = OpLoad %321 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %321 %335 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
bool u_xlatb5;
float u_xlat17;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb5 = 0.0<_Perpendicular;
    u_xlat5 = (u_xlatb5) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat5 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(_EmissivePower) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 368
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %162 %168 %169 %183 %219 %222 %225 %332 %348 %360 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 RelaxedPrecision 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 RelaxedPrecision 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %160 0 BuiltIn 160 
                                                      OpMemberDecorate %160 1 BuiltIn 160 
                                                      OpMemberDecorate %160 2 BuiltIn 160 
                                                      OpDecorate %160 Block 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %222 Location 222 
                                                      OpDecorate %225 Location 225 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %332 Location 332 
                                                      OpDecorate %348 Location 348 
                                                      OpDecorate %360 Location 360 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 8 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %34 = OpConstant 0 
                                          i32 %44 = OpConstant 2 
                                          u32 %47 = OpConstant 2 
                                          i32 %55 = OpConstant 3 
                                          u32 %58 = OpConstant 3 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %76 = OpConstant 3.674022E-40 
                                          i32 %77 = OpConstant 11 
                                 Private f32* %81 = OpVariable Private 
                                              %82 = OpTypePointer Function %6 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %89 = OpConstant 3.674022E-40 
                               Private f32_4* %99 = OpVariable Private 
                                             %102 = OpTypePointer Uniform %7 
                              Private f32_4* %131 = OpVariable Private 
                                         i32 %134 = OpConstant 10 
                                             %159 = OpTypeArray %6 %13 
                                             %160 = OpTypeStruct %7 %6 %159 
                                             %161 = OpTypePointer Output %160 
        Output struct {f32_4; f32; f32[1];}* %162 = OpVariable Output 
                                             %164 = OpTypePointer Output %7 
                                             %166 = OpTypeVector %6 2 
                                             %167 = OpTypePointer Output %166 
                               Output f32_2* %168 = OpVariable Output 
                                Input f32_4* %169 = OpVariable Input 
                                         i32 %172 = OpConstant 12 
                                             %181 = OpTypeVector %6 3 
                                             %182 = OpTypePointer Input %181 
                                Input f32_3* %183 = OpVariable Input 
                                         i32 %185 = OpConstant 9 
                                Private f32* %203 = OpVariable Private 
                                             %218 = OpTypePointer Output %181 
                               Output f32_3* %219 = OpVariable Output 
                               Output f32_3* %222 = OpVariable Output 
                               Output f32_4* %225 = OpVariable Output 
                                             %227 = OpTypePointer Private %181 
                              Private f32_3* %228 = OpVariable Private 
                              Private f32_4* %245 = OpVariable Private 
                              Private f32_3* %251 = OpVariable Private 
                                         i32 %252 = OpConstant 4 
                                         i32 %258 = OpConstant 5 
                                         i32 %264 = OpConstant 6 
                                         i32 %270 = OpConstant 7 
                                       f32_3 %299 = OpConstantComposite %76 %76 %76 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_3 %308 = OpConstantComposite %307 %307 %307 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_3 %320 = OpConstantComposite %319 %319 %319 
                                         f32 %322 = OpConstant 3.674022E-40 
                                       f32_3 %323 = OpConstantComposite %322 %322 %322 
                               Output f32_3* %332 = OpVariable Output 
                                         f32 %343 = OpConstant 3.674022E-40 
                                       f32_3 %344 = OpConstantComposite %343 %343 %343 
                               Output f32_4* %348 = OpVariable Output 
                               Output f32_4* %360 = OpVariable Output 
                                       f32_4 %361 = OpConstantComposite %76 %76 %76 %76 
                                             %362 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %83 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %35 = OpAccessChain %23 %25 %34 %13 
                                          f32 %36 = OpLoad %35 
                                   Input f32* %37 = OpAccessChain %11 %31 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFMul %36 %38 
                                 Private f32* %40 = OpAccessChain %9 %31 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpFAdd %39 %41 
                                 Private f32* %43 = OpAccessChain %9 %31 
                                                      OpStore %43 %42 
                                 Uniform f32* %45 = OpAccessChain %23 %25 %44 %13 
                                          f32 %46 = OpLoad %45 
                                   Input f32* %48 = OpAccessChain %11 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFMul %46 %49 
                                 Private f32* %51 = OpAccessChain %9 %31 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpFAdd %50 %52 
                                 Private f32* %54 = OpAccessChain %9 %31 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %23 %25 %55 %13 
                                          f32 %57 = OpLoad %56 
                                   Input f32* %59 = OpAccessChain %11 %58 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %57 %60 
                                 Private f32* %62 = OpAccessChain %9 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %9 %31 
                                          f32 %67 = OpLoad %66 
                                 Uniform f32* %68 = OpAccessChain %23 %25 %55 %13 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %67 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %78 = OpAccessChain %23 %77 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %76 %79 
                                                      OpStore %75 %80 
                                         bool %84 = OpLoad %75 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %88 
                                              %85 = OpLabel 
                                                      OpStore %83 %87 
                                                      OpBranch %86 
                                              %88 = OpLabel 
                                                      OpStore %83 %89 
                                                      OpBranch %86 
                                              %86 = OpLabel 
                                          f32 %90 = OpLoad %83 
                                                      OpStore %81 %90 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpLoad %81 
                                          f32 %94 = OpFMul %92 %93 
                                   Input f32* %95 = OpAccessChain %11 %47 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %100 = OpLoad %11 
                                       f32_4 %101 = OpVectorShuffle %100 %100 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %25 %26 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %101 %104 
                                                      OpStore %99 %105 
                              Uniform f32_4* %106 = OpAccessChain %23 %25 %34 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %11 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %99 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %99 %112 
                              Uniform f32_4* %113 = OpAccessChain %23 %25 %44 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %115 0 0 0 0 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %99 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %9 %119 
                                       f32_4 %120 = OpLoad %9 
                              Uniform f32_4* %121 = OpAccessChain %23 %25 %55 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpFAdd %120 %122 
                                                      OpStore %99 %123 
                              Uniform f32_4* %124 = OpAccessChain %23 %25 %55 
                                       f32_4 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %11 
                                       f32_4 %127 = OpVectorShuffle %126 %126 3 3 3 3 
                                       f32_4 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpFAdd %128 %129 
                                                      OpStore %9 %130 
                                       f32_4 %132 = OpLoad %99 
                                       f32_4 %133 = OpVectorShuffle %132 %132 1 1 1 1 
                              Uniform f32_4* %135 = OpAccessChain %23 %134 %26 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpFMul %133 %136 
                                                      OpStore %131 %137 
                              Uniform f32_4* %138 = OpAccessChain %23 %134 %34 
                                       f32_4 %139 = OpLoad %138 
                                       f32_4 %140 = OpLoad %99 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 0 0 0 
                                       f32_4 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %131 
                                       f32_4 %144 = OpFAdd %142 %143 
                                                      OpStore %131 %144 
                              Uniform f32_4* %145 = OpAccessChain %23 %134 %44 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpLoad %99 
                                       f32_4 %148 = OpVectorShuffle %147 %147 2 2 2 2 
                                       f32_4 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %131 
                                       f32_4 %151 = OpFAdd %149 %150 
                                                      OpStore %131 %151 
                              Uniform f32_4* %152 = OpAccessChain %23 %134 %55 
                                       f32_4 %153 = OpLoad %152 
                                       f32_4 %154 = OpLoad %99 
                                       f32_4 %155 = OpVectorShuffle %154 %154 3 3 3 3 
                                       f32_4 %156 = OpFMul %153 %155 
                                       f32_4 %157 = OpLoad %131 
                                       f32_4 %158 = OpFAdd %156 %157 
                                                      OpStore %99 %158 
                                       f32_4 %163 = OpLoad %99 
                               Output f32_4* %165 = OpAccessChain %162 %34 
                                                      OpStore %165 %163 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                              Uniform f32_4* %173 = OpAccessChain %23 %172 
                                       f32_4 %174 = OpLoad %173 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 1 
                                       f32_2 %176 = OpFMul %171 %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %172 
                                       f32_4 %178 = OpLoad %177 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 3 
                                       f32_2 %180 = OpFAdd %176 %179 
                                                      OpStore %168 %180 
                                       f32_3 %184 = OpLoad %183 
                              Uniform f32_4* %186 = OpAccessChain %23 %185 %34 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                         f32 %189 = OpDot %184 %188 
                                Private f32* %190 = OpAccessChain %131 %31 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %183 
                              Uniform f32_4* %192 = OpAccessChain %23 %185 %26 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                         f32 %195 = OpDot %191 %194 
                                Private f32* %196 = OpAccessChain %131 %13 
                                                      OpStore %196 %195 
                                       f32_3 %197 = OpLoad %183 
                              Uniform f32_4* %198 = OpAccessChain %23 %185 %44 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %202 = OpAccessChain %131 %47 
                                                      OpStore %202 %201 
                                       f32_4 %204 = OpLoad %131 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %131 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                         f32 %210 = OpExtInst %1 32 %209 
                                                      OpStore %203 %210 
                                         f32 %211 = OpLoad %203 
                                       f32_3 %212 = OpCompositeConstruct %211 %211 %211 
                                       f32_4 %213 = OpLoad %131 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_4 %216 = OpLoad %131 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %131 %217 
                                       f32_4 %220 = OpLoad %131 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                                      OpStore %219 %221 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                                      OpStore %222 %224 
                                       f32_4 %226 = OpLoad %9 
                                                      OpStore %225 %226 
                                Private f32* %229 = OpAccessChain %131 %13 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %131 %13 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %228 %31 
                                                      OpStore %234 %233 
                                Private f32* %235 = OpAccessChain %131 %31 
                                         f32 %236 = OpLoad %235 
                                Private f32* %237 = OpAccessChain %131 %31 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                Private f32* %240 = OpAccessChain %228 %31 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                         f32 %243 = OpFAdd %239 %242 
                                Private f32* %244 = OpAccessChain %228 %31 
                                                      OpStore %244 %243 
                                       f32_4 %246 = OpLoad %131 
                                       f32_4 %247 = OpVectorShuffle %246 %246 1 2 2 0 
                                       f32_4 %248 = OpLoad %131 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 1 2 2 
                                       f32_4 %250 = OpFMul %247 %249 
                                                      OpStore %245 %250 
                              Uniform f32_4* %253 = OpAccessChain %23 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_4 %255 = OpLoad %245 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %251 %31 
                                                      OpStore %257 %256 
                              Uniform f32_4* %259 = OpAccessChain %23 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %245 
                                         f32 %262 = OpDot %260 %261 
                                Private f32* %263 = OpAccessChain %251 %13 
                                                      OpStore %263 %262 
                              Uniform f32_4* %265 = OpAccessChain %23 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_4 %267 = OpLoad %245 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %251 %47 
                                                      OpStore %269 %268 
                              Uniform f32_4* %271 = OpAccessChain %23 %270 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpLoad %228 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 0 0 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_3 %277 = OpLoad %251 
                                       f32_3 %278 = OpFAdd %276 %277 
                                                      OpStore %228 %278 
                                Private f32* %279 = OpAccessChain %131 %58 
                                                      OpStore %279 %89 
                              Uniform f32_4* %280 = OpAccessChain %23 %26 
                                       f32_4 %281 = OpLoad %280 
                                       f32_4 %282 = OpLoad %131 
                                         f32 %283 = OpDot %281 %282 
                                Private f32* %284 = OpAccessChain %251 %31 
                                                      OpStore %284 %283 
                              Uniform f32_4* %285 = OpAccessChain %23 %44 
                                       f32_4 %286 = OpLoad %285 
                                       f32_4 %287 = OpLoad %131 
                                         f32 %288 = OpDot %286 %287 
                                Private f32* %289 = OpAccessChain %251 %13 
                                                      OpStore %289 %288 
                              Uniform f32_4* %290 = OpAccessChain %23 %55 
                                       f32_4 %291 = OpLoad %290 
                                       f32_4 %292 = OpLoad %131 
                                         f32 %293 = OpDot %291 %292 
                                Private f32* %294 = OpAccessChain %251 %47 
                                                      OpStore %294 %293 
                                       f32_3 %295 = OpLoad %228 
                                       f32_3 %296 = OpLoad %251 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %228 %297 
                                       f32_3 %298 = OpLoad %228 
                                       f32_3 %300 = OpExtInst %1 40 %298 %299 
                                                      OpStore %228 %300 
                                       f32_3 %301 = OpLoad %228 
                                       f32_3 %302 = OpExtInst %1 30 %301 
                                       f32_4 %303 = OpLoad %131 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %131 %304 
                                       f32_4 %305 = OpLoad %131 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_3 %309 = OpFMul %306 %308 
                                       f32_4 %310 = OpLoad %131 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %131 %311 
                                       f32_4 %312 = OpLoad %131 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpExtInst %1 29 %313 
                                       f32_4 %315 = OpLoad %131 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %131 %316 
                                       f32_4 %317 = OpLoad %131 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_3 %321 = OpFMul %318 %320 
                                       f32_3 %324 = OpFAdd %321 %323 
                                       f32_4 %325 = OpLoad %131 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %131 %326 
                                       f32_4 %327 = OpLoad %131 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpExtInst %1 40 %328 %299 
                                       f32_4 %330 = OpLoad %131 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %131 %331 
                                       f32_4 %333 = OpLoad %131 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                                      OpStore %332 %334 
                                Private f32* %335 = OpAccessChain %99 %13 
                                         f32 %336 = OpLoad %335 
                                Uniform f32* %337 = OpAccessChain %23 %34 %31 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %336 %338 
                                Private f32* %340 = OpAccessChain %99 %13 
                                                      OpStore %340 %339 
                                       f32_4 %341 = OpLoad %99 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 3 1 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %131 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 1 5 6 
                                                      OpStore %131 %347 
                                       f32_4 %349 = OpLoad %99 
                                       f32_2 %350 = OpVectorShuffle %349 %349 2 3 
                                       f32_4 %351 = OpLoad %348 
                                       f32_4 %352 = OpVectorShuffle %351 %350 0 1 4 5 
                                                      OpStore %348 %352 
                                       f32_4 %353 = OpLoad %131 
                                       f32_2 %354 = OpVectorShuffle %353 %353 2 2 
                                       f32_4 %355 = OpLoad %131 
                                       f32_2 %356 = OpVectorShuffle %355 %355 0 3 
                                       f32_2 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %348 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 2 3 
                                                      OpStore %348 %359 
                                                      OpStore %360 %361 
                                 Output f32* %363 = OpAccessChain %162 %34 %13 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFNegate %364 
                                 Output f32* %366 = OpAccessChain %162 %34 %13 
                                                      OpStore %366 %365 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 337
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %83 %260 %315 %321 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 RelaxedPrecision 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 RelaxedPrecision 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpMemberDecorate %32 9 RelaxedPrecision 
                                                      OpMemberDecorate %32 9 Offset 32 
                                                      OpMemberDecorate %32 10 Offset 32 
                                                      OpMemberDecorate %32 11 Offset 32 
                                                      OpMemberDecorate %32 12 RelaxedPrecision 
                                                      OpMemberDecorate %32 12 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %158 SpecId 158 
                                                      OpDecorate %238 DescriptorSet 238 
                                                      OpDecorate %238 Binding 238 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %260 Location 260 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %321 Location 321 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                               Private f32_3* %26 = OpVariable Private 
                                              %28 = OpTypeInt 32 0 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeArray %7 %29 
                                              %32 = OpTypeStruct %20 %7 %7 %7 %30 %7 %31 %20 %20 %7 %6 %6 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32;}* %34 = OpVariable Uniform 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 11 
                                              %37 = OpTypePointer Uniform %6 
                               Private f32_4* %52 = OpVariable Private 
                                          u32 %53 = OpConstant 3 
                                              %54 = OpTypePointer Private %6 
                                          i32 %57 = OpConstant 12 
                                          u32 %62 = OpConstant 0 
                                              %64 = OpTypeBool 
                                              %65 = OpTypePointer Private %64 
                                Private bool* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          i32 %72 = OpConstant 0 
                                          i32 %73 = OpConstant 1 
                                          i32 %75 = OpConstant -1 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypePointer Input %20 
                                 Input f32_3* %83 = OpVariable Input 
                                              %86 = OpTypePointer Uniform %20 
                               Private f32_3* %90 = OpVariable Private 
                                          i32 %91 = OpConstant 4 
                                          u32 %92 = OpConstant 2 
                                          u32 %98 = OpConstant 1 
                                         i32 %100 = OpConstant 2 
                                Private f32* %104 = OpVariable Private 
                                         i32 %109 = OpConstant 3 
                                             %110 = OpTypePointer Uniform %7 
                                         f32 %145 = OpConstant 3.674022E-40 
                               Private bool* %147 = OpVariable Private 
                                         i32 %148 = OpConstant 5 
                                        bool %152 = OpConstantFalse 
                                        bool %158 = OpSpecConstantFalse 
                               Private bool* %161 = OpVariable Private 
                                         i32 %167 = OpConstant 6 
                              Private f32_3* %193 = OpVariable Private 
                                             %194 = OpTypePointer Function %20 
                                         i32 %204 = OpConstant 8 
                              Private f32_4* %209 = OpVariable Private 
                                         i32 %211 = OpConstant 7 
                                         f32 %219 = OpConstant 3.674022E-40 
                                         f32 %221 = OpConstant 3.674022E-40 
                                Private f32* %224 = OpVariable Private 
                                         f32 %227 = OpConstant 3.674022E-40 
                                             %235 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %236 = OpTypeSampledImage %235 
                                             %237 = OpTypePointer UniformConstant %236 
 UniformConstant read_only Texture3DSampled* %238 = OpVariable UniformConstant 
                              Private f32_3* %249 = OpVariable Private 
                                             %259 = OpTypePointer Input %7 
                                Input f32_4* %260 = OpVariable Input 
                                Private f32* %268 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %269 = OpVariable UniformConstant 
                              Private f32_3* %275 = OpVariable Private 
                                             %290 = OpTypePointer Function %6 
                                         i32 %304 = OpConstant 9 
                                Input f32_3* %315 = OpVariable Input 
                                             %320 = OpTypePointer Output %7 
                               Output f32_4* %321 = OpVariable Output 
                                             %324 = OpTypePointer Output %6 
                                         i32 %326 = OpConstant 10 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %195 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                                        f32_3 %25 = OpExtInst %1 30 %24 
                                                      OpStore %22 %25 
                                        f32_3 %27 = OpLoad %22 
                                 Uniform f32* %38 = OpAccessChain %34 %36 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %34 %36 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %34 %36 
                                          f32 %43 = OpLoad %42 
                                        f32_3 %44 = OpCompositeConstruct %39 %41 %43 
                                          f32 %45 = OpCompositeExtract %44 0 
                                          f32 %46 = OpCompositeExtract %44 1 
                                          f32 %47 = OpCompositeExtract %44 2 
                                        f32_3 %48 = OpCompositeConstruct %45 %46 %47 
                                        f32_3 %49 = OpFMul %27 %48 
                                                      OpStore %26 %49 
                                        f32_3 %50 = OpLoad %26 
                                        f32_3 %51 = OpExtInst %1 29 %50 
                                                      OpStore %26 %51 
                                 Private f32* %55 = OpAccessChain %9 %53 
                                          f32 %56 = OpLoad %55 
                                 Uniform f32* %58 = OpAccessChain %34 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFNegate %59 
                                          f32 %61 = OpFAdd %56 %60 
                                 Private f32* %63 = OpAccessChain %52 %62 
                                                      OpStore %63 %61 
                                 Private f32* %67 = OpAccessChain %52 %62 
                                          f32 %68 = OpLoad %67 
                                         bool %70 = OpFOrdLessThan %68 %69 
                                                      OpStore %66 %70 
                                         bool %71 = OpLoad %66 
                                          i32 %74 = OpSelect %71 %73 %72 
                                          i32 %76 = OpIMul %74 %75 
                                         bool %77 = OpINotEqual %76 %72 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %79 
                                              %78 = OpLabel 
                                                      OpKill
                                              %79 = OpLabel 
                                        f32_3 %84 = OpLoad %83 
                                        f32_3 %85 = OpFNegate %84 
                               Uniform f32_3* %87 = OpAccessChain %34 %72 
                                        f32_3 %88 = OpLoad %87 
                                        f32_3 %89 = OpFAdd %85 %88 
                                                      OpStore %81 %89 
                                 Uniform f32* %93 = OpAccessChain %34 %91 %72 %92 
                                          f32 %94 = OpLoad %93 
                                 Private f32* %95 = OpAccessChain %90 %62 
                                                      OpStore %95 %94 
                                 Uniform f32* %96 = OpAccessChain %34 %91 %73 %92 
                                          f32 %97 = OpLoad %96 
                                 Private f32* %99 = OpAccessChain %90 %98 
                                                      OpStore %99 %97 
                                Uniform f32* %101 = OpAccessChain %34 %91 %100 %92 
                                         f32 %102 = OpLoad %101 
                                Private f32* %103 = OpAccessChain %90 %92 
                                                      OpStore %103 %102 
                                       f32_3 %105 = OpLoad %81 
                                       f32_3 %106 = OpLoad %90 
                                         f32 %107 = OpDot %105 %106 
                                                      OpStore %104 %107 
                                       f32_3 %108 = OpLoad %83 
                              Uniform f32_4* %111 = OpAccessChain %34 %109 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFNegate %113 
                                       f32_3 %115 = OpFAdd %108 %114 
                                                      OpStore %81 %115 
                                       f32_3 %116 = OpLoad %81 
                                       f32_3 %117 = OpLoad %81 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %119 = OpAccessChain %81 %62 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %81 %62 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpExtInst %1 31 %121 
                                Private f32* %123 = OpAccessChain %81 %62 
                                                      OpStore %123 %122 
                                         f32 %124 = OpLoad %104 
                                         f32 %125 = OpFNegate %124 
                                Private f32* %126 = OpAccessChain %81 %62 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFAdd %125 %127 
                                Private f32* %129 = OpAccessChain %81 %62 
                                                      OpStore %129 %128 
                                Uniform f32* %130 = OpAccessChain %34 %109 %53 
                                         f32 %131 = OpLoad %130 
                                Private f32* %132 = OpAccessChain %81 %62 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFMul %131 %133 
                                         f32 %135 = OpLoad %104 
                                         f32 %136 = OpFAdd %134 %135 
                                                      OpStore %104 %136 
                                         f32 %137 = OpLoad %104 
                                Uniform f32* %138 = OpAccessChain %34 %100 %92 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %137 %139 
                                Uniform f32* %141 = OpAccessChain %34 %100 %53 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFAdd %140 %142 
                                                      OpStore %104 %143 
                                         f32 %144 = OpLoad %104 
                                         f32 %146 = OpExtInst %1 43 %144 %69 %145 
                                                      OpStore %104 %146 
                                Uniform f32* %149 = OpAccessChain %34 %148 %62 
                                         f32 %150 = OpLoad %149 
                                        bool %151 = OpFOrdEqual %150 %145 
                                                      OpStore %147 %151 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %154 
                                             %153 = OpLabel 
                                        bool %155 = OpLoad %147 
                                                      OpSelectionMerge %157 None 
                                                      OpBranchConditional %155 %156 %157 
                                             %156 = OpLabel 
                                                      OpBranch %157 
                                             %157 = OpLabel 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                                      OpSelectionMerge %160 None 
                                                      OpBranchConditional %158 %159 %244 
                                             %159 = OpLabel 
                                Uniform f32* %162 = OpAccessChain %34 %148 %98 
                                         f32 %163 = OpLoad %162 
                                        bool %164 = OpFOrdEqual %163 %145 
                                                      OpStore %161 %164 
                                       f32_3 %165 = OpLoad %83 
                                       f32_3 %166 = OpVectorShuffle %165 %165 1 1 1 
                              Uniform f32_4* %168 = OpAccessChain %34 %167 %73 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %166 %170 
                                                      OpStore %90 %171 
                              Uniform f32_4* %172 = OpAccessChain %34 %167 %72 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpLoad %83 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 0 0 
                                       f32_3 %177 = OpFMul %174 %176 
                                       f32_3 %178 = OpLoad %90 
                                       f32_3 %179 = OpFAdd %177 %178 
                                                      OpStore %90 %179 
                              Uniform f32_4* %180 = OpAccessChain %34 %167 %100 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpLoad %83 
                                       f32_3 %184 = OpVectorShuffle %183 %183 2 2 2 
                                       f32_3 %185 = OpFMul %182 %184 
                                       f32_3 %186 = OpLoad %90 
                                       f32_3 %187 = OpFAdd %185 %186 
                                                      OpStore %90 %187 
                                       f32_3 %188 = OpLoad %90 
                              Uniform f32_4* %189 = OpAccessChain %34 %167 %109 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %188 %191 
                                                      OpStore %90 %192 
                                        bool %196 = OpLoad %161 
                                                      OpSelectionMerge %198 None 
                                                      OpBranchConditional %196 %197 %200 
                                             %197 = OpLabel 
                                       f32_3 %199 = OpLoad %90 
                                                      OpStore %195 %199 
                                                      OpBranch %198 
                                             %200 = OpLabel 
                                       f32_3 %201 = OpLoad %83 
                                                      OpStore %195 %201 
                                                      OpBranch %198 
                                             %198 = OpLabel 
                                       f32_3 %202 = OpLoad %195 
                                                      OpStore %193 %202 
                                       f32_3 %203 = OpLoad %193 
                              Uniform f32_3* %205 = OpAccessChain %34 %204 
                                       f32_3 %206 = OpLoad %205 
                                       f32_3 %207 = OpFNegate %206 
                                       f32_3 %208 = OpFAdd %203 %207 
                                                      OpStore %193 %208 
                                       f32_3 %210 = OpLoad %193 
                              Uniform f32_3* %212 = OpAccessChain %34 %211 
                                       f32_3 %213 = OpLoad %212 
                                       f32_3 %214 = OpFMul %210 %213 
                                       f32_4 %215 = OpLoad %209 
                                       f32_4 %216 = OpVectorShuffle %215 %214 0 4 5 6 
                                                      OpStore %209 %216 
                                Private f32* %217 = OpAccessChain %209 %98 
                                         f32 %218 = OpLoad %217 
                                         f32 %220 = OpFMul %218 %219 
                                         f32 %222 = OpFAdd %220 %221 
                                Private f32* %223 = OpAccessChain %193 %62 
                                                      OpStore %223 %222 
                                Uniform f32* %225 = OpAccessChain %34 %148 %92 
                                         f32 %226 = OpLoad %225 
                                         f32 %228 = OpFMul %226 %227 
                                         f32 %229 = OpFAdd %228 %221 
                                                      OpStore %224 %229 
                                         f32 %230 = OpLoad %224 
                                Private f32* %231 = OpAccessChain %193 %62 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpExtInst %1 40 %230 %232 
                                Private f32* %234 = OpAccessChain %209 %62 
                                                      OpStore %234 %233 
                  read_only Texture3DSampled %239 = OpLoad %238 
                                       f32_4 %240 = OpLoad %209 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 2 3 
                                       f32_4 %242 = OpImageSampleImplicitLod %239 %241 
                                                      OpStore %209 %242 
                                       f32_4 %243 = OpLoad %209 
                                                      OpStore %52 %243 
                                                      OpBranch %160 
                                             %244 = OpLabel 
                                Private f32* %245 = OpAccessChain %52 %62 
                                                      OpStore %245 %145 
                                Private f32* %246 = OpAccessChain %52 %98 
                                                      OpStore %246 %145 
                                Private f32* %247 = OpAccessChain %52 %92 
                                                      OpStore %247 %145 
                                Private f32* %248 = OpAccessChain %52 %53 
                                                      OpStore %248 %145 
                                                      OpBranch %160 
                                             %160 = OpLabel 
                                       f32_4 %250 = OpLoad %52 
                              Uniform f32_4* %251 = OpAccessChain %34 %73 
                                       f32_4 %252 = OpLoad %251 
                                         f32 %253 = OpDot %250 %252 
                                Private f32* %254 = OpAccessChain %249 %62 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %249 %62 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpExtInst %1 43 %256 %69 %145 
                                Private f32* %258 = OpAccessChain %249 %62 
                                                      OpStore %258 %257 
                                       f32_4 %261 = OpLoad %260 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %260 
                                       f32_2 %264 = OpVectorShuffle %263 %263 3 3 
                                       f32_2 %265 = OpFDiv %262 %264 
                                       f32_3 %266 = OpLoad %193 
                                       f32_3 %267 = OpVectorShuffle %266 %265 3 4 2 
                                                      OpStore %193 %267 
                  read_only Texture2DSampled %270 = OpLoad %269 
                                       f32_3 %271 = OpLoad %193 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                       f32_4 %273 = OpImageSampleImplicitLod %270 %272 
                                         f32 %274 = OpCompositeExtract %273 0 
                                                      OpStore %268 %274 
                                         f32 %276 = OpLoad %104 
                                         f32 %277 = OpLoad %268 
                                         f32 %278 = OpFAdd %276 %277 
                                Private f32* %279 = OpAccessChain %275 %62 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %275 %62 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 43 %281 %69 %145 
                                Private f32* %283 = OpAccessChain %275 %62 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %275 %62 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %249 %62 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpExtInst %1 37 %285 %287 
                                Private f32* %289 = OpAccessChain %249 %62 
                                                      OpStore %289 %288 
                                        bool %292 = OpLoad %147 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %292 %293 %297 
                                             %293 = OpLabel 
                                Private f32* %295 = OpAccessChain %249 %62 
                                         f32 %296 = OpLoad %295 
                                                      OpStore %291 %296 
                                                      OpBranch %294 
                                             %297 = OpLabel 
                                Private f32* %298 = OpAccessChain %275 %62 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %291 %299 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                         f32 %300 = OpLoad %291 
                                Private f32* %301 = OpAccessChain %249 %62 
                                                      OpStore %301 %300 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                              Uniform f32_4* %305 = OpAccessChain %34 %304 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %303 %307 
                                                      OpStore %275 %308 
                                       f32_3 %309 = OpLoad %249 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 0 0 
                                       f32_3 %311 = OpLoad %275 
                                       f32_3 %312 = OpFMul %310 %311 
                                                      OpStore %249 %312 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %316 = OpLoad %315 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %318 = OpLoad %249 
                                       f32_3 %319 = OpFAdd %317 %318 
                                                      OpStore %249 %319 
                                Private f32* %322 = OpAccessChain %9 %53 
                                         f32 %323 = OpLoad %322 
                                 Output f32* %325 = OpAccessChain %321 %53 
                                                      OpStore %325 %323 
                                Uniform f32* %327 = OpAccessChain %34 %326 
                                         f32 %328 = OpLoad %327 
                                       f32_3 %329 = OpCompositeConstruct %328 %328 %328 
                                       f32_3 %330 = OpLoad %26 
                                       f32_3 %331 = OpFMul %329 %330 
                                       f32_3 %332 = OpLoad %249 
                                       f32_3 %333 = OpFAdd %331 %332 
                                       f32_4 %334 = OpLoad %321 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %321 %335 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
bool u_xlatb5;
float u_xlat16;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb5 = 0.0<_Perpendicular;
    u_xlat5 = (u_xlatb5) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat5 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat1 = max(u_xlat2, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(_EmissivePower) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 351
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %157 %169 %170 %184 %220 %223 %226 %342 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 RelaxedPrecision 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %155 0 BuiltIn 155 
                                                      OpMemberDecorate %155 1 BuiltIn 155 
                                                      OpMemberDecorate %155 2 BuiltIn 155 
                                                      OpDecorate %155 Block 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %223 Location 223 
                                                      OpDecorate %226 Location 226 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %342 Location 342 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeStruct %7 %7 %7 %7 %18 %20 %21 %22 %6 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 5 
                                          i32 %28 = OpConstant 1 
                                              %29 = OpTypePointer Uniform %6 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                                          i32 %36 = OpConstant 0 
                                          i32 %46 = OpConstant 2 
                                          u32 %49 = OpConstant 2 
                                          i32 %57 = OpConstant 3 
                                          u32 %60 = OpConstant 3 
                                              %75 = OpTypeBool 
                                              %76 = OpTypePointer Private %75 
                                Private bool* %77 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %79 = OpConstant 8 
                                 Private f32* %83 = OpVariable Private 
                                              %84 = OpTypePointer Function %6 
                                          f32 %89 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                              Private f32_4* %101 = OpVariable Private 
                                             %104 = OpTypePointer Uniform %7 
                              Private f32_4* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 7 
                                             %154 = OpTypeArray %6 %13 
                                             %155 = OpTypeStruct %7 %6 %154 
                                             %156 = OpTypePointer Output %155 
        Output struct {f32_4; f32; f32[1];}* %157 = OpVariable Output 
                                             %165 = OpTypePointer Output %7 
                                             %167 = OpTypeVector %6 2 
                                             %168 = OpTypePointer Output %167 
                               Output f32_2* %169 = OpVariable Output 
                                Input f32_4* %170 = OpVariable Input 
                                         i32 %173 = OpConstant 9 
                                             %182 = OpTypeVector %6 3 
                                             %183 = OpTypePointer Input %182 
                                Input f32_3* %184 = OpVariable Input 
                                         i32 %186 = OpConstant 6 
                                Private f32* %204 = OpVariable Private 
                                             %219 = OpTypePointer Output %182 
                               Output f32_3* %220 = OpVariable Output 
                               Output f32_3* %223 = OpVariable Output 
                               Output f32_4* %226 = OpVariable Output 
                              Private f32_4* %234 = OpVariable Private 
                              Private f32_4* %242 = OpVariable Private 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_4 %279 = OpConstantComposite %278 %278 %278 %278 
                                       f32_4 %287 = OpConstantComposite %91 %91 %91 %91 
                                       f32_4 %295 = OpConstantComposite %78 %78 %78 %78 
                                         i32 %302 = OpConstant 4 
                               Output f32_3* %342 = OpVariable Output 
                                             %345 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %85 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %30 = OpAccessChain %25 %27 %28 %13 
                                          f32 %31 = OpLoad %30 
                                          f32 %32 = OpFMul %16 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Uniform f32* %37 = OpAccessChain %25 %27 %36 %13 
                                          f32 %38 = OpLoad %37 
                                   Input f32* %39 = OpAccessChain %11 %33 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %33 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFAdd %41 %43 
                                 Private f32* %45 = OpAccessChain %9 %33 
                                                      OpStore %45 %44 
                                 Uniform f32* %47 = OpAccessChain %25 %27 %46 %13 
                                          f32 %48 = OpLoad %47 
                                   Input f32* %50 = OpAccessChain %11 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFMul %48 %51 
                                 Private f32* %53 = OpAccessChain %9 %33 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %52 %54 
                                 Private f32* %56 = OpAccessChain %9 %33 
                                                      OpStore %56 %55 
                                 Uniform f32* %58 = OpAccessChain %25 %27 %57 %13 
                                          f32 %59 = OpLoad %58 
                                   Input f32* %61 = OpAccessChain %11 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %9 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %9 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %9 %33 
                                          f32 %69 = OpLoad %68 
                                 Uniform f32* %70 = OpAccessChain %25 %27 %57 %13 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                          f32 %73 = OpFAdd %69 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %80 = OpAccessChain %25 %79 
                                          f32 %81 = OpLoad %80 
                                         bool %82 = OpFOrdLessThan %78 %81 
                                                      OpStore %77 %82 
                                         bool %86 = OpLoad %77 
                                                      OpSelectionMerge %88 None 
                                                      OpBranchConditional %86 %87 %90 
                                              %87 = OpLabel 
                                                      OpStore %85 %89 
                                                      OpBranch %88 
                                              %90 = OpLabel 
                                                      OpStore %85 %91 
                                                      OpBranch %88 
                                              %88 = OpLabel 
                                          f32 %92 = OpLoad %85 
                                                      OpStore %83 %92 
                                 Private f32* %93 = OpAccessChain %9 %33 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpLoad %83 
                                          f32 %96 = OpFMul %94 %95 
                                   Input f32* %97 = OpAccessChain %11 %49 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFAdd %96 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_4 %102 = OpLoad %11 
                                       f32_4 %103 = OpVectorShuffle %102 %102 1 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %25 %27 %28 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpFMul %103 %106 
                                                      OpStore %101 %107 
                              Uniform f32_4* %108 = OpAccessChain %25 %27 %36 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %11 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %101 
                                       f32_4 %114 = OpFAdd %112 %113 
                                                      OpStore %101 %114 
                              Uniform f32_4* %115 = OpAccessChain %25 %27 %46 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %117 0 0 0 0 
                                       f32_4 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %101 
                                       f32_4 %121 = OpFAdd %119 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                              Uniform f32_4* %123 = OpAccessChain %25 %27 %57 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpFAdd %122 %124 
                                                      OpStore %101 %125 
                              Uniform f32_4* %126 = OpAccessChain %25 %27 %57 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpLoad %11 
                                       f32_4 %129 = OpVectorShuffle %128 %128 3 3 3 3 
                                       f32_4 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpFAdd %130 %131 
                                                      OpStore %9 %132 
                                       f32_4 %134 = OpLoad %101 
                                       f32_4 %135 = OpVectorShuffle %134 %134 1 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %25 %136 %28 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpFMul %135 %138 
                                                      OpStore %133 %139 
                              Uniform f32_4* %140 = OpAccessChain %25 %136 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpLoad %101 
                                       f32_4 %143 = OpVectorShuffle %142 %142 0 0 0 0 
                                       f32_4 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %133 
                                       f32_4 %146 = OpFAdd %144 %145 
                                                      OpStore %133 %146 
                              Uniform f32_4* %147 = OpAccessChain %25 %136 %46 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpLoad %101 
                                       f32_4 %150 = OpVectorShuffle %149 %149 2 2 2 2 
                                       f32_4 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %133 
                                       f32_4 %153 = OpFAdd %151 %152 
                                                      OpStore %133 %153 
                              Uniform f32_4* %158 = OpAccessChain %25 %136 %57 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpLoad %101 
                                       f32_4 %161 = OpVectorShuffle %160 %160 3 3 3 3 
                                       f32_4 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %133 
                                       f32_4 %164 = OpFAdd %162 %163 
                               Output f32_4* %166 = OpAccessChain %157 %36 
                                                      OpStore %166 %164 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                              Uniform f32_4* %174 = OpAccessChain %25 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpFMul %172 %176 
                              Uniform f32_4* %178 = OpAccessChain %25 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_2 %181 = OpFAdd %177 %180 
                                                      OpStore %169 %181 
                                       f32_3 %185 = OpLoad %184 
                              Uniform f32_4* %187 = OpAccessChain %25 %186 %36 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %185 %189 
                                Private f32* %191 = OpAccessChain %101 %33 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %184 
                              Uniform f32_4* %193 = OpAccessChain %25 %186 %28 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %101 %13 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %184 
                              Uniform f32_4* %199 = OpAccessChain %25 %186 %46 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %198 %201 
                                Private f32* %203 = OpAccessChain %101 %49 
                                                      OpStore %203 %202 
                                       f32_4 %205 = OpLoad %101 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %101 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                                      OpStore %204 %209 
                                         f32 %210 = OpLoad %204 
                                         f32 %211 = OpExtInst %1 32 %210 
                                                      OpStore %204 %211 
                                         f32 %212 = OpLoad %204 
                                       f32_3 %213 = OpCompositeConstruct %212 %212 %212 
                                       f32_4 %214 = OpLoad %101 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_4 %217 = OpLoad %101 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %101 %218 
                                       f32_4 %221 = OpLoad %101 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                                      OpStore %220 %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                                      OpStore %223 %225 
                                       f32_4 %227 = OpLoad %9 
                                                      OpStore %226 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_4 %229 = OpVectorShuffle %228 %228 1 1 1 1 
                                       f32_4 %230 = OpFNegate %229 
                              Uniform f32_4* %231 = OpAccessChain %25 %28 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpFAdd %230 %232 
                                                      OpStore %133 %233 
                                       f32_4 %235 = OpLoad %101 
                                       f32_4 %236 = OpVectorShuffle %235 %235 1 1 1 1 
                                       f32_4 %237 = OpLoad %133 
                                       f32_4 %238 = OpFMul %236 %237 
                                                      OpStore %234 %238 
                                       f32_4 %239 = OpLoad %133 
                                       f32_4 %240 = OpLoad %133 
                                       f32_4 %241 = OpFMul %239 %240 
                                                      OpStore %133 %241 
                                       f32_4 %243 = OpLoad %9 
                                       f32_4 %244 = OpVectorShuffle %243 %243 0 0 0 0 
                                       f32_4 %245 = OpFNegate %244 
                              Uniform f32_4* %246 = OpAccessChain %25 %36 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpFAdd %245 %247 
                                                      OpStore %242 %248 
                                       f32_4 %249 = OpLoad %9 
                                       f32_4 %250 = OpVectorShuffle %249 %249 2 2 2 2 
                                       f32_4 %251 = OpFNegate %250 
                              Uniform f32_4* %252 = OpAccessChain %25 %46 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpFAdd %251 %253 
                                                      OpStore %9 %254 
                                       f32_4 %255 = OpLoad %242 
                                       f32_4 %256 = OpLoad %101 
                                       f32_4 %257 = OpVectorShuffle %256 %256 0 0 0 0 
                                       f32_4 %258 = OpFMul %255 %257 
                                       f32_4 %259 = OpLoad %234 
                                       f32_4 %260 = OpFAdd %258 %259 
                                                      OpStore %234 %260 
                                       f32_4 %261 = OpLoad %242 
                                       f32_4 %262 = OpLoad %242 
                                       f32_4 %263 = OpFMul %261 %262 
                                       f32_4 %264 = OpLoad %133 
                                       f32_4 %265 = OpFAdd %263 %264 
                                                      OpStore %133 %265 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpLoad %9 
                                       f32_4 %268 = OpFMul %266 %267 
                                       f32_4 %269 = OpLoad %133 
                                       f32_4 %270 = OpFAdd %268 %269 
                                                      OpStore %133 %270 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpLoad %101 
                                       f32_4 %273 = OpVectorShuffle %272 %272 2 2 2 2 
                                       f32_4 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %234 
                                       f32_4 %276 = OpFAdd %274 %275 
                                                      OpStore %9 %276 
                                       f32_4 %277 = OpLoad %133 
                                       f32_4 %280 = OpExtInst %1 40 %277 %279 
                                                      OpStore %101 %280 
                                       f32_4 %281 = OpLoad %101 
                                       f32_4 %282 = OpExtInst %1 32 %281 
                                                      OpStore %133 %282 
                                       f32_4 %283 = OpLoad %101 
                              Uniform f32_4* %284 = OpAccessChain %25 %57 
                                       f32_4 %285 = OpLoad %284 
                                       f32_4 %286 = OpFMul %283 %285 
                                       f32_4 %288 = OpFAdd %286 %287 
                                                      OpStore %101 %288 
                                       f32_4 %289 = OpLoad %101 
                                       f32_4 %290 = OpFDiv %287 %289 
                                                      OpStore %101 %290 
                                       f32_4 %291 = OpLoad %9 
                                       f32_4 %292 = OpLoad %133 
                                       f32_4 %293 = OpFMul %291 %292 
                                                      OpStore %9 %293 
                                       f32_4 %294 = OpLoad %9 
                                       f32_4 %296 = OpExtInst %1 40 %294 %295 
                                                      OpStore %9 %296 
                                       f32_4 %297 = OpLoad %101 
                                       f32_4 %298 = OpLoad %9 
                                       f32_4 %299 = OpFMul %297 %298 
                                                      OpStore %9 %299 
                                       f32_4 %300 = OpLoad %9 
                                       f32_3 %301 = OpVectorShuffle %300 %300 1 1 1 
                              Uniform f32_4* %303 = OpAccessChain %25 %302 %28 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFMul %301 %305 
                                       f32_4 %307 = OpLoad %101 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %101 %308 
                              Uniform f32_4* %309 = OpAccessChain %25 %302 %36 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_4 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 0 0 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_4 %315 = OpLoad %101 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %317 = OpFAdd %314 %316 
                                       f32_4 %318 = OpLoad %101 
                                       f32_4 %319 = OpVectorShuffle %318 %317 4 5 6 3 
                                                      OpStore %101 %319 
                              Uniform f32_4* %320 = OpAccessChain %25 %302 %46 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 2 2 2 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_4 %326 = OpLoad %101 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFAdd %325 %327 
                                       f32_4 %329 = OpLoad %9 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 5 6 3 
                                                      OpStore %9 %330 
                              Uniform f32_4* %331 = OpAccessChain %25 %302 %57 
                                       f32_4 %332 = OpLoad %331 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_4 %334 = OpLoad %9 
                                       f32_3 %335 = OpVectorShuffle %334 %334 3 3 3 
                                       f32_3 %336 = OpFMul %333 %335 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFAdd %336 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %9 %341 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                                      OpStore %342 %344 
                                 Output f32* %346 = OpAccessChain %157 %36 %13 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpFNegate %347 
                                 Output f32* %349 = OpAccessChain %157 %36 %13 
                                                      OpStore %349 %348 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 232
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %99 %210 %216 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpMemberDecorate %31 5 RelaxedPrecision 
                                                      OpMemberDecorate %31 5 Offset 31 
                                                      OpMemberDecorate %31 6 Offset 31 
                                                      OpMemberDecorate %31 7 Offset 31 
                                                      OpMemberDecorate %31 8 RelaxedPrecision 
                                                      OpMemberDecorate %31 8 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %90 SpecId 90 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %216 Location 216 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                               Private f32_3* %26 = OpVariable Private 
                                              %28 = OpTypeInt 32 0 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeStruct %7 %7 %30 %20 %20 %7 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 7 
                                              %36 = OpTypePointer Uniform %6 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %52 = OpConstant 3 
                                              %53 = OpTypePointer Private %6 
                                          i32 %56 = OpConstant 8 
                                          u32 %61 = OpConstant 0 
                                              %63 = OpTypeBool 
                                              %64 = OpTypePointer Private %63 
                                Private bool* %65 = OpVariable Private 
                                          f32 %68 = OpConstant 3.674022E-40 
                                          i32 %71 = OpConstant 0 
                                          i32 %72 = OpConstant 1 
                                          i32 %74 = OpConstant -1 
                                          f32 %82 = OpConstant 3.674022E-40 
                                         bool %84 = OpConstantFalse 
                                         bool %90 = OpSpecConstantFalse 
                                          u32 %93 = OpConstant 1 
                               Private f32_3* %97 = OpVariable Private 
                                              %98 = OpTypePointer Input %20 
                                 Input f32_3* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 2 
                                             %103 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 3 
                                             %130 = OpTypePointer Function %20 
                                         i32 %140 = OpConstant 4 
                                             %141 = OpTypePointer Uniform %20 
                              Private f32_4* %146 = OpVariable Private 
                                Private f32* %153 = OpVariable Private 
                                         f32 %156 = OpConstant 3.674022E-40 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         u32 %160 = OpConstant 2 
                                         f32 %163 = OpConstant 3.674022E-40 
                                             %172 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %173 = OpTypeSampledImage %172 
                                             %174 = OpTypePointer UniformConstant %173 
 UniformConstant read_only Texture3DSampled* %175 = OpVariable UniformConstant 
                              Private f32_3* %186 = OpVariable Private 
                              Private f32_3* %196 = OpVariable Private 
                                         i32 %199 = OpConstant 5 
                                Input f32_3* %210 = OpVariable Input 
                                             %215 = OpTypePointer Output %7 
                               Output f32_4* %216 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                         i32 %221 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %131 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                                        f32_3 %25 = OpExtInst %1 30 %24 
                                                      OpStore %22 %25 
                                        f32_3 %27 = OpLoad %22 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                 Uniform f32* %39 = OpAccessChain %33 %35 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %41 = OpAccessChain %33 %35 
                                          f32 %42 = OpLoad %41 
                                        f32_3 %43 = OpCompositeConstruct %38 %40 %42 
                                          f32 %44 = OpCompositeExtract %43 0 
                                          f32 %45 = OpCompositeExtract %43 1 
                                          f32 %46 = OpCompositeExtract %43 2 
                                        f32_3 %47 = OpCompositeConstruct %44 %45 %46 
                                        f32_3 %48 = OpFMul %27 %47 
                                                      OpStore %26 %48 
                                        f32_3 %49 = OpLoad %26 
                                        f32_3 %50 = OpExtInst %1 29 %49 
                                                      OpStore %26 %50 
                                 Private f32* %54 = OpAccessChain %9 %52 
                                          f32 %55 = OpLoad %54 
                                 Uniform f32* %57 = OpAccessChain %33 %56 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFNegate %58 
                                          f32 %60 = OpFAdd %55 %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Private f32* %66 = OpAccessChain %51 %61 
                                          f32 %67 = OpLoad %66 
                                         bool %69 = OpFOrdLessThan %67 %68 
                                                      OpStore %65 %69 
                                         bool %70 = OpLoad %65 
                                          i32 %73 = OpSelect %70 %72 %71 
                                          i32 %75 = OpIMul %73 %74 
                                         bool %76 = OpINotEqual %75 %71 
                                                      OpSelectionMerge %78 None 
                                                      OpBranchConditional %76 %77 %78 
                                              %77 = OpLabel 
                                                      OpKill
                                              %78 = OpLabel 
                                 Uniform f32* %80 = OpAccessChain %33 %72 %61 
                                          f32 %81 = OpLoad %80 
                                         bool %83 = OpFOrdEqual %81 %82 
                                                      OpStore %65 %83 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %86 
                                              %85 = OpLabel 
                                         bool %87 = OpLoad %65 
                                                      OpSelectionMerge %89 None 
                                                      OpBranchConditional %87 %88 %89 
                                              %88 = OpLabel 
                                                      OpBranch %89 
                                              %89 = OpLabel 
                                                      OpBranch %86 
                                              %86 = OpLabel 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %181 
                                              %91 = OpLabel 
                                 Uniform f32* %94 = OpAccessChain %33 %72 %93 
                                          f32 %95 = OpLoad %94 
                                         bool %96 = OpFOrdEqual %95 %82 
                                                      OpStore %65 %96 
                                       f32_3 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 1 1 1 
                              Uniform f32_4* %104 = OpAccessChain %33 %102 %72 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFMul %101 %106 
                                                      OpStore %97 %107 
                              Uniform f32_4* %108 = OpAccessChain %33 %102 %71 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpLoad %99 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_3 %114 = OpLoad %97 
                                       f32_3 %115 = OpFAdd %113 %114 
                                                      OpStore %97 %115 
                              Uniform f32_4* %116 = OpAccessChain %33 %102 %102 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpLoad %99 
                                       f32_3 %120 = OpVectorShuffle %119 %119 2 2 2 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_3 %122 = OpLoad %97 
                                       f32_3 %123 = OpFAdd %121 %122 
                                                      OpStore %97 %123 
                                       f32_3 %124 = OpLoad %97 
                              Uniform f32_4* %126 = OpAccessChain %33 %102 %125 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_3 %129 = OpFAdd %124 %128 
                                                      OpStore %97 %129 
                                        bool %132 = OpLoad %65 
                                                      OpSelectionMerge %134 None 
                                                      OpBranchConditional %132 %133 %136 
                                             %133 = OpLabel 
                                       f32_3 %135 = OpLoad %97 
                                                      OpStore %131 %135 
                                                      OpBranch %134 
                                             %136 = OpLabel 
                                       f32_3 %137 = OpLoad %99 
                                                      OpStore %131 %137 
                                                      OpBranch %134 
                                             %134 = OpLabel 
                                       f32_3 %138 = OpLoad %131 
                                                      OpStore %97 %138 
                                       f32_3 %139 = OpLoad %97 
                              Uniform f32_3* %142 = OpAccessChain %33 %140 
                                       f32_3 %143 = OpLoad %142 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %139 %144 
                                                      OpStore %97 %145 
                                       f32_3 %147 = OpLoad %97 
                              Uniform f32_3* %148 = OpAccessChain %33 %125 
                                       f32_3 %149 = OpLoad %148 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %146 
                                       f32_4 %152 = OpVectorShuffle %151 %150 0 4 5 6 
                                                      OpStore %146 %152 
                                Private f32* %154 = OpAccessChain %146 %93 
                                         f32 %155 = OpLoad %154 
                                         f32 %157 = OpFMul %155 %156 
                                         f32 %159 = OpFAdd %157 %158 
                                                      OpStore %153 %159 
                                Uniform f32* %161 = OpAccessChain %33 %72 %160 
                                         f32 %162 = OpLoad %161 
                                         f32 %164 = OpFMul %162 %163 
                                         f32 %165 = OpFAdd %164 %158 
                                Private f32* %166 = OpAccessChain %97 %61 
                                                      OpStore %166 %165 
                                         f32 %167 = OpLoad %153 
                                Private f32* %168 = OpAccessChain %97 %61 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpExtInst %1 40 %167 %169 
                                Private f32* %171 = OpAccessChain %146 %61 
                                                      OpStore %171 %170 
                  read_only Texture3DSampled %176 = OpLoad %175 
                                       f32_4 %177 = OpLoad %146 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 2 3 
                                       f32_4 %179 = OpImageSampleImplicitLod %176 %178 
                                                      OpStore %146 %179 
                                       f32_4 %180 = OpLoad %146 
                                                      OpStore %51 %180 
                                                      OpBranch %92 
                                             %181 = OpLabel 
                                Private f32* %182 = OpAccessChain %51 %61 
                                                      OpStore %182 %82 
                                Private f32* %183 = OpAccessChain %51 %93 
                                                      OpStore %183 %82 
                                Private f32* %184 = OpAccessChain %51 %160 
                                                      OpStore %184 %82 
                                Private f32* %185 = OpAccessChain %51 %52 
                                                      OpStore %185 %82 
                                                      OpBranch %92 
                                              %92 = OpLabel 
                                       f32_4 %187 = OpLoad %51 
                              Uniform f32_4* %188 = OpAccessChain %33 %71 
                                       f32_4 %189 = OpLoad %188 
                                         f32 %190 = OpDot %187 %189 
                                Private f32* %191 = OpAccessChain %186 %61 
                                                      OpStore %191 %190 
                                Private f32* %192 = OpAccessChain %186 %61 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpExtInst %1 43 %193 %68 %82 
                                Private f32* %195 = OpAccessChain %186 %61 
                                                      OpStore %195 %194 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                              Uniform f32_4* %200 = OpAccessChain %33 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFMul %198 %202 
                                                      OpStore %196 %203 
                                       f32_3 %204 = OpLoad %186 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 0 0 
                                       f32_3 %206 = OpLoad %196 
                                       f32_3 %207 = OpFMul %205 %206 
                                                      OpStore %186 %207 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_3 %213 = OpLoad %186 
                                       f32_3 %214 = OpFAdd %212 %213 
                                                      OpStore %186 %214 
                                Private f32* %217 = OpAccessChain %9 %52 
                                         f32 %218 = OpLoad %217 
                                 Output f32* %220 = OpAccessChain %216 %52 
                                                      OpStore %220 %218 
                                Uniform f32* %222 = OpAccessChain %33 %221 
                                         f32 %223 = OpLoad %222 
                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
                                       f32_3 %225 = OpLoad %26 
                                       f32_3 %226 = OpFMul %224 %225 
                                       f32_3 %227 = OpLoad %186 
                                       f32_3 %228 = OpFAdd %226 %227 
                                       f32_4 %229 = OpLoad %216 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %216 %230 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
bool u_xlatb6;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb6 = 0.0<_Perpendicular;
    u_xlat6 = (u_xlatb6) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat1 = max(u_xlat3, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(_EmissivePower) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 452
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %157 %169 %170 %184 %220 %223 %226 %443 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 RelaxedPrecision 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 RelaxedPrecision 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 RelaxedPrecision 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 RelaxedPrecision 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 RelaxedPrecision 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 RelaxedPrecision 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 RelaxedPrecision 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %155 0 BuiltIn 155 
                                                      OpMemberDecorate %155 1 BuiltIn 155 
                                                      OpMemberDecorate %155 2 BuiltIn 155 
                                                      OpDecorate %155 Block 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %220 Location 220 
                                                      OpDecorate %223 Location 223 
                                                      OpDecorate %226 Location 226 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %443 Location 443 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeStruct %7 %7 %7 %7 %18 %7 %7 %7 %7 %7 %7 %7 %20 %21 %22 %6 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 12 
                                          i32 %28 = OpConstant 1 
                                              %29 = OpTypePointer Uniform %6 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                                          i32 %36 = OpConstant 0 
                                          i32 %46 = OpConstant 2 
                                          u32 %49 = OpConstant 2 
                                          i32 %57 = OpConstant 3 
                                          u32 %60 = OpConstant 3 
                                              %75 = OpTypeBool 
                                              %76 = OpTypePointer Private %75 
                                Private bool* %77 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %79 = OpConstant 15 
                                 Private f32* %83 = OpVariable Private 
                                              %84 = OpTypePointer Function %6 
                                          f32 %89 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                              Private f32_4* %101 = OpVariable Private 
                                             %104 = OpTypePointer Uniform %7 
                              Private f32_4* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 14 
                                             %154 = OpTypeArray %6 %13 
                                             %155 = OpTypeStruct %7 %6 %154 
                                             %156 = OpTypePointer Output %155 
        Output struct {f32_4; f32; f32[1];}* %157 = OpVariable Output 
                                             %165 = OpTypePointer Output %7 
                                             %167 = OpTypeVector %6 2 
                                             %168 = OpTypePointer Output %167 
                               Output f32_2* %169 = OpVariable Output 
                                Input f32_4* %170 = OpVariable Input 
                                         i32 %173 = OpConstant 16 
                                             %182 = OpTypeVector %6 3 
                                             %183 = OpTypePointer Input %182 
                                Input f32_3* %184 = OpVariable Input 
                                         i32 %186 = OpConstant 13 
                                Private f32* %204 = OpVariable Private 
                                             %219 = OpTypePointer Output %182 
                               Output f32_3* %220 = OpVariable Output 
                               Output f32_3* %223 = OpVariable Output 
                               Output f32_4* %226 = OpVariable Output 
                                             %228 = OpTypePointer Private %182 
                              Private f32_3* %229 = OpVariable Private 
                              Private f32_4* %246 = OpVariable Private 
                              Private f32_3* %252 = OpVariable Private 
                                         i32 %253 = OpConstant 8 
                                         i32 %259 = OpConstant 9 
                                         i32 %265 = OpConstant 10 
                                         i32 %271 = OpConstant 11 
                                         i32 %281 = OpConstant 5 
                                         i32 %287 = OpConstant 6 
                                         i32 %293 = OpConstant 7 
                                       f32_3 %303 = OpConstantComposite %78 %78 %78 
                              Private f32_3* %305 = OpVariable Private 
                                         f32 %309 = OpConstant 3.674022E-40 
                                       f32_3 %310 = OpConstantComposite %309 %309 %309 
                                         f32 %315 = OpConstant 3.674022E-40 
                                       f32_3 %316 = OpConstantComposite %315 %315 %315 
                                         f32 %318 = OpConstant 3.674022E-40 
                                       f32_3 %319 = OpConstantComposite %318 %318 %318 
                              Private f32_4* %329 = OpVariable Private 
                              Private f32_4* %337 = OpVariable Private 
                                         f32 %373 = OpConstant 3.674022E-40 
                                       f32_4 %374 = OpConstantComposite %373 %373 %373 %373 
                                       f32_4 %382 = OpConstantComposite %91 %91 %91 %91 
                                       f32_4 %390 = OpConstantComposite %78 %78 %78 %78 
                                         i32 %397 = OpConstant 4 
                               Output f32_3* %443 = OpVariable Output 
                                             %446 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %85 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %30 = OpAccessChain %25 %27 %28 %13 
                                          f32 %31 = OpLoad %30 
                                          f32 %32 = OpFMul %16 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Uniform f32* %37 = OpAccessChain %25 %27 %36 %13 
                                          f32 %38 = OpLoad %37 
                                   Input f32* %39 = OpAccessChain %11 %33 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %33 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFAdd %41 %43 
                                 Private f32* %45 = OpAccessChain %9 %33 
                                                      OpStore %45 %44 
                                 Uniform f32* %47 = OpAccessChain %25 %27 %46 %13 
                                          f32 %48 = OpLoad %47 
                                   Input f32* %50 = OpAccessChain %11 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFMul %48 %51 
                                 Private f32* %53 = OpAccessChain %9 %33 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %52 %54 
                                 Private f32* %56 = OpAccessChain %9 %33 
                                                      OpStore %56 %55 
                                 Uniform f32* %58 = OpAccessChain %25 %27 %57 %13 
                                          f32 %59 = OpLoad %58 
                                   Input f32* %61 = OpAccessChain %11 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %9 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %9 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %9 %33 
                                          f32 %69 = OpLoad %68 
                                 Uniform f32* %70 = OpAccessChain %25 %27 %57 %13 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                          f32 %73 = OpFAdd %69 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %80 = OpAccessChain %25 %79 
                                          f32 %81 = OpLoad %80 
                                         bool %82 = OpFOrdLessThan %78 %81 
                                                      OpStore %77 %82 
                                         bool %86 = OpLoad %77 
                                                      OpSelectionMerge %88 None 
                                                      OpBranchConditional %86 %87 %90 
                                              %87 = OpLabel 
                                                      OpStore %85 %89 
                                                      OpBranch %88 
                                              %90 = OpLabel 
                                                      OpStore %85 %91 
                                                      OpBranch %88 
                                              %88 = OpLabel 
                                          f32 %92 = OpLoad %85 
                                                      OpStore %83 %92 
                                 Private f32* %93 = OpAccessChain %9 %33 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpLoad %83 
                                          f32 %96 = OpFMul %94 %95 
                                   Input f32* %97 = OpAccessChain %11 %49 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFAdd %96 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_4 %102 = OpLoad %11 
                                       f32_4 %103 = OpVectorShuffle %102 %102 1 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %25 %27 %28 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpFMul %103 %106 
                                                      OpStore %101 %107 
                              Uniform f32_4* %108 = OpAccessChain %25 %27 %36 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %11 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %101 
                                       f32_4 %114 = OpFAdd %112 %113 
                                                      OpStore %101 %114 
                              Uniform f32_4* %115 = OpAccessChain %25 %27 %46 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %117 0 0 0 0 
                                       f32_4 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %101 
                                       f32_4 %121 = OpFAdd %119 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                              Uniform f32_4* %123 = OpAccessChain %25 %27 %57 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpFAdd %122 %124 
                                                      OpStore %101 %125 
                              Uniform f32_4* %126 = OpAccessChain %25 %27 %57 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpLoad %11 
                                       f32_4 %129 = OpVectorShuffle %128 %128 3 3 3 3 
                                       f32_4 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpFAdd %130 %131 
                                                      OpStore %9 %132 
                                       f32_4 %134 = OpLoad %101 
                                       f32_4 %135 = OpVectorShuffle %134 %134 1 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %25 %136 %28 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpFMul %135 %138 
                                                      OpStore %133 %139 
                              Uniform f32_4* %140 = OpAccessChain %25 %136 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpLoad %101 
                                       f32_4 %143 = OpVectorShuffle %142 %142 0 0 0 0 
                                       f32_4 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %133 
                                       f32_4 %146 = OpFAdd %144 %145 
                                                      OpStore %133 %146 
                              Uniform f32_4* %147 = OpAccessChain %25 %136 %46 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpLoad %101 
                                       f32_4 %150 = OpVectorShuffle %149 %149 2 2 2 2 
                                       f32_4 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %133 
                                       f32_4 %153 = OpFAdd %151 %152 
                                                      OpStore %133 %153 
                              Uniform f32_4* %158 = OpAccessChain %25 %136 %57 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpLoad %101 
                                       f32_4 %161 = OpVectorShuffle %160 %160 3 3 3 3 
                                       f32_4 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %133 
                                       f32_4 %164 = OpFAdd %162 %163 
                               Output f32_4* %166 = OpAccessChain %157 %36 
                                                      OpStore %166 %164 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                              Uniform f32_4* %174 = OpAccessChain %25 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpFMul %172 %176 
                              Uniform f32_4* %178 = OpAccessChain %25 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_2 %181 = OpFAdd %177 %180 
                                                      OpStore %169 %181 
                                       f32_3 %185 = OpLoad %184 
                              Uniform f32_4* %187 = OpAccessChain %25 %186 %36 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %185 %189 
                                Private f32* %191 = OpAccessChain %101 %33 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %184 
                              Uniform f32_4* %193 = OpAccessChain %25 %186 %28 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %101 %13 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %184 
                              Uniform f32_4* %199 = OpAccessChain %25 %186 %46 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %198 %201 
                                Private f32* %203 = OpAccessChain %101 %49 
                                                      OpStore %203 %202 
                                       f32_4 %205 = OpLoad %101 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %101 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                                      OpStore %204 %209 
                                         f32 %210 = OpLoad %204 
                                         f32 %211 = OpExtInst %1 32 %210 
                                                      OpStore %204 %211 
                                         f32 %212 = OpLoad %204 
                                       f32_3 %213 = OpCompositeConstruct %212 %212 %212 
                                       f32_4 %214 = OpLoad %101 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_4 %217 = OpLoad %101 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %101 %218 
                                       f32_4 %221 = OpLoad %101 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                                      OpStore %220 %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                                      OpStore %223 %225 
                                       f32_4 %227 = OpLoad %9 
                                                      OpStore %226 %227 
                                Private f32* %230 = OpAccessChain %101 %13 
                                         f32 %231 = OpLoad %230 
                                Private f32* %232 = OpAccessChain %101 %13 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFMul %231 %233 
                                Private f32* %235 = OpAccessChain %229 %33 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %101 %33 
                                         f32 %237 = OpLoad %236 
                                Private f32* %238 = OpAccessChain %101 %33 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpFMul %237 %239 
                                Private f32* %241 = OpAccessChain %229 %33 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFNegate %242 
                                         f32 %244 = OpFAdd %240 %243 
                                Private f32* %245 = OpAccessChain %229 %33 
                                                      OpStore %245 %244 
                                       f32_4 %247 = OpLoad %101 
                                       f32_4 %248 = OpVectorShuffle %247 %247 1 2 2 0 
                                       f32_4 %249 = OpLoad %101 
                                       f32_4 %250 = OpVectorShuffle %249 %249 0 1 2 2 
                                       f32_4 %251 = OpFMul %248 %250 
                                                      OpStore %246 %251 
                              Uniform f32_4* %254 = OpAccessChain %25 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_4 %256 = OpLoad %246 
                                         f32 %257 = OpDot %255 %256 
                                Private f32* %258 = OpAccessChain %252 %33 
                                                      OpStore %258 %257 
                              Uniform f32_4* %260 = OpAccessChain %25 %259 
                                       f32_4 %261 = OpLoad %260 
                                       f32_4 %262 = OpLoad %246 
                                         f32 %263 = OpDot %261 %262 
                                Private f32* %264 = OpAccessChain %252 %13 
                                                      OpStore %264 %263 
                              Uniform f32_4* %266 = OpAccessChain %25 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_4 %268 = OpLoad %246 
                                         f32 %269 = OpDot %267 %268 
                                Private f32* %270 = OpAccessChain %252 %49 
                                                      OpStore %270 %269 
                              Uniform f32_4* %272 = OpAccessChain %25 %271 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpLoad %229 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 0 0 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %278 = OpLoad %252 
                                       f32_3 %279 = OpFAdd %277 %278 
                                                      OpStore %229 %279 
                                Private f32* %280 = OpAccessChain %101 %60 
                                                      OpStore %280 %91 
                              Uniform f32_4* %282 = OpAccessChain %25 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_4 %284 = OpLoad %101 
                                         f32 %285 = OpDot %283 %284 
                                Private f32* %286 = OpAccessChain %252 %33 
                                                      OpStore %286 %285 
                              Uniform f32_4* %288 = OpAccessChain %25 %287 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpLoad %101 
                                         f32 %291 = OpDot %289 %290 
                                Private f32* %292 = OpAccessChain %252 %13 
                                                      OpStore %292 %291 
                              Uniform f32_4* %294 = OpAccessChain %25 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpLoad %101 
                                         f32 %297 = OpDot %295 %296 
                                Private f32* %298 = OpAccessChain %252 %49 
                                                      OpStore %298 %297 
                                       f32_3 %299 = OpLoad %229 
                                       f32_3 %300 = OpLoad %252 
                                       f32_3 %301 = OpFAdd %299 %300 
                                                      OpStore %229 %301 
                                       f32_3 %302 = OpLoad %229 
                                       f32_3 %304 = OpExtInst %1 40 %302 %303 
                                                      OpStore %229 %304 
                                       f32_3 %306 = OpLoad %229 
                                       f32_3 %307 = OpExtInst %1 30 %306 
                                                      OpStore %305 %307 
                                       f32_3 %308 = OpLoad %305 
                                       f32_3 %311 = OpFMul %308 %310 
                                                      OpStore %305 %311 
                                       f32_3 %312 = OpLoad %305 
                                       f32_3 %313 = OpExtInst %1 29 %312 
                                                      OpStore %305 %313 
                                       f32_3 %314 = OpLoad %305 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %320 = OpFAdd %317 %319 
                                                      OpStore %305 %320 
                                       f32_3 %321 = OpLoad %305 
                                       f32_3 %322 = OpExtInst %1 40 %321 %303 
                                                      OpStore %305 %322 
                                       f32_4 %323 = OpLoad %9 
                                       f32_4 %324 = OpVectorShuffle %323 %323 1 1 1 1 
                                       f32_4 %325 = OpFNegate %324 
                              Uniform f32_4* %326 = OpAccessChain %25 %28 
                                       f32_4 %327 = OpLoad %326 
                                       f32_4 %328 = OpFAdd %325 %327 
                                                      OpStore %133 %328 
                                       f32_4 %330 = OpLoad %101 
                                       f32_4 %331 = OpVectorShuffle %330 %330 1 1 1 1 
                                       f32_4 %332 = OpLoad %133 
                                       f32_4 %333 = OpFMul %331 %332 
                                                      OpStore %329 %333 
                                       f32_4 %334 = OpLoad %133 
                                       f32_4 %335 = OpLoad %133 
                                       f32_4 %336 = OpFMul %334 %335 
                                                      OpStore %133 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_4 %339 = OpVectorShuffle %338 %338 0 0 0 0 
                                       f32_4 %340 = OpFNegate %339 
                              Uniform f32_4* %341 = OpAccessChain %25 %36 
                                       f32_4 %342 = OpLoad %341 
                                       f32_4 %343 = OpFAdd %340 %342 
                                                      OpStore %337 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_4 %345 = OpVectorShuffle %344 %344 2 2 2 2 
                                       f32_4 %346 = OpFNegate %345 
                              Uniform f32_4* %347 = OpAccessChain %25 %46 
                                       f32_4 %348 = OpLoad %347 
                                       f32_4 %349 = OpFAdd %346 %348 
                                                      OpStore %9 %349 
                                       f32_4 %350 = OpLoad %337 
                                       f32_4 %351 = OpLoad %101 
                                       f32_4 %352 = OpVectorShuffle %351 %351 0 0 0 0 
                                       f32_4 %353 = OpFMul %350 %352 
                                       f32_4 %354 = OpLoad %329 
                                       f32_4 %355 = OpFAdd %353 %354 
                                                      OpStore %329 %355 
                                       f32_4 %356 = OpLoad %337 
                                       f32_4 %357 = OpLoad %337 
                                       f32_4 %358 = OpFMul %356 %357 
                                       f32_4 %359 = OpLoad %133 
                                       f32_4 %360 = OpFAdd %358 %359 
                                                      OpStore %133 %360 
                                       f32_4 %361 = OpLoad %9 
                                       f32_4 %362 = OpLoad %9 
                                       f32_4 %363 = OpFMul %361 %362 
                                       f32_4 %364 = OpLoad %133 
                                       f32_4 %365 = OpFAdd %363 %364 
                                                      OpStore %133 %365 
                                       f32_4 %366 = OpLoad %9 
                                       f32_4 %367 = OpLoad %101 
                                       f32_4 %368 = OpVectorShuffle %367 %367 2 2 2 2 
                                       f32_4 %369 = OpFMul %366 %368 
                                       f32_4 %370 = OpLoad %329 
                                       f32_4 %371 = OpFAdd %369 %370 
                                                      OpStore %9 %371 
                                       f32_4 %372 = OpLoad %133 
                                       f32_4 %375 = OpExtInst %1 40 %372 %374 
                                                      OpStore %101 %375 
                                       f32_4 %376 = OpLoad %101 
                                       f32_4 %377 = OpExtInst %1 32 %376 
                                                      OpStore %133 %377 
                                       f32_4 %378 = OpLoad %101 
                              Uniform f32_4* %379 = OpAccessChain %25 %57 
                                       f32_4 %380 = OpLoad %379 
                                       f32_4 %381 = OpFMul %378 %380 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %101 %383 
                                       f32_4 %384 = OpLoad %101 
                                       f32_4 %385 = OpFDiv %382 %384 
                                                      OpStore %101 %385 
                                       f32_4 %386 = OpLoad %9 
                                       f32_4 %387 = OpLoad %133 
                                       f32_4 %388 = OpFMul %386 %387 
                                                      OpStore %9 %388 
                                       f32_4 %389 = OpLoad %9 
                                       f32_4 %391 = OpExtInst %1 40 %389 %390 
                                                      OpStore %9 %391 
                                       f32_4 %392 = OpLoad %101 
                                       f32_4 %393 = OpLoad %9 
                                       f32_4 %394 = OpFMul %392 %393 
                                                      OpStore %9 %394 
                                       f32_4 %395 = OpLoad %9 
                                       f32_3 %396 = OpVectorShuffle %395 %395 1 1 1 
                              Uniform f32_4* %398 = OpAccessChain %25 %397 %28 
                                       f32_4 %399 = OpLoad %398 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_3 %401 = OpFMul %396 %400 
                                       f32_4 %402 = OpLoad %101 
                                       f32_4 %403 = OpVectorShuffle %402 %401 4 5 6 3 
                                                      OpStore %101 %403 
                              Uniform f32_4* %404 = OpAccessChain %25 %397 %36 
                                       f32_4 %405 = OpLoad %404 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                       f32_4 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 0 0 
                                       f32_3 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %101 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_3 %412 = OpFAdd %409 %411 
                                       f32_4 %413 = OpLoad %101 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 6 3 
                                                      OpStore %101 %414 
                              Uniform f32_4* %415 = OpAccessChain %25 %397 %46 
                                       f32_4 %416 = OpLoad %415 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                       f32_4 %418 = OpLoad %9 
                                       f32_3 %419 = OpVectorShuffle %418 %418 2 2 2 
                                       f32_3 %420 = OpFMul %417 %419 
                                       f32_4 %421 = OpLoad %101 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
                                       f32_3 %423 = OpFAdd %420 %422 
                                       f32_4 %424 = OpLoad %9 
                                       f32_4 %425 = OpVectorShuffle %424 %423 4 5 6 3 
                                                      OpStore %9 %425 
                              Uniform f32_4* %426 = OpAccessChain %25 %397 %57 
                                       f32_4 %427 = OpLoad %426 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                       f32_4 %429 = OpLoad %9 
                                       f32_3 %430 = OpVectorShuffle %429 %429 3 3 3 
                                       f32_3 %431 = OpFMul %428 %430 
                                       f32_4 %432 = OpLoad %9 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                       f32_3 %434 = OpFAdd %431 %433 
                                       f32_4 %435 = OpLoad %9 
                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 6 3 
                                                      OpStore %9 %436 
                                       f32_4 %437 = OpLoad %9 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_3 %439 = OpLoad %305 
                                       f32_3 %440 = OpFAdd %438 %439 
                                       f32_4 %441 = OpLoad %9 
                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 6 3 
                                                      OpStore %9 %442 
                                       f32_4 %444 = OpLoad %9 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                                      OpStore %443 %445 
                                 Output f32* %447 = OpAccessChain %157 %36 %13 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpFNegate %448 
                                 Output f32* %450 = OpAccessChain %157 %36 %13 
                                                      OpStore %450 %449 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 232
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %99 %210 %216 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 RelaxedPrecision 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpMemberDecorate %31 3 Offset 31 
                                                      OpMemberDecorate %31 4 Offset 31 
                                                      OpMemberDecorate %31 5 RelaxedPrecision 
                                                      OpMemberDecorate %31 5 Offset 31 
                                                      OpMemberDecorate %31 6 Offset 31 
                                                      OpMemberDecorate %31 7 Offset 31 
                                                      OpMemberDecorate %31 8 RelaxedPrecision 
                                                      OpMemberDecorate %31 8 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %90 SpecId 90 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %175 DescriptorSet 175 
                                                      OpDecorate %175 Binding 175 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %216 Location 216 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                               Private f32_3* %26 = OpVariable Private 
                                              %28 = OpTypeInt 32 0 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeStruct %7 %7 %30 %20 %20 %7 %6 %6 %6 
                                              %32 = OpTypePointer Uniform %31 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32;}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 7 
                                              %36 = OpTypePointer Uniform %6 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %52 = OpConstant 3 
                                              %53 = OpTypePointer Private %6 
                                          i32 %56 = OpConstant 8 
                                          u32 %61 = OpConstant 0 
                                              %63 = OpTypeBool 
                                              %64 = OpTypePointer Private %63 
                                Private bool* %65 = OpVariable Private 
                                          f32 %68 = OpConstant 3.674022E-40 
                                          i32 %71 = OpConstant 0 
                                          i32 %72 = OpConstant 1 
                                          i32 %74 = OpConstant -1 
                                          f32 %82 = OpConstant 3.674022E-40 
                                         bool %84 = OpConstantFalse 
                                         bool %90 = OpSpecConstantFalse 
                                          u32 %93 = OpConstant 1 
                               Private f32_3* %97 = OpVariable Private 
                                              %98 = OpTypePointer Input %20 
                                 Input f32_3* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 2 
                                             %103 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 3 
                                             %130 = OpTypePointer Function %20 
                                         i32 %140 = OpConstant 4 
                                             %141 = OpTypePointer Uniform %20 
                              Private f32_4* %146 = OpVariable Private 
                                Private f32* %153 = OpVariable Private 
                                         f32 %156 = OpConstant 3.674022E-40 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         u32 %160 = OpConstant 2 
                                         f32 %163 = OpConstant 3.674022E-40 
                                             %172 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %173 = OpTypeSampledImage %172 
                                             %174 = OpTypePointer UniformConstant %173 
 UniformConstant read_only Texture3DSampled* %175 = OpVariable UniformConstant 
                              Private f32_3* %186 = OpVariable Private 
                              Private f32_3* %196 = OpVariable Private 
                                         i32 %199 = OpConstant 5 
                                Input f32_3* %210 = OpVariable Input 
                                             %215 = OpTypePointer Output %7 
                               Output f32_4* %216 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                         i32 %221 = OpConstant 6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %131 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                                        f32_3 %25 = OpExtInst %1 30 %24 
                                                      OpStore %22 %25 
                                        f32_3 %27 = OpLoad %22 
                                 Uniform f32* %37 = OpAccessChain %33 %35 
                                          f32 %38 = OpLoad %37 
                                 Uniform f32* %39 = OpAccessChain %33 %35 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %41 = OpAccessChain %33 %35 
                                          f32 %42 = OpLoad %41 
                                        f32_3 %43 = OpCompositeConstruct %38 %40 %42 
                                          f32 %44 = OpCompositeExtract %43 0 
                                          f32 %45 = OpCompositeExtract %43 1 
                                          f32 %46 = OpCompositeExtract %43 2 
                                        f32_3 %47 = OpCompositeConstruct %44 %45 %46 
                                        f32_3 %48 = OpFMul %27 %47 
                                                      OpStore %26 %48 
                                        f32_3 %49 = OpLoad %26 
                                        f32_3 %50 = OpExtInst %1 29 %49 
                                                      OpStore %26 %50 
                                 Private f32* %54 = OpAccessChain %9 %52 
                                          f32 %55 = OpLoad %54 
                                 Uniform f32* %57 = OpAccessChain %33 %56 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFNegate %58 
                                          f32 %60 = OpFAdd %55 %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Private f32* %66 = OpAccessChain %51 %61 
                                          f32 %67 = OpLoad %66 
                                         bool %69 = OpFOrdLessThan %67 %68 
                                                      OpStore %65 %69 
                                         bool %70 = OpLoad %65 
                                          i32 %73 = OpSelect %70 %72 %71 
                                          i32 %75 = OpIMul %73 %74 
                                         bool %76 = OpINotEqual %75 %71 
                                                      OpSelectionMerge %78 None 
                                                      OpBranchConditional %76 %77 %78 
                                              %77 = OpLabel 
                                                      OpKill
                                              %78 = OpLabel 
                                 Uniform f32* %80 = OpAccessChain %33 %72 %61 
                                          f32 %81 = OpLoad %80 
                                         bool %83 = OpFOrdEqual %81 %82 
                                                      OpStore %65 %83 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %86 
                                              %85 = OpLabel 
                                         bool %87 = OpLoad %65 
                                                      OpSelectionMerge %89 None 
                                                      OpBranchConditional %87 %88 %89 
                                              %88 = OpLabel 
                                                      OpBranch %89 
                                              %89 = OpLabel 
                                                      OpBranch %86 
                                              %86 = OpLabel 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %181 
                                              %91 = OpLabel 
                                 Uniform f32* %94 = OpAccessChain %33 %72 %93 
                                          f32 %95 = OpLoad %94 
                                         bool %96 = OpFOrdEqual %95 %82 
                                                      OpStore %65 %96 
                                       f32_3 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 1 1 1 
                              Uniform f32_4* %104 = OpAccessChain %33 %102 %72 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFMul %101 %106 
                                                      OpStore %97 %107 
                              Uniform f32_4* %108 = OpAccessChain %33 %102 %71 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpLoad %99 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_3 %114 = OpLoad %97 
                                       f32_3 %115 = OpFAdd %113 %114 
                                                      OpStore %97 %115 
                              Uniform f32_4* %116 = OpAccessChain %33 %102 %102 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpLoad %99 
                                       f32_3 %120 = OpVectorShuffle %119 %119 2 2 2 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_3 %122 = OpLoad %97 
                                       f32_3 %123 = OpFAdd %121 %122 
                                                      OpStore %97 %123 
                                       f32_3 %124 = OpLoad %97 
                              Uniform f32_4* %126 = OpAccessChain %33 %102 %125 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                       f32_3 %129 = OpFAdd %124 %128 
                                                      OpStore %97 %129 
                                        bool %132 = OpLoad %65 
                                                      OpSelectionMerge %134 None 
                                                      OpBranchConditional %132 %133 %136 
                                             %133 = OpLabel 
                                       f32_3 %135 = OpLoad %97 
                                                      OpStore %131 %135 
                                                      OpBranch %134 
                                             %136 = OpLabel 
                                       f32_3 %137 = OpLoad %99 
                                                      OpStore %131 %137 
                                                      OpBranch %134 
                                             %134 = OpLabel 
                                       f32_3 %138 = OpLoad %131 
                                                      OpStore %97 %138 
                                       f32_3 %139 = OpLoad %97 
                              Uniform f32_3* %142 = OpAccessChain %33 %140 
                                       f32_3 %143 = OpLoad %142 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %139 %144 
                                                      OpStore %97 %145 
                                       f32_3 %147 = OpLoad %97 
                              Uniform f32_3* %148 = OpAccessChain %33 %125 
                                       f32_3 %149 = OpLoad %148 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %146 
                                       f32_4 %152 = OpVectorShuffle %151 %150 0 4 5 6 
                                                      OpStore %146 %152 
                                Private f32* %154 = OpAccessChain %146 %93 
                                         f32 %155 = OpLoad %154 
                                         f32 %157 = OpFMul %155 %156 
                                         f32 %159 = OpFAdd %157 %158 
                                                      OpStore %153 %159 
                                Uniform f32* %161 = OpAccessChain %33 %72 %160 
                                         f32 %162 = OpLoad %161 
                                         f32 %164 = OpFMul %162 %163 
                                         f32 %165 = OpFAdd %164 %158 
                                Private f32* %166 = OpAccessChain %97 %61 
                                                      OpStore %166 %165 
                                         f32 %167 = OpLoad %153 
                                Private f32* %168 = OpAccessChain %97 %61 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpExtInst %1 40 %167 %169 
                                Private f32* %171 = OpAccessChain %146 %61 
                                                      OpStore %171 %170 
                  read_only Texture3DSampled %176 = OpLoad %175 
                                       f32_4 %177 = OpLoad %146 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 2 3 
                                       f32_4 %179 = OpImageSampleImplicitLod %176 %178 
                                                      OpStore %146 %179 
                                       f32_4 %180 = OpLoad %146 
                                                      OpStore %51 %180 
                                                      OpBranch %92 
                                             %181 = OpLabel 
                                Private f32* %182 = OpAccessChain %51 %61 
                                                      OpStore %182 %82 
                                Private f32* %183 = OpAccessChain %51 %93 
                                                      OpStore %183 %82 
                                Private f32* %184 = OpAccessChain %51 %160 
                                                      OpStore %184 %82 
                                Private f32* %185 = OpAccessChain %51 %52 
                                                      OpStore %185 %82 
                                                      OpBranch %92 
                                              %92 = OpLabel 
                                       f32_4 %187 = OpLoad %51 
                              Uniform f32_4* %188 = OpAccessChain %33 %71 
                                       f32_4 %189 = OpLoad %188 
                                         f32 %190 = OpDot %187 %189 
                                Private f32* %191 = OpAccessChain %186 %61 
                                                      OpStore %191 %190 
                                Private f32* %192 = OpAccessChain %186 %61 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpExtInst %1 43 %193 %68 %82 
                                Private f32* %195 = OpAccessChain %186 %61 
                                                      OpStore %195 %194 
                                       f32_4 %197 = OpLoad %9 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                              Uniform f32_4* %200 = OpAccessChain %33 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFMul %198 %202 
                                                      OpStore %196 %203 
                                       f32_3 %204 = OpLoad %186 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 0 0 
                                       f32_3 %206 = OpLoad %196 
                                       f32_3 %207 = OpFMul %205 %206 
                                                      OpStore %186 %207 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %211 = OpLoad %210 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_3 %213 = OpLoad %186 
                                       f32_3 %214 = OpFAdd %212 %213 
                                                      OpStore %186 %214 
                                Private f32* %217 = OpAccessChain %9 %52 
                                         f32 %218 = OpLoad %217 
                                 Output f32* %220 = OpAccessChain %216 %52 
                                                      OpStore %220 %218 
                                Uniform f32* %222 = OpAccessChain %33 %221 
                                         f32 %223 = OpLoad %222 
                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
                                       f32_3 %225 = OpLoad %26 
                                       f32_3 %226 = OpFMul %224 %225 
                                       f32_3 %227 = OpLoad %186 
                                       f32_3 %228 = OpFAdd %226 %227 
                                       f32_4 %229 = OpLoad %216 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %216 %230 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
bool u_xlatb6;
float u_xlat20;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb6 = 0.0<_Perpendicular;
    u_xlat6 = (u_xlatb6) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = max(u_xlat3, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(_EmissivePower) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 384
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %164 %170 %171 %185 %221 %224 %227 %345 %365 %377 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %162 0 BuiltIn 162 
                                                      OpMemberDecorate %162 1 BuiltIn 162 
                                                      OpMemberDecorate %162 2 BuiltIn 162 
                                                      OpDecorate %162 Block 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %171 Location 171 
                                                      OpDecorate %185 Location 185 
                                                      OpDecorate %221 Location 221 
                                                      OpDecorate %224 Location 224 
                                                      OpDecorate %227 Location 227 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %345 Location 345 
                                                      OpDecorate %365 Location 365 
                                                      OpDecorate %377 Location 377 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeStruct %7 %7 %7 %7 %7 %18 %20 %21 %22 %6 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 6 
                                          i32 %28 = OpConstant 1 
                                              %29 = OpTypePointer Uniform %6 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                                          i32 %36 = OpConstant 0 
                                          i32 %46 = OpConstant 2 
                                          u32 %49 = OpConstant 2 
                                          i32 %57 = OpConstant 3 
                                          u32 %60 = OpConstant 3 
                                              %75 = OpTypeBool 
                                              %76 = OpTypePointer Private %75 
                                Private bool* %77 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %79 = OpConstant 9 
                                 Private f32* %83 = OpVariable Private 
                                              %84 = OpTypePointer Function %6 
                                          f32 %89 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                              Private f32_4* %101 = OpVariable Private 
                                             %104 = OpTypePointer Uniform %7 
                              Private f32_4* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 8 
                                             %161 = OpTypeArray %6 %13 
                                             %162 = OpTypeStruct %7 %6 %161 
                                             %163 = OpTypePointer Output %162 
        Output struct {f32_4; f32; f32[1];}* %164 = OpVariable Output 
                                             %166 = OpTypePointer Output %7 
                                             %168 = OpTypeVector %6 2 
                                             %169 = OpTypePointer Output %168 
                               Output f32_2* %170 = OpVariable Output 
                                Input f32_4* %171 = OpVariable Input 
                                         i32 %174 = OpConstant 10 
                                             %183 = OpTypeVector %6 3 
                                             %184 = OpTypePointer Input %183 
                                Input f32_3* %185 = OpVariable Input 
                                         i32 %187 = OpConstant 7 
                                Private f32* %205 = OpVariable Private 
                                             %220 = OpTypePointer Output %183 
                               Output f32_3* %221 = OpVariable Output 
                               Output f32_3* %224 = OpVariable Output 
                               Output f32_4* %227 = OpVariable Output 
                              Private f32_4* %229 = OpVariable Private 
                              Private f32_4* %236 = OpVariable Private 
                              Private f32_4* %244 = OpVariable Private 
                                         f32 %280 = OpConstant 3.674022E-40 
                                       f32_4 %281 = OpConstantComposite %280 %280 %280 %280 
                                         i32 %286 = OpConstant 4 
                                       f32_4 %290 = OpConstantComposite %91 %91 %91 %91 
                                       f32_4 %298 = OpConstantComposite %78 %78 %78 %78 
                                         i32 %305 = OpConstant 5 
                               Output f32_3* %345 = OpVariable Output 
                                         f32 %356 = OpConstant 3.674022E-40 
                                       f32_2 %361 = OpConstantComposite %356 %356 
                               Output f32_4* %365 = OpVariable Output 
                               Output f32_4* %377 = OpVariable Output 
                                             %378 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %85 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %30 = OpAccessChain %25 %27 %28 %13 
                                          f32 %31 = OpLoad %30 
                                          f32 %32 = OpFMul %16 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Uniform f32* %37 = OpAccessChain %25 %27 %36 %13 
                                          f32 %38 = OpLoad %37 
                                   Input f32* %39 = OpAccessChain %11 %33 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %33 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFAdd %41 %43 
                                 Private f32* %45 = OpAccessChain %9 %33 
                                                      OpStore %45 %44 
                                 Uniform f32* %47 = OpAccessChain %25 %27 %46 %13 
                                          f32 %48 = OpLoad %47 
                                   Input f32* %50 = OpAccessChain %11 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFMul %48 %51 
                                 Private f32* %53 = OpAccessChain %9 %33 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %52 %54 
                                 Private f32* %56 = OpAccessChain %9 %33 
                                                      OpStore %56 %55 
                                 Uniform f32* %58 = OpAccessChain %25 %27 %57 %13 
                                          f32 %59 = OpLoad %58 
                                   Input f32* %61 = OpAccessChain %11 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %9 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %9 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %9 %33 
                                          f32 %69 = OpLoad %68 
                                 Uniform f32* %70 = OpAccessChain %25 %27 %57 %13 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                          f32 %73 = OpFAdd %69 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %80 = OpAccessChain %25 %79 
                                          f32 %81 = OpLoad %80 
                                         bool %82 = OpFOrdLessThan %78 %81 
                                                      OpStore %77 %82 
                                         bool %86 = OpLoad %77 
                                                      OpSelectionMerge %88 None 
                                                      OpBranchConditional %86 %87 %90 
                                              %87 = OpLabel 
                                                      OpStore %85 %89 
                                                      OpBranch %88 
                                              %90 = OpLabel 
                                                      OpStore %85 %91 
                                                      OpBranch %88 
                                              %88 = OpLabel 
                                          f32 %92 = OpLoad %85 
                                                      OpStore %83 %92 
                                 Private f32* %93 = OpAccessChain %9 %33 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpLoad %83 
                                          f32 %96 = OpFMul %94 %95 
                                   Input f32* %97 = OpAccessChain %11 %49 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFAdd %96 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_4 %102 = OpLoad %11 
                                       f32_4 %103 = OpVectorShuffle %102 %102 1 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %25 %27 %28 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpFMul %103 %106 
                                                      OpStore %101 %107 
                              Uniform f32_4* %108 = OpAccessChain %25 %27 %36 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %11 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %101 
                                       f32_4 %114 = OpFAdd %112 %113 
                                                      OpStore %101 %114 
                              Uniform f32_4* %115 = OpAccessChain %25 %27 %46 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %117 0 0 0 0 
                                       f32_4 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %101 
                                       f32_4 %121 = OpFAdd %119 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                              Uniform f32_4* %123 = OpAccessChain %25 %27 %57 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpFAdd %122 %124 
                                                      OpStore %101 %125 
                              Uniform f32_4* %126 = OpAccessChain %25 %27 %57 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpLoad %11 
                                       f32_4 %129 = OpVectorShuffle %128 %128 3 3 3 3 
                                       f32_4 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpFAdd %130 %131 
                                                      OpStore %9 %132 
                                       f32_4 %134 = OpLoad %101 
                                       f32_4 %135 = OpVectorShuffle %134 %134 1 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %25 %136 %28 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpFMul %135 %138 
                                                      OpStore %133 %139 
                              Uniform f32_4* %140 = OpAccessChain %25 %136 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpLoad %101 
                                       f32_4 %143 = OpVectorShuffle %142 %142 0 0 0 0 
                                       f32_4 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %133 
                                       f32_4 %146 = OpFAdd %144 %145 
                                                      OpStore %133 %146 
                              Uniform f32_4* %147 = OpAccessChain %25 %136 %46 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpLoad %101 
                                       f32_4 %150 = OpVectorShuffle %149 %149 2 2 2 2 
                                       f32_4 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %133 
                                       f32_4 %153 = OpFAdd %151 %152 
                                                      OpStore %133 %153 
                              Uniform f32_4* %154 = OpAccessChain %25 %136 %57 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %101 
                                       f32_4 %157 = OpVectorShuffle %156 %156 3 3 3 3 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %133 
                                       f32_4 %160 = OpFAdd %158 %159 
                                                      OpStore %101 %160 
                                       f32_4 %165 = OpLoad %101 
                               Output f32_4* %167 = OpAccessChain %164 %36 
                                                      OpStore %167 %165 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                              Uniform f32_4* %175 = OpAccessChain %25 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_2 %177 = OpVectorShuffle %176 %176 0 1 
                                       f32_2 %178 = OpFMul %173 %177 
                              Uniform f32_4* %179 = OpAccessChain %25 %174 
                                       f32_4 %180 = OpLoad %179 
                                       f32_2 %181 = OpVectorShuffle %180 %180 2 3 
                                       f32_2 %182 = OpFAdd %178 %181 
                                                      OpStore %170 %182 
                                       f32_3 %186 = OpLoad %185 
                              Uniform f32_4* %188 = OpAccessChain %25 %187 %36 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %186 %190 
                                Private f32* %192 = OpAccessChain %133 %33 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %185 
                              Uniform f32_4* %194 = OpAccessChain %25 %187 %28 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpDot %193 %196 
                                Private f32* %198 = OpAccessChain %133 %13 
                                                      OpStore %198 %197 
                                       f32_3 %199 = OpLoad %185 
                              Uniform f32_4* %200 = OpAccessChain %25 %187 %46 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                         f32 %203 = OpDot %199 %202 
                                Private f32* %204 = OpAccessChain %133 %49 
                                                      OpStore %204 %203 
                                       f32_4 %206 = OpLoad %133 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %133 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %205 %210 
                                         f32 %211 = OpLoad %205 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %205 %212 
                                         f32 %213 = OpLoad %205 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_4 %215 = OpLoad %133 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %133 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %133 %219 
                                       f32_4 %222 = OpLoad %133 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                                      OpStore %221 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                                      OpStore %224 %226 
                                       f32_4 %228 = OpLoad %9 
                                                      OpStore %227 %228 
                                       f32_4 %230 = OpLoad %9 
                                       f32_4 %231 = OpVectorShuffle %230 %230 1 1 1 1 
                                       f32_4 %232 = OpFNegate %231 
                              Uniform f32_4* %233 = OpAccessChain %25 %46 
                                       f32_4 %234 = OpLoad %233 
                                       f32_4 %235 = OpFAdd %232 %234 
                                                      OpStore %229 %235 
                                       f32_4 %237 = OpLoad %133 
                                       f32_4 %238 = OpVectorShuffle %237 %237 1 1 1 1 
                                       f32_4 %239 = OpLoad %229 
                                       f32_4 %240 = OpFMul %238 %239 
                                                      OpStore %236 %240 
                                       f32_4 %241 = OpLoad %229 
                                       f32_4 %242 = OpLoad %229 
                                       f32_4 %243 = OpFMul %241 %242 
                                                      OpStore %229 %243 
                                       f32_4 %245 = OpLoad %9 
                                       f32_4 %246 = OpVectorShuffle %245 %245 0 0 0 0 
                                       f32_4 %247 = OpFNegate %246 
                              Uniform f32_4* %248 = OpAccessChain %25 %28 
                                       f32_4 %249 = OpLoad %248 
                                       f32_4 %250 = OpFAdd %247 %249 
                                                      OpStore %244 %250 
                                       f32_4 %251 = OpLoad %9 
                                       f32_4 %252 = OpVectorShuffle %251 %251 2 2 2 2 
                                       f32_4 %253 = OpFNegate %252 
                              Uniform f32_4* %254 = OpAccessChain %25 %57 
                                       f32_4 %255 = OpLoad %254 
                                       f32_4 %256 = OpFAdd %253 %255 
                                                      OpStore %9 %256 
                                       f32_4 %257 = OpLoad %244 
                                       f32_4 %258 = OpLoad %133 
                                       f32_4 %259 = OpVectorShuffle %258 %258 0 0 0 0 
                                       f32_4 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %236 
                                       f32_4 %262 = OpFAdd %260 %261 
                                                      OpStore %236 %262 
                                       f32_4 %263 = OpLoad %244 
                                       f32_4 %264 = OpLoad %244 
                                       f32_4 %265 = OpFMul %263 %264 
                                       f32_4 %266 = OpLoad %229 
                                       f32_4 %267 = OpFAdd %265 %266 
                                                      OpStore %229 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_4 %269 = OpLoad %9 
                                       f32_4 %270 = OpFMul %268 %269 
                                       f32_4 %271 = OpLoad %229 
                                       f32_4 %272 = OpFAdd %270 %271 
                                                      OpStore %229 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpLoad %133 
                                       f32_4 %275 = OpVectorShuffle %274 %274 2 2 2 2 
                                       f32_4 %276 = OpFMul %273 %275 
                                       f32_4 %277 = OpLoad %236 
                                       f32_4 %278 = OpFAdd %276 %277 
                                                      OpStore %9 %278 
                                       f32_4 %279 = OpLoad %229 
                                       f32_4 %282 = OpExtInst %1 40 %279 %281 
                                                      OpStore %133 %282 
                                       f32_4 %283 = OpLoad %133 
                                       f32_4 %284 = OpExtInst %1 32 %283 
                                                      OpStore %229 %284 
                                       f32_4 %285 = OpLoad %133 
                              Uniform f32_4* %287 = OpAccessChain %25 %286 
                                       f32_4 %288 = OpLoad %287 
                                       f32_4 %289 = OpFMul %285 %288 
                                       f32_4 %291 = OpFAdd %289 %290 
                                                      OpStore %133 %291 
                                       f32_4 %292 = OpLoad %133 
                                       f32_4 %293 = OpFDiv %290 %292 
                                                      OpStore %133 %293 
                                       f32_4 %294 = OpLoad %9 
                                       f32_4 %295 = OpLoad %229 
                                       f32_4 %296 = OpFMul %294 %295 
                                                      OpStore %9 %296 
                                       f32_4 %297 = OpLoad %9 
                                       f32_4 %299 = OpExtInst %1 40 %297 %298 
                                                      OpStore %9 %299 
                                       f32_4 %300 = OpLoad %133 
                                       f32_4 %301 = OpLoad %9 
                                       f32_4 %302 = OpFMul %300 %301 
                                                      OpStore %9 %302 
                                       f32_4 %303 = OpLoad %9 
                                       f32_3 %304 = OpVectorShuffle %303 %303 1 1 1 
                              Uniform f32_4* %306 = OpAccessChain %25 %305 %28 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFMul %304 %308 
                                       f32_4 %310 = OpLoad %133 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %133 %311 
                              Uniform f32_4* %312 = OpAccessChain %25 %305 %36 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 0 0 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %133 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %133 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %133 %322 
                              Uniform f32_4* %323 = OpAccessChain %25 %305 %46 
                                       f32_4 %324 = OpLoad %323 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_4 %326 = OpLoad %9 
                                       f32_3 %327 = OpVectorShuffle %326 %326 2 2 2 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %133 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFAdd %328 %330 
                                       f32_4 %332 = OpLoad %9 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 6 3 
                                                      OpStore %9 %333 
                              Uniform f32_4* %334 = OpAccessChain %25 %305 %57 
                                       f32_4 %335 = OpLoad %334 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 3 3 3 
                                       f32_3 %339 = OpFMul %336 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpFAdd %339 %341 
                                       f32_4 %343 = OpLoad %9 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 6 3 
                                                      OpStore %9 %344 
                                       f32_4 %346 = OpLoad %9 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                                      OpStore %345 %347 
                                Private f32* %348 = OpAccessChain %101 %13 
                                         f32 %349 = OpLoad %348 
                                Uniform f32* %350 = OpAccessChain %25 %36 %33 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                Private f32* %353 = OpAccessChain %9 %33 
                                                      OpStore %353 %352 
                                Private f32* %354 = OpAccessChain %9 %33 
                                         f32 %355 = OpLoad %354 
                                         f32 %357 = OpFMul %355 %356 
                                Private f32* %358 = OpAccessChain %9 %60 
                                                      OpStore %358 %357 
                                       f32_4 %359 = OpLoad %101 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 3 
                                       f32_2 %362 = OpFMul %360 %361 
                                       f32_4 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 1 5 3 
                                                      OpStore %9 %364 
                                       f32_4 %366 = OpLoad %101 
                                       f32_2 %367 = OpVectorShuffle %366 %366 2 3 
                                       f32_4 %368 = OpLoad %365 
                                       f32_4 %369 = OpVectorShuffle %368 %367 0 1 4 5 
                                                      OpStore %365 %369 
                                       f32_4 %370 = OpLoad %9 
                                       f32_2 %371 = OpVectorShuffle %370 %370 2 2 
                                       f32_4 %372 = OpLoad %9 
                                       f32_2 %373 = OpVectorShuffle %372 %372 0 3 
                                       f32_2 %374 = OpFAdd %371 %373 
                                       f32_4 %375 = OpLoad %365 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 2 3 
                                                      OpStore %365 %376 
                                                      OpStore %377 %298 
                                 Output f32* %379 = OpAccessChain %164 %36 %13 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFNegate %380 
                                 Output f32* %382 = OpAccessChain %164 %36 %13 
                                                      OpStore %382 %381 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 337
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %83 %260 %315 %321 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 RelaxedPrecision 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 RelaxedPrecision 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpMemberDecorate %32 9 RelaxedPrecision 
                                                      OpMemberDecorate %32 9 Offset 32 
                                                      OpMemberDecorate %32 10 Offset 32 
                                                      OpMemberDecorate %32 11 Offset 32 
                                                      OpMemberDecorate %32 12 RelaxedPrecision 
                                                      OpMemberDecorate %32 12 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %158 SpecId 158 
                                                      OpDecorate %238 DescriptorSet 238 
                                                      OpDecorate %238 Binding 238 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %260 Location 260 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %321 Location 321 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                               Private f32_3* %26 = OpVariable Private 
                                              %28 = OpTypeInt 32 0 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeArray %7 %29 
                                              %32 = OpTypeStruct %20 %7 %7 %7 %30 %7 %31 %20 %20 %7 %6 %6 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32;}* %34 = OpVariable Uniform 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 11 
                                              %37 = OpTypePointer Uniform %6 
                               Private f32_4* %52 = OpVariable Private 
                                          u32 %53 = OpConstant 3 
                                              %54 = OpTypePointer Private %6 
                                          i32 %57 = OpConstant 12 
                                          u32 %62 = OpConstant 0 
                                              %64 = OpTypeBool 
                                              %65 = OpTypePointer Private %64 
                                Private bool* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          i32 %72 = OpConstant 0 
                                          i32 %73 = OpConstant 1 
                                          i32 %75 = OpConstant -1 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypePointer Input %20 
                                 Input f32_3* %83 = OpVariable Input 
                                              %86 = OpTypePointer Uniform %20 
                               Private f32_3* %90 = OpVariable Private 
                                          i32 %91 = OpConstant 4 
                                          u32 %92 = OpConstant 2 
                                          u32 %98 = OpConstant 1 
                                         i32 %100 = OpConstant 2 
                                Private f32* %104 = OpVariable Private 
                                         i32 %109 = OpConstant 3 
                                             %110 = OpTypePointer Uniform %7 
                                         f32 %145 = OpConstant 3.674022E-40 
                               Private bool* %147 = OpVariable Private 
                                         i32 %148 = OpConstant 5 
                                        bool %152 = OpConstantFalse 
                                        bool %158 = OpSpecConstantFalse 
                               Private bool* %161 = OpVariable Private 
                                         i32 %167 = OpConstant 6 
                              Private f32_3* %193 = OpVariable Private 
                                             %194 = OpTypePointer Function %20 
                                         i32 %204 = OpConstant 8 
                              Private f32_4* %209 = OpVariable Private 
                                         i32 %211 = OpConstant 7 
                                         f32 %219 = OpConstant 3.674022E-40 
                                         f32 %221 = OpConstant 3.674022E-40 
                                Private f32* %224 = OpVariable Private 
                                         f32 %227 = OpConstant 3.674022E-40 
                                             %235 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %236 = OpTypeSampledImage %235 
                                             %237 = OpTypePointer UniformConstant %236 
 UniformConstant read_only Texture3DSampled* %238 = OpVariable UniformConstant 
                              Private f32_3* %249 = OpVariable Private 
                                             %259 = OpTypePointer Input %7 
                                Input f32_4* %260 = OpVariable Input 
                                Private f32* %268 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %269 = OpVariable UniformConstant 
                              Private f32_3* %275 = OpVariable Private 
                                             %290 = OpTypePointer Function %6 
                                         i32 %304 = OpConstant 9 
                                Input f32_3* %315 = OpVariable Input 
                                             %320 = OpTypePointer Output %7 
                               Output f32_4* %321 = OpVariable Output 
                                             %324 = OpTypePointer Output %6 
                                         i32 %326 = OpConstant 10 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %195 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                                        f32_3 %25 = OpExtInst %1 30 %24 
                                                      OpStore %22 %25 
                                        f32_3 %27 = OpLoad %22 
                                 Uniform f32* %38 = OpAccessChain %34 %36 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %34 %36 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %34 %36 
                                          f32 %43 = OpLoad %42 
                                        f32_3 %44 = OpCompositeConstruct %39 %41 %43 
                                          f32 %45 = OpCompositeExtract %44 0 
                                          f32 %46 = OpCompositeExtract %44 1 
                                          f32 %47 = OpCompositeExtract %44 2 
                                        f32_3 %48 = OpCompositeConstruct %45 %46 %47 
                                        f32_3 %49 = OpFMul %27 %48 
                                                      OpStore %26 %49 
                                        f32_3 %50 = OpLoad %26 
                                        f32_3 %51 = OpExtInst %1 29 %50 
                                                      OpStore %26 %51 
                                 Private f32* %55 = OpAccessChain %9 %53 
                                          f32 %56 = OpLoad %55 
                                 Uniform f32* %58 = OpAccessChain %34 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFNegate %59 
                                          f32 %61 = OpFAdd %56 %60 
                                 Private f32* %63 = OpAccessChain %52 %62 
                                                      OpStore %63 %61 
                                 Private f32* %67 = OpAccessChain %52 %62 
                                          f32 %68 = OpLoad %67 
                                         bool %70 = OpFOrdLessThan %68 %69 
                                                      OpStore %66 %70 
                                         bool %71 = OpLoad %66 
                                          i32 %74 = OpSelect %71 %73 %72 
                                          i32 %76 = OpIMul %74 %75 
                                         bool %77 = OpINotEqual %76 %72 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %79 
                                              %78 = OpLabel 
                                                      OpKill
                                              %79 = OpLabel 
                                        f32_3 %84 = OpLoad %83 
                                        f32_3 %85 = OpFNegate %84 
                               Uniform f32_3* %87 = OpAccessChain %34 %72 
                                        f32_3 %88 = OpLoad %87 
                                        f32_3 %89 = OpFAdd %85 %88 
                                                      OpStore %81 %89 
                                 Uniform f32* %93 = OpAccessChain %34 %91 %72 %92 
                                          f32 %94 = OpLoad %93 
                                 Private f32* %95 = OpAccessChain %90 %62 
                                                      OpStore %95 %94 
                                 Uniform f32* %96 = OpAccessChain %34 %91 %73 %92 
                                          f32 %97 = OpLoad %96 
                                 Private f32* %99 = OpAccessChain %90 %98 
                                                      OpStore %99 %97 
                                Uniform f32* %101 = OpAccessChain %34 %91 %100 %92 
                                         f32 %102 = OpLoad %101 
                                Private f32* %103 = OpAccessChain %90 %92 
                                                      OpStore %103 %102 
                                       f32_3 %105 = OpLoad %81 
                                       f32_3 %106 = OpLoad %90 
                                         f32 %107 = OpDot %105 %106 
                                                      OpStore %104 %107 
                                       f32_3 %108 = OpLoad %83 
                              Uniform f32_4* %111 = OpAccessChain %34 %109 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFNegate %113 
                                       f32_3 %115 = OpFAdd %108 %114 
                                                      OpStore %81 %115 
                                       f32_3 %116 = OpLoad %81 
                                       f32_3 %117 = OpLoad %81 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %119 = OpAccessChain %81 %62 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %81 %62 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpExtInst %1 31 %121 
                                Private f32* %123 = OpAccessChain %81 %62 
                                                      OpStore %123 %122 
                                         f32 %124 = OpLoad %104 
                                         f32 %125 = OpFNegate %124 
                                Private f32* %126 = OpAccessChain %81 %62 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFAdd %125 %127 
                                Private f32* %129 = OpAccessChain %81 %62 
                                                      OpStore %129 %128 
                                Uniform f32* %130 = OpAccessChain %34 %109 %53 
                                         f32 %131 = OpLoad %130 
                                Private f32* %132 = OpAccessChain %81 %62 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFMul %131 %133 
                                         f32 %135 = OpLoad %104 
                                         f32 %136 = OpFAdd %134 %135 
                                                      OpStore %104 %136 
                                         f32 %137 = OpLoad %104 
                                Uniform f32* %138 = OpAccessChain %34 %100 %92 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %137 %139 
                                Uniform f32* %141 = OpAccessChain %34 %100 %53 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFAdd %140 %142 
                                                      OpStore %104 %143 
                                         f32 %144 = OpLoad %104 
                                         f32 %146 = OpExtInst %1 43 %144 %69 %145 
                                                      OpStore %104 %146 
                                Uniform f32* %149 = OpAccessChain %34 %148 %62 
                                         f32 %150 = OpLoad %149 
                                        bool %151 = OpFOrdEqual %150 %145 
                                                      OpStore %147 %151 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %154 
                                             %153 = OpLabel 
                                        bool %155 = OpLoad %147 
                                                      OpSelectionMerge %157 None 
                                                      OpBranchConditional %155 %156 %157 
                                             %156 = OpLabel 
                                                      OpBranch %157 
                                             %157 = OpLabel 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                                      OpSelectionMerge %160 None 
                                                      OpBranchConditional %158 %159 %244 
                                             %159 = OpLabel 
                                Uniform f32* %162 = OpAccessChain %34 %148 %98 
                                         f32 %163 = OpLoad %162 
                                        bool %164 = OpFOrdEqual %163 %145 
                                                      OpStore %161 %164 
                                       f32_3 %165 = OpLoad %83 
                                       f32_3 %166 = OpVectorShuffle %165 %165 1 1 1 
                              Uniform f32_4* %168 = OpAccessChain %34 %167 %73 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %166 %170 
                                                      OpStore %90 %171 
                              Uniform f32_4* %172 = OpAccessChain %34 %167 %72 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpLoad %83 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 0 0 
                                       f32_3 %177 = OpFMul %174 %176 
                                       f32_3 %178 = OpLoad %90 
                                       f32_3 %179 = OpFAdd %177 %178 
                                                      OpStore %90 %179 
                              Uniform f32_4* %180 = OpAccessChain %34 %167 %100 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpLoad %83 
                                       f32_3 %184 = OpVectorShuffle %183 %183 2 2 2 
                                       f32_3 %185 = OpFMul %182 %184 
                                       f32_3 %186 = OpLoad %90 
                                       f32_3 %187 = OpFAdd %185 %186 
                                                      OpStore %90 %187 
                                       f32_3 %188 = OpLoad %90 
                              Uniform f32_4* %189 = OpAccessChain %34 %167 %109 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %188 %191 
                                                      OpStore %90 %192 
                                        bool %196 = OpLoad %161 
                                                      OpSelectionMerge %198 None 
                                                      OpBranchConditional %196 %197 %200 
                                             %197 = OpLabel 
                                       f32_3 %199 = OpLoad %90 
                                                      OpStore %195 %199 
                                                      OpBranch %198 
                                             %200 = OpLabel 
                                       f32_3 %201 = OpLoad %83 
                                                      OpStore %195 %201 
                                                      OpBranch %198 
                                             %198 = OpLabel 
                                       f32_3 %202 = OpLoad %195 
                                                      OpStore %193 %202 
                                       f32_3 %203 = OpLoad %193 
                              Uniform f32_3* %205 = OpAccessChain %34 %204 
                                       f32_3 %206 = OpLoad %205 
                                       f32_3 %207 = OpFNegate %206 
                                       f32_3 %208 = OpFAdd %203 %207 
                                                      OpStore %193 %208 
                                       f32_3 %210 = OpLoad %193 
                              Uniform f32_3* %212 = OpAccessChain %34 %211 
                                       f32_3 %213 = OpLoad %212 
                                       f32_3 %214 = OpFMul %210 %213 
                                       f32_4 %215 = OpLoad %209 
                                       f32_4 %216 = OpVectorShuffle %215 %214 0 4 5 6 
                                                      OpStore %209 %216 
                                Private f32* %217 = OpAccessChain %209 %98 
                                         f32 %218 = OpLoad %217 
                                         f32 %220 = OpFMul %218 %219 
                                         f32 %222 = OpFAdd %220 %221 
                                Private f32* %223 = OpAccessChain %193 %62 
                                                      OpStore %223 %222 
                                Uniform f32* %225 = OpAccessChain %34 %148 %92 
                                         f32 %226 = OpLoad %225 
                                         f32 %228 = OpFMul %226 %227 
                                         f32 %229 = OpFAdd %228 %221 
                                                      OpStore %224 %229 
                                         f32 %230 = OpLoad %224 
                                Private f32* %231 = OpAccessChain %193 %62 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpExtInst %1 40 %230 %232 
                                Private f32* %234 = OpAccessChain %209 %62 
                                                      OpStore %234 %233 
                  read_only Texture3DSampled %239 = OpLoad %238 
                                       f32_4 %240 = OpLoad %209 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 2 3 
                                       f32_4 %242 = OpImageSampleImplicitLod %239 %241 
                                                      OpStore %209 %242 
                                       f32_4 %243 = OpLoad %209 
                                                      OpStore %52 %243 
                                                      OpBranch %160 
                                             %244 = OpLabel 
                                Private f32* %245 = OpAccessChain %52 %62 
                                                      OpStore %245 %145 
                                Private f32* %246 = OpAccessChain %52 %98 
                                                      OpStore %246 %145 
                                Private f32* %247 = OpAccessChain %52 %92 
                                                      OpStore %247 %145 
                                Private f32* %248 = OpAccessChain %52 %53 
                                                      OpStore %248 %145 
                                                      OpBranch %160 
                                             %160 = OpLabel 
                                       f32_4 %250 = OpLoad %52 
                              Uniform f32_4* %251 = OpAccessChain %34 %73 
                                       f32_4 %252 = OpLoad %251 
                                         f32 %253 = OpDot %250 %252 
                                Private f32* %254 = OpAccessChain %249 %62 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %249 %62 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpExtInst %1 43 %256 %69 %145 
                                Private f32* %258 = OpAccessChain %249 %62 
                                                      OpStore %258 %257 
                                       f32_4 %261 = OpLoad %260 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %260 
                                       f32_2 %264 = OpVectorShuffle %263 %263 3 3 
                                       f32_2 %265 = OpFDiv %262 %264 
                                       f32_3 %266 = OpLoad %193 
                                       f32_3 %267 = OpVectorShuffle %266 %265 3 4 2 
                                                      OpStore %193 %267 
                  read_only Texture2DSampled %270 = OpLoad %269 
                                       f32_3 %271 = OpLoad %193 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                       f32_4 %273 = OpImageSampleImplicitLod %270 %272 
                                         f32 %274 = OpCompositeExtract %273 0 
                                                      OpStore %268 %274 
                                         f32 %276 = OpLoad %104 
                                         f32 %277 = OpLoad %268 
                                         f32 %278 = OpFAdd %276 %277 
                                Private f32* %279 = OpAccessChain %275 %62 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %275 %62 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 43 %281 %69 %145 
                                Private f32* %283 = OpAccessChain %275 %62 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %275 %62 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %249 %62 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpExtInst %1 37 %285 %287 
                                Private f32* %289 = OpAccessChain %249 %62 
                                                      OpStore %289 %288 
                                        bool %292 = OpLoad %147 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %292 %293 %297 
                                             %293 = OpLabel 
                                Private f32* %295 = OpAccessChain %249 %62 
                                         f32 %296 = OpLoad %295 
                                                      OpStore %291 %296 
                                                      OpBranch %294 
                                             %297 = OpLabel 
                                Private f32* %298 = OpAccessChain %275 %62 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %291 %299 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                         f32 %300 = OpLoad %291 
                                Private f32* %301 = OpAccessChain %249 %62 
                                                      OpStore %301 %300 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                              Uniform f32_4* %305 = OpAccessChain %34 %304 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %303 %307 
                                                      OpStore %275 %308 
                                       f32_3 %309 = OpLoad %249 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 0 0 
                                       f32_3 %311 = OpLoad %275 
                                       f32_3 %312 = OpFMul %310 %311 
                                                      OpStore %249 %312 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %316 = OpLoad %315 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %318 = OpLoad %249 
                                       f32_3 %319 = OpFAdd %317 %318 
                                                      OpStore %249 %319 
                                Private f32* %322 = OpAccessChain %9 %53 
                                         f32 %323 = OpLoad %322 
                                 Output f32* %325 = OpAccessChain %321 %53 
                                                      OpStore %325 %323 
                                Uniform f32* %327 = OpAccessChain %34 %326 
                                         f32 %328 = OpLoad %327 
                                       f32_3 %329 = OpCompositeConstruct %328 %328 %328 
                                       f32_3 %330 = OpLoad %26 
                                       f32_3 %331 = OpFMul %329 %330 
                                       f32_3 %332 = OpLoad %249 
                                       f32_3 %333 = OpFAdd %331 %332 
                                       f32_4 %334 = OpLoad %321 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %321 %335 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat21;
float u_xlat23;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb7 = 0.0<_Perpendicular;
    u_xlat7 = (u_xlatb7) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat7 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat21 = u_xlat2.y * u_xlat2.y;
    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat2.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat2);
    u_xlat4.y = dot(unity_SHAg, u_xlat2);
    u_xlat4.z = dot(unity_SHAb, u_xlat2);
    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat4 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
    u_xlat2 = max(u_xlat4, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = log2(u_xlat0.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat13 = u_xlat0.w + (-_Cutoff);
    u_xlatb13 = u_xlat13<0.0;
    if((int(u_xlatb13) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = (-u_xlat13) + u_xlat2.x;
    u_xlat13 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat13;
    u_xlat13 = u_xlat13 * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb6)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat10.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat10.x, u_xlat6.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
    u_xlat13 = u_xlat13 + u_xlat10_3.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat6.x = min(u_xlat13, u_xlat6.x);
    u_xlat13 = (u_xlatb2) ? u_xlat6.x : u_xlat13;
    u_xlat2.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat0.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat2.w = 0.0;
    u_xlat0 = u_xlat0 + u_xlat2;
    SV_Target0.xyz = vec3(_EmissivePower) * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 486
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %164 %170 %171 %185 %221 %224 %227 %447 %467 %479 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 RelaxedPrecision 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 RelaxedPrecision 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 RelaxedPrecision 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 RelaxedPrecision 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 RelaxedPrecision 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 RelaxedPrecision 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 RelaxedPrecision 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %162 0 BuiltIn 162 
                                                      OpMemberDecorate %162 1 BuiltIn 162 
                                                      OpMemberDecorate %162 2 BuiltIn 162 
                                                      OpDecorate %162 Block 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %171 Location 171 
                                                      OpDecorate %185 Location 185 
                                                      OpDecorate %221 Location 221 
                                                      OpDecorate %224 Location 224 
                                                      OpDecorate %227 Location 227 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %447 Location 447 
                                                      OpDecorate %467 Location 467 
                                                      OpDecorate %479 Location 479 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeStruct %7 %7 %7 %7 %7 %18 %7 %7 %7 %7 %7 %7 %7 %20 %21 %22 %6 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                          i32 %28 = OpConstant 1 
                                              %29 = OpTypePointer Uniform %6 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                                          i32 %36 = OpConstant 0 
                                          i32 %46 = OpConstant 2 
                                          u32 %49 = OpConstant 2 
                                          i32 %57 = OpConstant 3 
                                          u32 %60 = OpConstant 3 
                                              %75 = OpTypeBool 
                                              %76 = OpTypePointer Private %75 
                                Private bool* %77 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %79 = OpConstant 16 
                                 Private f32* %83 = OpVariable Private 
                                              %84 = OpTypePointer Function %6 
                                          f32 %89 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                              Private f32_4* %101 = OpVariable Private 
                                             %104 = OpTypePointer Uniform %7 
                              Private f32_4* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 15 
                                             %161 = OpTypeArray %6 %13 
                                             %162 = OpTypeStruct %7 %6 %161 
                                             %163 = OpTypePointer Output %162 
        Output struct {f32_4; f32; f32[1];}* %164 = OpVariable Output 
                                             %166 = OpTypePointer Output %7 
                                             %168 = OpTypeVector %6 2 
                                             %169 = OpTypePointer Output %168 
                               Output f32_2* %170 = OpVariable Output 
                                Input f32_4* %171 = OpVariable Input 
                                         i32 %174 = OpConstant 17 
                                             %183 = OpTypeVector %6 3 
                                             %184 = OpTypePointer Input %183 
                                Input f32_3* %185 = OpVariable Input 
                                         i32 %187 = OpConstant 14 
                                Private f32* %205 = OpVariable Private 
                                             %220 = OpTypePointer Output %183 
                               Output f32_3* %221 = OpVariable Output 
                               Output f32_3* %224 = OpVariable Output 
                               Output f32_4* %227 = OpVariable Output 
                                             %229 = OpTypePointer Private %183 
                              Private f32_3* %230 = OpVariable Private 
                              Private f32_4* %247 = OpVariable Private 
                              Private f32_3* %253 = OpVariable Private 
                                         i32 %254 = OpConstant 9 
                                         i32 %260 = OpConstant 10 
                                         i32 %266 = OpConstant 11 
                                         i32 %272 = OpConstant 12 
                                         i32 %282 = OpConstant 6 
                                         i32 %288 = OpConstant 7 
                                         i32 %294 = OpConstant 8 
                                       f32_3 %305 = OpConstantComposite %78 %78 %78 
                              Private f32_3* %307 = OpVariable Private 
                                         f32 %311 = OpConstant 3.674022E-40 
                                       f32_3 %312 = OpConstantComposite %311 %311 %311 
                                         f32 %317 = OpConstant 3.674022E-40 
                                       f32_3 %318 = OpConstantComposite %317 %317 %317 
                                         f32 %320 = OpConstant 3.674022E-40 
                                       f32_3 %321 = OpConstantComposite %320 %320 %320 
                              Private f32_4* %325 = OpVariable Private 
                              Private f32_4* %332 = OpVariable Private 
                              Private f32_4* %340 = OpVariable Private 
                                         f32 %376 = OpConstant 3.674022E-40 
                                       f32_4 %377 = OpConstantComposite %376 %376 %376 %376 
                                         i32 %382 = OpConstant 4 
                                       f32_4 %386 = OpConstantComposite %91 %91 %91 %91 
                                       f32_4 %394 = OpConstantComposite %78 %78 %78 %78 
                                         i32 %401 = OpConstant 5 
                               Output f32_3* %447 = OpVariable Output 
                                         f32 %458 = OpConstant 3.674022E-40 
                                       f32_2 %463 = OpConstantComposite %458 %458 
                               Output f32_4* %467 = OpVariable Output 
                               Output f32_4* %479 = OpVariable Output 
                                             %480 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %85 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %30 = OpAccessChain %25 %27 %28 %13 
                                          f32 %31 = OpLoad %30 
                                          f32 %32 = OpFMul %16 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Uniform f32* %37 = OpAccessChain %25 %27 %36 %13 
                                          f32 %38 = OpLoad %37 
                                   Input f32* %39 = OpAccessChain %11 %33 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %33 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFAdd %41 %43 
                                 Private f32* %45 = OpAccessChain %9 %33 
                                                      OpStore %45 %44 
                                 Uniform f32* %47 = OpAccessChain %25 %27 %46 %13 
                                          f32 %48 = OpLoad %47 
                                   Input f32* %50 = OpAccessChain %11 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFMul %48 %51 
                                 Private f32* %53 = OpAccessChain %9 %33 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %52 %54 
                                 Private f32* %56 = OpAccessChain %9 %33 
                                                      OpStore %56 %55 
                                 Uniform f32* %58 = OpAccessChain %25 %27 %57 %13 
                                          f32 %59 = OpLoad %58 
                                   Input f32* %61 = OpAccessChain %11 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %9 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %9 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %9 %33 
                                          f32 %69 = OpLoad %68 
                                 Uniform f32* %70 = OpAccessChain %25 %27 %57 %13 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                          f32 %73 = OpFAdd %69 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %80 = OpAccessChain %25 %79 
                                          f32 %81 = OpLoad %80 
                                         bool %82 = OpFOrdLessThan %78 %81 
                                                      OpStore %77 %82 
                                         bool %86 = OpLoad %77 
                                                      OpSelectionMerge %88 None 
                                                      OpBranchConditional %86 %87 %90 
                                              %87 = OpLabel 
                                                      OpStore %85 %89 
                                                      OpBranch %88 
                                              %90 = OpLabel 
                                                      OpStore %85 %91 
                                                      OpBranch %88 
                                              %88 = OpLabel 
                                          f32 %92 = OpLoad %85 
                                                      OpStore %83 %92 
                                 Private f32* %93 = OpAccessChain %9 %33 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpLoad %83 
                                          f32 %96 = OpFMul %94 %95 
                                   Input f32* %97 = OpAccessChain %11 %49 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFAdd %96 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_4 %102 = OpLoad %11 
                                       f32_4 %103 = OpVectorShuffle %102 %102 1 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %25 %27 %28 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpFMul %103 %106 
                                                      OpStore %101 %107 
                              Uniform f32_4* %108 = OpAccessChain %25 %27 %36 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %11 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %101 
                                       f32_4 %114 = OpFAdd %112 %113 
                                                      OpStore %101 %114 
                              Uniform f32_4* %115 = OpAccessChain %25 %27 %46 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %117 0 0 0 0 
                                       f32_4 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %101 
                                       f32_4 %121 = OpFAdd %119 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                              Uniform f32_4* %123 = OpAccessChain %25 %27 %57 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpFAdd %122 %124 
                                                      OpStore %101 %125 
                              Uniform f32_4* %126 = OpAccessChain %25 %27 %57 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpLoad %11 
                                       f32_4 %129 = OpVectorShuffle %128 %128 3 3 3 3 
                                       f32_4 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpFAdd %130 %131 
                                                      OpStore %9 %132 
                                       f32_4 %134 = OpLoad %101 
                                       f32_4 %135 = OpVectorShuffle %134 %134 1 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %25 %136 %28 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpFMul %135 %138 
                                                      OpStore %133 %139 
                              Uniform f32_4* %140 = OpAccessChain %25 %136 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpLoad %101 
                                       f32_4 %143 = OpVectorShuffle %142 %142 0 0 0 0 
                                       f32_4 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %133 
                                       f32_4 %146 = OpFAdd %144 %145 
                                                      OpStore %133 %146 
                              Uniform f32_4* %147 = OpAccessChain %25 %136 %46 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpLoad %101 
                                       f32_4 %150 = OpVectorShuffle %149 %149 2 2 2 2 
                                       f32_4 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %133 
                                       f32_4 %153 = OpFAdd %151 %152 
                                                      OpStore %133 %153 
                              Uniform f32_4* %154 = OpAccessChain %25 %136 %57 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %101 
                                       f32_4 %157 = OpVectorShuffle %156 %156 3 3 3 3 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %133 
                                       f32_4 %160 = OpFAdd %158 %159 
                                                      OpStore %101 %160 
                                       f32_4 %165 = OpLoad %101 
                               Output f32_4* %167 = OpAccessChain %164 %36 
                                                      OpStore %167 %165 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                              Uniform f32_4* %175 = OpAccessChain %25 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_2 %177 = OpVectorShuffle %176 %176 0 1 
                                       f32_2 %178 = OpFMul %173 %177 
                              Uniform f32_4* %179 = OpAccessChain %25 %174 
                                       f32_4 %180 = OpLoad %179 
                                       f32_2 %181 = OpVectorShuffle %180 %180 2 3 
                                       f32_2 %182 = OpFAdd %178 %181 
                                                      OpStore %170 %182 
                                       f32_3 %186 = OpLoad %185 
                              Uniform f32_4* %188 = OpAccessChain %25 %187 %36 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %186 %190 
                                Private f32* %192 = OpAccessChain %133 %33 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %185 
                              Uniform f32_4* %194 = OpAccessChain %25 %187 %28 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpDot %193 %196 
                                Private f32* %198 = OpAccessChain %133 %13 
                                                      OpStore %198 %197 
                                       f32_3 %199 = OpLoad %185 
                              Uniform f32_4* %200 = OpAccessChain %25 %187 %46 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                         f32 %203 = OpDot %199 %202 
                                Private f32* %204 = OpAccessChain %133 %49 
                                                      OpStore %204 %203 
                                       f32_4 %206 = OpLoad %133 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %133 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %207 %209 
                                                      OpStore %205 %210 
                                         f32 %211 = OpLoad %205 
                                         f32 %212 = OpExtInst %1 32 %211 
                                                      OpStore %205 %212 
                                         f32 %213 = OpLoad %205 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_4 %215 = OpLoad %133 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %133 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %133 %219 
                                       f32_4 %222 = OpLoad %133 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                                      OpStore %221 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                                      OpStore %224 %226 
                                       f32_4 %228 = OpLoad %9 
                                                      OpStore %227 %228 
                                Private f32* %231 = OpAccessChain %133 %13 
                                         f32 %232 = OpLoad %231 
                                Private f32* %233 = OpAccessChain %133 %13 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFMul %232 %234 
                                Private f32* %236 = OpAccessChain %230 %33 
                                                      OpStore %236 %235 
                                Private f32* %237 = OpAccessChain %133 %33 
                                         f32 %238 = OpLoad %237 
                                Private f32* %239 = OpAccessChain %133 %33 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFMul %238 %240 
                                Private f32* %242 = OpAccessChain %230 %33 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFNegate %243 
                                         f32 %245 = OpFAdd %241 %244 
                                Private f32* %246 = OpAccessChain %230 %33 
                                                      OpStore %246 %245 
                                       f32_4 %248 = OpLoad %133 
                                       f32_4 %249 = OpVectorShuffle %248 %248 1 2 2 0 
                                       f32_4 %250 = OpLoad %133 
                                       f32_4 %251 = OpVectorShuffle %250 %250 0 1 2 2 
                                       f32_4 %252 = OpFMul %249 %251 
                                                      OpStore %247 %252 
                              Uniform f32_4* %255 = OpAccessChain %25 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %247 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %253 %33 
                                                      OpStore %259 %258 
                              Uniform f32_4* %261 = OpAccessChain %25 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_4 %263 = OpLoad %247 
                                         f32 %264 = OpDot %262 %263 
                                Private f32* %265 = OpAccessChain %253 %13 
                                                      OpStore %265 %264 
                              Uniform f32_4* %267 = OpAccessChain %25 %266 
                                       f32_4 %268 = OpLoad %267 
                                       f32_4 %269 = OpLoad %247 
                                         f32 %270 = OpDot %268 %269 
                                Private f32* %271 = OpAccessChain %253 %49 
                                                      OpStore %271 %270 
                              Uniform f32_4* %273 = OpAccessChain %25 %272 
                                       f32_4 %274 = OpLoad %273 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpLoad %230 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 0 0 
                                       f32_3 %278 = OpFMul %275 %277 
                                       f32_3 %279 = OpLoad %253 
                                       f32_3 %280 = OpFAdd %278 %279 
                                                      OpStore %230 %280 
                                Private f32* %281 = OpAccessChain %133 %60 
                                                      OpStore %281 %91 
                              Uniform f32_4* %283 = OpAccessChain %25 %282 
                                       f32_4 %284 = OpLoad %283 
                                       f32_4 %285 = OpLoad %133 
                                         f32 %286 = OpDot %284 %285 
                                Private f32* %287 = OpAccessChain %247 %33 
                                                      OpStore %287 %286 
                              Uniform f32_4* %289 = OpAccessChain %25 %288 
                                       f32_4 %290 = OpLoad %289 
                                       f32_4 %291 = OpLoad %133 
                                         f32 %292 = OpDot %290 %291 
                                Private f32* %293 = OpAccessChain %247 %13 
                                                      OpStore %293 %292 
                              Uniform f32_4* %295 = OpAccessChain %25 %294 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpLoad %133 
                                         f32 %298 = OpDot %296 %297 
                                Private f32* %299 = OpAccessChain %247 %49 
                                                      OpStore %299 %298 
                                       f32_3 %300 = OpLoad %230 
                                       f32_4 %301 = OpLoad %247 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %300 %302 
                                                      OpStore %230 %303 
                                       f32_3 %304 = OpLoad %230 
                                       f32_3 %306 = OpExtInst %1 40 %304 %305 
                                                      OpStore %230 %306 
                                       f32_3 %308 = OpLoad %230 
                                       f32_3 %309 = OpExtInst %1 30 %308 
                                                      OpStore %307 %309 
                                       f32_3 %310 = OpLoad %307 
                                       f32_3 %313 = OpFMul %310 %312 
                                                      OpStore %307 %313 
                                       f32_3 %314 = OpLoad %307 
                                       f32_3 %315 = OpExtInst %1 29 %314 
                                                      OpStore %307 %315 
                                       f32_3 %316 = OpLoad %307 
                                       f32_3 %319 = OpFMul %316 %318 
                                       f32_3 %322 = OpFAdd %319 %321 
                                                      OpStore %307 %322 
                                       f32_3 %323 = OpLoad %307 
                                       f32_3 %324 = OpExtInst %1 40 %323 %305 
                                                      OpStore %307 %324 
                                       f32_4 %326 = OpLoad %9 
                                       f32_4 %327 = OpVectorShuffle %326 %326 1 1 1 1 
                                       f32_4 %328 = OpFNegate %327 
                              Uniform f32_4* %329 = OpAccessChain %25 %46 
                                       f32_4 %330 = OpLoad %329 
                                       f32_4 %331 = OpFAdd %328 %330 
                                                      OpStore %325 %331 
                                       f32_4 %333 = OpLoad %133 
                                       f32_4 %334 = OpVectorShuffle %333 %333 1 1 1 1 
                                       f32_4 %335 = OpLoad %325 
                                       f32_4 %336 = OpFMul %334 %335 
                                                      OpStore %332 %336 
                                       f32_4 %337 = OpLoad %325 
                                       f32_4 %338 = OpLoad %325 
                                       f32_4 %339 = OpFMul %337 %338 
                                                      OpStore %325 %339 
                                       f32_4 %341 = OpLoad %9 
                                       f32_4 %342 = OpVectorShuffle %341 %341 0 0 0 0 
                                       f32_4 %343 = OpFNegate %342 
                              Uniform f32_4* %344 = OpAccessChain %25 %28 
                                       f32_4 %345 = OpLoad %344 
                                       f32_4 %346 = OpFAdd %343 %345 
                                                      OpStore %340 %346 
                                       f32_4 %347 = OpLoad %9 
                                       f32_4 %348 = OpVectorShuffle %347 %347 2 2 2 2 
                                       f32_4 %349 = OpFNegate %348 
                              Uniform f32_4* %350 = OpAccessChain %25 %57 
                                       f32_4 %351 = OpLoad %350 
                                       f32_4 %352 = OpFAdd %349 %351 
                                                      OpStore %9 %352 
                                       f32_4 %353 = OpLoad %340 
                                       f32_4 %354 = OpLoad %133 
                                       f32_4 %355 = OpVectorShuffle %354 %354 0 0 0 0 
                                       f32_4 %356 = OpFMul %353 %355 
                                       f32_4 %357 = OpLoad %332 
                                       f32_4 %358 = OpFAdd %356 %357 
                                                      OpStore %332 %358 
                                       f32_4 %359 = OpLoad %340 
                                       f32_4 %360 = OpLoad %340 
                                       f32_4 %361 = OpFMul %359 %360 
                                       f32_4 %362 = OpLoad %325 
                                       f32_4 %363 = OpFAdd %361 %362 
                                                      OpStore %325 %363 
                                       f32_4 %364 = OpLoad %9 
                                       f32_4 %365 = OpLoad %9 
                                       f32_4 %366 = OpFMul %364 %365 
                                       f32_4 %367 = OpLoad %325 
                                       f32_4 %368 = OpFAdd %366 %367 
                                                      OpStore %325 %368 
                                       f32_4 %369 = OpLoad %9 
                                       f32_4 %370 = OpLoad %133 
                                       f32_4 %371 = OpVectorShuffle %370 %370 2 2 2 2 
                                       f32_4 %372 = OpFMul %369 %371 
                                       f32_4 %373 = OpLoad %332 
                                       f32_4 %374 = OpFAdd %372 %373 
                                                      OpStore %9 %374 
                                       f32_4 %375 = OpLoad %325 
                                       f32_4 %378 = OpExtInst %1 40 %375 %377 
                                                      OpStore %133 %378 
                                       f32_4 %379 = OpLoad %133 
                                       f32_4 %380 = OpExtInst %1 32 %379 
                                                      OpStore %325 %380 
                                       f32_4 %381 = OpLoad %133 
                              Uniform f32_4* %383 = OpAccessChain %25 %382 
                                       f32_4 %384 = OpLoad %383 
                                       f32_4 %385 = OpFMul %381 %384 
                                       f32_4 %387 = OpFAdd %385 %386 
                                                      OpStore %133 %387 
                                       f32_4 %388 = OpLoad %133 
                                       f32_4 %389 = OpFDiv %386 %388 
                                                      OpStore %133 %389 
                                       f32_4 %390 = OpLoad %9 
                                       f32_4 %391 = OpLoad %325 
                                       f32_4 %392 = OpFMul %390 %391 
                                                      OpStore %9 %392 
                                       f32_4 %393 = OpLoad %9 
                                       f32_4 %395 = OpExtInst %1 40 %393 %394 
                                                      OpStore %9 %395 
                                       f32_4 %396 = OpLoad %133 
                                       f32_4 %397 = OpLoad %9 
                                       f32_4 %398 = OpFMul %396 %397 
                                                      OpStore %9 %398 
                                       f32_4 %399 = OpLoad %9 
                                       f32_3 %400 = OpVectorShuffle %399 %399 1 1 1 
                              Uniform f32_4* %402 = OpAccessChain %25 %401 %28 
                                       f32_4 %403 = OpLoad %402 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_3 %405 = OpFMul %400 %404 
                                       f32_4 %406 = OpLoad %133 
                                       f32_4 %407 = OpVectorShuffle %406 %405 4 5 6 3 
                                                      OpStore %133 %407 
                              Uniform f32_4* %408 = OpAccessChain %25 %401 %36 
                                       f32_4 %409 = OpLoad %408 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_4 %411 = OpLoad %9 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 0 0 
                                       f32_3 %413 = OpFMul %410 %412 
                                       f32_4 %414 = OpLoad %133 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_3 %416 = OpFAdd %413 %415 
                                       f32_4 %417 = OpLoad %133 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
                                                      OpStore %133 %418 
                              Uniform f32_4* %419 = OpAccessChain %25 %401 %46 
                                       f32_4 %420 = OpLoad %419 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_4 %422 = OpLoad %9 
                                       f32_3 %423 = OpVectorShuffle %422 %422 2 2 2 
                                       f32_3 %424 = OpFMul %421 %423 
                                       f32_4 %425 = OpLoad %133 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFAdd %424 %426 
                                       f32_4 %428 = OpLoad %9 
                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
                                                      OpStore %9 %429 
                              Uniform f32_4* %430 = OpAccessChain %25 %401 %57 
                                       f32_4 %431 = OpLoad %430 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_4 %433 = OpLoad %9 
                                       f32_3 %434 = OpVectorShuffle %433 %433 3 3 3 
                                       f32_3 %435 = OpFMul %432 %434 
                                       f32_4 %436 = OpLoad %9 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32_3 %438 = OpFAdd %435 %437 
                                       f32_4 %439 = OpLoad %9 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                                      OpStore %9 %440 
                                       f32_4 %441 = OpLoad %9 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpLoad %307 
                                       f32_3 %444 = OpFAdd %442 %443 
                                       f32_4 %445 = OpLoad %9 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %9 %446 
                                       f32_4 %448 = OpLoad %9 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
                                                      OpStore %447 %449 
                                Private f32* %450 = OpAccessChain %101 %13 
                                         f32 %451 = OpLoad %450 
                                Uniform f32* %452 = OpAccessChain %25 %36 %33 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %9 %33 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %33 
                                         f32 %457 = OpLoad %456 
                                         f32 %459 = OpFMul %457 %458 
                                Private f32* %460 = OpAccessChain %9 %60 
                                                      OpStore %460 %459 
                                       f32_4 %461 = OpLoad %101 
                                       f32_2 %462 = OpVectorShuffle %461 %461 0 3 
                                       f32_2 %464 = OpFMul %462 %463 
                                       f32_4 %465 = OpLoad %9 
                                       f32_4 %466 = OpVectorShuffle %465 %464 4 1 5 3 
                                                      OpStore %9 %466 
                                       f32_4 %468 = OpLoad %101 
                                       f32_2 %469 = OpVectorShuffle %468 %468 2 3 
                                       f32_4 %470 = OpLoad %467 
                                       f32_4 %471 = OpVectorShuffle %470 %469 0 1 4 5 
                                                      OpStore %467 %471 
                                       f32_4 %472 = OpLoad %9 
                                       f32_2 %473 = OpVectorShuffle %472 %472 2 2 
                                       f32_4 %474 = OpLoad %9 
                                       f32_2 %475 = OpVectorShuffle %474 %474 0 3 
                                       f32_2 %476 = OpFAdd %473 %475 
                                       f32_4 %477 = OpLoad %467 
                                       f32_4 %478 = OpVectorShuffle %477 %476 4 5 2 3 
                                                      OpStore %467 %478 
                                                      OpStore %479 %394 
                                 Output f32* %481 = OpAccessChain %164 %36 %13 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFNegate %482 
                                 Output f32* %484 = OpAccessChain %164 %36 %13 
                                                      OpStore %484 %483 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 337
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %83 %260 %315 %321 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %22 RelaxedPrecision 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpDecorate %31 ArrayStride 31 
                                                      OpMemberDecorate %32 0 Offset 32 
                                                      OpMemberDecorate %32 1 RelaxedPrecision 
                                                      OpMemberDecorate %32 1 Offset 32 
                                                      OpMemberDecorate %32 2 RelaxedPrecision 
                                                      OpMemberDecorate %32 2 Offset 32 
                                                      OpMemberDecorate %32 3 Offset 32 
                                                      OpMemberDecorate %32 4 Offset 32 
                                                      OpMemberDecorate %32 5 Offset 32 
                                                      OpMemberDecorate %32 6 Offset 32 
                                                      OpMemberDecorate %32 7 Offset 32 
                                                      OpMemberDecorate %32 8 Offset 32 
                                                      OpMemberDecorate %32 9 RelaxedPrecision 
                                                      OpMemberDecorate %32 9 Offset 32 
                                                      OpMemberDecorate %32 10 Offset 32 
                                                      OpMemberDecorate %32 11 Offset 32 
                                                      OpMemberDecorate %32 12 RelaxedPrecision 
                                                      OpMemberDecorate %32 12 Offset 32 
                                                      OpDecorate %32 Block 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %158 SpecId 158 
                                                      OpDecorate %238 DescriptorSet 238 
                                                      OpDecorate %238 Binding 238 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %260 Location 260 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %321 Location 321 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                               Private f32_3* %26 = OpVariable Private 
                                              %28 = OpTypeInt 32 0 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %7 %29 
                                              %31 = OpTypeArray %7 %29 
                                              %32 = OpTypeStruct %20 %7 %7 %7 %30 %7 %31 %20 %20 %7 %6 %6 %6 
                                              %33 = OpTypePointer Uniform %32 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32; f32; f32;}* %34 = OpVariable Uniform 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 11 
                                              %37 = OpTypePointer Uniform %6 
                               Private f32_4* %52 = OpVariable Private 
                                          u32 %53 = OpConstant 3 
                                              %54 = OpTypePointer Private %6 
                                          i32 %57 = OpConstant 12 
                                          u32 %62 = OpConstant 0 
                                              %64 = OpTypeBool 
                                              %65 = OpTypePointer Private %64 
                                Private bool* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                          i32 %72 = OpConstant 0 
                                          i32 %73 = OpConstant 1 
                                          i32 %75 = OpConstant -1 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypePointer Input %20 
                                 Input f32_3* %83 = OpVariable Input 
                                              %86 = OpTypePointer Uniform %20 
                               Private f32_3* %90 = OpVariable Private 
                                          i32 %91 = OpConstant 4 
                                          u32 %92 = OpConstant 2 
                                          u32 %98 = OpConstant 1 
                                         i32 %100 = OpConstant 2 
                                Private f32* %104 = OpVariable Private 
                                         i32 %109 = OpConstant 3 
                                             %110 = OpTypePointer Uniform %7 
                                         f32 %145 = OpConstant 3.674022E-40 
                               Private bool* %147 = OpVariable Private 
                                         i32 %148 = OpConstant 5 
                                        bool %152 = OpConstantFalse 
                                        bool %158 = OpSpecConstantFalse 
                               Private bool* %161 = OpVariable Private 
                                         i32 %167 = OpConstant 6 
                              Private f32_3* %193 = OpVariable Private 
                                             %194 = OpTypePointer Function %20 
                                         i32 %204 = OpConstant 8 
                              Private f32_4* %209 = OpVariable Private 
                                         i32 %211 = OpConstant 7 
                                         f32 %219 = OpConstant 3.674022E-40 
                                         f32 %221 = OpConstant 3.674022E-40 
                                Private f32* %224 = OpVariable Private 
                                         f32 %227 = OpConstant 3.674022E-40 
                                             %235 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %236 = OpTypeSampledImage %235 
                                             %237 = OpTypePointer UniformConstant %236 
 UniformConstant read_only Texture3DSampled* %238 = OpVariable UniformConstant 
                              Private f32_3* %249 = OpVariable Private 
                                             %259 = OpTypePointer Input %7 
                                Input f32_4* %260 = OpVariable Input 
                                Private f32* %268 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %269 = OpVariable UniformConstant 
                              Private f32_3* %275 = OpVariable Private 
                                             %290 = OpTypePointer Function %6 
                                         i32 %304 = OpConstant 9 
                                Input f32_3* %315 = OpVariable Input 
                                             %320 = OpTypePointer Output %7 
                               Output f32_4* %321 = OpVariable Output 
                                             %324 = OpTypePointer Output %6 
                                         i32 %326 = OpConstant 10 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %195 = OpVariable Function 
                               Function f32* %291 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                                        f32_3 %25 = OpExtInst %1 30 %24 
                                                      OpStore %22 %25 
                                        f32_3 %27 = OpLoad %22 
                                 Uniform f32* %38 = OpAccessChain %34 %36 
                                          f32 %39 = OpLoad %38 
                                 Uniform f32* %40 = OpAccessChain %34 %36 
                                          f32 %41 = OpLoad %40 
                                 Uniform f32* %42 = OpAccessChain %34 %36 
                                          f32 %43 = OpLoad %42 
                                        f32_3 %44 = OpCompositeConstruct %39 %41 %43 
                                          f32 %45 = OpCompositeExtract %44 0 
                                          f32 %46 = OpCompositeExtract %44 1 
                                          f32 %47 = OpCompositeExtract %44 2 
                                        f32_3 %48 = OpCompositeConstruct %45 %46 %47 
                                        f32_3 %49 = OpFMul %27 %48 
                                                      OpStore %26 %49 
                                        f32_3 %50 = OpLoad %26 
                                        f32_3 %51 = OpExtInst %1 29 %50 
                                                      OpStore %26 %51 
                                 Private f32* %55 = OpAccessChain %9 %53 
                                          f32 %56 = OpLoad %55 
                                 Uniform f32* %58 = OpAccessChain %34 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFNegate %59 
                                          f32 %61 = OpFAdd %56 %60 
                                 Private f32* %63 = OpAccessChain %52 %62 
                                                      OpStore %63 %61 
                                 Private f32* %67 = OpAccessChain %52 %62 
                                          f32 %68 = OpLoad %67 
                                         bool %70 = OpFOrdLessThan %68 %69 
                                                      OpStore %66 %70 
                                         bool %71 = OpLoad %66 
                                          i32 %74 = OpSelect %71 %73 %72 
                                          i32 %76 = OpIMul %74 %75 
                                         bool %77 = OpINotEqual %76 %72 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %79 
                                              %78 = OpLabel 
                                                      OpKill
                                              %79 = OpLabel 
                                        f32_3 %84 = OpLoad %83 
                                        f32_3 %85 = OpFNegate %84 
                               Uniform f32_3* %87 = OpAccessChain %34 %72 
                                        f32_3 %88 = OpLoad %87 
                                        f32_3 %89 = OpFAdd %85 %88 
                                                      OpStore %81 %89 
                                 Uniform f32* %93 = OpAccessChain %34 %91 %72 %92 
                                          f32 %94 = OpLoad %93 
                                 Private f32* %95 = OpAccessChain %90 %62 
                                                      OpStore %95 %94 
                                 Uniform f32* %96 = OpAccessChain %34 %91 %73 %92 
                                          f32 %97 = OpLoad %96 
                                 Private f32* %99 = OpAccessChain %90 %98 
                                                      OpStore %99 %97 
                                Uniform f32* %101 = OpAccessChain %34 %91 %100 %92 
                                         f32 %102 = OpLoad %101 
                                Private f32* %103 = OpAccessChain %90 %92 
                                                      OpStore %103 %102 
                                       f32_3 %105 = OpLoad %81 
                                       f32_3 %106 = OpLoad %90 
                                         f32 %107 = OpDot %105 %106 
                                                      OpStore %104 %107 
                                       f32_3 %108 = OpLoad %83 
                              Uniform f32_4* %111 = OpAccessChain %34 %109 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_3 %114 = OpFNegate %113 
                                       f32_3 %115 = OpFAdd %108 %114 
                                                      OpStore %81 %115 
                                       f32_3 %116 = OpLoad %81 
                                       f32_3 %117 = OpLoad %81 
                                         f32 %118 = OpDot %116 %117 
                                Private f32* %119 = OpAccessChain %81 %62 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %81 %62 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpExtInst %1 31 %121 
                                Private f32* %123 = OpAccessChain %81 %62 
                                                      OpStore %123 %122 
                                         f32 %124 = OpLoad %104 
                                         f32 %125 = OpFNegate %124 
                                Private f32* %126 = OpAccessChain %81 %62 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFAdd %125 %127 
                                Private f32* %129 = OpAccessChain %81 %62 
                                                      OpStore %129 %128 
                                Uniform f32* %130 = OpAccessChain %34 %109 %53 
                                         f32 %131 = OpLoad %130 
                                Private f32* %132 = OpAccessChain %81 %62 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFMul %131 %133 
                                         f32 %135 = OpLoad %104 
                                         f32 %136 = OpFAdd %134 %135 
                                                      OpStore %104 %136 
                                         f32 %137 = OpLoad %104 
                                Uniform f32* %138 = OpAccessChain %34 %100 %92 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %137 %139 
                                Uniform f32* %141 = OpAccessChain %34 %100 %53 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFAdd %140 %142 
                                                      OpStore %104 %143 
                                         f32 %144 = OpLoad %104 
                                         f32 %146 = OpExtInst %1 43 %144 %69 %145 
                                                      OpStore %104 %146 
                                Uniform f32* %149 = OpAccessChain %34 %148 %62 
                                         f32 %150 = OpLoad %149 
                                        bool %151 = OpFOrdEqual %150 %145 
                                                      OpStore %147 %151 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %154 
                                             %153 = OpLabel 
                                        bool %155 = OpLoad %147 
                                                      OpSelectionMerge %157 None 
                                                      OpBranchConditional %155 %156 %157 
                                             %156 = OpLabel 
                                                      OpBranch %157 
                                             %157 = OpLabel 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                                      OpSelectionMerge %160 None 
                                                      OpBranchConditional %158 %159 %244 
                                             %159 = OpLabel 
                                Uniform f32* %162 = OpAccessChain %34 %148 %98 
                                         f32 %163 = OpLoad %162 
                                        bool %164 = OpFOrdEqual %163 %145 
                                                      OpStore %161 %164 
                                       f32_3 %165 = OpLoad %83 
                                       f32_3 %166 = OpVectorShuffle %165 %165 1 1 1 
                              Uniform f32_4* %168 = OpAccessChain %34 %167 %73 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %166 %170 
                                                      OpStore %90 %171 
                              Uniform f32_4* %172 = OpAccessChain %34 %167 %72 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpLoad %83 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 0 0 
                                       f32_3 %177 = OpFMul %174 %176 
                                       f32_3 %178 = OpLoad %90 
                                       f32_3 %179 = OpFAdd %177 %178 
                                                      OpStore %90 %179 
                              Uniform f32_4* %180 = OpAccessChain %34 %167 %100 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpLoad %83 
                                       f32_3 %184 = OpVectorShuffle %183 %183 2 2 2 
                                       f32_3 %185 = OpFMul %182 %184 
                                       f32_3 %186 = OpLoad %90 
                                       f32_3 %187 = OpFAdd %185 %186 
                                                      OpStore %90 %187 
                                       f32_3 %188 = OpLoad %90 
                              Uniform f32_4* %189 = OpAccessChain %34 %167 %109 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %188 %191 
                                                      OpStore %90 %192 
                                        bool %196 = OpLoad %161 
                                                      OpSelectionMerge %198 None 
                                                      OpBranchConditional %196 %197 %200 
                                             %197 = OpLabel 
                                       f32_3 %199 = OpLoad %90 
                                                      OpStore %195 %199 
                                                      OpBranch %198 
                                             %200 = OpLabel 
                                       f32_3 %201 = OpLoad %83 
                                                      OpStore %195 %201 
                                                      OpBranch %198 
                                             %198 = OpLabel 
                                       f32_3 %202 = OpLoad %195 
                                                      OpStore %193 %202 
                                       f32_3 %203 = OpLoad %193 
                              Uniform f32_3* %205 = OpAccessChain %34 %204 
                                       f32_3 %206 = OpLoad %205 
                                       f32_3 %207 = OpFNegate %206 
                                       f32_3 %208 = OpFAdd %203 %207 
                                                      OpStore %193 %208 
                                       f32_3 %210 = OpLoad %193 
                              Uniform f32_3* %212 = OpAccessChain %34 %211 
                                       f32_3 %213 = OpLoad %212 
                                       f32_3 %214 = OpFMul %210 %213 
                                       f32_4 %215 = OpLoad %209 
                                       f32_4 %216 = OpVectorShuffle %215 %214 0 4 5 6 
                                                      OpStore %209 %216 
                                Private f32* %217 = OpAccessChain %209 %98 
                                         f32 %218 = OpLoad %217 
                                         f32 %220 = OpFMul %218 %219 
                                         f32 %222 = OpFAdd %220 %221 
                                Private f32* %223 = OpAccessChain %193 %62 
                                                      OpStore %223 %222 
                                Uniform f32* %225 = OpAccessChain %34 %148 %92 
                                         f32 %226 = OpLoad %225 
                                         f32 %228 = OpFMul %226 %227 
                                         f32 %229 = OpFAdd %228 %221 
                                                      OpStore %224 %229 
                                         f32 %230 = OpLoad %224 
                                Private f32* %231 = OpAccessChain %193 %62 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpExtInst %1 40 %230 %232 
                                Private f32* %234 = OpAccessChain %209 %62 
                                                      OpStore %234 %233 
                  read_only Texture3DSampled %239 = OpLoad %238 
                                       f32_4 %240 = OpLoad %209 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 2 3 
                                       f32_4 %242 = OpImageSampleImplicitLod %239 %241 
                                                      OpStore %209 %242 
                                       f32_4 %243 = OpLoad %209 
                                                      OpStore %52 %243 
                                                      OpBranch %160 
                                             %244 = OpLabel 
                                Private f32* %245 = OpAccessChain %52 %62 
                                                      OpStore %245 %145 
                                Private f32* %246 = OpAccessChain %52 %98 
                                                      OpStore %246 %145 
                                Private f32* %247 = OpAccessChain %52 %92 
                                                      OpStore %247 %145 
                                Private f32* %248 = OpAccessChain %52 %53 
                                                      OpStore %248 %145 
                                                      OpBranch %160 
                                             %160 = OpLabel 
                                       f32_4 %250 = OpLoad %52 
                              Uniform f32_4* %251 = OpAccessChain %34 %73 
                                       f32_4 %252 = OpLoad %251 
                                         f32 %253 = OpDot %250 %252 
                                Private f32* %254 = OpAccessChain %249 %62 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %249 %62 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpExtInst %1 43 %256 %69 %145 
                                Private f32* %258 = OpAccessChain %249 %62 
                                                      OpStore %258 %257 
                                       f32_4 %261 = OpLoad %260 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %260 
                                       f32_2 %264 = OpVectorShuffle %263 %263 3 3 
                                       f32_2 %265 = OpFDiv %262 %264 
                                       f32_3 %266 = OpLoad %193 
                                       f32_3 %267 = OpVectorShuffle %266 %265 3 4 2 
                                                      OpStore %193 %267 
                  read_only Texture2DSampled %270 = OpLoad %269 
                                       f32_3 %271 = OpLoad %193 
                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
                                       f32_4 %273 = OpImageSampleImplicitLod %270 %272 
                                         f32 %274 = OpCompositeExtract %273 0 
                                                      OpStore %268 %274 
                                         f32 %276 = OpLoad %104 
                                         f32 %277 = OpLoad %268 
                                         f32 %278 = OpFAdd %276 %277 
                                Private f32* %279 = OpAccessChain %275 %62 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %275 %62 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpExtInst %1 43 %281 %69 %145 
                                Private f32* %283 = OpAccessChain %275 %62 
                                                      OpStore %283 %282 
                                Private f32* %284 = OpAccessChain %275 %62 
                                         f32 %285 = OpLoad %284 
                                Private f32* %286 = OpAccessChain %249 %62 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpExtInst %1 37 %285 %287 
                                Private f32* %289 = OpAccessChain %249 %62 
                                                      OpStore %289 %288 
                                        bool %292 = OpLoad %147 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %292 %293 %297 
                                             %293 = OpLabel 
                                Private f32* %295 = OpAccessChain %249 %62 
                                         f32 %296 = OpLoad %295 
                                                      OpStore %291 %296 
                                                      OpBranch %294 
                                             %297 = OpLabel 
                                Private f32* %298 = OpAccessChain %275 %62 
                                         f32 %299 = OpLoad %298 
                                                      OpStore %291 %299 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                         f32 %300 = OpLoad %291 
                                Private f32* %301 = OpAccessChain %249 %62 
                                                      OpStore %301 %300 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                              Uniform f32_4* %305 = OpAccessChain %34 %304 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %303 %307 
                                                      OpStore %275 %308 
                                       f32_3 %309 = OpLoad %249 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 0 0 
                                       f32_3 %311 = OpLoad %275 
                                       f32_3 %312 = OpFMul %310 %311 
                                                      OpStore %249 %312 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %316 = OpLoad %315 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %318 = OpLoad %249 
                                       f32_3 %319 = OpFAdd %317 %318 
                                                      OpStore %249 %319 
                                Private f32* %322 = OpAccessChain %9 %53 
                                         f32 %323 = OpLoad %322 
                                 Output f32* %325 = OpAccessChain %321 %53 
                                                      OpStore %325 %323 
                                Uniform f32* %327 = OpAccessChain %34 %326 
                                         f32 %328 = OpLoad %327 
                                       f32_3 %329 = OpCompositeConstruct %328 %328 %328 
                                       f32_3 %330 = OpLoad %26 
                                       f32_3 %331 = OpFMul %329 %330 
                                       f32_3 %332 = OpLoad %249 
                                       f32_3 %333 = OpFAdd %331 %332 
                                       f32_4 %334 = OpLoad %321 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %321 %335 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 84936
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
float u_xlat10;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb3 = 0.0<_Perpendicular;
    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat3 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
float u_xlat5;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb10 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb10)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat10 = u_xlat2.y * 0.25 + 0.75;
        u_xlat5 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat5);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat10 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat1.x = u_xlat10 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %152 %164 %165 %179 %207 %213 %216 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %150 0 BuiltIn 150 
                                                      OpMemberDecorate %150 1 BuiltIn 150 
                                                      OpMemberDecorate %150 2 BuiltIn 150 
                                                      OpDecorate %150 Block 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %216 Location 216 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %79 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                               Private f32_4* %97 = OpVariable Private 
                                             %100 = OpTypePointer Uniform %7 
                              Private f32_4* %129 = OpVariable Private 
                                             %149 = OpTypeArray %6 %13 
                                             %150 = OpTypeStruct %7 %6 %149 
                                             %151 = OpTypePointer Output %150 
        Output struct {f32_4; f32; f32[1];}* %152 = OpVariable Output 
                                             %160 = OpTypePointer Output %7 
                                             %162 = OpTypeVector %6 2 
                                             %163 = OpTypePointer Output %162 
                               Output f32_2* %164 = OpVariable Output 
                                Input f32_4* %165 = OpVariable Input 
                                         i32 %168 = OpConstant 4 
                                             %177 = OpTypeVector %6 3 
                                             %178 = OpTypePointer Input %177 
                                Input f32_3* %179 = OpVariable Input 
                                Private f32* %198 = OpVariable Private 
                                             %206 = OpTypePointer Output %177 
                               Output f32_3* %207 = OpVariable Output 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %216 = OpVariable Output 
                                             %218 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %81 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %76 = OpAccessChain %23 %54 
                                          f32 %77 = OpLoad %76 
                                         bool %78 = OpFOrdLessThan %75 %77 
                                                      OpStore %74 %78 
                                         bool %82 = OpLoad %74 
                                                      OpSelectionMerge %84 None 
                                                      OpBranchConditional %82 %83 %86 
                                              %83 = OpLabel 
                                                      OpStore %81 %85 
                                                      OpBranch %84 
                                              %86 = OpLabel 
                                                      OpStore %81 %87 
                                                      OpBranch %84 
                                              %84 = OpLabel 
                                          f32 %88 = OpLoad %81 
                                                      OpStore %79 %88 
                                 Private f32* %89 = OpAccessChain %9 %31 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpLoad %79 
                                          f32 %92 = OpFMul %90 %91 
                                   Input f32* %93 = OpAccessChain %11 %46 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %31 
                                                      OpStore %96 %95 
                                        f32_4 %98 = OpLoad %11 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %23 %25 %26 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                              Uniform f32_4* %104 = OpAccessChain %23 %25 %25 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %11 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %97 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %97 %110 
                              Uniform f32_4* %111 = OpAccessChain %23 %25 %43 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 0 0 0 0 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %97 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %23 %25 %54 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %97 %121 
                              Uniform f32_4* %122 = OpAccessChain %23 %25 %54 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %11 
                                       f32_4 %125 = OpVectorShuffle %124 %124 3 3 3 3 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %9 %128 
                                       f32_4 %130 = OpLoad %97 
                                       f32_4 %131 = OpVectorShuffle %130 %130 1 1 1 1 
                              Uniform f32_4* %132 = OpAccessChain %23 %43 %26 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpFMul %131 %133 
                                                      OpStore %129 %134 
                              Uniform f32_4* %135 = OpAccessChain %23 %43 %25 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %97 
                                       f32_4 %138 = OpVectorShuffle %137 %137 0 0 0 0 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %129 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %129 %141 
                              Uniform f32_4* %142 = OpAccessChain %23 %43 %43 
                                       f32_4 %143 = OpLoad %142 
                                       f32_4 %144 = OpLoad %97 
                                       f32_4 %145 = OpVectorShuffle %144 %144 2 2 2 2 
                                       f32_4 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %129 
                                       f32_4 %148 = OpFAdd %146 %147 
                                                      OpStore %129 %148 
                              Uniform f32_4* %153 = OpAccessChain %23 %43 %54 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpLoad %97 
                                       f32_4 %156 = OpVectorShuffle %155 %155 3 3 3 3 
                                       f32_4 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %129 
                                       f32_4 %159 = OpFAdd %157 %158 
                               Output f32_4* %161 = OpAccessChain %152 %25 
                                                      OpStore %161 %159 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                              Uniform f32_4* %169 = OpAccessChain %23 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                                       f32_2 %172 = OpFMul %167 %171 
                              Uniform f32_4* %173 = OpAccessChain %23 %168 
                                       f32_4 %174 = OpLoad %173 
                                       f32_2 %175 = OpVectorShuffle %174 %174 2 3 
                                       f32_2 %176 = OpFAdd %172 %175 
                                                      OpStore %164 %176 
                                       f32_3 %180 = OpLoad %179 
                              Uniform f32_4* %181 = OpAccessChain %23 %26 %25 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %180 %183 
                                Private f32* %185 = OpAccessChain %97 %31 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %179 
                              Uniform f32_4* %187 = OpAccessChain %23 %26 %26 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %186 %189 
                                Private f32* %191 = OpAccessChain %97 %13 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %179 
                              Uniform f32_4* %193 = OpAccessChain %23 %26 %43 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %97 %46 
                                                      OpStore %197 %196 
                                       f32_4 %199 = OpLoad %97 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %97 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                         f32 %203 = OpDot %200 %202 
                                                      OpStore %198 %203 
                                         f32 %204 = OpLoad %198 
                                         f32 %205 = OpExtInst %1 32 %204 
                                                      OpStore %198 %205 
                                         f32 %208 = OpLoad %198 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %97 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                                      OpStore %207 %212 
                                       f32_4 %214 = OpLoad %9 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                                      OpStore %213 %215 
                                       f32_4 %217 = OpLoad %9 
                                                      OpStore %216 %217 
                                 Output f32* %219 = OpAccessChain %152 %25 %13 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFNegate %220 
                                 Output f32* %222 = OpAccessChain %152 %25 %13 
                                                      OpStore %222 %221 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 243
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %62 %231 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 RelaxedPrecision 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %62 Location 62 
                                                      OpDecorate %105 SpecId 105 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %210 DescriptorSet 210 
                                                      OpDecorate %210 Binding 210 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %231 Location 231 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 7 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                                              %59 = OpTypePointer Private %28 
                               Private f32_3* %60 = OpVariable Private 
                                              %61 = OpTypePointer Input %28 
                                 Input f32_3* %62 = OpVariable Input 
                                          i32 %65 = OpConstant 6 
                                              %66 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %89 = OpConstant 3 
                                Private bool* %94 = OpVariable Private 
                                          f32 %97 = OpConstant 3.674022E-40 
                                         bool %99 = OpConstantFalse 
                                        bool %105 = OpSpecConstantFalse 
                                         u32 %108 = OpConstant 1 
                              Private f32_3* %112 = OpVariable Private 
                                             %140 = OpTypePointer Function %28 
                                         i32 %150 = OpConstant 4 
                                             %151 = OpTypePointer Uniform %28 
                              Private f32_4* %156 = OpVariable Private 
                                Private f32* %163 = OpVariable Private 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         f32 %168 = OpConstant 3.674022E-40 
                                         u32 %170 = OpConstant 2 
                                         f32 %173 = OpConstant 3.674022E-40 
                                             %182 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %183 = OpTypeSampledImage %182 
                                             %184 = OpTypePointer UniformConstant %183 
 UniformConstant read_only Texture3DSampled* %185 = OpVariable UniformConstant 
                              Private f32_3* %196 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %210 = OpVariable UniformConstant 
                                         i32 %225 = OpConstant 5 
                                             %230 = OpTypePointer Output %7 
                               Output f32_4* %231 = OpVariable Output 
                                             %240 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %141 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 1 1 1 
                               Uniform f32_4* %67 = OpAccessChain %32 %65 %51 
                                        f32_4 %68 = OpLoad %67 
                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
                                        f32_3 %70 = OpFMul %64 %69 
                                                      OpStore %60 %70 
                               Uniform f32_4* %71 = OpAccessChain %32 %65 %50 
                                        f32_4 %72 = OpLoad %71 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpLoad %62 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_3 %77 = OpLoad %60 
                                        f32_3 %78 = OpFAdd %76 %77 
                                                      OpStore %60 %78 
                               Uniform f32_4* %80 = OpAccessChain %32 %65 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpLoad %62 
                                        f32_3 %84 = OpVectorShuffle %83 %83 2 2 2 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_3 %86 = OpLoad %60 
                                        f32_3 %87 = OpFAdd %85 %86 
                                                      OpStore %60 %87 
                                        f32_3 %88 = OpLoad %60 
                               Uniform f32_4* %90 = OpAccessChain %32 %65 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %88 %92 
                                                      OpStore %60 %93 
                                 Uniform f32* %95 = OpAccessChain %32 %51 %40 
                                          f32 %96 = OpLoad %95 
                                         bool %98 = OpFOrdEqual %96 %97 
                                                      OpStore %94 %98 
                                                      OpSelectionMerge %101 None 
                                                      OpBranchConditional %99 %100 %101 
                                             %100 = OpLabel 
                                        bool %102 = OpLoad %94 
                                                      OpSelectionMerge %104 None 
                                                      OpBranchConditional %102 %103 %104 
                                             %103 = OpLabel 
                                                      OpBranch %104 
                                             %104 = OpLabel 
                                                      OpBranch %101 
                                             %101 = OpLabel 
                                                      OpSelectionMerge %107 None 
                                                      OpBranchConditional %105 %106 %191 
                                             %106 = OpLabel 
                                Uniform f32* %109 = OpAccessChain %32 %51 %108 
                                         f32 %110 = OpLoad %109 
                                        bool %111 = OpFOrdEqual %110 %97 
                                                      OpStore %94 %111 
                                       f32_3 %113 = OpLoad %62 
                                       f32_3 %114 = OpVectorShuffle %113 %113 1 1 1 
                              Uniform f32_4* %115 = OpAccessChain %32 %79 %51 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFMul %114 %117 
                                                      OpStore %112 %118 
                              Uniform f32_4* %119 = OpAccessChain %32 %79 %50 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpLoad %62 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 0 0 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_3 %125 = OpLoad %112 
                                       f32_3 %126 = OpFAdd %124 %125 
                                                      OpStore %112 %126 
                              Uniform f32_4* %127 = OpAccessChain %32 %79 %79 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpLoad %62 
                                       f32_3 %131 = OpVectorShuffle %130 %130 2 2 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_3 %133 = OpLoad %112 
                                       f32_3 %134 = OpFAdd %132 %133 
                                                      OpStore %112 %134 
                                       f32_3 %135 = OpLoad %112 
                              Uniform f32_4* %136 = OpAccessChain %32 %79 %89 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFAdd %135 %138 
                                                      OpStore %112 %139 
                                        bool %142 = OpLoad %94 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %146 
                                             %143 = OpLabel 
                                       f32_3 %145 = OpLoad %112 
                                                      OpStore %141 %145 
                                                      OpBranch %144 
                                             %146 = OpLabel 
                                       f32_3 %147 = OpLoad %62 
                                                      OpStore %141 %147 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_3 %148 = OpLoad %141 
                                                      OpStore %112 %148 
                                       f32_3 %149 = OpLoad %112 
                              Uniform f32_3* %152 = OpAccessChain %32 %150 
                                       f32_3 %153 = OpLoad %152 
                                       f32_3 %154 = OpFNegate %153 
                                       f32_3 %155 = OpFAdd %149 %154 
                                                      OpStore %112 %155 
                                       f32_3 %157 = OpLoad %112 
                              Uniform f32_3* %158 = OpAccessChain %32 %89 
                                       f32_3 %159 = OpLoad %158 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %156 
                                       f32_4 %162 = OpVectorShuffle %161 %160 0 4 5 6 
                                                      OpStore %156 %162 
                                Private f32* %164 = OpAccessChain %156 %108 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFMul %165 %166 
                                         f32 %169 = OpFAdd %167 %168 
                                                      OpStore %163 %169 
                                Uniform f32* %171 = OpAccessChain %32 %51 %170 
                                         f32 %172 = OpLoad %171 
                                         f32 %174 = OpFMul %172 %173 
                                         f32 %175 = OpFAdd %174 %168 
                                Private f32* %176 = OpAccessChain %112 %40 
                                                      OpStore %176 %175 
                                         f32 %177 = OpLoad %163 
                                Private f32* %178 = OpAccessChain %112 %40 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpExtInst %1 40 %177 %179 
                                Private f32* %181 = OpAccessChain %156 %40 
                                                      OpStore %181 %180 
                  read_only Texture3DSampled %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %156 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 2 3 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                                      OpStore %156 %189 
                                       f32_4 %190 = OpLoad %156 
                                                      OpStore %20 %190 
                                                      OpBranch %107 
                                             %191 = OpLabel 
                                Private f32* %192 = OpAccessChain %20 %40 
                                                      OpStore %192 %97 
                                Private f32* %193 = OpAccessChain %20 %108 
                                                      OpStore %193 %97 
                                Private f32* %194 = OpAccessChain %20 %170 
                                                      OpStore %194 %97 
                                Private f32* %195 = OpAccessChain %20 %22 
                                                      OpStore %195 %97 
                                                      OpBranch %107 
                                             %107 = OpLabel 
                                       f32_4 %197 = OpLoad %20 
                              Uniform f32_4* %198 = OpAccessChain %32 %50 
                                       f32_4 %199 = OpLoad %198 
                                         f32 %200 = OpDot %197 %199 
                                Private f32* %201 = OpAccessChain %196 %40 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %196 %40 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpExtInst %1 43 %203 %47 %97 
                                Private f32* %205 = OpAccessChain %196 %40 
                                                      OpStore %205 %204 
                                       f32_3 %206 = OpLoad %60 
                                       f32_3 %207 = OpLoad %60 
                                         f32 %208 = OpDot %206 %207 
                                Private f32* %209 = OpAccessChain %60 %40 
                                                      OpStore %209 %208 
                  read_only Texture2DSampled %211 = OpLoad %210 
                                       f32_3 %212 = OpLoad %60 
                                       f32_2 %213 = OpVectorShuffle %212 %212 0 0 
                                       f32_4 %214 = OpImageSampleImplicitLod %211 %213 
                                         f32 %215 = OpCompositeExtract %214 3 
                                Private f32* %216 = OpAccessChain %60 %40 
                                                      OpStore %216 %215 
                                Private f32* %217 = OpAccessChain %196 %40 
                                         f32 %218 = OpLoad %217 
                                Private f32* %219 = OpAccessChain %60 %40 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFMul %218 %220 
                                Private f32* %222 = OpAccessChain %60 %40 
                                                      OpStore %222 %221 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                              Uniform f32_4* %226 = OpAccessChain %32 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %224 %228 
                                                      OpStore %196 %229 
                                       f32_3 %232 = OpLoad %60 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 0 0 
                                       f32_3 %234 = OpLoad %196 
                                       f32_3 %235 = OpFMul %233 %234 
                                       f32_4 %236 = OpLoad %231 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                                      OpStore %231 %237 
                                Private f32* %238 = OpAccessChain %9 %22 
                                         f32 %239 = OpLoad %238 
                                 Output f32* %241 = OpAccessChain %231 %22 
                                                      OpStore %241 %239 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
float u_xlat10;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb3 = 0.0<_Perpendicular;
    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat3 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat2;
vec3 u_xlat4;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat4.x, u_xlat2);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %152 %164 %165 %179 %207 %213 %216 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %150 0 BuiltIn 150 
                                                      OpMemberDecorate %150 1 BuiltIn 150 
                                                      OpMemberDecorate %150 2 BuiltIn 150 
                                                      OpDecorate %150 Block 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %216 Location 216 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %79 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                               Private f32_4* %97 = OpVariable Private 
                                             %100 = OpTypePointer Uniform %7 
                              Private f32_4* %129 = OpVariable Private 
                                             %149 = OpTypeArray %6 %13 
                                             %150 = OpTypeStruct %7 %6 %149 
                                             %151 = OpTypePointer Output %150 
        Output struct {f32_4; f32; f32[1];}* %152 = OpVariable Output 
                                             %160 = OpTypePointer Output %7 
                                             %162 = OpTypeVector %6 2 
                                             %163 = OpTypePointer Output %162 
                               Output f32_2* %164 = OpVariable Output 
                                Input f32_4* %165 = OpVariable Input 
                                         i32 %168 = OpConstant 4 
                                             %177 = OpTypeVector %6 3 
                                             %178 = OpTypePointer Input %177 
                                Input f32_3* %179 = OpVariable Input 
                                Private f32* %198 = OpVariable Private 
                                             %206 = OpTypePointer Output %177 
                               Output f32_3* %207 = OpVariable Output 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %216 = OpVariable Output 
                                             %218 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %81 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %76 = OpAccessChain %23 %54 
                                          f32 %77 = OpLoad %76 
                                         bool %78 = OpFOrdLessThan %75 %77 
                                                      OpStore %74 %78 
                                         bool %82 = OpLoad %74 
                                                      OpSelectionMerge %84 None 
                                                      OpBranchConditional %82 %83 %86 
                                              %83 = OpLabel 
                                                      OpStore %81 %85 
                                                      OpBranch %84 
                                              %86 = OpLabel 
                                                      OpStore %81 %87 
                                                      OpBranch %84 
                                              %84 = OpLabel 
                                          f32 %88 = OpLoad %81 
                                                      OpStore %79 %88 
                                 Private f32* %89 = OpAccessChain %9 %31 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpLoad %79 
                                          f32 %92 = OpFMul %90 %91 
                                   Input f32* %93 = OpAccessChain %11 %46 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %31 
                                                      OpStore %96 %95 
                                        f32_4 %98 = OpLoad %11 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %23 %25 %26 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                              Uniform f32_4* %104 = OpAccessChain %23 %25 %25 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %11 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %97 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %97 %110 
                              Uniform f32_4* %111 = OpAccessChain %23 %25 %43 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 0 0 0 0 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %97 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %23 %25 %54 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %97 %121 
                              Uniform f32_4* %122 = OpAccessChain %23 %25 %54 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %11 
                                       f32_4 %125 = OpVectorShuffle %124 %124 3 3 3 3 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %9 %128 
                                       f32_4 %130 = OpLoad %97 
                                       f32_4 %131 = OpVectorShuffle %130 %130 1 1 1 1 
                              Uniform f32_4* %132 = OpAccessChain %23 %43 %26 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpFMul %131 %133 
                                                      OpStore %129 %134 
                              Uniform f32_4* %135 = OpAccessChain %23 %43 %25 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %97 
                                       f32_4 %138 = OpVectorShuffle %137 %137 0 0 0 0 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %129 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %129 %141 
                              Uniform f32_4* %142 = OpAccessChain %23 %43 %43 
                                       f32_4 %143 = OpLoad %142 
                                       f32_4 %144 = OpLoad %97 
                                       f32_4 %145 = OpVectorShuffle %144 %144 2 2 2 2 
                                       f32_4 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %129 
                                       f32_4 %148 = OpFAdd %146 %147 
                                                      OpStore %129 %148 
                              Uniform f32_4* %153 = OpAccessChain %23 %43 %54 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpLoad %97 
                                       f32_4 %156 = OpVectorShuffle %155 %155 3 3 3 3 
                                       f32_4 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %129 
                                       f32_4 %159 = OpFAdd %157 %158 
                               Output f32_4* %161 = OpAccessChain %152 %25 
                                                      OpStore %161 %159 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                              Uniform f32_4* %169 = OpAccessChain %23 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                                       f32_2 %172 = OpFMul %167 %171 
                              Uniform f32_4* %173 = OpAccessChain %23 %168 
                                       f32_4 %174 = OpLoad %173 
                                       f32_2 %175 = OpVectorShuffle %174 %174 2 3 
                                       f32_2 %176 = OpFAdd %172 %175 
                                                      OpStore %164 %176 
                                       f32_3 %180 = OpLoad %179 
                              Uniform f32_4* %181 = OpAccessChain %23 %26 %25 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %180 %183 
                                Private f32* %185 = OpAccessChain %97 %31 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %179 
                              Uniform f32_4* %187 = OpAccessChain %23 %26 %26 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %186 %189 
                                Private f32* %191 = OpAccessChain %97 %13 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %179 
                              Uniform f32_4* %193 = OpAccessChain %23 %26 %43 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %97 %46 
                                                      OpStore %197 %196 
                                       f32_4 %199 = OpLoad %97 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %97 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                         f32 %203 = OpDot %200 %202 
                                                      OpStore %198 %203 
                                         f32 %204 = OpLoad %198 
                                         f32 %205 = OpExtInst %1 32 %204 
                                                      OpStore %198 %205 
                                         f32 %208 = OpLoad %198 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %97 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                                      OpStore %207 %212 
                                       f32_4 %214 = OpLoad %9 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                                      OpStore %213 %215 
                                       f32_4 %217 = OpLoad %9 
                                                      OpStore %216 %217 
                                 Output f32* %219 = OpAccessChain %152 %25 %13 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFNegate %220 
                                 Output f32* %222 = OpAccessChain %152 %25 %13 
                                                      OpStore %222 %221 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 195
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %78 %183 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpMemberDecorate %29 0 RelaxedPrecision 
                                                      OpMemberDecorate %29 0 Offset 29 
                                                      OpMemberDecorate %29 1 Offset 29 
                                                      OpMemberDecorate %29 2 Offset 29 
                                                      OpMemberDecorate %29 3 Offset 29 
                                                      OpMemberDecorate %29 4 Offset 29 
                                                      OpMemberDecorate %29 5 RelaxedPrecision 
                                                      OpMemberDecorate %29 5 Offset 29 
                                                      OpMemberDecorate %29 6 RelaxedPrecision 
                                                      OpMemberDecorate %29 6 Offset 29 
                                                      OpDecorate %29 Block 
                                                      OpDecorate %31 DescriptorSet 31 
                                                      OpDecorate %31 Binding 31 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %68 SpecId 68 
                                                      OpDecorate %78 Location 78 
                                                      OpDecorate %156 DescriptorSet 156 
                                                      OpDecorate %156 Binding 156 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeStruct %7 %7 %27 %28 %28 %7 %6 
                                              %30 = OpTypePointer Uniform %29 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32;}* %31 = OpVariable Uniform 
                                              %32 = OpTypeInt 32 1 
                                          i32 %33 = OpConstant 6 
                                              %34 = OpTypePointer Uniform %6 
                                          u32 %39 = OpConstant 0 
                                              %41 = OpTypeBool 
                                              %42 = OpTypePointer Private %41 
                                Private bool* %43 = OpVariable Private 
                                          f32 %46 = OpConstant 3.674022E-40 
                                          i32 %49 = OpConstant 0 
                                          i32 %50 = OpConstant 1 
                                          i32 %52 = OpConstant -1 
                                          f32 %60 = OpConstant 3.674022E-40 
                                         bool %62 = OpConstantFalse 
                                         bool %68 = OpSpecConstantFalse 
                                          u32 %71 = OpConstant 1 
                                              %75 = OpTypePointer Private %28 
                               Private f32_3* %76 = OpVariable Private 
                                              %77 = OpTypePointer Input %28 
                                 Input f32_3* %78 = OpVariable Input 
                                          i32 %81 = OpConstant 2 
                                              %82 = OpTypePointer Uniform %7 
                                         i32 %104 = OpConstant 3 
                              Private f32_3* %109 = OpVariable Private 
                                             %110 = OpTypePointer Function %28 
                                         i32 %120 = OpConstant 4 
                                             %121 = OpTypePointer Uniform %28 
                              Private f32_4* %126 = OpVariable Private 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         f32 %137 = OpConstant 3.674022E-40 
                                         u32 %140 = OpConstant 2 
                                         f32 %143 = OpConstant 3.674022E-40 
                                             %153 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %154 = OpTypeSampledImage %153 
                                             %155 = OpTypePointer UniformConstant %154 
 UniformConstant read_only Texture3DSampled* %156 = OpVariable UniformConstant 
                                Private f32* %167 = OpVariable Private 
                              Private f32_3* %174 = OpVariable Private 
                                         i32 %177 = OpConstant 5 
                                             %182 = OpTypePointer Output %7 
                               Output f32_4* %183 = OpVariable Output 
                                             %192 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %111 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %35 = OpAccessChain %31 %33 
                                          f32 %36 = OpLoad %35 
                                          f32 %37 = OpFNegate %36 
                                          f32 %38 = OpFAdd %25 %37 
                                 Private f32* %40 = OpAccessChain %20 %39 
                                                      OpStore %40 %38 
                                 Private f32* %44 = OpAccessChain %20 %39 
                                          f32 %45 = OpLoad %44 
                                         bool %47 = OpFOrdLessThan %45 %46 
                                                      OpStore %43 %47 
                                         bool %48 = OpLoad %43 
                                          i32 %51 = OpSelect %48 %50 %49 
                                          i32 %53 = OpIMul %51 %52 
                                         bool %54 = OpINotEqual %53 %49 
                                                      OpSelectionMerge %56 None 
                                                      OpBranchConditional %54 %55 %56 
                                              %55 = OpLabel 
                                                      OpKill
                                              %56 = OpLabel 
                                 Uniform f32* %58 = OpAccessChain %31 %50 %39 
                                          f32 %59 = OpLoad %58 
                                         bool %61 = OpFOrdEqual %59 %60 
                                                      OpStore %43 %61 
                                                      OpSelectionMerge %64 None 
                                                      OpBranchConditional %62 %63 %64 
                                              %63 = OpLabel 
                                         bool %65 = OpLoad %43 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpBranch %67 
                                              %67 = OpLabel 
                                                      OpBranch %64 
                                              %64 = OpLabel 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %162 
                                              %69 = OpLabel 
                                 Uniform f32* %72 = OpAccessChain %31 %50 %71 
                                          f32 %73 = OpLoad %72 
                                         bool %74 = OpFOrdEqual %73 %60 
                                                      OpStore %43 %74 
                                        f32_3 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %83 = OpAccessChain %31 %81 %50 
                                        f32_4 %84 = OpLoad %83 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 1 2 
                                        f32_3 %86 = OpFMul %80 %85 
                                                      OpStore %76 %86 
                               Uniform f32_4* %87 = OpAccessChain %31 %81 %49 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_3 %93 = OpLoad %76 
                                        f32_3 %94 = OpFAdd %92 %93 
                                                      OpStore %76 %94 
                               Uniform f32_4* %95 = OpAccessChain %31 %81 %81 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_3 %98 = OpLoad %78 
                                        f32_3 %99 = OpVectorShuffle %98 %98 2 2 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %76 
                                       f32_3 %102 = OpFAdd %100 %101 
                                                      OpStore %76 %102 
                                       f32_3 %103 = OpLoad %76 
                              Uniform f32_4* %105 = OpAccessChain %31 %81 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %103 %107 
                                                      OpStore %76 %108 
                                        bool %112 = OpLoad %43 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %116 
                                             %113 = OpLabel 
                                       f32_3 %115 = OpLoad %76 
                                                      OpStore %111 %115 
                                                      OpBranch %114 
                                             %116 = OpLabel 
                                       f32_3 %117 = OpLoad %78 
                                                      OpStore %111 %117 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                       f32_3 %118 = OpLoad %111 
                                                      OpStore %109 %118 
                                       f32_3 %119 = OpLoad %109 
                              Uniform f32_3* %122 = OpAccessChain %31 %120 
                                       f32_3 %123 = OpLoad %122 
                                       f32_3 %124 = OpFNegate %123 
                                       f32_3 %125 = OpFAdd %119 %124 
                                                      OpStore %109 %125 
                                       f32_3 %127 = OpLoad %109 
                              Uniform f32_3* %128 = OpAccessChain %31 %104 
                                       f32_3 %129 = OpLoad %128 
                                       f32_3 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %126 
                                       f32_4 %132 = OpVectorShuffle %131 %130 0 4 5 6 
                                                      OpStore %126 %132 
                                Private f32* %133 = OpAccessChain %126 %71 
                                         f32 %134 = OpLoad %133 
                                         f32 %136 = OpFMul %134 %135 
                                         f32 %138 = OpFAdd %136 %137 
                                Private f32* %139 = OpAccessChain %109 %39 
                                                      OpStore %139 %138 
                                Uniform f32* %141 = OpAccessChain %31 %50 %140 
                                         f32 %142 = OpLoad %141 
                                         f32 %144 = OpFMul %142 %143 
                                         f32 %145 = OpFAdd %144 %137 
                                Private f32* %146 = OpAccessChain %76 %39 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %76 %39 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %109 %39 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpExtInst %1 40 %148 %150 
                                Private f32* %152 = OpAccessChain %126 %39 
                                                      OpStore %152 %151 
                  read_only Texture3DSampled %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %126 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 2 3 
                                       f32_4 %160 = OpImageSampleImplicitLod %157 %159 
                                                      OpStore %126 %160 
                                       f32_4 %161 = OpLoad %126 
                                                      OpStore %20 %161 
                                                      OpBranch %70 
                                             %162 = OpLabel 
                                Private f32* %163 = OpAccessChain %20 %39 
                                                      OpStore %163 %60 
                                Private f32* %164 = OpAccessChain %20 %71 
                                                      OpStore %164 %60 
                                Private f32* %165 = OpAccessChain %20 %140 
                                                      OpStore %165 %60 
                                Private f32* %166 = OpAccessChain %20 %22 
                                                      OpStore %166 %60 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                       f32_4 %168 = OpLoad %20 
                              Uniform f32_4* %169 = OpAccessChain %31 %49 
                                       f32_4 %170 = OpLoad %169 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %167 %171 
                                         f32 %172 = OpLoad %167 
                                         f32 %173 = OpExtInst %1 43 %172 %46 %60 
                                                      OpStore %167 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                              Uniform f32_4* %178 = OpAccessChain %31 %177 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFMul %176 %180 
                                                      OpStore %174 %181 
                                         f32 %184 = OpLoad %167 
                                       f32_3 %185 = OpCompositeConstruct %184 %184 %184 
                                       f32_3 %186 = OpLoad %174 
                                       f32_3 %187 = OpFMul %185 %186 
                                       f32_4 %188 = OpLoad %183 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %183 %189 
                                Private f32* %190 = OpAccessChain %9 %22 
                                         f32 %191 = OpLoad %190 
                                 Output f32* %193 = OpAccessChain %183 %22 
                                                      OpStore %193 %191 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
float u_xlat10;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb3 = 0.0<_Perpendicular;
    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat3 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
float u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat10;
float u_xlat13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb2){
        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat6.x, u_xlat3);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlatb6 = 0.0<u_xlat1.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat10.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat10.xy);
    u_xlat13 = u_xlat6.x * u_xlat10_3.w;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat1.x = u_xlat13 * u_xlat10_3.w;
    u_xlat1.x = u_xlat2.x * u_xlat1.x;
    u_xlat0.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %152 %164 %165 %179 %207 %213 %216 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %150 0 BuiltIn 150 
                                                      OpMemberDecorate %150 1 BuiltIn 150 
                                                      OpMemberDecorate %150 2 BuiltIn 150 
                                                      OpDecorate %150 Block 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %216 Location 216 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %79 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                               Private f32_4* %97 = OpVariable Private 
                                             %100 = OpTypePointer Uniform %7 
                              Private f32_4* %129 = OpVariable Private 
                                             %149 = OpTypeArray %6 %13 
                                             %150 = OpTypeStruct %7 %6 %149 
                                             %151 = OpTypePointer Output %150 
        Output struct {f32_4; f32; f32[1];}* %152 = OpVariable Output 
                                             %160 = OpTypePointer Output %7 
                                             %162 = OpTypeVector %6 2 
                                             %163 = OpTypePointer Output %162 
                               Output f32_2* %164 = OpVariable Output 
                                Input f32_4* %165 = OpVariable Input 
                                         i32 %168 = OpConstant 4 
                                             %177 = OpTypeVector %6 3 
                                             %178 = OpTypePointer Input %177 
                                Input f32_3* %179 = OpVariable Input 
                                Private f32* %198 = OpVariable Private 
                                             %206 = OpTypePointer Output %177 
                               Output f32_3* %207 = OpVariable Output 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %216 = OpVariable Output 
                                             %218 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %81 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %76 = OpAccessChain %23 %54 
                                          f32 %77 = OpLoad %76 
                                         bool %78 = OpFOrdLessThan %75 %77 
                                                      OpStore %74 %78 
                                         bool %82 = OpLoad %74 
                                                      OpSelectionMerge %84 None 
                                                      OpBranchConditional %82 %83 %86 
                                              %83 = OpLabel 
                                                      OpStore %81 %85 
                                                      OpBranch %84 
                                              %86 = OpLabel 
                                                      OpStore %81 %87 
                                                      OpBranch %84 
                                              %84 = OpLabel 
                                          f32 %88 = OpLoad %81 
                                                      OpStore %79 %88 
                                 Private f32* %89 = OpAccessChain %9 %31 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpLoad %79 
                                          f32 %92 = OpFMul %90 %91 
                                   Input f32* %93 = OpAccessChain %11 %46 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %31 
                                                      OpStore %96 %95 
                                        f32_4 %98 = OpLoad %11 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %23 %25 %26 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                              Uniform f32_4* %104 = OpAccessChain %23 %25 %25 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %11 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %97 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %97 %110 
                              Uniform f32_4* %111 = OpAccessChain %23 %25 %43 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 0 0 0 0 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %97 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %23 %25 %54 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %97 %121 
                              Uniform f32_4* %122 = OpAccessChain %23 %25 %54 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %11 
                                       f32_4 %125 = OpVectorShuffle %124 %124 3 3 3 3 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %9 %128 
                                       f32_4 %130 = OpLoad %97 
                                       f32_4 %131 = OpVectorShuffle %130 %130 1 1 1 1 
                              Uniform f32_4* %132 = OpAccessChain %23 %43 %26 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpFMul %131 %133 
                                                      OpStore %129 %134 
                              Uniform f32_4* %135 = OpAccessChain %23 %43 %25 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %97 
                                       f32_4 %138 = OpVectorShuffle %137 %137 0 0 0 0 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %129 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %129 %141 
                              Uniform f32_4* %142 = OpAccessChain %23 %43 %43 
                                       f32_4 %143 = OpLoad %142 
                                       f32_4 %144 = OpLoad %97 
                                       f32_4 %145 = OpVectorShuffle %144 %144 2 2 2 2 
                                       f32_4 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %129 
                                       f32_4 %148 = OpFAdd %146 %147 
                                                      OpStore %129 %148 
                              Uniform f32_4* %153 = OpAccessChain %23 %43 %54 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpLoad %97 
                                       f32_4 %156 = OpVectorShuffle %155 %155 3 3 3 3 
                                       f32_4 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %129 
                                       f32_4 %159 = OpFAdd %157 %158 
                               Output f32_4* %161 = OpAccessChain %152 %25 
                                                      OpStore %161 %159 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                              Uniform f32_4* %169 = OpAccessChain %23 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                                       f32_2 %172 = OpFMul %167 %171 
                              Uniform f32_4* %173 = OpAccessChain %23 %168 
                                       f32_4 %174 = OpLoad %173 
                                       f32_2 %175 = OpVectorShuffle %174 %174 2 3 
                                       f32_2 %176 = OpFAdd %172 %175 
                                                      OpStore %164 %176 
                                       f32_3 %180 = OpLoad %179 
                              Uniform f32_4* %181 = OpAccessChain %23 %26 %25 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %180 %183 
                                Private f32* %185 = OpAccessChain %97 %31 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %179 
                              Uniform f32_4* %187 = OpAccessChain %23 %26 %26 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %186 %189 
                                Private f32* %191 = OpAccessChain %97 %13 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %179 
                              Uniform f32_4* %193 = OpAccessChain %23 %26 %43 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %97 %46 
                                                      OpStore %197 %196 
                                       f32_4 %199 = OpLoad %97 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %97 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                         f32 %203 = OpDot %200 %202 
                                                      OpStore %198 %203 
                                         f32 %204 = OpLoad %198 
                                         f32 %205 = OpExtInst %1 32 %204 
                                                      OpStore %198 %205 
                                         f32 %208 = OpLoad %198 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %97 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                                      OpStore %207 %212 
                                       f32_4 %214 = OpLoad %9 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                                      OpStore %213 %215 
                                       f32_4 %217 = OpLoad %9 
                                                      OpStore %216 %217 
                                 Output f32* %219 = OpAccessChain %152 %25 %13 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFNegate %220 
                                 Output f32* %222 = OpAccessChain %152 %25 %13 
                                                      OpStore %222 %221 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 282
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %58 %270 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 RelaxedPrecision 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %58 Location 58 
                                                      OpDecorate %97 SpecId 97 
                                                      OpDecorate %187 DescriptorSet 187 
                                                      OpDecorate %187 Binding 187 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %227 DescriptorSet 227 
                                                      OpDecorate %227 Binding 227 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %245 DescriptorSet 245 
                                                      OpDecorate %245 Binding 245 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %270 Location 270 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 3 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 7 
                                              %35 = OpTypePointer Uniform %6 
                                              %40 = OpTypeBool 
                                              %41 = OpTypePointer Private %40 
                                Private bool* %42 = OpVariable Private 
                                          f32 %44 = OpConstant 3.674022E-40 
                                          i32 %47 = OpConstant 0 
                                          i32 %48 = OpConstant 1 
                                          i32 %50 = OpConstant -1 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypePointer Input %28 
                                 Input f32_3* %58 = OpVariable Input 
                                          i32 %61 = OpConstant 6 
                                              %62 = OpTypePointer Uniform %7 
                                          i32 %73 = OpConstant 2 
                                          i32 %82 = OpConstant 3 
                                          u32 %86 = OpConstant 0 
                                          f32 %89 = OpConstant 3.674022E-40 
                                         bool %91 = OpConstantFalse 
                                         bool %97 = OpSpecConstantFalse 
                                         u32 %100 = OpConstant 1 
                                             %104 = OpTypePointer Private %28 
                              Private f32_3* %105 = OpVariable Private 
                              Private f32_4* %133 = OpVariable Private 
                                             %134 = OpTypePointer Function %28 
                                         i32 %147 = OpConstant 4 
                                             %148 = OpTypePointer Uniform %28 
                                         f32 %164 = OpConstant 3.674022E-40 
                                         f32 %166 = OpConstant 3.674022E-40 
                                             %169 = OpTypePointer Private %15 
                              Private f32_2* %170 = OpVariable Private 
                                         u32 %171 = OpConstant 2 
                                         f32 %174 = OpConstant 3.674022E-40 
                                             %184 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %185 = OpTypeSampledImage %184 
                                             %186 = OpTypePointer UniformConstant %185 
 UniformConstant read_only Texture3DSampled* %187 = OpVariable UniformConstant 
                              Private f32_4* %192 = OpVariable Private 
                                Private f32* %199 = OpVariable Private 
                               Private bool* %206 = OpVariable Private 
                              Private f32_3* %210 = OpVariable Private 
                                             %211 = OpTypePointer Function %6 
                                       f32_2 %225 = OpConstantComposite %174 %174 
 UniformConstant read_only Texture2DSampled* %227 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %245 = OpVariable UniformConstant 
                                         i32 %264 = OpConstant 5 
                                             %269 = OpTypePointer Output %7 
                               Output f32_4* %270 = OpVariable Output 
                                             %279 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %135 = OpVariable Function 
                               Function f32* %212 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %23 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                                      OpStore %21 %39 
                                          f32 %43 = OpLoad %21 
                                         bool %45 = OpFOrdLessThan %43 %44 
                                                      OpStore %42 %45 
                                         bool %46 = OpLoad %42 
                                          i32 %49 = OpSelect %46 %48 %47 
                                          i32 %51 = OpIMul %49 %50 
                                         bool %52 = OpINotEqual %51 %47 
                                                      OpSelectionMerge %54 None 
                                                      OpBranchConditional %52 %53 %54 
                                              %53 = OpLabel 
                                                      OpKill
                                              %54 = OpLabel 
                                        f32_3 %59 = OpLoad %58 
                                        f32_4 %60 = OpVectorShuffle %59 %59 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %32 %61 %48 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %60 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %32 %61 %47 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %58 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %74 = OpAccessChain %32 %61 %73 
                                        f32_4 %75 = OpLoad %74 
                                        f32_3 %76 = OpLoad %58 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %56 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %56 %80 
                                        f32_4 %81 = OpLoad %56 
                               Uniform f32_4* %83 = OpAccessChain %32 %61 %82 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpFAdd %81 %84 
                                                      OpStore %56 %85 
                                 Uniform f32* %87 = OpAccessChain %32 %48 %86 
                                          f32 %88 = OpLoad %87 
                                         bool %90 = OpFOrdEqual %88 %89 
                                                      OpStore %42 %90 
                                                      OpSelectionMerge %93 None 
                                                      OpBranchConditional %91 %92 %93 
                                              %92 = OpLabel 
                                         bool %94 = OpLoad %42 
                                                      OpSelectionMerge %96 None 
                                                      OpBranchConditional %94 %95 %96 
                                              %95 = OpLabel 
                                                      OpBranch %96 
                                              %96 = OpLabel 
                                                      OpBranch %93 
                                              %93 = OpLabel 
                                                      OpSelectionMerge %99 None 
                                                      OpBranchConditional %97 %98 %194 
                                              %98 = OpLabel 
                                Uniform f32* %101 = OpAccessChain %32 %48 %100 
                                         f32 %102 = OpLoad %101 
                                        bool %103 = OpFOrdEqual %102 %89 
                                                      OpStore %42 %103 
                                       f32_3 %106 = OpLoad %58 
                                       f32_3 %107 = OpVectorShuffle %106 %106 1 1 1 
                              Uniform f32_4* %108 = OpAccessChain %32 %73 %48 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFMul %107 %110 
                                                      OpStore %105 %111 
                              Uniform f32_4* %112 = OpAccessChain %32 %73 %47 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpLoad %58 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_3 %118 = OpLoad %105 
                                       f32_3 %119 = OpFAdd %117 %118 
                                                      OpStore %105 %119 
                              Uniform f32_4* %120 = OpAccessChain %32 %73 %73 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpLoad %58 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_3 %126 = OpLoad %105 
                                       f32_3 %127 = OpFAdd %125 %126 
                                                      OpStore %105 %127 
                                       f32_3 %128 = OpLoad %105 
                              Uniform f32_4* %129 = OpAccessChain %32 %73 %82 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFAdd %128 %131 
                                                      OpStore %105 %132 
                                        bool %136 = OpLoad %42 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %140 
                                             %137 = OpLabel 
                                       f32_3 %139 = OpLoad %105 
                                                      OpStore %135 %139 
                                                      OpBranch %138 
                                             %140 = OpLabel 
                                       f32_3 %141 = OpLoad %58 
                                                      OpStore %135 %141 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                       f32_3 %142 = OpLoad %135 
                                       f32_4 %143 = OpLoad %133 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %133 %144 
                                       f32_4 %145 = OpLoad %133 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                              Uniform f32_3* %149 = OpAccessChain %32 %147 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %146 %151 
                                       f32_4 %153 = OpLoad %133 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %133 %154 
                                       f32_4 %155 = OpLoad %133 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_3* %157 = OpAccessChain %32 %82 
                                       f32_3 %158 = OpLoad %157 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %133 
                                       f32_4 %161 = OpVectorShuffle %160 %159 0 4 5 6 
                                                      OpStore %133 %161 
                                Private f32* %162 = OpAccessChain %133 %100 
                                         f32 %163 = OpLoad %162 
                                         f32 %165 = OpFMul %163 %164 
                                         f32 %167 = OpFAdd %165 %166 
                                Private f32* %168 = OpAccessChain %105 %86 
                                                      OpStore %168 %167 
                                Uniform f32* %172 = OpAccessChain %32 %48 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %175 = OpFMul %173 %174 
                                         f32 %176 = OpFAdd %175 %166 
                                Private f32* %177 = OpAccessChain %170 %86 
                                                      OpStore %177 %176 
                                Private f32* %178 = OpAccessChain %105 %86 
                                         f32 %179 = OpLoad %178 
                                Private f32* %180 = OpAccessChain %170 %86 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpExtInst %1 40 %179 %181 
                                Private f32* %183 = OpAccessChain %133 %86 
                                                      OpStore %183 %182 
                  read_only Texture3DSampled %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %133 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 2 3 
                                       f32_4 %191 = OpImageSampleImplicitLod %188 %190 
                                                      OpStore %133 %191 
                                       f32_4 %193 = OpLoad %133 
                                                      OpStore %192 %193 
                                                      OpBranch %99 
                                             %194 = OpLabel 
                                Private f32* %195 = OpAccessChain %192 %86 
                                                      OpStore %195 %89 
                                Private f32* %196 = OpAccessChain %192 %100 
                                                      OpStore %196 %89 
                                Private f32* %197 = OpAccessChain %192 %171 
                                                      OpStore %197 %89 
                                Private f32* %198 = OpAccessChain %192 %23 
                                                      OpStore %198 %89 
                                                      OpBranch %99 
                                              %99 = OpLabel 
                                       f32_4 %200 = OpLoad %192 
                              Uniform f32_4* %201 = OpAccessChain %32 %47 
                                       f32_4 %202 = OpLoad %201 
                                         f32 %203 = OpDot %200 %202 
                                                      OpStore %199 %203 
                                         f32 %204 = OpLoad %199 
                                         f32 %205 = OpExtInst %1 43 %204 %44 %89 
                                                      OpStore %199 %205 
                                Private f32* %207 = OpAccessChain %56 %171 
                                         f32 %208 = OpLoad %207 
                                        bool %209 = OpFOrdLessThan %44 %208 
                                                      OpStore %206 %209 
                                        bool %213 = OpLoad %206 
                                                      OpSelectionMerge %215 None 
                                                      OpBranchConditional %213 %214 %216 
                                             %214 = OpLabel 
                                                      OpStore %212 %89 
                                                      OpBranch %215 
                                             %216 = OpLabel 
                                                      OpStore %212 %44 
                                                      OpBranch %215 
                                             %215 = OpLabel 
                                         f32 %217 = OpLoad %212 
                                Private f32* %218 = OpAccessChain %210 %86 
                                                      OpStore %218 %217 
                                       f32_4 %219 = OpLoad %56 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_4 %221 = OpLoad %56 
                                       f32_2 %222 = OpVectorShuffle %221 %221 3 3 
                                       f32_2 %223 = OpFDiv %220 %222 
                                                      OpStore %170 %223 
                                       f32_2 %224 = OpLoad %170 
                                       f32_2 %226 = OpFAdd %224 %225 
                                                      OpStore %170 %226 
                  read_only Texture2DSampled %228 = OpLoad %227 
                                       f32_2 %229 = OpLoad %170 
                                       f32_4 %230 = OpImageSampleImplicitLod %228 %229 
                                         f32 %231 = OpCompositeExtract %230 3 
                                Private f32* %232 = OpAccessChain %170 %86 
                                                      OpStore %232 %231 
                                Private f32* %233 = OpAccessChain %170 %86 
                                         f32 %234 = OpLoad %233 
                                Private f32* %235 = OpAccessChain %210 %86 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                Private f32* %238 = OpAccessChain %210 %86 
                                                      OpStore %238 %237 
                                       f32_4 %239 = OpLoad %56 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_4 %241 = OpLoad %56 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                         f32 %243 = OpDot %240 %242 
                                Private f32* %244 = OpAccessChain %170 %86 
                                                      OpStore %244 %243 
                  read_only Texture2DSampled %246 = OpLoad %245 
                                       f32_2 %247 = OpLoad %170 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 0 
                                       f32_4 %249 = OpImageSampleImplicitLod %246 %248 
                                         f32 %250 = OpCompositeExtract %249 3 
                                Private f32* %251 = OpAccessChain %170 %86 
                                                      OpStore %251 %250 
                                Private f32* %252 = OpAccessChain %170 %86 
                                         f32 %253 = OpLoad %252 
                                Private f32* %254 = OpAccessChain %210 %86 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %253 %255 
                                Private f32* %257 = OpAccessChain %210 %86 
                                                      OpStore %257 %256 
                                         f32 %258 = OpLoad %199 
                                Private f32* %259 = OpAccessChain %210 %86 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFMul %258 %260 
                                                      OpStore %199 %261 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                              Uniform f32_4* %265 = OpAccessChain %32 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %263 %267 
                                                      OpStore %210 %268 
                                         f32 %271 = OpLoad %199 
                                       f32_3 %272 = OpCompositeConstruct %271 %271 %271 
                                       f32_3 %273 = OpLoad %210 
                                       f32_3 %274 = OpFMul %272 %273 
                                       f32_4 %275 = OpLoad %270 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %270 %276 
                                Private f32* %277 = OpAccessChain %9 %23 
                                         f32 %278 = OpLoad %277 
                                 Output f32* %280 = OpAccessChain %270 %23 
                                                      OpStore %280 %278 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
float u_xlat10;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb3 = 0.0<_Perpendicular;
    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat3 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat10_3;
float u_xlat6;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb13){
        u_xlatb13 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb13)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat13 = u_xlat2.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat13 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat10_3 = texture(_LightTexture0, u_xlat1.xyz);
    u_xlat16_1 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %152 %164 %165 %179 %207 %213 %216 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %150 0 BuiltIn 150 
                                                      OpMemberDecorate %150 1 BuiltIn 150 
                                                      OpMemberDecorate %150 2 BuiltIn 150 
                                                      OpDecorate %150 Block 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %216 Location 216 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %79 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                               Private f32_4* %97 = OpVariable Private 
                                             %100 = OpTypePointer Uniform %7 
                              Private f32_4* %129 = OpVariable Private 
                                             %149 = OpTypeArray %6 %13 
                                             %150 = OpTypeStruct %7 %6 %149 
                                             %151 = OpTypePointer Output %150 
        Output struct {f32_4; f32; f32[1];}* %152 = OpVariable Output 
                                             %160 = OpTypePointer Output %7 
                                             %162 = OpTypeVector %6 2 
                                             %163 = OpTypePointer Output %162 
                               Output f32_2* %164 = OpVariable Output 
                                Input f32_4* %165 = OpVariable Input 
                                         i32 %168 = OpConstant 4 
                                             %177 = OpTypeVector %6 3 
                                             %178 = OpTypePointer Input %177 
                                Input f32_3* %179 = OpVariable Input 
                                Private f32* %198 = OpVariable Private 
                                             %206 = OpTypePointer Output %177 
                               Output f32_3* %207 = OpVariable Output 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %216 = OpVariable Output 
                                             %218 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %81 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %76 = OpAccessChain %23 %54 
                                          f32 %77 = OpLoad %76 
                                         bool %78 = OpFOrdLessThan %75 %77 
                                                      OpStore %74 %78 
                                         bool %82 = OpLoad %74 
                                                      OpSelectionMerge %84 None 
                                                      OpBranchConditional %82 %83 %86 
                                              %83 = OpLabel 
                                                      OpStore %81 %85 
                                                      OpBranch %84 
                                              %86 = OpLabel 
                                                      OpStore %81 %87 
                                                      OpBranch %84 
                                              %84 = OpLabel 
                                          f32 %88 = OpLoad %81 
                                                      OpStore %79 %88 
                                 Private f32* %89 = OpAccessChain %9 %31 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpLoad %79 
                                          f32 %92 = OpFMul %90 %91 
                                   Input f32* %93 = OpAccessChain %11 %46 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %31 
                                                      OpStore %96 %95 
                                        f32_4 %98 = OpLoad %11 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %23 %25 %26 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                              Uniform f32_4* %104 = OpAccessChain %23 %25 %25 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %11 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %97 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %97 %110 
                              Uniform f32_4* %111 = OpAccessChain %23 %25 %43 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 0 0 0 0 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %97 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %23 %25 %54 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %97 %121 
                              Uniform f32_4* %122 = OpAccessChain %23 %25 %54 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %11 
                                       f32_4 %125 = OpVectorShuffle %124 %124 3 3 3 3 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %9 %128 
                                       f32_4 %130 = OpLoad %97 
                                       f32_4 %131 = OpVectorShuffle %130 %130 1 1 1 1 
                              Uniform f32_4* %132 = OpAccessChain %23 %43 %26 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpFMul %131 %133 
                                                      OpStore %129 %134 
                              Uniform f32_4* %135 = OpAccessChain %23 %43 %25 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %97 
                                       f32_4 %138 = OpVectorShuffle %137 %137 0 0 0 0 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %129 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %129 %141 
                              Uniform f32_4* %142 = OpAccessChain %23 %43 %43 
                                       f32_4 %143 = OpLoad %142 
                                       f32_4 %144 = OpLoad %97 
                                       f32_4 %145 = OpVectorShuffle %144 %144 2 2 2 2 
                                       f32_4 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %129 
                                       f32_4 %148 = OpFAdd %146 %147 
                                                      OpStore %129 %148 
                              Uniform f32_4* %153 = OpAccessChain %23 %43 %54 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpLoad %97 
                                       f32_4 %156 = OpVectorShuffle %155 %155 3 3 3 3 
                                       f32_4 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %129 
                                       f32_4 %159 = OpFAdd %157 %158 
                               Output f32_4* %161 = OpAccessChain %152 %25 
                                                      OpStore %161 %159 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                              Uniform f32_4* %169 = OpAccessChain %23 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                                       f32_2 %172 = OpFMul %167 %171 
                              Uniform f32_4* %173 = OpAccessChain %23 %168 
                                       f32_4 %174 = OpLoad %173 
                                       f32_2 %175 = OpVectorShuffle %174 %174 2 3 
                                       f32_2 %176 = OpFAdd %172 %175 
                                                      OpStore %164 %176 
                                       f32_3 %180 = OpLoad %179 
                              Uniform f32_4* %181 = OpAccessChain %23 %26 %25 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %180 %183 
                                Private f32* %185 = OpAccessChain %97 %31 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %179 
                              Uniform f32_4* %187 = OpAccessChain %23 %26 %26 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %186 %189 
                                Private f32* %191 = OpAccessChain %97 %13 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %179 
                              Uniform f32_4* %193 = OpAccessChain %23 %26 %43 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %97 %46 
                                                      OpStore %197 %196 
                                       f32_4 %199 = OpLoad %97 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %97 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                         f32 %203 = OpDot %200 %202 
                                                      OpStore %198 %203 
                                         f32 %204 = OpLoad %198 
                                         f32 %205 = OpExtInst %1 32 %204 
                                                      OpStore %198 %205 
                                         f32 %208 = OpLoad %198 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %97 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                                      OpStore %207 %212 
                                       f32_4 %214 = OpLoad %9 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                                      OpStore %213 %215 
                                       f32_4 %217 = OpLoad %9 
                                                      OpStore %216 %217 
                                 Output f32* %219 = OpAccessChain %152 %25 %13 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFNegate %220 
                                 Output f32* %222 = OpAccessChain %152 %25 %13 
                                                      OpStore %222 %221 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 255
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %62 %243 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 RelaxedPrecision 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %62 Location 62 
                                                      OpDecorate %105 SpecId 105 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 DescriptorSet 209 
                                                      OpDecorate %209 Binding 209 
                                                      OpDecorate %218 DescriptorSet 218 
                                                      OpDecorate %218 Binding 218 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 7 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                                              %59 = OpTypePointer Private %28 
                               Private f32_3* %60 = OpVariable Private 
                                              %61 = OpTypePointer Input %28 
                                 Input f32_3* %62 = OpVariable Input 
                                          i32 %65 = OpConstant 6 
                                              %66 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %89 = OpConstant 3 
                                Private bool* %94 = OpVariable Private 
                                          f32 %97 = OpConstant 3.674022E-40 
                                         bool %99 = OpConstantFalse 
                                        bool %105 = OpSpecConstantFalse 
                                         u32 %108 = OpConstant 1 
                              Private f32_3* %112 = OpVariable Private 
                                             %140 = OpTypePointer Function %28 
                                         i32 %150 = OpConstant 4 
                                             %151 = OpTypePointer Uniform %28 
                              Private f32_4* %156 = OpVariable Private 
                                Private f32* %163 = OpVariable Private 
                                         f32 %166 = OpConstant 3.674022E-40 
                                         f32 %168 = OpConstant 3.674022E-40 
                                         u32 %170 = OpConstant 2 
                                         f32 %173 = OpConstant 3.674022E-40 
                                             %182 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %183 = OpTypeSampledImage %182 
                                             %184 = OpTypePointer UniformConstant %183 
 UniformConstant read_only Texture3DSampled* %185 = OpVariable UniformConstant 
                              Private f32_3* %196 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %209 = OpVariable UniformConstant 
                                             %215 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %216 = OpTypeSampledImage %215 
                                             %217 = OpTypePointer UniformConstant %216 
UniformConstant read_only TextureCubeSampled* %218 = OpVariable UniformConstant 
                                         i32 %237 = OpConstant 5 
                                             %242 = OpTypePointer Output %7 
                               Output f32_4* %243 = OpVariable Output 
                                             %252 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %141 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 1 1 1 
                               Uniform f32_4* %67 = OpAccessChain %32 %65 %51 
                                        f32_4 %68 = OpLoad %67 
                                        f32_3 %69 = OpVectorShuffle %68 %68 0 1 2 
                                        f32_3 %70 = OpFMul %64 %69 
                                                      OpStore %60 %70 
                               Uniform f32_4* %71 = OpAccessChain %32 %65 %50 
                                        f32_4 %72 = OpLoad %71 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpLoad %62 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_3 %77 = OpLoad %60 
                                        f32_3 %78 = OpFAdd %76 %77 
                                                      OpStore %60 %78 
                               Uniform f32_4* %80 = OpAccessChain %32 %65 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpLoad %62 
                                        f32_3 %84 = OpVectorShuffle %83 %83 2 2 2 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_3 %86 = OpLoad %60 
                                        f32_3 %87 = OpFAdd %85 %86 
                                                      OpStore %60 %87 
                                        f32_3 %88 = OpLoad %60 
                               Uniform f32_4* %90 = OpAccessChain %32 %65 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFAdd %88 %92 
                                                      OpStore %60 %93 
                                 Uniform f32* %95 = OpAccessChain %32 %51 %40 
                                          f32 %96 = OpLoad %95 
                                         bool %98 = OpFOrdEqual %96 %97 
                                                      OpStore %94 %98 
                                                      OpSelectionMerge %101 None 
                                                      OpBranchConditional %99 %100 %101 
                                             %100 = OpLabel 
                                        bool %102 = OpLoad %94 
                                                      OpSelectionMerge %104 None 
                                                      OpBranchConditional %102 %103 %104 
                                             %103 = OpLabel 
                                                      OpBranch %104 
                                             %104 = OpLabel 
                                                      OpBranch %101 
                                             %101 = OpLabel 
                                                      OpSelectionMerge %107 None 
                                                      OpBranchConditional %105 %106 %191 
                                             %106 = OpLabel 
                                Uniform f32* %109 = OpAccessChain %32 %51 %108 
                                         f32 %110 = OpLoad %109 
                                        bool %111 = OpFOrdEqual %110 %97 
                                                      OpStore %94 %111 
                                       f32_3 %113 = OpLoad %62 
                                       f32_3 %114 = OpVectorShuffle %113 %113 1 1 1 
                              Uniform f32_4* %115 = OpAccessChain %32 %79 %51 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFMul %114 %117 
                                                      OpStore %112 %118 
                              Uniform f32_4* %119 = OpAccessChain %32 %79 %50 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpLoad %62 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 0 0 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_3 %125 = OpLoad %112 
                                       f32_3 %126 = OpFAdd %124 %125 
                                                      OpStore %112 %126 
                              Uniform f32_4* %127 = OpAccessChain %32 %79 %79 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpLoad %62 
                                       f32_3 %131 = OpVectorShuffle %130 %130 2 2 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_3 %133 = OpLoad %112 
                                       f32_3 %134 = OpFAdd %132 %133 
                                                      OpStore %112 %134 
                                       f32_3 %135 = OpLoad %112 
                              Uniform f32_4* %136 = OpAccessChain %32 %79 %89 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFAdd %135 %138 
                                                      OpStore %112 %139 
                                        bool %142 = OpLoad %94 
                                                      OpSelectionMerge %144 None 
                                                      OpBranchConditional %142 %143 %146 
                                             %143 = OpLabel 
                                       f32_3 %145 = OpLoad %112 
                                                      OpStore %141 %145 
                                                      OpBranch %144 
                                             %146 = OpLabel 
                                       f32_3 %147 = OpLoad %62 
                                                      OpStore %141 %147 
                                                      OpBranch %144 
                                             %144 = OpLabel 
                                       f32_3 %148 = OpLoad %141 
                                                      OpStore %112 %148 
                                       f32_3 %149 = OpLoad %112 
                              Uniform f32_3* %152 = OpAccessChain %32 %150 
                                       f32_3 %153 = OpLoad %152 
                                       f32_3 %154 = OpFNegate %153 
                                       f32_3 %155 = OpFAdd %149 %154 
                                                      OpStore %112 %155 
                                       f32_3 %157 = OpLoad %112 
                              Uniform f32_3* %158 = OpAccessChain %32 %89 
                                       f32_3 %159 = OpLoad %158 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %156 
                                       f32_4 %162 = OpVectorShuffle %161 %160 0 4 5 6 
                                                      OpStore %156 %162 
                                Private f32* %164 = OpAccessChain %156 %108 
                                         f32 %165 = OpLoad %164 
                                         f32 %167 = OpFMul %165 %166 
                                         f32 %169 = OpFAdd %167 %168 
                                                      OpStore %163 %169 
                                Uniform f32* %171 = OpAccessChain %32 %51 %170 
                                         f32 %172 = OpLoad %171 
                                         f32 %174 = OpFMul %172 %173 
                                         f32 %175 = OpFAdd %174 %168 
                                Private f32* %176 = OpAccessChain %112 %40 
                                                      OpStore %176 %175 
                                         f32 %177 = OpLoad %163 
                                Private f32* %178 = OpAccessChain %112 %40 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpExtInst %1 40 %177 %179 
                                Private f32* %181 = OpAccessChain %156 %40 
                                                      OpStore %181 %180 
                  read_only Texture3DSampled %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %156 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 2 3 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                                      OpStore %156 %189 
                                       f32_4 %190 = OpLoad %156 
                                                      OpStore %20 %190 
                                                      OpBranch %107 
                                             %191 = OpLabel 
                                Private f32* %192 = OpAccessChain %20 %40 
                                                      OpStore %192 %97 
                                Private f32* %193 = OpAccessChain %20 %108 
                                                      OpStore %193 %97 
                                Private f32* %194 = OpAccessChain %20 %170 
                                                      OpStore %194 %97 
                                Private f32* %195 = OpAccessChain %20 %22 
                                                      OpStore %195 %97 
                                                      OpBranch %107 
                                             %107 = OpLabel 
                                       f32_4 %197 = OpLoad %20 
                              Uniform f32_4* %198 = OpAccessChain %32 %50 
                                       f32_4 %199 = OpLoad %198 
                                         f32 %200 = OpDot %197 %199 
                                Private f32* %201 = OpAccessChain %196 %40 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %196 %40 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpExtInst %1 43 %203 %47 %97 
                                Private f32* %205 = OpAccessChain %196 %40 
                                                      OpStore %205 %204 
                                       f32_3 %206 = OpLoad %60 
                                       f32_3 %207 = OpLoad %60 
                                         f32 %208 = OpDot %206 %207 
                                                      OpStore %163 %208 
                  read_only Texture2DSampled %210 = OpLoad %209 
                                         f32 %211 = OpLoad %163 
                                       f32_2 %212 = OpCompositeConstruct %211 %211 
                                       f32_4 %213 = OpImageSampleImplicitLod %210 %212 
                                         f32 %214 = OpCompositeExtract %213 3 
                                                      OpStore %163 %214 
                read_only TextureCubeSampled %219 = OpLoad %218 
                                       f32_3 %220 = OpLoad %60 
                                       f32_4 %221 = OpImageSampleImplicitLod %219 %220 
                                         f32 %222 = OpCompositeExtract %221 3 
                                Private f32* %223 = OpAccessChain %60 %40 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %60 %40 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpLoad %163 
                                         f32 %227 = OpFMul %225 %226 
                                Private f32* %228 = OpAccessChain %60 %40 
                                                      OpStore %228 %227 
                                Private f32* %229 = OpAccessChain %196 %40 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %60 %40 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %60 %40 
                                                      OpStore %234 %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                              Uniform f32_4* %238 = OpAccessChain %32 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                                      OpStore %196 %241 
                                       f32_3 %244 = OpLoad %60 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 0 0 
                                       f32_3 %246 = OpLoad %196 
                                       f32_3 %247 = OpFMul %245 %246 
                                       f32_4 %248 = OpLoad %243 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %243 %249 
                                Private f32* %250 = OpAccessChain %9 %22 
                                         f32 %251 = OpLoad %250 
                                 Output f32* %253 = OpAccessChain %243 %22 
                                                      OpStore %253 %251 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
float u_xlat10;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb3 = 0.0<_Perpendicular;
    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat3 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
float u_xlat7;
bool u_xlatb7;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w + (-_Cutoff);
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7 = u_xlat2.y * 0.25 + 0.75;
        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat1.x = u_xlat7 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat10_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz;
    SV_Target0.w = u_xlat10_0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %152 %164 %165 %179 %207 %213 %216 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %150 0 BuiltIn 150 
                                                      OpMemberDecorate %150 1 BuiltIn 150 
                                                      OpMemberDecorate %150 2 BuiltIn 150 
                                                      OpDecorate %150 Block 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %207 Location 207 
                                                      OpDecorate %213 Location 213 
                                                      OpDecorate %216 Location 216 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                 Private f32* %79 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          f32 %87 = OpConstant 3.674022E-40 
                               Private f32_4* %97 = OpVariable Private 
                                             %100 = OpTypePointer Uniform %7 
                              Private f32_4* %129 = OpVariable Private 
                                             %149 = OpTypeArray %6 %13 
                                             %150 = OpTypeStruct %7 %6 %149 
                                             %151 = OpTypePointer Output %150 
        Output struct {f32_4; f32; f32[1];}* %152 = OpVariable Output 
                                             %160 = OpTypePointer Output %7 
                                             %162 = OpTypeVector %6 2 
                                             %163 = OpTypePointer Output %162 
                               Output f32_2* %164 = OpVariable Output 
                                Input f32_4* %165 = OpVariable Input 
                                         i32 %168 = OpConstant 4 
                                             %177 = OpTypeVector %6 3 
                                             %178 = OpTypePointer Input %177 
                                Input f32_3* %179 = OpVariable Input 
                                Private f32* %198 = OpVariable Private 
                                             %206 = OpTypePointer Output %177 
                               Output f32_3* %207 = OpVariable Output 
                               Output f32_3* %213 = OpVariable Output 
                               Output f32_4* %216 = OpVariable Output 
                                             %218 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %81 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %76 = OpAccessChain %23 %54 
                                          f32 %77 = OpLoad %76 
                                         bool %78 = OpFOrdLessThan %75 %77 
                                                      OpStore %74 %78 
                                         bool %82 = OpLoad %74 
                                                      OpSelectionMerge %84 None 
                                                      OpBranchConditional %82 %83 %86 
                                              %83 = OpLabel 
                                                      OpStore %81 %85 
                                                      OpBranch %84 
                                              %86 = OpLabel 
                                                      OpStore %81 %87 
                                                      OpBranch %84 
                                              %84 = OpLabel 
                                          f32 %88 = OpLoad %81 
                                                      OpStore %79 %88 
                                 Private f32* %89 = OpAccessChain %9 %31 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpLoad %79 
                                          f32 %92 = OpFMul %90 %91 
                                   Input f32* %93 = OpAccessChain %11 %46 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %31 
                                                      OpStore %96 %95 
                                        f32_4 %98 = OpLoad %11 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %23 %25 %26 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %99 %102 
                                                      OpStore %97 %103 
                              Uniform f32_4* %104 = OpAccessChain %23 %25 %25 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %11 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %97 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %97 %110 
                              Uniform f32_4* %111 = OpAccessChain %23 %25 %43 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 0 0 0 0 
                                       f32_4 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %97 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %23 %25 %54 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %97 %121 
                              Uniform f32_4* %122 = OpAccessChain %23 %25 %54 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %11 
                                       f32_4 %125 = OpVectorShuffle %124 %124 3 3 3 3 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %9 %128 
                                       f32_4 %130 = OpLoad %97 
                                       f32_4 %131 = OpVectorShuffle %130 %130 1 1 1 1 
                              Uniform f32_4* %132 = OpAccessChain %23 %43 %26 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpFMul %131 %133 
                                                      OpStore %129 %134 
                              Uniform f32_4* %135 = OpAccessChain %23 %43 %25 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %97 
                                       f32_4 %138 = OpVectorShuffle %137 %137 0 0 0 0 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %129 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %129 %141 
                              Uniform f32_4* %142 = OpAccessChain %23 %43 %43 
                                       f32_4 %143 = OpLoad %142 
                                       f32_4 %144 = OpLoad %97 
                                       f32_4 %145 = OpVectorShuffle %144 %144 2 2 2 2 
                                       f32_4 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %129 
                                       f32_4 %148 = OpFAdd %146 %147 
                                                      OpStore %129 %148 
                              Uniform f32_4* %153 = OpAccessChain %23 %43 %54 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpLoad %97 
                                       f32_4 %156 = OpVectorShuffle %155 %155 3 3 3 3 
                                       f32_4 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %129 
                                       f32_4 %159 = OpFAdd %157 %158 
                               Output f32_4* %161 = OpAccessChain %152 %25 
                                                      OpStore %161 %159 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                              Uniform f32_4* %169 = OpAccessChain %23 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                                       f32_2 %172 = OpFMul %167 %171 
                              Uniform f32_4* %173 = OpAccessChain %23 %168 
                                       f32_4 %174 = OpLoad %173 
                                       f32_2 %175 = OpVectorShuffle %174 %174 2 3 
                                       f32_2 %176 = OpFAdd %172 %175 
                                                      OpStore %164 %176 
                                       f32_3 %180 = OpLoad %179 
                              Uniform f32_4* %181 = OpAccessChain %23 %26 %25 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %180 %183 
                                Private f32* %185 = OpAccessChain %97 %31 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %179 
                              Uniform f32_4* %187 = OpAccessChain %23 %26 %26 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %186 %189 
                                Private f32* %191 = OpAccessChain %97 %13 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %179 
                              Uniform f32_4* %193 = OpAccessChain %23 %26 %43 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %97 %46 
                                                      OpStore %197 %196 
                                       f32_4 %199 = OpLoad %97 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %97 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                         f32 %203 = OpDot %200 %202 
                                                      OpStore %198 %203 
                                         f32 %204 = OpLoad %198 
                                         f32 %205 = OpExtInst %1 32 %204 
                                                      OpStore %198 %205 
                                         f32 %208 = OpLoad %198 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %97 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                                      OpStore %207 %212 
                                       f32_4 %214 = OpLoad %9 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                                      OpStore %213 %215 
                                       f32_4 %217 = OpLoad %9 
                                                      OpStore %216 %217 
                                 Output f32* %219 = OpAccessChain %152 %25 %13 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFNegate %220 
                                 Output f32* %222 = OpAccessChain %152 %25 %13 
                                                      OpStore %222 %221 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 238
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %62 %226 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 ArrayStride 27 
                                                      OpDecorate %29 ArrayStride 29 
                                                      OpMemberDecorate %30 0 RelaxedPrecision 
                                                      OpMemberDecorate %30 0 Offset 30 
                                                      OpMemberDecorate %30 1 Offset 30 
                                                      OpMemberDecorate %30 2 Offset 30 
                                                      OpMemberDecorate %30 3 Offset 30 
                                                      OpMemberDecorate %30 4 Offset 30 
                                                      OpMemberDecorate %30 5 RelaxedPrecision 
                                                      OpMemberDecorate %30 5 Offset 30 
                                                      OpMemberDecorate %30 6 Offset 30 
                                                      OpMemberDecorate %30 7 RelaxedPrecision 
                                                      OpMemberDecorate %30 7 Offset 30 
                                                      OpDecorate %30 Block 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %37 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %62 Location 62 
                                                      OpDecorate %105 SpecId 105 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %206 DescriptorSet 206 
                                                      OpDecorate %206 Binding 206 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %226 Location 226 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                          u32 %26 = OpConstant 4 
                                              %27 = OpTypeArray %7 %26 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypeArray %7 %26 
                                              %30 = OpTypeStruct %7 %7 %27 %28 %28 %7 %29 %6 
                                              %31 = OpTypePointer Uniform %30 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32;}* %32 = OpVariable Uniform 
                                              %33 = OpTypeInt 32 1 
                                          i32 %34 = OpConstant 7 
                                              %35 = OpTypePointer Uniform %6 
                                          u32 %40 = OpConstant 0 
                                              %42 = OpTypeBool 
                                              %43 = OpTypePointer Private %42 
                                Private bool* %44 = OpVariable Private 
                                          f32 %47 = OpConstant 3.674022E-40 
                                          i32 %50 = OpConstant 0 
                                          i32 %51 = OpConstant 1 
                                          i32 %53 = OpConstant -1 
                                              %59 = OpTypePointer Private %15 
                               Private f32_2* %60 = OpVariable Private 
                                              %61 = OpTypePointer Input %28 
                                 Input f32_3* %62 = OpVariable Input 
                                          i32 %65 = OpConstant 6 
                                              %66 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %89 = OpConstant 3 
                                Private bool* %94 = OpVariable Private 
                                          f32 %97 = OpConstant 3.674022E-40 
                                         bool %99 = OpConstantFalse 
                                        bool %105 = OpSpecConstantFalse 
                                         u32 %108 = OpConstant 1 
                                             %112 = OpTypePointer Private %28 
                              Private f32_3* %113 = OpVariable Private 
                                             %141 = OpTypePointer Function %28 
                                         i32 %151 = OpConstant 4 
                                             %152 = OpTypePointer Uniform %28 
                              Private f32_4* %157 = OpVariable Private 
                                Private f32* %164 = OpVariable Private 
                                         f32 %167 = OpConstant 3.674022E-40 
                                         f32 %169 = OpConstant 3.674022E-40 
                                Private f32* %171 = OpVariable Private 
                                         u32 %172 = OpConstant 2 
                                         f32 %175 = OpConstant 3.674022E-40 
                                             %182 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %183 = OpTypeSampledImage %182 
                                             %184 = OpTypePointer UniformConstant %183 
 UniformConstant read_only Texture3DSampled* %185 = OpVariable UniformConstant 
                              Private f32_3* %196 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %206 = OpVariable UniformConstant 
                                         i32 %220 = OpConstant 5 
                                             %225 = OpTypePointer Output %7 
                               Output f32_4* %226 = OpVariable Output 
                                             %235 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %142 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %36 = OpAccessChain %32 %34 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFNegate %37 
                                          f32 %39 = OpFAdd %25 %38 
                                 Private f32* %41 = OpAccessChain %20 %40 
                                                      OpStore %41 %39 
                                 Private f32* %45 = OpAccessChain %20 %40 
                                          f32 %46 = OpLoad %45 
                                         bool %48 = OpFOrdLessThan %46 %47 
                                                      OpStore %44 %48 
                                         bool %49 = OpLoad %44 
                                          i32 %52 = OpSelect %49 %51 %50 
                                          i32 %54 = OpIMul %52 %53 
                                         bool %55 = OpINotEqual %54 %50 
                                                      OpSelectionMerge %57 None 
                                                      OpBranchConditional %55 %56 %57 
                                              %56 = OpLabel 
                                                      OpKill
                                              %57 = OpLabel 
                                        f32_3 %63 = OpLoad %62 
                                        f32_2 %64 = OpVectorShuffle %63 %63 1 1 
                               Uniform f32_4* %67 = OpAccessChain %32 %65 %51 
                                        f32_4 %68 = OpLoad %67 
                                        f32_2 %69 = OpVectorShuffle %68 %68 0 1 
                                        f32_2 %70 = OpFMul %64 %69 
                                                      OpStore %60 %70 
                               Uniform f32_4* %71 = OpAccessChain %32 %65 %50 
                                        f32_4 %72 = OpLoad %71 
                                        f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                                        f32_3 %74 = OpLoad %62 
                                        f32_2 %75 = OpVectorShuffle %74 %74 0 0 
                                        f32_2 %76 = OpFMul %73 %75 
                                        f32_2 %77 = OpLoad %60 
                                        f32_2 %78 = OpFAdd %76 %77 
                                                      OpStore %60 %78 
                               Uniform f32_4* %80 = OpAccessChain %32 %65 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                                        f32_3 %83 = OpLoad %62 
                                        f32_2 %84 = OpVectorShuffle %83 %83 2 2 
                                        f32_2 %85 = OpFMul %82 %84 
                                        f32_2 %86 = OpLoad %60 
                                        f32_2 %87 = OpFAdd %85 %86 
                                                      OpStore %60 %87 
                                        f32_2 %88 = OpLoad %60 
                               Uniform f32_4* %90 = OpAccessChain %32 %65 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_2 %92 = OpVectorShuffle %91 %91 0 1 
                                        f32_2 %93 = OpFAdd %88 %92 
                                                      OpStore %60 %93 
                                 Uniform f32* %95 = OpAccessChain %32 %51 %40 
                                          f32 %96 = OpLoad %95 
                                         bool %98 = OpFOrdEqual %96 %97 
                                                      OpStore %94 %98 
                                                      OpSelectionMerge %101 None 
                                                      OpBranchConditional %99 %100 %101 
                                             %100 = OpLabel 
                                        bool %102 = OpLoad %94 
                                                      OpSelectionMerge %104 None 
                                                      OpBranchConditional %102 %103 %104 
                                             %103 = OpLabel 
                                                      OpBranch %104 
                                             %104 = OpLabel 
                                                      OpBranch %101 
                                             %101 = OpLabel 
                                                      OpSelectionMerge %107 None 
                                                      OpBranchConditional %105 %106 %191 
                                             %106 = OpLabel 
                                Uniform f32* %109 = OpAccessChain %32 %51 %108 
                                         f32 %110 = OpLoad %109 
                                        bool %111 = OpFOrdEqual %110 %97 
                                                      OpStore %94 %111 
                                       f32_3 %114 = OpLoad %62 
                                       f32_3 %115 = OpVectorShuffle %114 %114 1 1 1 
                              Uniform f32_4* %116 = OpAccessChain %32 %79 %51 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFMul %115 %118 
                                                      OpStore %113 %119 
                              Uniform f32_4* %120 = OpAccessChain %32 %79 %50 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpLoad %62 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 0 0 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_3 %126 = OpLoad %113 
                                       f32_3 %127 = OpFAdd %125 %126 
                                                      OpStore %113 %127 
                              Uniform f32_4* %128 = OpAccessChain %32 %79 %79 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpLoad %62 
                                       f32_3 %132 = OpVectorShuffle %131 %131 2 2 2 
                                       f32_3 %133 = OpFMul %130 %132 
                                       f32_3 %134 = OpLoad %113 
                                       f32_3 %135 = OpFAdd %133 %134 
                                                      OpStore %113 %135 
                                       f32_3 %136 = OpLoad %113 
                              Uniform f32_4* %137 = OpAccessChain %32 %79 %89 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFAdd %136 %139 
                                                      OpStore %113 %140 
                                        bool %143 = OpLoad %94 
                                                      OpSelectionMerge %145 None 
                                                      OpBranchConditional %143 %144 %147 
                                             %144 = OpLabel 
                                       f32_3 %146 = OpLoad %113 
                                                      OpStore %142 %146 
                                                      OpBranch %145 
                                             %147 = OpLabel 
                                       f32_3 %148 = OpLoad %62 
                                                      OpStore %142 %148 
                                                      OpBranch %145 
                                             %145 = OpLabel 
                                       f32_3 %149 = OpLoad %142 
                                                      OpStore %113 %149 
                                       f32_3 %150 = OpLoad %113 
                              Uniform f32_3* %153 = OpAccessChain %32 %151 
                                       f32_3 %154 = OpLoad %153 
                                       f32_3 %155 = OpFNegate %154 
                                       f32_3 %156 = OpFAdd %150 %155 
                                                      OpStore %113 %156 
                                       f32_3 %158 = OpLoad %113 
                              Uniform f32_3* %159 = OpAccessChain %32 %89 
                                       f32_3 %160 = OpLoad %159 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %157 
                                       f32_4 %163 = OpVectorShuffle %162 %161 0 4 5 6 
                                                      OpStore %157 %163 
                                Private f32* %165 = OpAccessChain %157 %108 
                                         f32 %166 = OpLoad %165 
                                         f32 %168 = OpFMul %166 %167 
                                         f32 %170 = OpFAdd %168 %169 
                                                      OpStore %164 %170 
                                Uniform f32* %173 = OpAccessChain %32 %51 %172 
                                         f32 %174 = OpLoad %173 
                                         f32 %176 = OpFMul %174 %175 
                                         f32 %177 = OpFAdd %176 %169 
                                                      OpStore %171 %177 
                                         f32 %178 = OpLoad %171 
                                         f32 %179 = OpLoad %164 
                                         f32 %180 = OpExtInst %1 40 %178 %179 
                                Private f32* %181 = OpAccessChain %157 %40 
                                                      OpStore %181 %180 
                  read_only Texture3DSampled %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %157 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 2 3 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                                      OpStore %157 %189 
                                       f32_4 %190 = OpLoad %157 
                                                      OpStore %20 %190 
                                                      OpBranch %107 
                                             %191 = OpLabel 
                                Private f32* %192 = OpAccessChain %20 %40 
                                                      OpStore %192 %97 
                                Private f32* %193 = OpAccessChain %20 %108 
                                                      OpStore %193 %97 
                                Private f32* %194 = OpAccessChain %20 %172 
                                                      OpStore %194 %97 
                                Private f32* %195 = OpAccessChain %20 %22 
                                                      OpStore %195 %97 
                                                      OpBranch %107 
                                             %107 = OpLabel 
                                       f32_4 %197 = OpLoad %20 
                              Uniform f32_4* %198 = OpAccessChain %32 %50 
                                       f32_4 %199 = OpLoad %198 
                                         f32 %200 = OpDot %197 %199 
                                Private f32* %201 = OpAccessChain %196 %40 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %196 %40 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpExtInst %1 43 %203 %47 %97 
                                Private f32* %205 = OpAccessChain %196 %40 
                                                      OpStore %205 %204 
                  read_only Texture2DSampled %207 = OpLoad %206 
                                       f32_2 %208 = OpLoad %60 
                                       f32_4 %209 = OpImageSampleImplicitLod %207 %208 
                                         f32 %210 = OpCompositeExtract %209 3 
                                Private f32* %211 = OpAccessChain %60 %40 
                                                      OpStore %211 %210 
                                Private f32* %212 = OpAccessChain %196 %40 
                                         f32 %213 = OpLoad %212 
                                Private f32* %214 = OpAccessChain %60 %40 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %213 %215 
                                Private f32* %217 = OpAccessChain %60 %40 
                                                      OpStore %217 %216 
                                       f32_4 %218 = OpLoad %9 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                              Uniform f32_4* %221 = OpAccessChain %32 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFMul %219 %223 
                                                      OpStore %196 %224 
                                       f32_2 %227 = OpLoad %60 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
                                       f32_3 %229 = OpLoad %196 
                                       f32_3 %230 = OpFMul %228 %229 
                                       f32_4 %231 = OpLoad %226 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %226 %232 
                                Private f32* %233 = OpAccessChain %9 %22 
                                         f32 %234 = OpLoad %233 
                                 Output f32* %236 = OpAccessChain %226 %22 
                                                      OpStore %236 %234 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 165041
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	float _Perpendicular;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
bool u_xlatb9;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb3 = 0.0<_Perpendicular;
    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
    u_xlat0.z = u_xlat0.x * u_xlat3 + in_POSITION0.z;
    u_xlatb9 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb9 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xy = in_POSITION0.xy;
    u_xlat0.xyw = (unity_MetaVertexControl.x) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlatb1 = 0.0<u_xlat0.w;
    u_xlat1.z = u_xlatb1 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyw = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyw;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	float _EmissivePower;
uniform 	float _EmissiveColorPower;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat9 = u_xlat10_0.w + (-_Cutoff);
    u_xlat16_0.xyz = log2(u_xlat10_0.xyz);
    u_xlatb9 = u_xlat9<0.0;
    if((int(u_xlatb9) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(vec3(_EmissiveColorPower, _EmissiveColorPower, _EmissiveColorPower));
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmissivePower);
    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
    u_xlat1.xyz = (bool(u_xlatb9)) ? u_xlat1.xyz : u_xlat2.xyz;
    u_xlat9 = unity_OneOverOutputBoost;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat9);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.w = 1.0;
    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat1 : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 292
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %111 %161 %235 %246 %247 %278 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %111 Location 111 
                                                      OpDecorate %161 Location 161 
                                                      OpMemberDecorate %233 0 BuiltIn 233 
                                                      OpMemberDecorate %233 1 BuiltIn 233 
                                                      OpMemberDecorate %233 2 BuiltIn 233 
                                                      OpDecorate %233 Block 
                                                      OpDecorate %246 Location 246 
                                                      OpDecorate %247 Location 247 
                                                      OpDecorate %278 Location 278 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeVector %12 4 
                                              %21 = OpTypeStruct %18 %19 %7 %7 %6 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32; u32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          i32 %76 = OpConstant 4 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Function %6 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                                Private bool* %98 = OpVariable Private 
                              Private f32_4* %102 = OpVariable Private 
                                         f32 %107 = OpConstant 3.674022E-40 
                                Input f32_4* %111 = OpVariable Input 
                                             %112 = OpTypeVector %6 2 
                                             %115 = OpTypePointer Uniform %7 
                                             %130 = OpTypeVector %6 3 
                                             %131 = OpTypePointer Function %130 
                                         i32 %133 = OpConstant 5 
                                             %134 = OpTypeVector %72 4 
                                             %135 = OpTypePointer Uniform %20 
                               Private bool* %150 = OpVariable Private 
                                Input f32_4* %161 = OpVariable Input 
                              Private f32_4* %212 = OpVariable Private 
                                             %232 = OpTypeArray %6 %13 
                                             %233 = OpTypeStruct %7 %6 %232 
                                             %234 = OpTypePointer Output %233 
        Output struct {f32_4; f32; f32[1];}* %235 = OpVariable Output 
                                             %243 = OpTypePointer Output %7 
                                             %245 = OpTypePointer Output %112 
                               Output f32_2* %246 = OpVariable Output 
                                Input f32_4* %247 = OpVariable Input 
                                         i32 %250 = OpConstant 6 
                               Output f32_4* %278 = OpVariable Output 
                                             %286 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %82 = OpVariable Function 
                               Function f32* %103 = OpVariable Function 
                             Function f32_3* %132 = OpVariable Function 
                               Function f32* %154 = OpVariable Function 
                             Function f32_3* %174 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %77 = OpAccessChain %23 %76 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %75 %78 
                                                      OpStore %74 %79 
                                         bool %83 = OpLoad %74 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %87 
                                              %84 = OpLabel 
                                                      OpStore %82 %86 
                                                      OpBranch %85 
                                              %87 = OpLabel 
                                                      OpStore %82 %88 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %89 = OpLoad %82 
                                                      OpStore %80 %89 
                                 Private f32* %90 = OpAccessChain %9 %31 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpLoad %80 
                                          f32 %93 = OpFMul %91 %92 
                                   Input f32* %94 = OpAccessChain %11 %46 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %46 
                                                      OpStore %97 %96 
                                 Private f32* %99 = OpAccessChain %9 %46 
                                         f32 %100 = OpLoad %99 
                                        bool %101 = OpFOrdLessThan %75 %100 
                                                      OpStore %98 %101 
                                        bool %104 = OpLoad %98 
                                                      OpSelectionMerge %106 None 
                                                      OpBranchConditional %104 %105 %108 
                                             %105 = OpLabel 
                                                      OpStore %103 %107 
                                                      OpBranch %106 
                                             %108 = OpLabel 
                                                      OpStore %103 %75 
                                                      OpBranch %106 
                                             %106 = OpLabel 
                                         f32 %109 = OpLoad %103 
                                Private f32* %110 = OpAccessChain %102 %46 
                                                      OpStore %110 %109 
                                       f32_4 %113 = OpLoad %111 
                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                              Uniform f32_4* %116 = OpAccessChain %23 %43 
                                       f32_4 %117 = OpLoad %116 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                                       f32_2 %119 = OpFMul %114 %118 
                              Uniform f32_4* %120 = OpAccessChain %23 %43 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 3 
                                       f32_2 %123 = OpFAdd %119 %122 
                                       f32_4 %124 = OpLoad %102 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 2 3 
                                                      OpStore %102 %125 
                                       f32_4 %126 = OpLoad %11 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 2 3 
                                                      OpStore %9 %129 
                              Uniform u32_4* %136 = OpAccessChain %23 %133 
                                       u32_4 %137 = OpLoad %136 
                                         u32 %138 = OpCompositeExtract %137 0 
                                        bool %139 = OpINotEqual %138 %31 
                                                      OpSelectionMerge %141 None 
                                                      OpBranchConditional %139 %140 %144 
                                             %140 = OpLabel 
                                       f32_4 %142 = OpLoad %102 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                                      OpStore %132 %143 
                                                      OpBranch %141 
                                             %144 = OpLabel 
                                       f32_4 %145 = OpLoad %9 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %132 %146 
                                                      OpBranch %141 
                                             %141 = OpLabel 
                                       f32_3 %147 = OpLoad %132 
                                       f32_4 %148 = OpLoad %9 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 2 6 
                                                      OpStore %9 %149 
                                Private f32* %151 = OpAccessChain %9 %57 
                                         f32 %152 = OpLoad %151 
                                        bool %153 = OpFOrdLessThan %75 %152 
                                                      OpStore %150 %153 
                                        bool %155 = OpLoad %150 
                                                      OpSelectionMerge %157 None 
                                                      OpBranchConditional %155 %156 %158 
                                             %156 = OpLabel 
                                                      OpStore %154 %107 
                                                      OpBranch %157 
                                             %158 = OpLabel 
                                                      OpStore %154 %75 
                                                      OpBranch %157 
                                             %157 = OpLabel 
                                         f32 %159 = OpLoad %154 
                                Private f32* %160 = OpAccessChain %102 %46 
                                                      OpStore %160 %159 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
                              Uniform f32_4* %164 = OpAccessChain %23 %54 
                                       f32_4 %165 = OpLoad %164 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                       f32_2 %167 = OpFMul %163 %166 
                              Uniform f32_4* %168 = OpAccessChain %23 %54 
                                       f32_4 %169 = OpLoad %168 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_2 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %102 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %102 %173 
                              Uniform u32_4* %175 = OpAccessChain %23 %133 
                                       u32_4 %176 = OpLoad %175 
                                         u32 %177 = OpCompositeExtract %176 1 
                                        bool %178 = OpINotEqual %177 %31 
                                                      OpSelectionMerge %180 None 
                                                      OpBranchConditional %178 %179 %183 
                                             %179 = OpLabel 
                                       f32_4 %181 = OpLoad %102 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                                      OpStore %174 %182 
                                                      OpBranch %180 
                                             %183 = OpLabel 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 3 
                                                      OpStore %174 %185 
                                                      OpBranch %180 
                                             %180 = OpLabel 
                                       f32_3 %186 = OpLoad %174 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 2 6 
                                                      OpStore %9 %188 
                                       f32_4 %189 = OpLoad %9 
                                       f32_4 %190 = OpVectorShuffle %189 %189 1 1 1 1 
                              Uniform f32_4* %191 = OpAccessChain %23 %25 %26 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpFMul %190 %192 
                                                      OpStore %102 %193 
                              Uniform f32_4* %194 = OpAccessChain %23 %25 %25 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %196 0 0 0 0 
                                       f32_4 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %102 
                                       f32_4 %200 = OpFAdd %198 %199 
                                                      OpStore %102 %200 
                              Uniform f32_4* %201 = OpAccessChain %23 %25 %43 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %9 
                                       f32_4 %204 = OpVectorShuffle %203 %203 3 3 3 3 
                                       f32_4 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %102 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %102 %207 
                                       f32_4 %208 = OpLoad %102 
                              Uniform f32_4* %209 = OpAccessChain %23 %25 %54 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpFAdd %208 %210 
                                                      OpStore %102 %211 
                                       f32_4 %213 = OpLoad %102 
                                       f32_4 %214 = OpVectorShuffle %213 %213 1 1 1 1 
                              Uniform f32_4* %215 = OpAccessChain %23 %26 %26 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpFMul %214 %216 
                                                      OpStore %212 %217 
                              Uniform f32_4* %218 = OpAccessChain %23 %26 %25 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %102 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 0 0 0 
                                       f32_4 %222 = OpFMul %219 %221 
                                       f32_4 %223 = OpLoad %212 
                                       f32_4 %224 = OpFAdd %222 %223 
                                                      OpStore %212 %224 
                              Uniform f32_4* %225 = OpAccessChain %23 %26 %43 
                                       f32_4 %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %102 
                                       f32_4 %228 = OpVectorShuffle %227 %227 2 2 2 2 
                                       f32_4 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %212 
                                       f32_4 %231 = OpFAdd %229 %230 
                                                      OpStore %212 %231 
                              Uniform f32_4* %236 = OpAccessChain %23 %26 %54 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %102 
                                       f32_4 %239 = OpVectorShuffle %238 %238 3 3 3 3 
                                       f32_4 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %212 
                                       f32_4 %242 = OpFAdd %240 %241 
                               Output f32_4* %244 = OpAccessChain %235 %25 
                                                      OpStore %244 %242 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                              Uniform f32_4* %251 = OpAccessChain %23 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %254 = OpFMul %249 %253 
                              Uniform f32_4* %255 = OpAccessChain %23 %250 
                                       f32_4 %256 = OpLoad %255 
                                       f32_2 %257 = OpVectorShuffle %256 %256 2 3 
                                       f32_2 %258 = OpFAdd %254 %257 
                                                      OpStore %246 %258 
                                       f32_4 %259 = OpLoad %11 
                                       f32_4 %260 = OpVectorShuffle %259 %259 1 1 1 1 
                              Uniform f32_4* %261 = OpAccessChain %23 %25 %26 
                                       f32_4 %262 = OpLoad %261 
                                       f32_4 %263 = OpFMul %260 %262 
                                                      OpStore %102 %263 
                              Uniform f32_4* %264 = OpAccessChain %23 %25 %25 
                                       f32_4 %265 = OpLoad %264 
                                       f32_4 %266 = OpLoad %11 
                                       f32_4 %267 = OpVectorShuffle %266 %266 0 0 0 0 
                                       f32_4 %268 = OpFMul %265 %267 
                                       f32_4 %269 = OpLoad %102 
                                       f32_4 %270 = OpFAdd %268 %269 
                                                      OpStore %102 %270 
                              Uniform f32_4* %271 = OpAccessChain %23 %25 %43 
                                       f32_4 %272 = OpLoad %271 
                                       f32_4 %273 = OpLoad %9 
                                       f32_4 %274 = OpVectorShuffle %273 %273 2 2 2 2 
                                       f32_4 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %102 
                                       f32_4 %277 = OpFAdd %275 %276 
                                                      OpStore %9 %277 
                              Uniform f32_4* %279 = OpAccessChain %23 %25 %54 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %11 
                                       f32_4 %282 = OpVectorShuffle %281 %281 3 3 3 3 
                                       f32_4 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_4 %285 = OpFAdd %283 %284 
                                                      OpStore %278 %285 
                                 Output f32* %287 = OpAccessChain %235 %25 %13 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFNegate %288 
                                 Output f32* %290 = OpAccessChain %235 %25 %13 
                                                      OpStore %290 %289 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %179 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 RelaxedPrecision 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %73 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %179 Location 179 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 3 
                                              %23 = OpTypePointer Private %6 
                                              %26 = OpTypeVector %21 4 
                                              %27 = OpTypeStruct %6 %6 %26 %6 %6 %6 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32; f32; u32_4; f32; f32; f32; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 6 
                                              %32 = OpTypePointer Uniform %6 
                                          u32 %37 = OpConstant 0 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypeVector %6 3 
                                              %46 = OpTypeBool 
                                              %47 = OpTypePointer Private %46 
                                Private bool* %48 = OpVariable Private 
                                          f32 %51 = OpConstant 3.674022E-40 
                                          i32 %54 = OpConstant 0 
                                          i32 %55 = OpConstant 1 
                                          i32 %57 = OpConstant -1 
                                              %63 = OpTypePointer Private %40 
                               Private f32_3* %64 = OpVariable Private 
                               Private f32_3* %86 = OpVariable Private 
                                          f32 %88 = OpConstant 3.674022E-40 
                                        f32_3 %89 = OpConstantComposite %88 %88 %88 
                                          f32 %91 = OpConstant 3.674022E-40 
                                        f32_3 %92 = OpConstantComposite %91 %91 %91 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                                       f32_4 %103 = OpConstantComposite %51 %51 %51 %51 
                                         i32 %104 = OpConstant 5 
                                             %108 = OpTypeVector %46 4 
                                             %111 = OpTypePointer Function %40 
                                Private f32* %122 = OpVariable Private 
                                         i32 %123 = OpConstant 3 
                                         f32 %127 = OpConstant 3.674022E-40 
                              Private f32_3* %129 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                         i32 %152 = OpConstant 2 
                                             %153 = OpTypePointer Uniform %26 
                                       f32_3 %162 = OpConstantComposite %51 %51 %51 
                                             %166 = OpTypePointer Function %6 
                                             %178 = OpTypePointer Output %7 
                               Output f32_4* %179 = OpVariable Output 
                                             %180 = OpTypePointer Function %7 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %112 = OpVariable Function 
                             Function f32_3* %151 = OpVariable Function 
                               Function f32* %167 = OpVariable Function 
                             Function f32_4* %181 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %22 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %33 = OpAccessChain %29 %31 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFNegate %34 
                                          f32 %36 = OpFAdd %25 %35 
                                 Private f32* %38 = OpAccessChain %20 %37 
                                                      OpStore %38 %36 
                                        f32_4 %41 = OpLoad %9 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpExtInst %1 30 %42 
                                        f32_4 %44 = OpLoad %39 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 6 3 
                                                      OpStore %39 %45 
                                 Private f32* %49 = OpAccessChain %20 %37 
                                          f32 %50 = OpLoad %49 
                                         bool %52 = OpFOrdLessThan %50 %51 
                                                      OpStore %48 %52 
                                         bool %53 = OpLoad %48 
                                          i32 %56 = OpSelect %53 %55 %54 
                                          i32 %58 = OpIMul %56 %57 
                                         bool %59 = OpINotEqual %58 %54 
                                                      OpSelectionMerge %61 None 
                                                      OpBranchConditional %59 %60 %61 
                                              %60 = OpLabel 
                                                      OpKill
                                              %61 = OpLabel 
                                        f32_4 %65 = OpLoad %39 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                 Uniform f32* %67 = OpAccessChain %29 %55 
                                          f32 %68 = OpLoad %67 
                                 Uniform f32* %69 = OpAccessChain %29 %55 
                                          f32 %70 = OpLoad %69 
                                 Uniform f32* %71 = OpAccessChain %29 %55 
                                          f32 %72 = OpLoad %71 
                                        f32_3 %73 = OpCompositeConstruct %68 %70 %72 
                                          f32 %74 = OpCompositeExtract %73 0 
                                          f32 %75 = OpCompositeExtract %73 1 
                                          f32 %76 = OpCompositeExtract %73 2 
                                        f32_3 %77 = OpCompositeConstruct %74 %75 %76 
                                        f32_3 %78 = OpFMul %66 %77 
                                                      OpStore %64 %78 
                                        f32_3 %79 = OpLoad %64 
                                        f32_3 %80 = OpExtInst %1 29 %79 
                                                      OpStore %64 %80 
                                        f32_3 %81 = OpLoad %64 
                                 Uniform f32* %82 = OpAccessChain %29 %54 
                                          f32 %83 = OpLoad %82 
                                        f32_3 %84 = OpCompositeConstruct %83 %83 %83 
                                        f32_3 %85 = OpFMul %81 %84 
                                                      OpStore %64 %85 
                                        f32_3 %87 = OpLoad %64 
                                        f32_3 %90 = OpFMul %87 %89 
                                        f32_3 %93 = OpFAdd %90 %92 
                                                      OpStore %86 %93 
                                        f32_3 %94 = OpLoad %64 
                                        f32_3 %95 = OpLoad %86 
                                        f32_3 %96 = OpFMul %94 %95 
                                        f32_3 %99 = OpFAdd %96 %98 
                                                      OpStore %86 %99 
                                       f32_3 %100 = OpLoad %64 
                                       f32_3 %101 = OpLoad %86 
                                       f32_3 %102 = OpFMul %100 %101 
                                                      OpStore %86 %102 
                                Uniform f32* %105 = OpAccessChain %29 %104 
                                         f32 %106 = OpLoad %105 
                                       f32_4 %107 = OpCompositeConstruct %106 %106 %106 %106 
                                      bool_4 %109 = OpFOrdNotEqual %103 %107 
                                        bool %110 = OpAny %109 
                                                      OpStore %48 %110 
                                        bool %113 = OpLoad %48 
                                                      OpSelectionMerge %115 None 
                                                      OpBranchConditional %113 %114 %117 
                                             %114 = OpLabel 
                                       f32_3 %116 = OpLoad %64 
                                                      OpStore %112 %116 
                                                      OpBranch %115 
                                             %117 = OpLabel 
                                       f32_3 %118 = OpLoad %86 
                                                      OpStore %112 %118 
                                                      OpBranch %115 
                                             %115 = OpLabel 
                                       f32_3 %119 = OpLoad %112 
                                       f32_4 %120 = OpLoad %20 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %20 %121 
                                Uniform f32* %124 = OpAccessChain %29 %123 
                                         f32 %125 = OpLoad %124 
                                                      OpStore %122 %125 
                                         f32 %126 = OpLoad %122 
                                         f32 %128 = OpExtInst %1 43 %126 %51 %127 
                                                      OpStore %122 %128 
                                       f32_4 %130 = OpLoad %39 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                         f32 %132 = OpLoad %122 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_3 %134 = OpFMul %131 %133 
                                                      OpStore %129 %134 
                                       f32_3 %135 = OpLoad %129 
                                       f32_3 %136 = OpExtInst %1 29 %135 
                                                      OpStore %129 %136 
                                       f32_3 %137 = OpLoad %129 
                                Uniform f32* %139 = OpAccessChain %29 %138 
                                         f32 %140 = OpLoad %139 
                                Uniform f32* %141 = OpAccessChain %29 %138 
                                         f32 %142 = OpLoad %141 
                                Uniform f32* %143 = OpAccessChain %29 %138 
                                         f32 %144 = OpLoad %143 
                                       f32_3 %145 = OpCompositeConstruct %140 %142 %144 
                                         f32 %146 = OpCompositeExtract %145 0 
                                         f32 %147 = OpCompositeExtract %145 1 
                                         f32 %148 = OpCompositeExtract %145 2 
                                       f32_3 %149 = OpCompositeConstruct %146 %147 %148 
                                       f32_3 %150 = OpExtInst %1 37 %137 %149 
                                                      OpStore %129 %150 
                              Uniform u32_4* %154 = OpAccessChain %29 %152 
                                       u32_4 %155 = OpLoad %154 
                                         u32 %156 = OpCompositeExtract %155 0 
                                        bool %157 = OpINotEqual %156 %37 
                                                      OpSelectionMerge %159 None 
                                                      OpBranchConditional %157 %158 %161 
                                             %158 = OpLabel 
                                       f32_3 %160 = OpLoad %129 
                                                      OpStore %151 %160 
                                                      OpBranch %159 
                                             %161 = OpLabel 
                                                      OpStore %151 %162 
                                                      OpBranch %159 
                                             %159 = OpLabel 
                                       f32_3 %163 = OpLoad %151 
                                       f32_4 %164 = OpLoad %39 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %39 %165 
                              Uniform u32_4* %168 = OpAccessChain %29 %152 
                                       u32_4 %169 = OpLoad %168 
                                         u32 %170 = OpCompositeExtract %169 0 
                                        bool %171 = OpINotEqual %170 %37 
                                                      OpSelectionMerge %173 None 
                                                      OpBranchConditional %171 %172 %174 
                                             %172 = OpLabel 
                                                      OpStore %167 %127 
                                                      OpBranch %173 
                                             %174 = OpLabel 
                                                      OpStore %167 %51 
                                                      OpBranch %173 
                                             %173 = OpLabel 
                                         f32 %175 = OpLoad %167 
                                Private f32* %176 = OpAccessChain %39 %22 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %20 %22 
                                                      OpStore %177 %127 
                              Uniform u32_4* %182 = OpAccessChain %29 %152 
                                       u32_4 %183 = OpLoad %182 
                                         u32 %184 = OpCompositeExtract %183 1 
                                        bool %185 = OpINotEqual %184 %37 
                                                      OpSelectionMerge %187 None 
                                                      OpBranchConditional %185 %186 %189 
                                             %186 = OpLabel 
                                       f32_4 %188 = OpLoad %20 
                                                      OpStore %181 %188 
                                                      OpBranch %187 
                                             %189 = OpLabel 
                                       f32_4 %190 = OpLoad %39 
                                                      OpStore %181 %190 
                                                      OpBranch %187 
                                             %187 = OpLabel 
                                       f32_4 %191 = OpLoad %181 
                                                      OpStore %179 %191 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 200764
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	float _LightScale;
uniform 	float _HeightOffGround;
uniform 	vec4 _MeshBoundsExtents;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
vec2 u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.x = abs(_LightScale) + -1.0;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.yx;
    u_xlat4 = in_POSITION0.x * _LightScale + (-u_xlat0.y);
    u_xlat8.xy = in_POSITION0.yz + (-vec2(vec2(_HeightOffGround, _HeightOffGround)));
    u_xlat0.x = (-_LightScale) * u_xlat8.x + u_xlat0.x;
    u_xlat8.x = u_xlat8.y + 10.0;
    u_xlat1 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat4) + u_xlat1;
    u_xlatb0 = 0.0<_Perpendicular;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat2 = u_xlat2 + (-hlslcc_mtx4x4unity_ObjectToWorld[3]);
    u_xlat4 = u_xlat2.y * _LightScale;
    u_xlat0.x = u_xlat4 * u_xlat0.x + u_xlat8.x;
    u_xlat0.x = (-_MeshBoundsExtents.y) * abs(_LightScale) + u_xlat0.x;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = _LightScale + _LightScale;
    u_xlat1.xy = u_xlat1.xx * _MeshBoundsExtents.xy;
    vs_TEXCOORD3.xy = u_xlat2.xy / u_xlat1.xy;
    vs_TEXCOORD3.zw = u_xlat2.zw;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _MainTex_TexelSize;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec2 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat10_3 = texture(_MainTex, u_xlat3.xy);
    u_xlat4.xy = _MainTex_TexelSize.xy * vec2(-2.0, -2.0) + vs_TEXCOORD0.xy;
    u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
    u_xlat16_2 = u_xlat10_2.wxyz * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003);
    u_xlat16_0 = u_xlat10_0.wxyz * vec4(0.300000012, 0.300000012, 0.300000012, 0.300000012) + u_xlat16_2;
    u_xlat16_0 = u_xlat10_1.wxyz * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_3.wxyz * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_4.wxyz * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat1 = u_xlat16_0 * vs_TEXCOORD3.yyyy;
    u_xlat2.w = u_xlat1.x * 0.75;
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat0.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat1.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat0.x, u_xlat1.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat16_0.yzw * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat16_0.yzw * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat3.w = 0.0;
    u_xlat0 = u_xlat2 + u_xlat3;
    SV_Target0.xyz = u_xlat1.yzw * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 425
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %42 %188 %221 %232 %233 %246 %282 %299 %416 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 RelaxedPrecision 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 RelaxedPrecision 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 RelaxedPrecision 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 RelaxedPrecision 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 RelaxedPrecision 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpMemberDecorate %15 13 Offset 15 
                                                      OpMemberDecorate %15 14 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %188 Location 188 
                                                      OpMemberDecorate %219 0 BuiltIn 219 
                                                      OpMemberDecorate %219 1 BuiltIn 219 
                                                      OpMemberDecorate %219 2 BuiltIn 219 
                                                      OpDecorate %219 Block 
                                                      OpDecorate %232 Location 232 
                                                      OpDecorate %233 Location 233 
                                                      OpDecorate %246 Location 246 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %299 Location 299 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %416 Location 416 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %12 %13 %14 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 11 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %24 = OpConstant 3.674022E-40 
                                          u32 %26 = OpConstant 0 
                                              %27 = OpTypePointer Private %6 
                                              %29 = OpTypeVector %6 2 
                                          i32 %32 = OpConstant 13 
                                              %33 = OpTypePointer Uniform %7 
                                 Private f32* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                              %43 = OpTypePointer Input %6 
                                          u32 %49 = OpConstant 1 
                                              %54 = OpTypePointer Private %29 
                               Private f32_2* %55 = OpVariable Private 
                                          i32 %58 = OpConstant 12 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %87 = OpConstant 7 
                                          i32 %88 = OpConstant 1 
                                          i32 %92 = OpConstant 0 
                                             %100 = OpTypeBool 
                                             %101 = OpTypePointer Private %100 
                               Private bool* %102 = OpVariable Private 
                                         f32 %103 = OpConstant 3.674022E-40 
                                         i32 %104 = OpConstant 10 
                                             %108 = OpTypePointer Function %6 
                                         f32 %113 = OpConstant 3.674022E-40 
                              Private f32_4* %117 = OpVariable Private 
                                         i32 %130 = OpConstant 2 
                                         i32 %138 = OpConstant 3 
                                             %186 = OpTypeVector %6 3 
                                             %187 = OpTypePointer Output %186 
                               Output f32_3* %188 = OpVariable Output 
                                         i32 %200 = OpConstant 9 
                                             %218 = OpTypeArray %6 %49 
                                             %219 = OpTypeStruct %7 %6 %218 
                                             %220 = OpTypePointer Output %219 
        Output struct {f32_4; f32; f32[1];}* %221 = OpVariable Output 
                                             %229 = OpTypePointer Output %7 
                                             %231 = OpTypePointer Output %29 
                               Output f32_2* %232 = OpVariable Output 
                                Input f32_4* %233 = OpVariable Input 
                                         i32 %236 = OpConstant 14 
                                             %245 = OpTypePointer Input %186 
                                Input f32_3* %246 = OpVariable Input 
                                         i32 %248 = OpConstant 8 
                                         u32 %265 = OpConstant 2 
                                Private f32* %267 = OpVariable Private 
                               Output f32_3* %282 = OpVariable Output 
                               Output f32_4* %299 = OpVariable Output 
                                             %311 = OpTypePointer Private %186 
                              Private f32_3* %312 = OpVariable Private 
                              Private f32_4* %329 = OpVariable Private 
                              Private f32_3* %335 = OpVariable Private 
                                         i32 %341 = OpConstant 4 
                                         i32 %347 = OpConstant 5 
                                         i32 %353 = OpConstant 6 
                                         u32 %362 = OpConstant 3 
                                       f32_3 %383 = OpConstantComposite %103 %103 %103 
                                         f32 %391 = OpConstant 3.674022E-40 
                                       f32_3 %392 = OpConstantComposite %391 %391 %391 
                                         f32 %403 = OpConstant 3.674022E-40 
                                       f32_3 %404 = OpConstantComposite %403 %403 %403 
                                         f32 %406 = OpConstant 3.674022E-40 
                                       f32_3 %407 = OpConstantComposite %406 %406 %406 
                               Output f32_3* %416 = OpVariable Output 
                                             %419 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %109 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpExtInst %1 4 %22 
                                          f32 %25 = OpFAdd %23 %24 
                                 Private f32* %28 = OpAccessChain %9 %26 
                                                      OpStore %28 %25 
                                        f32_4 %30 = OpLoad %9 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 0 
                               Uniform f32_4* %34 = OpAccessChain %17 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_2 %36 = OpVectorShuffle %35 %35 1 0 
                                        f32_2 %37 = OpFMul %31 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
                                                      OpStore %9 %39 
                                   Input f32* %44 = OpAccessChain %42 %26 
                                          f32 %45 = OpLoad %44 
                                 Uniform f32* %46 = OpAccessChain %17 %19 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFMul %45 %47 
                                 Private f32* %50 = OpAccessChain %9 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFNegate %51 
                                          f32 %53 = OpFAdd %48 %52 
                                                      OpStore %40 %53 
                                        f32_4 %56 = OpLoad %42 
                                        f32_2 %57 = OpVectorShuffle %56 %56 1 2 
                                 Uniform f32* %59 = OpAccessChain %17 %58 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %61 = OpAccessChain %17 %58 
                                          f32 %62 = OpLoad %61 
                                        f32_2 %63 = OpCompositeConstruct %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                          f32 %65 = OpCompositeExtract %63 1 
                                        f32_2 %66 = OpCompositeConstruct %64 %65 
                                        f32_2 %67 = OpFNegate %66 
                                        f32_2 %68 = OpFAdd %57 %67 
                                                      OpStore %55 %68 
                                 Uniform f32* %69 = OpAccessChain %17 %19 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                 Private f32* %72 = OpAccessChain %55 %26 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %26 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFAdd %74 %76 
                                 Private f32* %78 = OpAccessChain %9 %26 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %55 %49 
                                          f32 %80 = OpLoad %79 
                                          f32 %82 = OpFAdd %80 %81 
                                 Private f32* %83 = OpAccessChain %55 %26 
                                                      OpStore %83 %82 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 0 0 0 0 
                               Uniform f32_4* %89 = OpAccessChain %17 %87 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFMul %86 %90 
                                                      OpStore %84 %91 
                               Uniform f32_4* %93 = OpAccessChain %17 %87 %92 
                                        f32_4 %94 = OpLoad %93 
                                          f32 %95 = OpLoad %40 
                                        f32_4 %96 = OpCompositeConstruct %95 %95 %95 %95 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %84 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %84 %99 
                                Uniform f32* %105 = OpAccessChain %17 %104 
                                         f32 %106 = OpLoad %105 
                                        bool %107 = OpFOrdLessThan %103 %106 
                                                      OpStore %102 %107 
                                        bool %110 = OpLoad %102 
                                                      OpSelectionMerge %112 None 
                                                      OpBranchConditional %110 %111 %114 
                                             %111 = OpLabel 
                                                      OpStore %109 %113 
                                                      OpBranch %112 
                                             %114 = OpLabel 
                                                      OpStore %109 %24 
                                                      OpBranch %112 
                                             %112 = OpLabel 
                                         f32 %115 = OpLoad %109 
                                Private f32* %116 = OpAccessChain %9 %26 
                                                      OpStore %116 %115 
                                       f32_4 %118 = OpLoad %42 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %120 = OpAccessChain %17 %87 %88 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFMul %119 %121 
                                                      OpStore %117 %122 
                              Uniform f32_4* %123 = OpAccessChain %17 %87 %92 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %42 
                                       f32_4 %126 = OpVectorShuffle %125 %125 0 0 0 0 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %117 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %117 %129 
                              Uniform f32_4* %131 = OpAccessChain %17 %87 %130 
                                       f32_4 %132 = OpLoad %131 
                                       f32_4 %133 = OpLoad %42 
                                       f32_4 %134 = OpVectorShuffle %133 %133 2 2 2 2 
                                       f32_4 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %117 
                                       f32_4 %137 = OpFAdd %135 %136 
                                                      OpStore %117 %137 
                              Uniform f32_4* %139 = OpAccessChain %17 %87 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpLoad %42 
                                       f32_4 %142 = OpVectorShuffle %141 %141 3 3 3 3 
                                       f32_4 %143 = OpFMul %140 %142 
                                       f32_4 %144 = OpLoad %117 
                                       f32_4 %145 = OpFAdd %143 %144 
                                                      OpStore %117 %145 
                                       f32_4 %146 = OpLoad %117 
                              Uniform f32_4* %147 = OpAccessChain %17 %87 %138 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpFNegate %148 
                                       f32_4 %150 = OpFAdd %146 %149 
                                                      OpStore %117 %150 
                                Private f32* %151 = OpAccessChain %117 %49 
                                         f32 %152 = OpLoad %151 
                                Uniform f32* %153 = OpAccessChain %17 %19 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFMul %152 %154 
                                                      OpStore %40 %155 
                                         f32 %156 = OpLoad %40 
                                Private f32* %157 = OpAccessChain %9 %26 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                Private f32* %160 = OpAccessChain %55 %26 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFAdd %159 %161 
                                Private f32* %163 = OpAccessChain %9 %26 
                                                      OpStore %163 %162 
                                Uniform f32* %164 = OpAccessChain %17 %32 %49 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFNegate %165 
                                Uniform f32* %167 = OpAccessChain %17 %19 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpExtInst %1 4 %168 
                                         f32 %170 = OpFMul %166 %169 
                                Private f32* %171 = OpAccessChain %9 %26 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFAdd %170 %172 
                                Private f32* %174 = OpAccessChain %9 %26 
                                                      OpStore %174 %173 
                              Uniform f32_4* %175 = OpAccessChain %17 %87 %130 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpLoad %9 
                                       f32_4 %178 = OpVectorShuffle %177 %177 0 0 0 0 
                                       f32_4 %179 = OpFMul %176 %178 
                                       f32_4 %180 = OpLoad %84 
                                       f32_4 %181 = OpFAdd %179 %180 
                                                      OpStore %9 %181 
                                       f32_4 %182 = OpLoad %9 
                              Uniform f32_4* %183 = OpAccessChain %17 %87 %138 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpFAdd %182 %184 
                                                      OpStore %84 %185 
                              Uniform f32_4* %189 = OpAccessChain %17 %87 %138 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %42 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_3 %194 = OpFMul %191 %193 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFAdd %194 %196 
                                                      OpStore %188 %197 
                                       f32_4 %198 = OpLoad %84 
                                       f32_4 %199 = OpVectorShuffle %198 %198 1 1 1 1 
                              Uniform f32_4* %201 = OpAccessChain %17 %200 %88 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpFMul %199 %202 
                                                      OpStore %9 %203 
                              Uniform f32_4* %204 = OpAccessChain %17 %200 %92 
                                       f32_4 %205 = OpLoad %204 
                                       f32_4 %206 = OpLoad %84 
                                       f32_4 %207 = OpVectorShuffle %206 %206 0 0 0 0 
                                       f32_4 %208 = OpFMul %205 %207 
                                       f32_4 %209 = OpLoad %9 
                                       f32_4 %210 = OpFAdd %208 %209 
                                                      OpStore %9 %210 
                              Uniform f32_4* %211 = OpAccessChain %17 %200 %130 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %84 
                                       f32_4 %214 = OpVectorShuffle %213 %213 2 2 2 2 
                                       f32_4 %215 = OpFMul %212 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpFAdd %215 %216 
                                                      OpStore %9 %217 
                              Uniform f32_4* %222 = OpAccessChain %17 %200 %138 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %84 
                                       f32_4 %225 = OpVectorShuffle %224 %224 3 3 3 3 
                                       f32_4 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %9 
                                       f32_4 %228 = OpFAdd %226 %227 
                               Output f32_4* %230 = OpAccessChain %221 %92 
                                                      OpStore %230 %228 
                                       f32_4 %234 = OpLoad %233 
                                       f32_2 %235 = OpVectorShuffle %234 %234 0 1 
                              Uniform f32_4* %237 = OpAccessChain %17 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                                       f32_2 %240 = OpFMul %235 %239 
                              Uniform f32_4* %241 = OpAccessChain %17 %236 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 2 3 
                                       f32_2 %244 = OpFAdd %240 %243 
                                                      OpStore %232 %244 
                                       f32_3 %247 = OpLoad %246 
                              Uniform f32_4* %249 = OpAccessChain %17 %248 %92 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpDot %247 %251 
                                Private f32* %253 = OpAccessChain %9 %26 
                                                      OpStore %253 %252 
                                       f32_3 %254 = OpLoad %246 
                              Uniform f32_4* %255 = OpAccessChain %17 %248 %88 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %259 = OpAccessChain %9 %49 
                                                      OpStore %259 %258 
                                       f32_3 %260 = OpLoad %246 
                              Uniform f32_4* %261 = OpAccessChain %17 %248 %130 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %260 %263 
                                Private f32* %266 = OpAccessChain %9 %265 
                                                      OpStore %266 %264 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                         f32 %272 = OpDot %269 %271 
                                                      OpStore %267 %272 
                                         f32 %273 = OpLoad %267 
                                         f32 %274 = OpExtInst %1 32 %273 
                                                      OpStore %267 %274 
                                         f32 %275 = OpLoad %267 
                                       f32_3 %276 = OpCompositeConstruct %275 %275 %275 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %9 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %9 %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                                      OpStore %282 %284 
                                Uniform f32* %285 = OpAccessChain %17 %19 
                                         f32 %286 = OpLoad %285 
                                Uniform f32* %287 = OpAccessChain %17 %19 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFAdd %286 %288 
                                Private f32* %290 = OpAccessChain %84 %26 
                                                      OpStore %290 %289 
                                       f32_4 %291 = OpLoad %84 
                                       f32_2 %292 = OpVectorShuffle %291 %291 0 0 
                              Uniform f32_4* %293 = OpAccessChain %17 %32 
                                       f32_4 %294 = OpLoad %293 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFMul %292 %295 
                                       f32_4 %297 = OpLoad %84 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %84 %298 
                                       f32_4 %300 = OpLoad %117 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_4 %302 = OpLoad %84 
                                       f32_2 %303 = OpVectorShuffle %302 %302 0 1 
                                       f32_2 %304 = OpFDiv %301 %303 
                                       f32_4 %305 = OpLoad %299 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 2 3 
                                                      OpStore %299 %306 
                                       f32_4 %307 = OpLoad %117 
                                       f32_2 %308 = OpVectorShuffle %307 %307 2 3 
                                       f32_4 %309 = OpLoad %299 
                                       f32_4 %310 = OpVectorShuffle %309 %308 0 1 4 5 
                                                      OpStore %299 %310 
                                Private f32* %313 = OpAccessChain %9 %49 
                                         f32 %314 = OpLoad %313 
                                Private f32* %315 = OpAccessChain %9 %49 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFMul %314 %316 
                                Private f32* %318 = OpAccessChain %312 %26 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %9 %26 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %9 %26 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %312 %26 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                         f32 %327 = OpFAdd %323 %326 
                                Private f32* %328 = OpAccessChain %312 %26 
                                                      OpStore %328 %327 
                                       f32_4 %330 = OpLoad %9 
                                       f32_4 %331 = OpVectorShuffle %330 %330 1 2 2 0 
                                       f32_4 %332 = OpLoad %9 
                                       f32_4 %333 = OpVectorShuffle %332 %332 0 1 2 2 
                                       f32_4 %334 = OpFMul %331 %333 
                                                      OpStore %329 %334 
                              Uniform f32_4* %336 = OpAccessChain %17 %138 
                                       f32_4 %337 = OpLoad %336 
                                       f32_4 %338 = OpLoad %329 
                                         f32 %339 = OpDot %337 %338 
                                Private f32* %340 = OpAccessChain %335 %26 
                                                      OpStore %340 %339 
                              Uniform f32_4* %342 = OpAccessChain %17 %341 
                                       f32_4 %343 = OpLoad %342 
                                       f32_4 %344 = OpLoad %329 
                                         f32 %345 = OpDot %343 %344 
                                Private f32* %346 = OpAccessChain %335 %49 
                                                      OpStore %346 %345 
                              Uniform f32_4* %348 = OpAccessChain %17 %347 
                                       f32_4 %349 = OpLoad %348 
                                       f32_4 %350 = OpLoad %329 
                                         f32 %351 = OpDot %349 %350 
                                Private f32* %352 = OpAccessChain %335 %265 
                                                      OpStore %352 %351 
                              Uniform f32_4* %354 = OpAccessChain %17 %353 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpLoad %312 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
                                       f32_3 %359 = OpFMul %356 %358 
                                       f32_3 %360 = OpLoad %335 
                                       f32_3 %361 = OpFAdd %359 %360 
                                                      OpStore %312 %361 
                                Private f32* %363 = OpAccessChain %9 %362 
                                                      OpStore %363 %113 
                              Uniform f32_4* %364 = OpAccessChain %17 %92 
                                       f32_4 %365 = OpLoad %364 
                                       f32_4 %366 = OpLoad %9 
                                         f32 %367 = OpDot %365 %366 
                                Private f32* %368 = OpAccessChain %335 %26 
                                                      OpStore %368 %367 
                              Uniform f32_4* %369 = OpAccessChain %17 %88 
                                       f32_4 %370 = OpLoad %369 
                                       f32_4 %371 = OpLoad %9 
                                         f32 %372 = OpDot %370 %371 
                                Private f32* %373 = OpAccessChain %335 %49 
                                                      OpStore %373 %372 
                              Uniform f32_4* %374 = OpAccessChain %17 %130 
                                       f32_4 %375 = OpLoad %374 
                                       f32_4 %376 = OpLoad %9 
                                         f32 %377 = OpDot %375 %376 
                                Private f32* %378 = OpAccessChain %335 %265 
                                                      OpStore %378 %377 
                                       f32_3 %379 = OpLoad %312 
                                       f32_3 %380 = OpLoad %335 
                                       f32_3 %381 = OpFAdd %379 %380 
                                                      OpStore %312 %381 
                                       f32_3 %382 = OpLoad %312 
                                       f32_3 %384 = OpExtInst %1 40 %382 %383 
                                                      OpStore %312 %384 
                                       f32_3 %385 = OpLoad %312 
                                       f32_3 %386 = OpExtInst %1 30 %385 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 6 3 
                                                      OpStore %9 %388 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %393 = OpFMul %390 %392 
                                       f32_4 %394 = OpLoad %9 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %9 %395 
                                       f32_4 %396 = OpLoad %9 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpExtInst %1 29 %397 
                                       f32_4 %399 = OpLoad %9 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %9 %400 
                                       f32_4 %401 = OpLoad %9 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %405 = OpFMul %402 %404 
                                       f32_3 %408 = OpFAdd %405 %407 
                                       f32_4 %409 = OpLoad %9 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %9 %410 
                                       f32_4 %411 = OpLoad %9 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpExtInst %1 40 %412 %383 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
                                                      OpStore %9 %415 
                                       f32_4 %417 = OpLoad %9 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                                      OpStore %416 %418 
                                 Output f32* %420 = OpAccessChain %221 %92 %49 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFNegate %421 
                                 Output f32* %423 = OpAccessChain %221 %92 %49 
                                                      OpStore %423 %422 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 282
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %115 %149 %262 %268 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpMemberDecorate %25 0 RelaxedPrecision 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 Location 115 
                                                      OpDecorate %140 SpecId 140 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %262 Location 262 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %277 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeVector %6 3 
                                              %25 = OpTypeStruct %7 %7 %23 %24 %24 %7 %7 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 6 
                                              %30 = OpTypePointer Uniform %7 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %35 = OpConstant 3.674022E-40 
                                        f32_4 %36 = OpConstantComposite %34 %35 %35 %34 
                               Private f32_4* %41 = OpVariable Private 
                               Private f32_4* %46 = OpVariable Private 
                                              %51 = OpTypePointer Private %24 
                               Private f32_3* %52 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                        f32_2 %57 = OpConstantComposite %56 %56 
                               Private f32_4* %63 = OpVariable Private 
                                              %68 = OpTypePointer Private %15 
                               Private f32_2* %69 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                        f32_2 %74 = OpConstantComposite %73 %73 
                               Private f32_4* %78 = OpVariable Private 
                               Private f32_4* %82 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_4 %86 = OpConstantComposite %85 %85 %85 %85 
                               Private f32_4* %88 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                        f32_4 %92 = OpConstantComposite %91 %91 %91 %91 
                                         f32 %103 = OpConstant 3.674022E-40 
                                       f32_4 %104 = OpConstantComposite %103 %103 %103 %103 
                                             %114 = OpTypePointer Input %7 
                                Input f32_4* %115 = OpVariable Input 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Private %6 
                                         f32 %123 = OpConstant 3.674022E-40 
                                             %126 = OpTypeBool 
                                             %127 = OpTypePointer Private %126 
                               Private bool* %128 = OpVariable Private 
                                         i32 %129 = OpConstant 1 
                                             %130 = OpTypePointer Uniform %6 
                                        bool %134 = OpConstantFalse 
                                        bool %140 = OpSpecConstantFalse 
                                         u32 %143 = OpConstant 1 
                              Private f32_3* %147 = OpVariable Private 
                                             %148 = OpTypePointer Input %24 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %157 = OpConstant 0 
                                         i32 %175 = OpConstant 3 
                                             %180 = OpTypePointer Function %24 
                                         i32 %190 = OpConstant 4 
                                             %191 = OpTypePointer Uniform %24 
                              Private f32_4* %196 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %222 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %223 = OpTypeSampledImage %222 
                                             %224 = OpTypePointer UniformConstant %223 
 UniformConstant read_only Texture3DSampled* %225 = OpVariable UniformConstant 
                                         u32 %235 = OpConstant 3 
                              Private f32_3* %237 = OpVariable Private 
                                         f32 %245 = OpConstant 3.674022E-40 
                              Private f32_3* %248 = OpVariable Private 
                                         i32 %251 = OpConstant 5 
                                Input f32_3* %262 = OpVariable Input 
                                             %267 = OpTypePointer Output %7 
                               Output f32_4* %268 = OpVariable Output 
                                             %271 = OpTypePointer Output %6 
                                       f32_3 %275 = OpConstantComposite %212 %212 %212 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %181 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 1 0 1 
                                        f32_4 %37 = OpFMul %33 %36 
                                        f32_2 %38 = OpLoad %17 
                                        f32_4 %39 = OpVectorShuffle %38 %38 0 1 0 1 
                                        f32_4 %40 = OpFAdd %37 %39 
                                                      OpStore %20 %40 
                   read_only Texture2DSampled %42 = OpLoad %13 
                                        f32_4 %43 = OpLoad %20 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpImageSampleImplicitLod %42 %44 
                                                      OpStore %41 %45 
                   read_only Texture2DSampled %47 = OpLoad %13 
                                        f32_4 %48 = OpLoad %20 
                                        f32_2 %49 = OpVectorShuffle %48 %48 2 3 
                                        f32_4 %50 = OpImageSampleImplicitLod %47 %49 
                                                      OpStore %46 %50 
                               Uniform f32_4* %53 = OpAccessChain %27 %29 
                                        f32_4 %54 = OpLoad %53 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                                        f32_2 %58 = OpFMul %55 %57 
                                        f32_2 %59 = OpLoad %17 
                                        f32_2 %60 = OpFAdd %58 %59 
                                        f32_3 %61 = OpLoad %52 
                                        f32_3 %62 = OpVectorShuffle %61 %60 3 4 2 
                                                      OpStore %52 %62 
                   read_only Texture2DSampled %64 = OpLoad %13 
                                        f32_3 %65 = OpLoad %52 
                                        f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                                        f32_4 %67 = OpImageSampleImplicitLod %64 %66 
                                                      OpStore %63 %67 
                               Uniform f32_4* %70 = OpAccessChain %27 %29 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                        f32_2 %75 = OpFMul %72 %74 
                                        f32_2 %76 = OpLoad %17 
                                        f32_2 %77 = OpFAdd %75 %76 
                                                      OpStore %69 %77 
                   read_only Texture2DSampled %79 = OpLoad %13 
                                        f32_2 %80 = OpLoad %69 
                                        f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                                      OpStore %78 %81 
                                        f32_4 %83 = OpLoad %41 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 0 1 2 
                                        f32_4 %87 = OpFMul %84 %86 
                                                      OpStore %82 %87 
                                        f32_4 %89 = OpLoad %9 
                                        f32_4 %90 = OpVectorShuffle %89 %89 3 0 1 2 
                                        f32_4 %93 = OpFMul %90 %92 
                                        f32_4 %94 = OpLoad %82 
                                        f32_4 %95 = OpFAdd %93 %94 
                                                      OpStore %88 %95 
                                        f32_4 %96 = OpLoad %46 
                                        f32_4 %97 = OpVectorShuffle %96 %96 3 0 1 2 
                                        f32_4 %98 = OpFMul %97 %86 
                                        f32_4 %99 = OpLoad %88 
                                       f32_4 %100 = OpFAdd %98 %99 
                                                      OpStore %88 %100 
                                       f32_4 %101 = OpLoad %63 
                                       f32_4 %102 = OpVectorShuffle %101 %101 3 0 1 2 
                                       f32_4 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %88 
                                       f32_4 %107 = OpFAdd %105 %106 
                                                      OpStore %88 %107 
                                       f32_4 %108 = OpLoad %78 
                                       f32_4 %109 = OpVectorShuffle %108 %108 3 0 1 2 
                                       f32_4 %110 = OpFMul %109 %104 
                                       f32_4 %111 = OpLoad %88 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %88 %112 
                                       f32_4 %113 = OpLoad %88 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpVectorShuffle %116 %116 1 1 1 1 
                                       f32_4 %118 = OpFMul %113 %117 
                                                      OpStore %20 %118 
                                Private f32* %121 = OpAccessChain %20 %119 
                                         f32 %122 = OpLoad %121 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %20 %119 
                                                      OpStore %125 %124 
                                Uniform f32* %131 = OpAccessChain %27 %129 %119 
                                         f32 %132 = OpLoad %131 
                                        bool %133 = OpFOrdEqual %132 %35 
                                                      OpStore %128 %133 
                                                      OpSelectionMerge %136 None 
                                                      OpBranchConditional %134 %135 %136 
                                             %135 = OpLabel 
                                        bool %137 = OpLoad %128 
                                                      OpSelectionMerge %139 None 
                                                      OpBranchConditional %137 %138 %139 
                                             %138 = OpLabel 
                                                      OpBranch %139 
                                             %139 = OpLabel 
                                                      OpBranch %136 
                                             %136 = OpLabel 
                                                      OpSelectionMerge %142 None 
                                                      OpBranchConditional %140 %141 %231 
                                             %141 = OpLabel 
                                Uniform f32* %144 = OpAccessChain %27 %129 %143 
                                         f32 %145 = OpLoad %144 
                                        bool %146 = OpFOrdEqual %145 %35 
                                                      OpStore %128 %146 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %27 %152 %129 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %147 %156 
                              Uniform f32_4* %158 = OpAccessChain %27 %152 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpLoad %149 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 0 0 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_3 %164 = OpLoad %147 
                                       f32_3 %165 = OpFAdd %163 %164 
                                                      OpStore %147 %165 
                              Uniform f32_4* %166 = OpAccessChain %27 %152 %152 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpLoad %149 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_3 %172 = OpLoad %147 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %147 %173 
                                       f32_3 %174 = OpLoad %147 
                              Uniform f32_4* %176 = OpAccessChain %27 %152 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFAdd %174 %178 
                                                      OpStore %147 %179 
                                        bool %182 = OpLoad %128 
                                                      OpSelectionMerge %184 None 
                                                      OpBranchConditional %182 %183 %186 
                                             %183 = OpLabel 
                                       f32_3 %185 = OpLoad %147 
                                                      OpStore %181 %185 
                                                      OpBranch %184 
                                             %186 = OpLabel 
                                       f32_3 %187 = OpLoad %149 
                                                      OpStore %181 %187 
                                                      OpBranch %184 
                                             %184 = OpLabel 
                                       f32_3 %188 = OpLoad %181 
                                                      OpStore %52 %188 
                                       f32_3 %189 = OpLoad %52 
                              Uniform f32_3* %192 = OpAccessChain %27 %190 
                                       f32_3 %193 = OpLoad %192 
                                       f32_3 %194 = OpFNegate %193 
                                       f32_3 %195 = OpFAdd %189 %194 
                                                      OpStore %52 %195 
                                       f32_3 %197 = OpLoad %52 
                              Uniform f32_3* %198 = OpAccessChain %27 %175 
                                       f32_3 %199 = OpLoad %198 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %196 
                                       f32_4 %202 = OpVectorShuffle %201 %200 0 4 5 6 
                                                      OpStore %196 %202 
                                Private f32* %203 = OpAccessChain %196 %143 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %207 = OpFAdd %206 %123 
                                Private f32* %208 = OpAccessChain %52 %119 
                                                      OpStore %208 %207 
                                Uniform f32* %210 = OpAccessChain %27 %129 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %123 
                                Private f32* %215 = OpAccessChain %147 %119 
                                                      OpStore %215 %214 
                                Private f32* %216 = OpAccessChain %147 %119 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %52 %119 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 40 %217 %219 
                                Private f32* %221 = OpAccessChain %196 %119 
                                                      OpStore %221 %220 
                  read_only Texture3DSampled %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %196 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 2 3 
                                       f32_4 %229 = OpImageSampleImplicitLod %226 %228 
                                                      OpStore %196 %229 
                                       f32_4 %230 = OpLoad %196 
                                                      OpStore %82 %230 
                                                      OpBranch %142 
                                             %231 = OpLabel 
                                Private f32* %232 = OpAccessChain %82 %119 
                                                      OpStore %232 %35 
                                Private f32* %233 = OpAccessChain %82 %143 
                                                      OpStore %233 %35 
                                Private f32* %234 = OpAccessChain %82 %209 
                                                      OpStore %234 %35 
                                Private f32* %236 = OpAccessChain %82 %235 
                                                      OpStore %236 %35 
                                                      OpBranch %142 
                                             %142 = OpLabel 
                                       f32_4 %238 = OpLoad %82 
                              Uniform f32_4* %239 = OpAccessChain %27 %157 
                                       f32_4 %240 = OpLoad %239 
                                         f32 %241 = OpDot %238 %240 
                                Private f32* %242 = OpAccessChain %237 %119 
                                                      OpStore %242 %241 
                                Private f32* %243 = OpAccessChain %237 %119 
                                         f32 %244 = OpLoad %243 
                                         f32 %246 = OpExtInst %1 43 %244 %245 %35 
                                Private f32* %247 = OpAccessChain %237 %119 
                                                      OpStore %247 %246 
                                       f32_4 %249 = OpLoad %88 
                                       f32_3 %250 = OpVectorShuffle %249 %249 1 2 3 
                              Uniform f32_4* %252 = OpAccessChain %27 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFMul %250 %254 
                                                      OpStore %248 %255 
                                       f32_3 %256 = OpLoad %237 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 0 0 
                                       f32_3 %258 = OpLoad %248 
                                       f32_3 %259 = OpFMul %257 %258 
                                                      OpStore %237 %259 
                                       f32_4 %260 = OpLoad %88 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 2 3 
                                       f32_3 %263 = OpLoad %262 
                                       f32_3 %264 = OpFMul %261 %263 
                                       f32_3 %265 = OpLoad %237 
                                       f32_3 %266 = OpFAdd %264 %265 
                                                      OpStore %237 %266 
                                Private f32* %269 = OpAccessChain %20 %119 
                                         f32 %270 = OpLoad %269 
                                 Output f32* %272 = OpAccessChain %268 %235 
                                                      OpStore %272 %270 
                                       f32_4 %273 = OpLoad %20 
                                       f32_3 %274 = OpVectorShuffle %273 %273 1 2 3 
                                       f32_3 %276 = OpFMul %274 %275 
                                       f32_3 %277 = OpLoad %237 
                                       f32_3 %278 = OpFAdd %276 %277 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %268 %280 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	float _LightScale;
uniform 	float _HeightOffGround;
uniform 	vec4 _MeshBoundsExtents;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
void main()
{
    u_xlat0.x = abs(_LightScale) + -1.0;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.yx;
    u_xlat3 = in_POSITION0.x * _LightScale + (-u_xlat0.y);
    u_xlat6.xy = in_POSITION0.yz + (-vec2(vec2(_HeightOffGround, _HeightOffGround)));
    u_xlat0.x = (-_LightScale) * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = u_xlat6.y + 10.0;
    u_xlat1 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat3) + u_xlat1;
    u_xlatb0 = 0.0<_Perpendicular;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat2 = u_xlat2 + (-hlslcc_mtx4x4unity_ObjectToWorld[3]);
    u_xlat3 = u_xlat2.y * _LightScale;
    u_xlat0.x = u_xlat3 * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = (-_MeshBoundsExtents.y) * abs(_LightScale) + u_xlat0.x;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = _LightScale + _LightScale;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.xy;
    vs_TEXCOORD3.xy = u_xlat2.xy / u_xlat0.xy;
    vs_TEXCOORD3.zw = u_xlat2.zw;
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _MainTex_TexelSize;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec2 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat10_3 = texture(_MainTex, u_xlat3.xy);
    u_xlat4.xy = _MainTex_TexelSize.xy * vec2(-2.0, -2.0) + vs_TEXCOORD0.xy;
    u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
    u_xlat16_2 = u_xlat10_2.wxyz * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003);
    u_xlat16_0 = u_xlat10_0.wxyz * vec4(0.300000012, 0.300000012, 0.300000012, 0.300000012) + u_xlat16_2;
    u_xlat16_0 = u_xlat10_1.wxyz * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_3.wxyz * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_4.wxyz * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat1 = u_xlat16_0 * vs_TEXCOORD3.yyyy;
    u_xlat2.w = u_xlat1.x * 0.75;
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat0.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat1.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat0.x, u_xlat1.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat16_0.yzw * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat16_0.yzw * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat3.w = 0.0;
    u_xlat0 = u_xlat2 + u_xlat3;
    SV_Target0.xyz = u_xlat1.yzw * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 311
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %42 %186 %218 %229 %230 %243 %271 %291 %303 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %186 Location 186 
                                                      OpMemberDecorate %216 0 BuiltIn 216 
                                                      OpMemberDecorate %216 1 BuiltIn 216 
                                                      OpMemberDecorate %216 2 BuiltIn 216 
                                                      OpDecorate %216 Block 
                                                      OpDecorate %229 Location 229 
                                                      OpDecorate %230 Location 230 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %271 Location 271 
                                                      OpDecorate %291 Location 291 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %303 Location 303 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %24 = OpConstant 3.674022E-40 
                                          u32 %26 = OpConstant 0 
                                              %27 = OpTypePointer Private %6 
                                              %29 = OpTypeVector %6 2 
                                          i32 %32 = OpConstant 6 
                                              %33 = OpTypePointer Uniform %7 
                                 Private f32* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                              %43 = OpTypePointer Input %6 
                                          u32 %49 = OpConstant 1 
                                              %54 = OpTypePointer Private %29 
                               Private f32_2* %55 = OpVariable Private 
                                          i32 %58 = OpConstant 5 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %87 = OpConstant 0 
                                          i32 %88 = OpConstant 1 
                                              %99 = OpTypeBool 
                                             %100 = OpTypePointer Private %99 
                               Private bool* %101 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 3 
                                             %107 = OpTypePointer Function %6 
                                         f32 %112 = OpConstant 3.674022E-40 
                              Private f32_4* %116 = OpVariable Private 
                                         i32 %129 = OpConstant 2 
                                             %184 = OpTypeVector %6 3 
                                             %185 = OpTypePointer Output %184 
                               Output f32_3* %186 = OpVariable Output 
                                             %215 = OpTypeArray %6 %49 
                                             %216 = OpTypeStruct %7 %6 %215 
                                             %217 = OpTypePointer Output %216 
        Output struct {f32_4; f32; f32[1];}* %218 = OpVariable Output 
                                             %226 = OpTypePointer Output %7 
                                             %228 = OpTypePointer Output %29 
                               Output f32_2* %229 = OpVariable Output 
                                Input f32_4* %230 = OpVariable Input 
                                         i32 %233 = OpConstant 7 
                                             %242 = OpTypePointer Input %184 
                                Input f32_3* %243 = OpVariable Input 
                                         u32 %261 = OpConstant 2 
                                Private f32* %263 = OpVariable Private 
                               Output f32_3* %271 = OpVariable Output 
                               Output f32_4* %291 = OpVariable Output 
                               Output f32_3* %303 = OpVariable Output 
                                       f32_3 %304 = OpConstantComposite %102 %102 %102 
                                             %305 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %108 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpExtInst %1 4 %22 
                                          f32 %25 = OpFAdd %23 %24 
                                 Private f32* %28 = OpAccessChain %9 %26 
                                                      OpStore %28 %25 
                                        f32_4 %30 = OpLoad %9 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 0 
                               Uniform f32_4* %34 = OpAccessChain %17 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_2 %36 = OpVectorShuffle %35 %35 1 0 
                                        f32_2 %37 = OpFMul %31 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
                                                      OpStore %9 %39 
                                   Input f32* %44 = OpAccessChain %42 %26 
                                          f32 %45 = OpLoad %44 
                                 Uniform f32* %46 = OpAccessChain %17 %19 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFMul %45 %47 
                                 Private f32* %50 = OpAccessChain %9 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFNegate %51 
                                          f32 %53 = OpFAdd %48 %52 
                                                      OpStore %40 %53 
                                        f32_4 %56 = OpLoad %42 
                                        f32_2 %57 = OpVectorShuffle %56 %56 1 2 
                                 Uniform f32* %59 = OpAccessChain %17 %58 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %61 = OpAccessChain %17 %58 
                                          f32 %62 = OpLoad %61 
                                        f32_2 %63 = OpCompositeConstruct %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                          f32 %65 = OpCompositeExtract %63 1 
                                        f32_2 %66 = OpCompositeConstruct %64 %65 
                                        f32_2 %67 = OpFNegate %66 
                                        f32_2 %68 = OpFAdd %57 %67 
                                                      OpStore %55 %68 
                                 Uniform f32* %69 = OpAccessChain %17 %19 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                 Private f32* %72 = OpAccessChain %55 %26 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %26 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFAdd %74 %76 
                                 Private f32* %78 = OpAccessChain %9 %26 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %55 %49 
                                          f32 %80 = OpLoad %79 
                                          f32 %82 = OpFAdd %80 %81 
                                 Private f32* %83 = OpAccessChain %55 %26 
                                                      OpStore %83 %82 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 0 0 0 0 
                               Uniform f32_4* %89 = OpAccessChain %17 %87 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFMul %86 %90 
                                                      OpStore %84 %91 
                               Uniform f32_4* %92 = OpAccessChain %17 %87 %87 
                                        f32_4 %93 = OpLoad %92 
                                          f32 %94 = OpLoad %40 
                                        f32_4 %95 = OpCompositeConstruct %94 %94 %94 %94 
                                        f32_4 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %84 
                                        f32_4 %98 = OpFAdd %96 %97 
                                                      OpStore %84 %98 
                                Uniform f32* %104 = OpAccessChain %17 %103 
                                         f32 %105 = OpLoad %104 
                                        bool %106 = OpFOrdLessThan %102 %105 
                                                      OpStore %101 %106 
                                        bool %109 = OpLoad %101 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %113 
                                             %110 = OpLabel 
                                                      OpStore %108 %112 
                                                      OpBranch %111 
                                             %113 = OpLabel 
                                                      OpStore %108 %24 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                         f32 %114 = OpLoad %108 
                                Private f32* %115 = OpAccessChain %9 %26 
                                                      OpStore %115 %114 
                                       f32_4 %117 = OpLoad %42 
                                       f32_4 %118 = OpVectorShuffle %117 %117 1 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %17 %87 %88 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFMul %118 %120 
                                                      OpStore %116 %121 
                              Uniform f32_4* %122 = OpAccessChain %17 %87 %87 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %42 
                                       f32_4 %125 = OpVectorShuffle %124 %124 0 0 0 0 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %116 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %116 %128 
                              Uniform f32_4* %130 = OpAccessChain %17 %87 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %42 
                                       f32_4 %133 = OpVectorShuffle %132 %132 2 2 2 2 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %116 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %116 %136 
                              Uniform f32_4* %137 = OpAccessChain %17 %87 %103 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpLoad %42 
                                       f32_4 %140 = OpVectorShuffle %139 %139 3 3 3 3 
                                       f32_4 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %116 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %116 %143 
                                       f32_4 %144 = OpLoad %116 
                              Uniform f32_4* %145 = OpAccessChain %17 %87 %103 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFNegate %146 
                                       f32_4 %148 = OpFAdd %144 %147 
                                                      OpStore %116 %148 
                                Private f32* %149 = OpAccessChain %116 %49 
                                         f32 %150 = OpLoad %149 
                                Uniform f32* %151 = OpAccessChain %17 %19 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %150 %152 
                                                      OpStore %40 %153 
                                         f32 %154 = OpLoad %40 
                                Private f32* %155 = OpAccessChain %9 %26 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                Private f32* %158 = OpAccessChain %55 %26 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %9 %26 
                                                      OpStore %161 %160 
                                Uniform f32* %162 = OpAccessChain %17 %32 %49 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                Uniform f32* %165 = OpAccessChain %17 %19 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpExtInst %1 4 %166 
                                         f32 %168 = OpFMul %164 %167 
                                Private f32* %169 = OpAccessChain %9 %26 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %26 
                                                      OpStore %172 %171 
                              Uniform f32_4* %173 = OpAccessChain %17 %87 %129 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %84 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                              Uniform f32_4* %181 = OpAccessChain %17 %87 %103 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpFAdd %180 %182 
                                                      OpStore %84 %183 
                              Uniform f32_4* %187 = OpAccessChain %17 %87 %103 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %42 
                                       f32_3 %191 = OpVectorShuffle %190 %190 3 3 3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %192 %194 
                                                      OpStore %186 %195 
                                       f32_4 %196 = OpLoad %84 
                                       f32_4 %197 = OpVectorShuffle %196 %196 1 1 1 1 
                              Uniform f32_4* %198 = OpAccessChain %17 %129 %88 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpFMul %197 %199 
                                                      OpStore %9 %200 
                              Uniform f32_4* %201 = OpAccessChain %17 %129 %87 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %84 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 0 0 0 
                                       f32_4 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %9 %207 
                              Uniform f32_4* %208 = OpAccessChain %17 %129 %129 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %84 
                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %9 %214 
                              Uniform f32_4* %219 = OpAccessChain %17 %129 %103 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %84 
                                       f32_4 %222 = OpVectorShuffle %221 %221 3 3 3 3 
                                       f32_4 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpFAdd %223 %224 
                               Output f32_4* %227 = OpAccessChain %218 %87 
                                                      OpStore %227 %225 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                              Uniform f32_4* %234 = OpAccessChain %17 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_2 %237 = OpFMul %232 %236 
                              Uniform f32_4* %238 = OpAccessChain %17 %233 
                                       f32_4 %239 = OpLoad %238 
                                       f32_2 %240 = OpVectorShuffle %239 %239 2 3 
                                       f32_2 %241 = OpFAdd %237 %240 
                                                      OpStore %229 %241 
                                       f32_3 %244 = OpLoad %243 
                              Uniform f32_4* %245 = OpAccessChain %17 %88 %87 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %244 %247 
                                Private f32* %249 = OpAccessChain %9 %26 
                                                      OpStore %249 %248 
                                       f32_3 %250 = OpLoad %243 
                              Uniform f32_4* %251 = OpAccessChain %17 %88 %88 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %250 %253 
                                Private f32* %255 = OpAccessChain %9 %49 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %243 
                              Uniform f32_4* %257 = OpAccessChain %17 %88 %129 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %256 %259 
                                Private f32* %262 = OpAccessChain %9 %261 
                                                      OpStore %262 %260 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                         f32 %268 = OpDot %265 %267 
                                                      OpStore %263 %268 
                                         f32 %269 = OpLoad %263 
                                         f32 %270 = OpExtInst %1 32 %269 
                                                      OpStore %263 %270 
                                         f32 %272 = OpLoad %263 
                                       f32_3 %273 = OpCompositeConstruct %272 %272 %272 
                                       f32_4 %274 = OpLoad %9 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                                      OpStore %271 %276 
                                Uniform f32* %277 = OpAccessChain %17 %19 
                                         f32 %278 = OpLoad %277 
                                Uniform f32* %279 = OpAccessChain %17 %19 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFAdd %278 %280 
                                Private f32* %282 = OpAccessChain %9 %26 
                                                      OpStore %282 %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 0 
                              Uniform f32_4* %285 = OpAccessChain %17 %32 
                                       f32_4 %286 = OpLoad %285 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                       f32_2 %288 = OpFMul %284 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
                                                      OpStore %9 %290 
                                       f32_4 %292 = OpLoad %116 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                       f32_4 %294 = OpLoad %9 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFDiv %293 %295 
                                       f32_4 %297 = OpLoad %291 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %291 %298 
                                       f32_4 %299 = OpLoad %116 
                                       f32_2 %300 = OpVectorShuffle %299 %299 2 3 
                                       f32_4 %301 = OpLoad %291 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
                                                      OpStore %291 %302 
                                                      OpStore %303 %304 
                                 Output f32* %306 = OpAccessChain %218 %87 %49 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFNegate %307 
                                 Output f32* %309 = OpAccessChain %218 %87 %49 
                                                      OpStore %309 %308 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 282
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %115 %149 %262 %268 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpMemberDecorate %25 0 RelaxedPrecision 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 Location 115 
                                                      OpDecorate %140 SpecId 140 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %262 Location 262 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %277 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeVector %6 3 
                                              %25 = OpTypeStruct %7 %7 %23 %24 %24 %7 %7 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 6 
                                              %30 = OpTypePointer Uniform %7 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %35 = OpConstant 3.674022E-40 
                                        f32_4 %36 = OpConstantComposite %34 %35 %35 %34 
                               Private f32_4* %41 = OpVariable Private 
                               Private f32_4* %46 = OpVariable Private 
                                              %51 = OpTypePointer Private %24 
                               Private f32_3* %52 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                        f32_2 %57 = OpConstantComposite %56 %56 
                               Private f32_4* %63 = OpVariable Private 
                                              %68 = OpTypePointer Private %15 
                               Private f32_2* %69 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                        f32_2 %74 = OpConstantComposite %73 %73 
                               Private f32_4* %78 = OpVariable Private 
                               Private f32_4* %82 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_4 %86 = OpConstantComposite %85 %85 %85 %85 
                               Private f32_4* %88 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                        f32_4 %92 = OpConstantComposite %91 %91 %91 %91 
                                         f32 %103 = OpConstant 3.674022E-40 
                                       f32_4 %104 = OpConstantComposite %103 %103 %103 %103 
                                             %114 = OpTypePointer Input %7 
                                Input f32_4* %115 = OpVariable Input 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Private %6 
                                         f32 %123 = OpConstant 3.674022E-40 
                                             %126 = OpTypeBool 
                                             %127 = OpTypePointer Private %126 
                               Private bool* %128 = OpVariable Private 
                                         i32 %129 = OpConstant 1 
                                             %130 = OpTypePointer Uniform %6 
                                        bool %134 = OpConstantFalse 
                                        bool %140 = OpSpecConstantFalse 
                                         u32 %143 = OpConstant 1 
                              Private f32_3* %147 = OpVariable Private 
                                             %148 = OpTypePointer Input %24 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %157 = OpConstant 0 
                                         i32 %175 = OpConstant 3 
                                             %180 = OpTypePointer Function %24 
                                         i32 %190 = OpConstant 4 
                                             %191 = OpTypePointer Uniform %24 
                              Private f32_4* %196 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %222 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %223 = OpTypeSampledImage %222 
                                             %224 = OpTypePointer UniformConstant %223 
 UniformConstant read_only Texture3DSampled* %225 = OpVariable UniformConstant 
                                         u32 %235 = OpConstant 3 
                              Private f32_3* %237 = OpVariable Private 
                                         f32 %245 = OpConstant 3.674022E-40 
                              Private f32_3* %248 = OpVariable Private 
                                         i32 %251 = OpConstant 5 
                                Input f32_3* %262 = OpVariable Input 
                                             %267 = OpTypePointer Output %7 
                               Output f32_4* %268 = OpVariable Output 
                                             %271 = OpTypePointer Output %6 
                                       f32_3 %275 = OpConstantComposite %212 %212 %212 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %181 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 1 0 1 
                                        f32_4 %37 = OpFMul %33 %36 
                                        f32_2 %38 = OpLoad %17 
                                        f32_4 %39 = OpVectorShuffle %38 %38 0 1 0 1 
                                        f32_4 %40 = OpFAdd %37 %39 
                                                      OpStore %20 %40 
                   read_only Texture2DSampled %42 = OpLoad %13 
                                        f32_4 %43 = OpLoad %20 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpImageSampleImplicitLod %42 %44 
                                                      OpStore %41 %45 
                   read_only Texture2DSampled %47 = OpLoad %13 
                                        f32_4 %48 = OpLoad %20 
                                        f32_2 %49 = OpVectorShuffle %48 %48 2 3 
                                        f32_4 %50 = OpImageSampleImplicitLod %47 %49 
                                                      OpStore %46 %50 
                               Uniform f32_4* %53 = OpAccessChain %27 %29 
                                        f32_4 %54 = OpLoad %53 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                                        f32_2 %58 = OpFMul %55 %57 
                                        f32_2 %59 = OpLoad %17 
                                        f32_2 %60 = OpFAdd %58 %59 
                                        f32_3 %61 = OpLoad %52 
                                        f32_3 %62 = OpVectorShuffle %61 %60 3 4 2 
                                                      OpStore %52 %62 
                   read_only Texture2DSampled %64 = OpLoad %13 
                                        f32_3 %65 = OpLoad %52 
                                        f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                                        f32_4 %67 = OpImageSampleImplicitLod %64 %66 
                                                      OpStore %63 %67 
                               Uniform f32_4* %70 = OpAccessChain %27 %29 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                        f32_2 %75 = OpFMul %72 %74 
                                        f32_2 %76 = OpLoad %17 
                                        f32_2 %77 = OpFAdd %75 %76 
                                                      OpStore %69 %77 
                   read_only Texture2DSampled %79 = OpLoad %13 
                                        f32_2 %80 = OpLoad %69 
                                        f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                                      OpStore %78 %81 
                                        f32_4 %83 = OpLoad %41 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 0 1 2 
                                        f32_4 %87 = OpFMul %84 %86 
                                                      OpStore %82 %87 
                                        f32_4 %89 = OpLoad %9 
                                        f32_4 %90 = OpVectorShuffle %89 %89 3 0 1 2 
                                        f32_4 %93 = OpFMul %90 %92 
                                        f32_4 %94 = OpLoad %82 
                                        f32_4 %95 = OpFAdd %93 %94 
                                                      OpStore %88 %95 
                                        f32_4 %96 = OpLoad %46 
                                        f32_4 %97 = OpVectorShuffle %96 %96 3 0 1 2 
                                        f32_4 %98 = OpFMul %97 %86 
                                        f32_4 %99 = OpLoad %88 
                                       f32_4 %100 = OpFAdd %98 %99 
                                                      OpStore %88 %100 
                                       f32_4 %101 = OpLoad %63 
                                       f32_4 %102 = OpVectorShuffle %101 %101 3 0 1 2 
                                       f32_4 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %88 
                                       f32_4 %107 = OpFAdd %105 %106 
                                                      OpStore %88 %107 
                                       f32_4 %108 = OpLoad %78 
                                       f32_4 %109 = OpVectorShuffle %108 %108 3 0 1 2 
                                       f32_4 %110 = OpFMul %109 %104 
                                       f32_4 %111 = OpLoad %88 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %88 %112 
                                       f32_4 %113 = OpLoad %88 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpVectorShuffle %116 %116 1 1 1 1 
                                       f32_4 %118 = OpFMul %113 %117 
                                                      OpStore %20 %118 
                                Private f32* %121 = OpAccessChain %20 %119 
                                         f32 %122 = OpLoad %121 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %20 %119 
                                                      OpStore %125 %124 
                                Uniform f32* %131 = OpAccessChain %27 %129 %119 
                                         f32 %132 = OpLoad %131 
                                        bool %133 = OpFOrdEqual %132 %35 
                                                      OpStore %128 %133 
                                                      OpSelectionMerge %136 None 
                                                      OpBranchConditional %134 %135 %136 
                                             %135 = OpLabel 
                                        bool %137 = OpLoad %128 
                                                      OpSelectionMerge %139 None 
                                                      OpBranchConditional %137 %138 %139 
                                             %138 = OpLabel 
                                                      OpBranch %139 
                                             %139 = OpLabel 
                                                      OpBranch %136 
                                             %136 = OpLabel 
                                                      OpSelectionMerge %142 None 
                                                      OpBranchConditional %140 %141 %231 
                                             %141 = OpLabel 
                                Uniform f32* %144 = OpAccessChain %27 %129 %143 
                                         f32 %145 = OpLoad %144 
                                        bool %146 = OpFOrdEqual %145 %35 
                                                      OpStore %128 %146 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %27 %152 %129 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %147 %156 
                              Uniform f32_4* %158 = OpAccessChain %27 %152 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpLoad %149 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 0 0 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_3 %164 = OpLoad %147 
                                       f32_3 %165 = OpFAdd %163 %164 
                                                      OpStore %147 %165 
                              Uniform f32_4* %166 = OpAccessChain %27 %152 %152 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpLoad %149 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_3 %172 = OpLoad %147 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %147 %173 
                                       f32_3 %174 = OpLoad %147 
                              Uniform f32_4* %176 = OpAccessChain %27 %152 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFAdd %174 %178 
                                                      OpStore %147 %179 
                                        bool %182 = OpLoad %128 
                                                      OpSelectionMerge %184 None 
                                                      OpBranchConditional %182 %183 %186 
                                             %183 = OpLabel 
                                       f32_3 %185 = OpLoad %147 
                                                      OpStore %181 %185 
                                                      OpBranch %184 
                                             %186 = OpLabel 
                                       f32_3 %187 = OpLoad %149 
                                                      OpStore %181 %187 
                                                      OpBranch %184 
                                             %184 = OpLabel 
                                       f32_3 %188 = OpLoad %181 
                                                      OpStore %52 %188 
                                       f32_3 %189 = OpLoad %52 
                              Uniform f32_3* %192 = OpAccessChain %27 %190 
                                       f32_3 %193 = OpLoad %192 
                                       f32_3 %194 = OpFNegate %193 
                                       f32_3 %195 = OpFAdd %189 %194 
                                                      OpStore %52 %195 
                                       f32_3 %197 = OpLoad %52 
                              Uniform f32_3* %198 = OpAccessChain %27 %175 
                                       f32_3 %199 = OpLoad %198 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %196 
                                       f32_4 %202 = OpVectorShuffle %201 %200 0 4 5 6 
                                                      OpStore %196 %202 
                                Private f32* %203 = OpAccessChain %196 %143 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %207 = OpFAdd %206 %123 
                                Private f32* %208 = OpAccessChain %52 %119 
                                                      OpStore %208 %207 
                                Uniform f32* %210 = OpAccessChain %27 %129 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %123 
                                Private f32* %215 = OpAccessChain %147 %119 
                                                      OpStore %215 %214 
                                Private f32* %216 = OpAccessChain %147 %119 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %52 %119 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 40 %217 %219 
                                Private f32* %221 = OpAccessChain %196 %119 
                                                      OpStore %221 %220 
                  read_only Texture3DSampled %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %196 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 2 3 
                                       f32_4 %229 = OpImageSampleImplicitLod %226 %228 
                                                      OpStore %196 %229 
                                       f32_4 %230 = OpLoad %196 
                                                      OpStore %82 %230 
                                                      OpBranch %142 
                                             %231 = OpLabel 
                                Private f32* %232 = OpAccessChain %82 %119 
                                                      OpStore %232 %35 
                                Private f32* %233 = OpAccessChain %82 %143 
                                                      OpStore %233 %35 
                                Private f32* %234 = OpAccessChain %82 %209 
                                                      OpStore %234 %35 
                                Private f32* %236 = OpAccessChain %82 %235 
                                                      OpStore %236 %35 
                                                      OpBranch %142 
                                             %142 = OpLabel 
                                       f32_4 %238 = OpLoad %82 
                              Uniform f32_4* %239 = OpAccessChain %27 %157 
                                       f32_4 %240 = OpLoad %239 
                                         f32 %241 = OpDot %238 %240 
                                Private f32* %242 = OpAccessChain %237 %119 
                                                      OpStore %242 %241 
                                Private f32* %243 = OpAccessChain %237 %119 
                                         f32 %244 = OpLoad %243 
                                         f32 %246 = OpExtInst %1 43 %244 %245 %35 
                                Private f32* %247 = OpAccessChain %237 %119 
                                                      OpStore %247 %246 
                                       f32_4 %249 = OpLoad %88 
                                       f32_3 %250 = OpVectorShuffle %249 %249 1 2 3 
                              Uniform f32_4* %252 = OpAccessChain %27 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFMul %250 %254 
                                                      OpStore %248 %255 
                                       f32_3 %256 = OpLoad %237 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 0 0 
                                       f32_3 %258 = OpLoad %248 
                                       f32_3 %259 = OpFMul %257 %258 
                                                      OpStore %237 %259 
                                       f32_4 %260 = OpLoad %88 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 2 3 
                                       f32_3 %263 = OpLoad %262 
                                       f32_3 %264 = OpFMul %261 %263 
                                       f32_3 %265 = OpLoad %237 
                                       f32_3 %266 = OpFAdd %264 %265 
                                                      OpStore %237 %266 
                                Private f32* %269 = OpAccessChain %20 %119 
                                         f32 %270 = OpLoad %269 
                                 Output f32* %272 = OpAccessChain %268 %235 
                                                      OpStore %272 %270 
                                       f32_4 %273 = OpLoad %20 
                                       f32_3 %274 = OpVectorShuffle %273 %273 1 2 3 
                                       f32_3 %276 = OpFMul %274 %275 
                                       f32_3 %277 = OpLoad %237 
                                       f32_3 %278 = OpFAdd %276 %277 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %268 %280 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	float _LightScale;
uniform 	float _HeightOffGround;
uniform 	vec4 _MeshBoundsExtents;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.x = abs(_LightScale) + -1.0;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.yx;
    u_xlat6 = in_POSITION0.x * _LightScale + (-u_xlat0.y);
    u_xlat12.xy = in_POSITION0.yz + (-vec2(vec2(_HeightOffGround, _HeightOffGround)));
    u_xlat0.x = (-_LightScale) * u_xlat12.x + u_xlat0.x;
    u_xlat12.x = u_xlat12.y + 10.0;
    u_xlat1 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat6) + u_xlat1;
    u_xlatb0 = 0.0<_Perpendicular;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat2 = u_xlat2 + (-hlslcc_mtx4x4unity_ObjectToWorld[3]);
    u_xlat6 = u_xlat2.y * _LightScale;
    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat12.x;
    u_xlat0.x = (-_MeshBoundsExtents.y) * abs(_LightScale) + u_xlat0.x;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat3 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat3;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = _LightScale + _LightScale;
    u_xlat3.xy = vec2(u_xlat18) * _MeshBoundsExtents.xy;
    vs_TEXCOORD3.xy = u_xlat2.xy / u_xlat3.xy;
    vs_TEXCOORD3.zw = u_xlat2.zw;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat1.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _MainTex_TexelSize;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec2 u_xlat4;
vec4 u_xlat10_4;
vec3 u_xlat5;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat10_3 = texture(_MainTex, u_xlat3.xy);
    u_xlat4.xy = _MainTex_TexelSize.xy * vec2(-2.0, -2.0) + vs_TEXCOORD0.xy;
    u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
    u_xlat16_2 = u_xlat10_2.wxyz * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003);
    u_xlat16_0 = u_xlat10_0.wxyz * vec4(0.300000012, 0.300000012, 0.300000012, 0.300000012) + u_xlat16_2;
    u_xlat16_0 = u_xlat10_1.wxyz * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_3.wxyz * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_4.wxyz * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat1 = u_xlat16_0 * vs_TEXCOORD3.yyyy;
    u_xlat2.w = u_xlat1.x * 0.75;
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat0.x = u_xlat3.y * 0.25 + 0.75;
        u_xlat1.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat0.x, u_xlat1.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat16_0.yzw * vs_TEXCOORD4.xyz;
    u_xlat5.xyz = u_xlat16_0.yzw * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat5.xyz;
    u_xlat3.w = 0.0;
    u_xlat0 = u_xlat2 + u_xlat3;
    SV_Target0.xyz = u_xlat1.yzw * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 556
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %44 %224 %235 %236 %249 %286 %289 %305 %547 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 RelaxedPrecision 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 RelaxedPrecision 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 RelaxedPrecision 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 RelaxedPrecision 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 RelaxedPrecision 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 RelaxedPrecision 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 RelaxedPrecision 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 RelaxedPrecision 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpMemberDecorate %17 13 Offset 17 
                                                      OpMemberDecorate %17 14 Offset 17 
                                                      OpMemberDecorate %17 15 Offset 17 
                                                      OpMemberDecorate %17 16 Offset 17 
                                                      OpMemberDecorate %17 17 Offset 17 
                                                      OpMemberDecorate %17 18 Offset 17 
                                                      OpMemberDecorate %17 19 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %44 Location 44 
                                                      OpMemberDecorate %222 0 BuiltIn 222 
                                                      OpMemberDecorate %222 1 BuiltIn 222 
                                                      OpMemberDecorate %222 2 BuiltIn 222 
                                                      OpDecorate %222 Block 
                                                      OpDecorate %235 Location 235 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate %249 Location 249 
                                                      OpDecorate %286 Location 286 
                                                      OpDecorate %289 Location 289 
                                                      OpDecorate %305 Location 305 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %547 Location 547 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %7 %13 
                                              %15 = OpTypeArray %7 %13 
                                              %16 = OpTypeArray %7 %13 
                                              %17 = OpTypeStruct %7 %7 %7 %7 %12 %7 %7 %7 %7 %7 %7 %7 %14 %15 %16 %6 %6 %6 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 16 
                                              %22 = OpTypePointer Uniform %6 
                                          f32 %26 = OpConstant 3.674022E-40 
                                          u32 %28 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                              %31 = OpTypeVector %6 2 
                                          i32 %34 = OpConstant 18 
                                              %35 = OpTypePointer Uniform %7 
                                 Private f32* %42 = OpVariable Private 
                                              %43 = OpTypePointer Input %7 
                                 Input f32_4* %44 = OpVariable Input 
                                              %45 = OpTypePointer Input %6 
                                          u32 %51 = OpConstant 1 
                                              %56 = OpTypePointer Private %31 
                               Private f32_2* %57 = OpVariable Private 
                                          i32 %60 = OpConstant 17 
                                          f32 %83 = OpConstant 3.674022E-40 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 12 
                                          i32 %90 = OpConstant 1 
                                          i32 %94 = OpConstant 0 
                                             %102 = OpTypeBool 
                                             %103 = OpTypePointer Private %102 
                               Private bool* %104 = OpVariable Private 
                                         f32 %105 = OpConstant 3.674022E-40 
                                         i32 %106 = OpConstant 15 
                                             %110 = OpTypePointer Function %6 
                                         f32 %115 = OpConstant 3.674022E-40 
                              Private f32_4* %119 = OpVariable Private 
                                         i32 %132 = OpConstant 2 
                                         i32 %140 = OpConstant 3 
                                             %188 = OpTypeVector %6 3 
                              Private f32_4* %200 = OpVariable Private 
                                         i32 %203 = OpConstant 14 
                                             %221 = OpTypeArray %6 %51 
                                             %222 = OpTypeStruct %7 %6 %221 
                                             %223 = OpTypePointer Output %222 
        Output struct {f32_4; f32; f32[1];}* %224 = OpVariable Output 
                                             %232 = OpTypePointer Output %7 
                                             %234 = OpTypePointer Output %31 
                               Output f32_2* %235 = OpVariable Output 
                                Input f32_4* %236 = OpVariable Input 
                                         i32 %239 = OpConstant 19 
                                             %248 = OpTypePointer Input %188 
                                Input f32_3* %249 = OpVariable Input 
                                         i32 %251 = OpConstant 13 
                                         u32 %268 = OpConstant 2 
                                Private f32* %270 = OpVariable Private 
                                             %285 = OpTypePointer Output %188 
                               Output f32_3* %286 = OpVariable Output 
                               Output f32_3* %289 = OpVariable Output 
                               Output f32_4* %305 = OpVariable Output 
                                             %317 = OpTypePointer Private %188 
                              Private f32_3* %318 = OpVariable Private 
                              Private f32_4* %335 = OpVariable Private 
                              Private f32_3* %341 = OpVariable Private 
                                         i32 %342 = OpConstant 8 
                                         i32 %348 = OpConstant 9 
                                         i32 %354 = OpConstant 10 
                                         i32 %360 = OpConstant 11 
                                         u32 %369 = OpConstant 3 
                                         i32 %371 = OpConstant 5 
                                         i32 %377 = OpConstant 6 
                                         i32 %383 = OpConstant 7 
                                       f32_3 %393 = OpConstantComposite %105 %105 %105 
                                         f32 %401 = OpConstant 3.674022E-40 
                                       f32_3 %402 = OpConstantComposite %401 %401 %401 
                                         f32 %413 = OpConstant 3.674022E-40 
                                       f32_3 %414 = OpConstantComposite %413 %413 %413 
                                         f32 %416 = OpConstant 3.674022E-40 
                                       f32_3 %417 = OpConstantComposite %416 %416 %416 
                              Private f32_4* %432 = OpVariable Private 
                              Private f32_4* %445 = OpVariable Private 
                                         f32 %476 = OpConstant 3.674022E-40 
                                       f32_4 %477 = OpConstantComposite %476 %476 %476 %476 
                                       f32_4 %485 = OpConstantComposite %115 %115 %115 %115 
                                       f32_4 %493 = OpConstantComposite %105 %105 %105 %105 
                                         i32 %500 = OpConstant 4 
                               Output f32_3* %547 = OpVariable Output 
                                             %550 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %111 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpExtInst %1 4 %24 
                                          f32 %27 = OpFAdd %25 %26 
                                 Private f32* %30 = OpAccessChain %9 %28 
                                                      OpStore %30 %27 
                                        f32_4 %32 = OpLoad %9 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 0 
                               Uniform f32_4* %36 = OpAccessChain %19 %34 
                                        f32_4 %37 = OpLoad %36 
                                        f32_2 %38 = OpVectorShuffle %37 %37 1 0 
                                        f32_2 %39 = OpFMul %33 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                   Input f32* %46 = OpAccessChain %44 %28 
                                          f32 %47 = OpLoad %46 
                                 Uniform f32* %48 = OpAccessChain %19 %21 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFMul %47 %49 
                                 Private f32* %52 = OpAccessChain %9 %51 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFNegate %53 
                                          f32 %55 = OpFAdd %50 %54 
                                                      OpStore %42 %55 
                                        f32_4 %58 = OpLoad %44 
                                        f32_2 %59 = OpVectorShuffle %58 %58 1 2 
                                 Uniform f32* %61 = OpAccessChain %19 %60 
                                          f32 %62 = OpLoad %61 
                                 Uniform f32* %63 = OpAccessChain %19 %60 
                                          f32 %64 = OpLoad %63 
                                        f32_2 %65 = OpCompositeConstruct %62 %64 
                                          f32 %66 = OpCompositeExtract %65 0 
                                          f32 %67 = OpCompositeExtract %65 1 
                                        f32_2 %68 = OpCompositeConstruct %66 %67 
                                        f32_2 %69 = OpFNegate %68 
                                        f32_2 %70 = OpFAdd %59 %69 
                                                      OpStore %57 %70 
                                 Uniform f32* %71 = OpAccessChain %19 %21 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                 Private f32* %74 = OpAccessChain %57 %28 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFMul %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %28 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFAdd %76 %78 
                                 Private f32* %80 = OpAccessChain %9 %28 
                                                      OpStore %80 %79 
                                 Private f32* %81 = OpAccessChain %57 %51 
                                          f32 %82 = OpLoad %81 
                                          f32 %84 = OpFAdd %82 %83 
                                 Private f32* %85 = OpAccessChain %57 %28 
                                                      OpStore %85 %84 
                                        f32_4 %87 = OpLoad %9 
                                        f32_4 %88 = OpVectorShuffle %87 %87 0 0 0 0 
                               Uniform f32_4* %91 = OpAccessChain %19 %89 %90 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpFMul %88 %92 
                                                      OpStore %86 %93 
                               Uniform f32_4* %95 = OpAccessChain %19 %89 %94 
                                        f32_4 %96 = OpLoad %95 
                                          f32 %97 = OpLoad %42 
                                        f32_4 %98 = OpCompositeConstruct %97 %97 %97 %97 
                                        f32_4 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %86 
                                       f32_4 %101 = OpFAdd %99 %100 
                                                      OpStore %86 %101 
                                Uniform f32* %107 = OpAccessChain %19 %106 
                                         f32 %108 = OpLoad %107 
                                        bool %109 = OpFOrdLessThan %105 %108 
                                                      OpStore %104 %109 
                                        bool %112 = OpLoad %104 
                                                      OpSelectionMerge %114 None 
                                                      OpBranchConditional %112 %113 %116 
                                             %113 = OpLabel 
                                                      OpStore %111 %115 
                                                      OpBranch %114 
                                             %116 = OpLabel 
                                                      OpStore %111 %26 
                                                      OpBranch %114 
                                             %114 = OpLabel 
                                         f32 %117 = OpLoad %111 
                                Private f32* %118 = OpAccessChain %9 %28 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %44 
                                       f32_4 %121 = OpVectorShuffle %120 %120 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %19 %89 %90 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %121 %123 
                                                      OpStore %119 %124 
                              Uniform f32_4* %125 = OpAccessChain %19 %89 %94 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %44 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %119 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %119 %131 
                              Uniform f32_4* %133 = OpAccessChain %19 %89 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpLoad %44 
                                       f32_4 %136 = OpVectorShuffle %135 %135 2 2 2 2 
                                       f32_4 %137 = OpFMul %134 %136 
                                       f32_4 %138 = OpLoad %119 
                                       f32_4 %139 = OpFAdd %137 %138 
                                                      OpStore %119 %139 
                              Uniform f32_4* %141 = OpAccessChain %19 %89 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_4 %143 = OpLoad %44 
                                       f32_4 %144 = OpVectorShuffle %143 %143 3 3 3 3 
                                       f32_4 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %119 
                                       f32_4 %147 = OpFAdd %145 %146 
                                                      OpStore %119 %147 
                                       f32_4 %148 = OpLoad %119 
                              Uniform f32_4* %149 = OpAccessChain %19 %89 %140 
                                       f32_4 %150 = OpLoad %149 
                                       f32_4 %151 = OpFNegate %150 
                                       f32_4 %152 = OpFAdd %148 %151 
                                                      OpStore %119 %152 
                                Private f32* %153 = OpAccessChain %119 %51 
                                         f32 %154 = OpLoad %153 
                                Uniform f32* %155 = OpAccessChain %19 %21 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                                      OpStore %42 %157 
                                         f32 %158 = OpLoad %42 
                                Private f32* %159 = OpAccessChain %9 %28 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %158 %160 
                                Private f32* %162 = OpAccessChain %57 %28 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFAdd %161 %163 
                                Private f32* %165 = OpAccessChain %9 %28 
                                                      OpStore %165 %164 
                                Uniform f32* %166 = OpAccessChain %19 %34 %51 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFNegate %167 
                                Uniform f32* %169 = OpAccessChain %19 %21 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 4 %170 
                                         f32 %172 = OpFMul %168 %171 
                                Private f32* %173 = OpAccessChain %9 %28 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFAdd %172 %174 
                                Private f32* %176 = OpAccessChain %9 %28 
                                                      OpStore %176 %175 
                              Uniform f32_4* %177 = OpAccessChain %19 %89 %132 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 0 0 0 0 
                                       f32_4 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %86 
                                       f32_4 %183 = OpFAdd %181 %182 
                                                      OpStore %9 %183 
                                       f32_4 %184 = OpLoad %9 
                              Uniform f32_4* %185 = OpAccessChain %19 %89 %140 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpFAdd %184 %186 
                                                      OpStore %86 %187 
                              Uniform f32_4* %189 = OpAccessChain %19 %89 %140 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %44 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_3 %194 = OpFMul %191 %193 
                                       f32_4 %195 = OpLoad %9 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %9 %199 
                                       f32_4 %201 = OpLoad %86 
                                       f32_4 %202 = OpVectorShuffle %201 %201 1 1 1 1 
                              Uniform f32_4* %204 = OpAccessChain %19 %203 %90 
                                       f32_4 %205 = OpLoad %204 
                                       f32_4 %206 = OpFMul %202 %205 
                                                      OpStore %200 %206 
                              Uniform f32_4* %207 = OpAccessChain %19 %203 %94 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %86 
                                       f32_4 %210 = OpVectorShuffle %209 %209 0 0 0 0 
                                       f32_4 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %200 
                                       f32_4 %213 = OpFAdd %211 %212 
                                                      OpStore %200 %213 
                              Uniform f32_4* %214 = OpAccessChain %19 %203 %132 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %86 
                                       f32_4 %217 = OpVectorShuffle %216 %216 2 2 2 2 
                                       f32_4 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %200 
                                       f32_4 %220 = OpFAdd %218 %219 
                                                      OpStore %200 %220 
                              Uniform f32_4* %225 = OpAccessChain %19 %203 %140 
                                       f32_4 %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %86 
                                       f32_4 %228 = OpVectorShuffle %227 %227 3 3 3 3 
                                       f32_4 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %200 
                                       f32_4 %231 = OpFAdd %229 %230 
                               Output f32_4* %233 = OpAccessChain %224 %94 
                                                      OpStore %233 %231 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                              Uniform f32_4* %240 = OpAccessChain %19 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_2 %243 = OpFMul %238 %242 
                              Uniform f32_4* %244 = OpAccessChain %19 %239 
                                       f32_4 %245 = OpLoad %244 
                                       f32_2 %246 = OpVectorShuffle %245 %245 2 3 
                                       f32_2 %247 = OpFAdd %243 %246 
                                                      OpStore %235 %247 
                                       f32_3 %250 = OpLoad %249 
                              Uniform f32_4* %252 = OpAccessChain %19 %251 %94 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                         f32 %255 = OpDot %250 %254 
                                Private f32* %256 = OpAccessChain %86 %28 
                                                      OpStore %256 %255 
                                       f32_3 %257 = OpLoad %249 
                              Uniform f32_4* %258 = OpAccessChain %19 %251 %90 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                         f32 %261 = OpDot %257 %260 
                                Private f32* %262 = OpAccessChain %86 %51 
                                                      OpStore %262 %261 
                                       f32_3 %263 = OpLoad %249 
                              Uniform f32_4* %264 = OpAccessChain %19 %251 %132 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                         f32 %267 = OpDot %263 %266 
                                Private f32* %269 = OpAccessChain %86 %268 
                                                      OpStore %269 %267 
                                       f32_4 %271 = OpLoad %86 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %86 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                         f32 %275 = OpDot %272 %274 
                                                      OpStore %270 %275 
                                         f32 %276 = OpLoad %270 
                                         f32 %277 = OpExtInst %1 32 %276 
                                                      OpStore %270 %277 
                                         f32 %278 = OpLoad %270 
                                       f32_3 %279 = OpCompositeConstruct %278 %278 %278 
                                       f32_4 %280 = OpLoad %86 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpFMul %279 %281 
                                       f32_4 %283 = OpLoad %86 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %86 %284 
                                       f32_4 %287 = OpLoad %86 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                                      OpStore %286 %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                                      OpStore %289 %291 
                                Uniform f32* %292 = OpAccessChain %19 %21 
                                         f32 %293 = OpLoad %292 
                                Uniform f32* %294 = OpAccessChain %19 %21 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFAdd %293 %295 
                                                      OpStore %270 %296 
                                         f32 %297 = OpLoad %270 
                                       f32_2 %298 = OpCompositeConstruct %297 %297 
                              Uniform f32_4* %299 = OpAccessChain %19 %34 
                                       f32_4 %300 = OpLoad %299 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFMul %298 %301 
                                       f32_4 %303 = OpLoad %200 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 2 3 
                                                      OpStore %200 %304 
                                       f32_4 %306 = OpLoad %119 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                       f32_4 %308 = OpLoad %200 
                                       f32_2 %309 = OpVectorShuffle %308 %308 0 1 
                                       f32_2 %310 = OpFDiv %307 %309 
                                       f32_4 %311 = OpLoad %305 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 2 3 
                                                      OpStore %305 %312 
                                       f32_4 %313 = OpLoad %119 
                                       f32_2 %314 = OpVectorShuffle %313 %313 2 3 
                                       f32_4 %315 = OpLoad %305 
                                       f32_4 %316 = OpVectorShuffle %315 %314 0 1 4 5 
                                                      OpStore %305 %316 
                                Private f32* %319 = OpAccessChain %86 %51 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %86 %51 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %318 %28 
                                                      OpStore %324 %323 
                                Private f32* %325 = OpAccessChain %86 %28 
                                         f32 %326 = OpLoad %325 
                                Private f32* %327 = OpAccessChain %86 %28 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFMul %326 %328 
                                Private f32* %330 = OpAccessChain %318 %28 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFNegate %331 
                                         f32 %333 = OpFAdd %329 %332 
                                Private f32* %334 = OpAccessChain %318 %28 
                                                      OpStore %334 %333 
                                       f32_4 %336 = OpLoad %86 
                                       f32_4 %337 = OpVectorShuffle %336 %336 1 2 2 0 
                                       f32_4 %338 = OpLoad %86 
                                       f32_4 %339 = OpVectorShuffle %338 %338 0 1 2 2 
                                       f32_4 %340 = OpFMul %337 %339 
                                                      OpStore %335 %340 
                              Uniform f32_4* %343 = OpAccessChain %19 %342 
                                       f32_4 %344 = OpLoad %343 
                                       f32_4 %345 = OpLoad %335 
                                         f32 %346 = OpDot %344 %345 
                                Private f32* %347 = OpAccessChain %341 %28 
                                                      OpStore %347 %346 
                              Uniform f32_4* %349 = OpAccessChain %19 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_4 %351 = OpLoad %335 
                                         f32 %352 = OpDot %350 %351 
                                Private f32* %353 = OpAccessChain %341 %51 
                                                      OpStore %353 %352 
                              Uniform f32_4* %355 = OpAccessChain %19 %354 
                                       f32_4 %356 = OpLoad %355 
                                       f32_4 %357 = OpLoad %335 
                                         f32 %358 = OpDot %356 %357 
                                Private f32* %359 = OpAccessChain %341 %268 
                                                      OpStore %359 %358 
                              Uniform f32_4* %361 = OpAccessChain %19 %360 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpLoad %318 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpFMul %363 %365 
                                       f32_3 %367 = OpLoad %341 
                                       f32_3 %368 = OpFAdd %366 %367 
                                                      OpStore %318 %368 
                                Private f32* %370 = OpAccessChain %86 %369 
                                                      OpStore %370 %115 
                              Uniform f32_4* %372 = OpAccessChain %19 %371 
                                       f32_4 %373 = OpLoad %372 
                                       f32_4 %374 = OpLoad %86 
                                         f32 %375 = OpDot %373 %374 
                                Private f32* %376 = OpAccessChain %341 %28 
                                                      OpStore %376 %375 
                              Uniform f32_4* %378 = OpAccessChain %19 %377 
                                       f32_4 %379 = OpLoad %378 
                                       f32_4 %380 = OpLoad %86 
                                         f32 %381 = OpDot %379 %380 
                                Private f32* %382 = OpAccessChain %341 %51 
                                                      OpStore %382 %381 
                              Uniform f32_4* %384 = OpAccessChain %19 %383 
                                       f32_4 %385 = OpLoad %384 
                                       f32_4 %386 = OpLoad %86 
                                         f32 %387 = OpDot %385 %386 
                                Private f32* %388 = OpAccessChain %341 %268 
                                                      OpStore %388 %387 
                                       f32_3 %389 = OpLoad %318 
                                       f32_3 %390 = OpLoad %341 
                                       f32_3 %391 = OpFAdd %389 %390 
                                                      OpStore %318 %391 
                                       f32_3 %392 = OpLoad %318 
                                       f32_3 %394 = OpExtInst %1 40 %392 %393 
                                                      OpStore %318 %394 
                                       f32_3 %395 = OpLoad %318 
                                       f32_3 %396 = OpExtInst %1 30 %395 
                                       f32_4 %397 = OpLoad %200 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %200 %398 
                                       f32_4 %399 = OpLoad %200 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_3 %403 = OpFMul %400 %402 
                                       f32_4 %404 = OpLoad %200 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %200 %405 
                                       f32_4 %406 = OpLoad %200 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpExtInst %1 29 %407 
                                       f32_4 %409 = OpLoad %200 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %200 %410 
                                       f32_4 %411 = OpLoad %200 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %415 = OpFMul %412 %414 
                                       f32_3 %418 = OpFAdd %415 %417 
                                       f32_4 %419 = OpLoad %200 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %200 %420 
                                       f32_4 %421 = OpLoad %200 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
                                       f32_3 %423 = OpExtInst %1 40 %422 %393 
                                       f32_4 %424 = OpLoad %200 
                                       f32_4 %425 = OpVectorShuffle %424 %423 4 5 6 3 
                                                      OpStore %200 %425 
                                       f32_4 %426 = OpLoad %9 
                                       f32_4 %427 = OpVectorShuffle %426 %426 0 0 0 0 
                                       f32_4 %428 = OpFNegate %427 
                              Uniform f32_4* %429 = OpAccessChain %19 %94 
                                       f32_4 %430 = OpLoad %429 
                                       f32_4 %431 = OpFAdd %428 %430 
                                                      OpStore %119 %431 
                                       f32_4 %433 = OpLoad %9 
                                       f32_4 %434 = OpVectorShuffle %433 %433 1 1 1 1 
                                       f32_4 %435 = OpFNegate %434 
                              Uniform f32_4* %436 = OpAccessChain %19 %90 
                                       f32_4 %437 = OpLoad %436 
                                       f32_4 %438 = OpFAdd %435 %437 
                                                      OpStore %432 %438 
                                       f32_4 %439 = OpLoad %9 
                                       f32_4 %440 = OpVectorShuffle %439 %439 2 2 2 2 
                                       f32_4 %441 = OpFNegate %440 
                              Uniform f32_4* %442 = OpAccessChain %19 %132 
                                       f32_4 %443 = OpLoad %442 
                                       f32_4 %444 = OpFAdd %441 %443 
                                                      OpStore %9 %444 
                                       f32_4 %446 = OpLoad %86 
                                       f32_4 %447 = OpVectorShuffle %446 %446 1 1 1 1 
                                       f32_4 %448 = OpLoad %432 
                                       f32_4 %449 = OpFMul %447 %448 
                                                      OpStore %445 %449 
                                       f32_4 %450 = OpLoad %432 
                                       f32_4 %451 = OpLoad %432 
                                       f32_4 %452 = OpFMul %450 %451 
                                                      OpStore %432 %452 
                                       f32_4 %453 = OpLoad %119 
                                       f32_4 %454 = OpLoad %119 
                                       f32_4 %455 = OpFMul %453 %454 
                                       f32_4 %456 = OpLoad %432 
                                       f32_4 %457 = OpFAdd %455 %456 
                                                      OpStore %432 %457 
                                       f32_4 %458 = OpLoad %119 
                                       f32_4 %459 = OpLoad %86 
                                       f32_4 %460 = OpVectorShuffle %459 %459 0 0 0 0 
                                       f32_4 %461 = OpFMul %458 %460 
                                       f32_4 %462 = OpLoad %445 
                                       f32_4 %463 = OpFAdd %461 %462 
                                                      OpStore %119 %463 
                                       f32_4 %464 = OpLoad %9 
                                       f32_4 %465 = OpLoad %86 
                                       f32_4 %466 = OpVectorShuffle %465 %465 2 2 2 2 
                                       f32_4 %467 = OpFMul %464 %466 
                                       f32_4 %468 = OpLoad %119 
                                       f32_4 %469 = OpFAdd %467 %468 
                                                      OpStore %86 %469 
                                       f32_4 %470 = OpLoad %9 
                                       f32_4 %471 = OpLoad %9 
                                       f32_4 %472 = OpFMul %470 %471 
                                       f32_4 %473 = OpLoad %432 
                                       f32_4 %474 = OpFAdd %472 %473 
                                                      OpStore %9 %474 
                                       f32_4 %475 = OpLoad %9 
                                       f32_4 %478 = OpExtInst %1 40 %475 %477 
                                                      OpStore %9 %478 
                                       f32_4 %479 = OpLoad %9 
                                       f32_4 %480 = OpExtInst %1 32 %479 
                                                      OpStore %119 %480 
                                       f32_4 %481 = OpLoad %9 
                              Uniform f32_4* %482 = OpAccessChain %19 %140 
                                       f32_4 %483 = OpLoad %482 
                                       f32_4 %484 = OpFMul %481 %483 
                                       f32_4 %486 = OpFAdd %484 %485 
                                                      OpStore %9 %486 
                                       f32_4 %487 = OpLoad %9 
                                       f32_4 %488 = OpFDiv %485 %487 
                                                      OpStore %9 %488 
                                       f32_4 %489 = OpLoad %86 
                                       f32_4 %490 = OpLoad %119 
                                       f32_4 %491 = OpFMul %489 %490 
                                                      OpStore %86 %491 
                                       f32_4 %492 = OpLoad %86 
                                       f32_4 %494 = OpExtInst %1 40 %492 %493 
                                                      OpStore %86 %494 
                                       f32_4 %495 = OpLoad %9 
                                       f32_4 %496 = OpLoad %86 
                                       f32_4 %497 = OpFMul %495 %496 
                                                      OpStore %9 %497 
                                       f32_4 %498 = OpLoad %9 
                                       f32_3 %499 = OpVectorShuffle %498 %498 1 1 1 
                              Uniform f32_4* %501 = OpAccessChain %19 %500 %90 
                                       f32_4 %502 = OpLoad %501 
                                       f32_3 %503 = OpVectorShuffle %502 %502 0 1 2 
                                       f32_3 %504 = OpFMul %499 %503 
                                       f32_4 %505 = OpLoad %86 
                                       f32_4 %506 = OpVectorShuffle %505 %504 4 5 6 3 
                                                      OpStore %86 %506 
                              Uniform f32_4* %507 = OpAccessChain %19 %500 %94 
                                       f32_4 %508 = OpLoad %507 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                       f32_4 %510 = OpLoad %9 
                                       f32_3 %511 = OpVectorShuffle %510 %510 0 0 0 
                                       f32_3 %512 = OpFMul %509 %511 
                                       f32_4 %513 = OpLoad %86 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_3 %515 = OpFAdd %512 %514 
                                       f32_4 %516 = OpLoad %86 
                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
                                                      OpStore %86 %517 
                              Uniform f32_4* %518 = OpAccessChain %19 %500 %132 
                                       f32_4 %519 = OpLoad %518 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                       f32_4 %521 = OpLoad %9 
                                       f32_3 %522 = OpVectorShuffle %521 %521 2 2 2 
                                       f32_3 %523 = OpFMul %520 %522 
                                       f32_4 %524 = OpLoad %86 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_3 %526 = OpFAdd %523 %525 
                                       f32_4 %527 = OpLoad %9 
                                       f32_4 %528 = OpVectorShuffle %527 %526 4 5 6 3 
                                                      OpStore %9 %528 
                              Uniform f32_4* %529 = OpAccessChain %19 %500 %140 
                                       f32_4 %530 = OpLoad %529 
                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
                                       f32_4 %532 = OpLoad %9 
                                       f32_3 %533 = OpVectorShuffle %532 %532 3 3 3 
                                       f32_3 %534 = OpFMul %531 %533 
                                       f32_4 %535 = OpLoad %9 
                                       f32_3 %536 = OpVectorShuffle %535 %535 0 1 2 
                                       f32_3 %537 = OpFAdd %534 %536 
                                       f32_4 %538 = OpLoad %9 
                                       f32_4 %539 = OpVectorShuffle %538 %537 4 5 6 3 
                                                      OpStore %9 %539 
                                       f32_4 %540 = OpLoad %9 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                       f32_4 %542 = OpLoad %200 
                                       f32_3 %543 = OpVectorShuffle %542 %542 0 1 2 
                                       f32_3 %544 = OpFAdd %541 %543 
                                       f32_4 %545 = OpLoad %9 
                                       f32_4 %546 = OpVectorShuffle %545 %544 4 5 6 3 
                                                      OpStore %9 %546 
                                       f32_4 %548 = OpLoad %9 
                                       f32_3 %549 = OpVectorShuffle %548 %548 0 1 2 
                                                      OpStore %547 %549 
                                 Output f32* %551 = OpAccessChain %224 %94 %51 
                                         f32 %552 = OpLoad %551 
                                         f32 %553 = OpFNegate %552 
                                 Output f32* %554 = OpAccessChain %224 %94 %51 
                                                      OpStore %554 %553 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 282
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %115 %149 %262 %268 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpMemberDecorate %25 0 RelaxedPrecision 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %115 Location 115 
                                                      OpDecorate %140 SpecId 140 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %262 Location 262 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %268 Location 268 
                                                      OpDecorate %277 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeVector %6 3 
                                              %25 = OpTypeStruct %7 %7 %23 %24 %24 %7 %7 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 6 
                                              %30 = OpTypePointer Uniform %7 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %35 = OpConstant 3.674022E-40 
                                        f32_4 %36 = OpConstantComposite %34 %35 %35 %34 
                               Private f32_4* %41 = OpVariable Private 
                               Private f32_4* %46 = OpVariable Private 
                                              %51 = OpTypePointer Private %24 
                               Private f32_3* %52 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                        f32_2 %57 = OpConstantComposite %56 %56 
                               Private f32_4* %63 = OpVariable Private 
                                              %68 = OpTypePointer Private %15 
                               Private f32_2* %69 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                        f32_2 %74 = OpConstantComposite %73 %73 
                               Private f32_4* %78 = OpVariable Private 
                               Private f32_4* %82 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_4 %86 = OpConstantComposite %85 %85 %85 %85 
                               Private f32_4* %88 = OpVariable Private 
                                          f32 %91 = OpConstant 3.674022E-40 
                                        f32_4 %92 = OpConstantComposite %91 %91 %91 %91 
                                         f32 %103 = OpConstant 3.674022E-40 
                                       f32_4 %104 = OpConstantComposite %103 %103 %103 %103 
                                             %114 = OpTypePointer Input %7 
                                Input f32_4* %115 = OpVariable Input 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Private %6 
                                         f32 %123 = OpConstant 3.674022E-40 
                                             %126 = OpTypeBool 
                                             %127 = OpTypePointer Private %126 
                               Private bool* %128 = OpVariable Private 
                                         i32 %129 = OpConstant 1 
                                             %130 = OpTypePointer Uniform %6 
                                        bool %134 = OpConstantFalse 
                                        bool %140 = OpSpecConstantFalse 
                                         u32 %143 = OpConstant 1 
                              Private f32_3* %147 = OpVariable Private 
                                             %148 = OpTypePointer Input %24 
                                Input f32_3* %149 = OpVariable Input 
                                         i32 %152 = OpConstant 2 
                                         i32 %157 = OpConstant 0 
                                         i32 %175 = OpConstant 3 
                                             %180 = OpTypePointer Function %24 
                                         i32 %190 = OpConstant 4 
                                             %191 = OpTypePointer Uniform %24 
                              Private f32_4* %196 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %222 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %223 = OpTypeSampledImage %222 
                                             %224 = OpTypePointer UniformConstant %223 
 UniformConstant read_only Texture3DSampled* %225 = OpVariable UniformConstant 
                                         u32 %235 = OpConstant 3 
                              Private f32_3* %237 = OpVariable Private 
                                         f32 %245 = OpConstant 3.674022E-40 
                              Private f32_3* %248 = OpVariable Private 
                                         i32 %251 = OpConstant 5 
                                Input f32_3* %262 = OpVariable Input 
                                             %267 = OpTypePointer Output %7 
                               Output f32_4* %268 = OpVariable Output 
                                             %271 = OpTypePointer Output %6 
                                       f32_3 %275 = OpConstantComposite %212 %212 %212 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %181 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 1 0 1 
                                        f32_4 %37 = OpFMul %33 %36 
                                        f32_2 %38 = OpLoad %17 
                                        f32_4 %39 = OpVectorShuffle %38 %38 0 1 0 1 
                                        f32_4 %40 = OpFAdd %37 %39 
                                                      OpStore %20 %40 
                   read_only Texture2DSampled %42 = OpLoad %13 
                                        f32_4 %43 = OpLoad %20 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpImageSampleImplicitLod %42 %44 
                                                      OpStore %41 %45 
                   read_only Texture2DSampled %47 = OpLoad %13 
                                        f32_4 %48 = OpLoad %20 
                                        f32_2 %49 = OpVectorShuffle %48 %48 2 3 
                                        f32_4 %50 = OpImageSampleImplicitLod %47 %49 
                                                      OpStore %46 %50 
                               Uniform f32_4* %53 = OpAccessChain %27 %29 
                                        f32_4 %54 = OpLoad %53 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                                        f32_2 %58 = OpFMul %55 %57 
                                        f32_2 %59 = OpLoad %17 
                                        f32_2 %60 = OpFAdd %58 %59 
                                        f32_3 %61 = OpLoad %52 
                                        f32_3 %62 = OpVectorShuffle %61 %60 3 4 2 
                                                      OpStore %52 %62 
                   read_only Texture2DSampled %64 = OpLoad %13 
                                        f32_3 %65 = OpLoad %52 
                                        f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                                        f32_4 %67 = OpImageSampleImplicitLod %64 %66 
                                                      OpStore %63 %67 
                               Uniform f32_4* %70 = OpAccessChain %27 %29 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                        f32_2 %75 = OpFMul %72 %74 
                                        f32_2 %76 = OpLoad %17 
                                        f32_2 %77 = OpFAdd %75 %76 
                                                      OpStore %69 %77 
                   read_only Texture2DSampled %79 = OpLoad %13 
                                        f32_2 %80 = OpLoad %69 
                                        f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                                      OpStore %78 %81 
                                        f32_4 %83 = OpLoad %41 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 0 1 2 
                                        f32_4 %87 = OpFMul %84 %86 
                                                      OpStore %82 %87 
                                        f32_4 %89 = OpLoad %9 
                                        f32_4 %90 = OpVectorShuffle %89 %89 3 0 1 2 
                                        f32_4 %93 = OpFMul %90 %92 
                                        f32_4 %94 = OpLoad %82 
                                        f32_4 %95 = OpFAdd %93 %94 
                                                      OpStore %88 %95 
                                        f32_4 %96 = OpLoad %46 
                                        f32_4 %97 = OpVectorShuffle %96 %96 3 0 1 2 
                                        f32_4 %98 = OpFMul %97 %86 
                                        f32_4 %99 = OpLoad %88 
                                       f32_4 %100 = OpFAdd %98 %99 
                                                      OpStore %88 %100 
                                       f32_4 %101 = OpLoad %63 
                                       f32_4 %102 = OpVectorShuffle %101 %101 3 0 1 2 
                                       f32_4 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %88 
                                       f32_4 %107 = OpFAdd %105 %106 
                                                      OpStore %88 %107 
                                       f32_4 %108 = OpLoad %78 
                                       f32_4 %109 = OpVectorShuffle %108 %108 3 0 1 2 
                                       f32_4 %110 = OpFMul %109 %104 
                                       f32_4 %111 = OpLoad %88 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %88 %112 
                                       f32_4 %113 = OpLoad %88 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpVectorShuffle %116 %116 1 1 1 1 
                                       f32_4 %118 = OpFMul %113 %117 
                                                      OpStore %20 %118 
                                Private f32* %121 = OpAccessChain %20 %119 
                                         f32 %122 = OpLoad %121 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %20 %119 
                                                      OpStore %125 %124 
                                Uniform f32* %131 = OpAccessChain %27 %129 %119 
                                         f32 %132 = OpLoad %131 
                                        bool %133 = OpFOrdEqual %132 %35 
                                                      OpStore %128 %133 
                                                      OpSelectionMerge %136 None 
                                                      OpBranchConditional %134 %135 %136 
                                             %135 = OpLabel 
                                        bool %137 = OpLoad %128 
                                                      OpSelectionMerge %139 None 
                                                      OpBranchConditional %137 %138 %139 
                                             %138 = OpLabel 
                                                      OpBranch %139 
                                             %139 = OpLabel 
                                                      OpBranch %136 
                                             %136 = OpLabel 
                                                      OpSelectionMerge %142 None 
                                                      OpBranchConditional %140 %141 %231 
                                             %141 = OpLabel 
                                Uniform f32* %144 = OpAccessChain %27 %129 %143 
                                         f32 %145 = OpLoad %144 
                                        bool %146 = OpFOrdEqual %145 %35 
                                                      OpStore %128 %146 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %27 %152 %129 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %151 %155 
                                                      OpStore %147 %156 
                              Uniform f32_4* %158 = OpAccessChain %27 %152 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpLoad %149 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 0 0 
                                       f32_3 %163 = OpFMul %160 %162 
                                       f32_3 %164 = OpLoad %147 
                                       f32_3 %165 = OpFAdd %163 %164 
                                                      OpStore %147 %165 
                              Uniform f32_4* %166 = OpAccessChain %27 %152 %152 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpLoad %149 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_3 %172 = OpLoad %147 
                                       f32_3 %173 = OpFAdd %171 %172 
                                                      OpStore %147 %173 
                                       f32_3 %174 = OpLoad %147 
                              Uniform f32_4* %176 = OpAccessChain %27 %152 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFAdd %174 %178 
                                                      OpStore %147 %179 
                                        bool %182 = OpLoad %128 
                                                      OpSelectionMerge %184 None 
                                                      OpBranchConditional %182 %183 %186 
                                             %183 = OpLabel 
                                       f32_3 %185 = OpLoad %147 
                                                      OpStore %181 %185 
                                                      OpBranch %184 
                                             %186 = OpLabel 
                                       f32_3 %187 = OpLoad %149 
                                                      OpStore %181 %187 
                                                      OpBranch %184 
                                             %184 = OpLabel 
                                       f32_3 %188 = OpLoad %181 
                                                      OpStore %52 %188 
                                       f32_3 %189 = OpLoad %52 
                              Uniform f32_3* %192 = OpAccessChain %27 %190 
                                       f32_3 %193 = OpLoad %192 
                                       f32_3 %194 = OpFNegate %193 
                                       f32_3 %195 = OpFAdd %189 %194 
                                                      OpStore %52 %195 
                                       f32_3 %197 = OpLoad %52 
                              Uniform f32_3* %198 = OpAccessChain %27 %175 
                                       f32_3 %199 = OpLoad %198 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %196 
                                       f32_4 %202 = OpVectorShuffle %201 %200 0 4 5 6 
                                                      OpStore %196 %202 
                                Private f32* %203 = OpAccessChain %196 %143 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpFMul %204 %205 
                                         f32 %207 = OpFAdd %206 %123 
                                Private f32* %208 = OpAccessChain %52 %119 
                                                      OpStore %208 %207 
                                Uniform f32* %210 = OpAccessChain %27 %129 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %123 
                                Private f32* %215 = OpAccessChain %147 %119 
                                                      OpStore %215 %214 
                                Private f32* %216 = OpAccessChain %147 %119 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %52 %119 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 40 %217 %219 
                                Private f32* %221 = OpAccessChain %196 %119 
                                                      OpStore %221 %220 
                  read_only Texture3DSampled %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %196 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 2 3 
                                       f32_4 %229 = OpImageSampleImplicitLod %226 %228 
                                                      OpStore %196 %229 
                                       f32_4 %230 = OpLoad %196 
                                                      OpStore %82 %230 
                                                      OpBranch %142 
                                             %231 = OpLabel 
                                Private f32* %232 = OpAccessChain %82 %119 
                                                      OpStore %232 %35 
                                Private f32* %233 = OpAccessChain %82 %143 
                                                      OpStore %233 %35 
                                Private f32* %234 = OpAccessChain %82 %209 
                                                      OpStore %234 %35 
                                Private f32* %236 = OpAccessChain %82 %235 
                                                      OpStore %236 %35 
                                                      OpBranch %142 
                                             %142 = OpLabel 
                                       f32_4 %238 = OpLoad %82 
                              Uniform f32_4* %239 = OpAccessChain %27 %157 
                                       f32_4 %240 = OpLoad %239 
                                         f32 %241 = OpDot %238 %240 
                                Private f32* %242 = OpAccessChain %237 %119 
                                                      OpStore %242 %241 
                                Private f32* %243 = OpAccessChain %237 %119 
                                         f32 %244 = OpLoad %243 
                                         f32 %246 = OpExtInst %1 43 %244 %245 %35 
                                Private f32* %247 = OpAccessChain %237 %119 
                                                      OpStore %247 %246 
                                       f32_4 %249 = OpLoad %88 
                                       f32_3 %250 = OpVectorShuffle %249 %249 1 2 3 
                              Uniform f32_4* %252 = OpAccessChain %27 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFMul %250 %254 
                                                      OpStore %248 %255 
                                       f32_3 %256 = OpLoad %237 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 0 0 
                                       f32_3 %258 = OpLoad %248 
                                       f32_3 %259 = OpFMul %257 %258 
                                                      OpStore %237 %259 
                                       f32_4 %260 = OpLoad %88 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 2 3 
                                       f32_3 %263 = OpLoad %262 
                                       f32_3 %264 = OpFMul %261 %263 
                                       f32_3 %265 = OpLoad %237 
                                       f32_3 %266 = OpFAdd %264 %265 
                                                      OpStore %237 %266 
                                Private f32* %269 = OpAccessChain %20 %119 
                                         f32 %270 = OpLoad %269 
                                 Output f32* %272 = OpAccessChain %268 %235 
                                                      OpStore %272 %270 
                                       f32_4 %273 = OpLoad %20 
                                       f32_3 %274 = OpVectorShuffle %273 %273 1 2 3 
                                       f32_3 %276 = OpFMul %274 %275 
                                       f32_3 %277 = OpLoad %237 
                                       f32_3 %278 = OpFAdd %276 %277 
                                       f32_4 %279 = OpLoad %268 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %268 %280 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Blend SrcAlpha One, SrcAlpha One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 311672
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	float _LightScale;
uniform 	float _HeightOffGround;
uniform 	vec4 _MeshBoundsExtents;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
void main()
{
    u_xlat0.x = abs(_LightScale) + -1.0;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.yx;
    u_xlat3 = in_POSITION0.x * _LightScale + (-u_xlat0.y);
    u_xlat6.xy = in_POSITION0.yz + (-vec2(vec2(_HeightOffGround, _HeightOffGround)));
    u_xlat0.x = (-_LightScale) * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = u_xlat6.y + 10.0;
    u_xlat1 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat3) + u_xlat1;
    u_xlatb0 = 0.0<_Perpendicular;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat2 = u_xlat2 + (-hlslcc_mtx4x4unity_ObjectToWorld[3]);
    u_xlat3 = u_xlat2.y * _LightScale;
    u_xlat0.x = u_xlat3 * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = (-_MeshBoundsExtents.y) * abs(_LightScale) + u_xlat0.x;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = _LightScale + _LightScale;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.xy;
    vs_TEXCOORD3.xy = u_xlat2.xy / u_xlat0.xy;
    vs_TEXCOORD3.zw = u_xlat2.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_TexelSize;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat10_3;
vec2 u_xlat4;
vec4 u_xlat10_4;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat10_3 = texture(_MainTex, u_xlat3.xy);
    u_xlat4.xy = _MainTex_TexelSize.xy * vec2(-2.0, -2.0) + vs_TEXCOORD0.xy;
    u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
    u_xlat16_2 = u_xlat10_2 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003);
    u_xlat16_0 = u_xlat10_0 * vec4(0.300000012, 0.300000012, 0.300000012, 0.300000012) + u_xlat16_2;
    u_xlat16_0 = u_xlat10_1 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_3 * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_4 * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat15 = u_xlat16_0.w * vs_TEXCOORD3.y;
    SV_Target0.w = u_xlat15 * 0.75;
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat2.y * 0.25 + 0.75;
        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat16);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat15 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xyz);
    u_xlat16_1 = u_xlat10_1.w * u_xlat10_2.w;
    u_xlat15 = u_xlat15 * u_xlat16_1;
    u_xlat0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 309
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %42 %186 %218 %229 %230 %243 %271 %291 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %186 Location 186 
                                                      OpMemberDecorate %216 0 BuiltIn 216 
                                                      OpMemberDecorate %216 1 BuiltIn 216 
                                                      OpMemberDecorate %216 2 BuiltIn 216 
                                                      OpDecorate %216 Block 
                                                      OpDecorate %229 Location 229 
                                                      OpDecorate %230 Location 230 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %271 Location 271 
                                                      OpDecorate %291 Location 291 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %24 = OpConstant 3.674022E-40 
                                          u32 %26 = OpConstant 0 
                                              %27 = OpTypePointer Private %6 
                                              %29 = OpTypeVector %6 2 
                                          i32 %32 = OpConstant 6 
                                              %33 = OpTypePointer Uniform %7 
                                 Private f32* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                              %43 = OpTypePointer Input %6 
                                          u32 %49 = OpConstant 1 
                                              %54 = OpTypePointer Private %29 
                               Private f32_2* %55 = OpVariable Private 
                                          i32 %58 = OpConstant 5 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %87 = OpConstant 0 
                                          i32 %88 = OpConstant 1 
                                              %99 = OpTypeBool 
                                             %100 = OpTypePointer Private %99 
                               Private bool* %101 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 3 
                                             %107 = OpTypePointer Function %6 
                                         f32 %112 = OpConstant 3.674022E-40 
                              Private f32_4* %116 = OpVariable Private 
                                         i32 %129 = OpConstant 2 
                                             %184 = OpTypeVector %6 3 
                                             %185 = OpTypePointer Output %184 
                               Output f32_3* %186 = OpVariable Output 
                                             %215 = OpTypeArray %6 %49 
                                             %216 = OpTypeStruct %7 %6 %215 
                                             %217 = OpTypePointer Output %216 
        Output struct {f32_4; f32; f32[1];}* %218 = OpVariable Output 
                                             %226 = OpTypePointer Output %7 
                                             %228 = OpTypePointer Output %29 
                               Output f32_2* %229 = OpVariable Output 
                                Input f32_4* %230 = OpVariable Input 
                                         i32 %233 = OpConstant 7 
                                             %242 = OpTypePointer Input %184 
                                Input f32_3* %243 = OpVariable Input 
                                         u32 %261 = OpConstant 2 
                                Private f32* %263 = OpVariable Private 
                               Output f32_3* %271 = OpVariable Output 
                               Output f32_4* %291 = OpVariable Output 
                                             %303 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %108 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpExtInst %1 4 %22 
                                          f32 %25 = OpFAdd %23 %24 
                                 Private f32* %28 = OpAccessChain %9 %26 
                                                      OpStore %28 %25 
                                        f32_4 %30 = OpLoad %9 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 0 
                               Uniform f32_4* %34 = OpAccessChain %17 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_2 %36 = OpVectorShuffle %35 %35 1 0 
                                        f32_2 %37 = OpFMul %31 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
                                                      OpStore %9 %39 
                                   Input f32* %44 = OpAccessChain %42 %26 
                                          f32 %45 = OpLoad %44 
                                 Uniform f32* %46 = OpAccessChain %17 %19 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFMul %45 %47 
                                 Private f32* %50 = OpAccessChain %9 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFNegate %51 
                                          f32 %53 = OpFAdd %48 %52 
                                                      OpStore %40 %53 
                                        f32_4 %56 = OpLoad %42 
                                        f32_2 %57 = OpVectorShuffle %56 %56 1 2 
                                 Uniform f32* %59 = OpAccessChain %17 %58 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %61 = OpAccessChain %17 %58 
                                          f32 %62 = OpLoad %61 
                                        f32_2 %63 = OpCompositeConstruct %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                          f32 %65 = OpCompositeExtract %63 1 
                                        f32_2 %66 = OpCompositeConstruct %64 %65 
                                        f32_2 %67 = OpFNegate %66 
                                        f32_2 %68 = OpFAdd %57 %67 
                                                      OpStore %55 %68 
                                 Uniform f32* %69 = OpAccessChain %17 %19 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                 Private f32* %72 = OpAccessChain %55 %26 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %26 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFAdd %74 %76 
                                 Private f32* %78 = OpAccessChain %9 %26 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %55 %49 
                                          f32 %80 = OpLoad %79 
                                          f32 %82 = OpFAdd %80 %81 
                                 Private f32* %83 = OpAccessChain %55 %26 
                                                      OpStore %83 %82 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 0 0 0 0 
                               Uniform f32_4* %89 = OpAccessChain %17 %87 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFMul %86 %90 
                                                      OpStore %84 %91 
                               Uniform f32_4* %92 = OpAccessChain %17 %87 %87 
                                        f32_4 %93 = OpLoad %92 
                                          f32 %94 = OpLoad %40 
                                        f32_4 %95 = OpCompositeConstruct %94 %94 %94 %94 
                                        f32_4 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %84 
                                        f32_4 %98 = OpFAdd %96 %97 
                                                      OpStore %84 %98 
                                Uniform f32* %104 = OpAccessChain %17 %103 
                                         f32 %105 = OpLoad %104 
                                        bool %106 = OpFOrdLessThan %102 %105 
                                                      OpStore %101 %106 
                                        bool %109 = OpLoad %101 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %113 
                                             %110 = OpLabel 
                                                      OpStore %108 %112 
                                                      OpBranch %111 
                                             %113 = OpLabel 
                                                      OpStore %108 %24 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                         f32 %114 = OpLoad %108 
                                Private f32* %115 = OpAccessChain %9 %26 
                                                      OpStore %115 %114 
                                       f32_4 %117 = OpLoad %42 
                                       f32_4 %118 = OpVectorShuffle %117 %117 1 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %17 %87 %88 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFMul %118 %120 
                                                      OpStore %116 %121 
                              Uniform f32_4* %122 = OpAccessChain %17 %87 %87 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %42 
                                       f32_4 %125 = OpVectorShuffle %124 %124 0 0 0 0 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %116 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %116 %128 
                              Uniform f32_4* %130 = OpAccessChain %17 %87 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %42 
                                       f32_4 %133 = OpVectorShuffle %132 %132 2 2 2 2 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %116 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %116 %136 
                              Uniform f32_4* %137 = OpAccessChain %17 %87 %103 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpLoad %42 
                                       f32_4 %140 = OpVectorShuffle %139 %139 3 3 3 3 
                                       f32_4 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %116 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %116 %143 
                                       f32_4 %144 = OpLoad %116 
                              Uniform f32_4* %145 = OpAccessChain %17 %87 %103 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFNegate %146 
                                       f32_4 %148 = OpFAdd %144 %147 
                                                      OpStore %116 %148 
                                Private f32* %149 = OpAccessChain %116 %49 
                                         f32 %150 = OpLoad %149 
                                Uniform f32* %151 = OpAccessChain %17 %19 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %150 %152 
                                                      OpStore %40 %153 
                                         f32 %154 = OpLoad %40 
                                Private f32* %155 = OpAccessChain %9 %26 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                Private f32* %158 = OpAccessChain %55 %26 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %9 %26 
                                                      OpStore %161 %160 
                                Uniform f32* %162 = OpAccessChain %17 %32 %49 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                Uniform f32* %165 = OpAccessChain %17 %19 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpExtInst %1 4 %166 
                                         f32 %168 = OpFMul %164 %167 
                                Private f32* %169 = OpAccessChain %9 %26 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %26 
                                                      OpStore %172 %171 
                              Uniform f32_4* %173 = OpAccessChain %17 %87 %129 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %84 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                              Uniform f32_4* %181 = OpAccessChain %17 %87 %103 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpFAdd %180 %182 
                                                      OpStore %84 %183 
                              Uniform f32_4* %187 = OpAccessChain %17 %87 %103 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %42 
                                       f32_3 %191 = OpVectorShuffle %190 %190 3 3 3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %192 %194 
                                                      OpStore %186 %195 
                                       f32_4 %196 = OpLoad %84 
                                       f32_4 %197 = OpVectorShuffle %196 %196 1 1 1 1 
                              Uniform f32_4* %198 = OpAccessChain %17 %129 %88 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpFMul %197 %199 
                                                      OpStore %9 %200 
                              Uniform f32_4* %201 = OpAccessChain %17 %129 %87 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %84 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 0 0 0 
                                       f32_4 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %9 %207 
                              Uniform f32_4* %208 = OpAccessChain %17 %129 %129 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %84 
                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %9 %214 
                              Uniform f32_4* %219 = OpAccessChain %17 %129 %103 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %84 
                                       f32_4 %222 = OpVectorShuffle %221 %221 3 3 3 3 
                                       f32_4 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpFAdd %223 %224 
                               Output f32_4* %227 = OpAccessChain %218 %87 
                                                      OpStore %227 %225 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                              Uniform f32_4* %234 = OpAccessChain %17 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_2 %237 = OpFMul %232 %236 
                              Uniform f32_4* %238 = OpAccessChain %17 %233 
                                       f32_4 %239 = OpLoad %238 
                                       f32_2 %240 = OpVectorShuffle %239 %239 2 3 
                                       f32_2 %241 = OpFAdd %237 %240 
                                                      OpStore %229 %241 
                                       f32_3 %244 = OpLoad %243 
                              Uniform f32_4* %245 = OpAccessChain %17 %88 %87 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %244 %247 
                                Private f32* %249 = OpAccessChain %9 %26 
                                                      OpStore %249 %248 
                                       f32_3 %250 = OpLoad %243 
                              Uniform f32_4* %251 = OpAccessChain %17 %88 %88 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %250 %253 
                                Private f32* %255 = OpAccessChain %9 %49 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %243 
                              Uniform f32_4* %257 = OpAccessChain %17 %88 %129 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %256 %259 
                                Private f32* %262 = OpAccessChain %9 %261 
                                                      OpStore %262 %260 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                         f32 %268 = OpDot %265 %267 
                                                      OpStore %263 %268 
                                         f32 %269 = OpLoad %263 
                                         f32 %270 = OpExtInst %1 32 %269 
                                                      OpStore %263 %270 
                                         f32 %272 = OpLoad %263 
                                       f32_3 %273 = OpCompositeConstruct %272 %272 %272 
                                       f32_4 %274 = OpLoad %9 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                                      OpStore %271 %276 
                                Uniform f32* %277 = OpAccessChain %17 %19 
                                         f32 %278 = OpLoad %277 
                                Uniform f32* %279 = OpAccessChain %17 %19 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFAdd %278 %280 
                                Private f32* %282 = OpAccessChain %9 %26 
                                                      OpStore %282 %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 0 
                              Uniform f32_4* %285 = OpAccessChain %17 %32 
                                       f32_4 %286 = OpLoad %285 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                       f32_2 %288 = OpFMul %284 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
                                                      OpStore %9 %290 
                                       f32_4 %292 = OpLoad %116 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                       f32_4 %294 = OpLoad %9 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFDiv %293 %295 
                                       f32_4 %297 = OpLoad %291 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %291 %298 
                                       f32_4 %299 = OpLoad %116 
                                       f32_2 %300 = OpVectorShuffle %299 %299 2 3 
                                       f32_4 %301 = OpLoad %291 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
                                                      OpStore %291 %302 
                                 Output f32* %304 = OpAccessChain %218 %87 %49 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFNegate %305 
                                 Output f32* %307 = OpAccessChain %218 %87 %49 
                                                      OpStore %307 %306 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %114 %129 %316 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %25 ArrayStride 25 
                                                      OpMemberDecorate %26 0 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpMemberDecorate %26 5 RelaxedPrecision 
                                                      OpMemberDecorate %26 5 Offset 26 
                                                      OpMemberDecorate %26 6 Offset 26 
                                                      OpMemberDecorate %26 7 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %175 SpecId 175 
                                                      OpDecorate %254 DescriptorSet 254 
                                                      OpDecorate %254 Binding 254 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %280 DescriptorSet 280 
                                                      OpDecorate %280 Binding 280 
                                                      OpDecorate %290 DescriptorSet 290 
                                                      OpDecorate %290 Binding 290 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %316 Location 316 
                                                      OpDecorate %319 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeVector %6 3 
                                              %25 = OpTypeArray %7 %22 
                                              %26 = OpTypeStruct %7 %7 %23 %24 %24 %7 %25 %7 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4;}* %28 = OpVariable Uniform 
                                              %29 = OpTypeInt 32 1 
                                          i32 %30 = OpConstant 7 
                                              %31 = OpTypePointer Uniform %7 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          f32 %36 = OpConstant 3.674022E-40 
                                        f32_4 %37 = OpConstantComposite %35 %36 %36 %35 
                               Private f32_4* %42 = OpVariable Private 
                               Private f32_4* %47 = OpVariable Private 
                                              %52 = OpTypePointer Private %24 
                               Private f32_3* %53 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                        f32_2 %58 = OpConstantComposite %57 %57 
                               Private f32_4* %64 = OpVariable Private 
                                              %69 = OpTypePointer Private %15 
                               Private f32_2* %70 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                        f32_2 %75 = OpConstantComposite %74 %74 
                               Private f32_4* %79 = OpVariable Private 
                               Private f32_4* %83 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_4 %86 = OpConstantComposite %85 %85 %85 %85 
                               Private f32_4* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                        f32_4 %91 = OpConstantComposite %90 %90 %90 %90 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_4 %101 = OpConstantComposite %100 %100 %100 %100 
                                         u32 %109 = OpConstant 3 
                                             %110 = OpTypePointer Private %6 
                                             %113 = OpTypePointer Input %7 
                                Input f32_4* %114 = OpVariable Input 
                                         u32 %115 = OpConstant 1 
                                             %116 = OpTypePointer Input %6 
                                         u32 %120 = OpConstant 0 
                                         f32 %124 = OpConstant 3.674022E-40 
                              Private f32_3* %127 = OpVariable Private 
                                             %128 = OpTypePointer Input %24 
                                Input f32_3* %129 = OpVariable Input 
                                         i32 %132 = OpConstant 6 
                                         i32 %133 = OpConstant 1 
                                         i32 %138 = OpConstant 0 
                                         i32 %147 = OpConstant 2 
                                         i32 %157 = OpConstant 3 
                                             %162 = OpTypeBool 
                                             %163 = OpTypePointer Private %162 
                               Private bool* %164 = OpVariable Private 
                                             %165 = OpTypePointer Uniform %6 
                                        bool %169 = OpConstantFalse 
                                        bool %175 = OpSpecConstantFalse 
                              Private f32_3* %181 = OpVariable Private 
                                             %209 = OpTypePointer Function %24 
                                         i32 %219 = OpConstant 4 
                                             %220 = OpTypePointer Uniform %24 
                              Private f32_4* %225 = OpVariable Private 
                                         f32 %234 = OpConstant 3.674022E-40 
                                         u32 %238 = OpConstant 2 
                                         f32 %241 = OpConstant 3.674022E-40 
                                             %251 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %252 = OpTypeSampledImage %251 
                                             %253 = OpTypePointer UniformConstant %252 
 UniformConstant read_only Texture3DSampled* %254 = OpVariable UniformConstant 
                              Private f32_3* %265 = OpVariable Private 
                                         f32 %273 = OpConstant 3.674022E-40 
 UniformConstant read_only Texture2DSampled* %280 = OpVariable UniformConstant 
                                             %287 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %288 = OpTypeSampledImage %287 
                                             %289 = OpTypePointer UniformConstant %288 
UniformConstant read_only TextureCubeSampled* %290 = OpVariable UniformConstant 
                                         i32 %310 = OpConstant 5 
                                             %315 = OpTypePointer Output %7 
                               Output f32_4* %316 = OpVariable Output 
                                             %325 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %210 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                               Uniform f32_4* %32 = OpAccessChain %28 %30 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 1 0 1 
                                        f32_4 %38 = OpFMul %34 %37 
                                        f32_2 %39 = OpLoad %17 
                                        f32_4 %40 = OpVectorShuffle %39 %39 0 1 0 1 
                                        f32_4 %41 = OpFAdd %38 %40 
                                                      OpStore %20 %41 
                   read_only Texture2DSampled %43 = OpLoad %13 
                                        f32_4 %44 = OpLoad %20 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpImageSampleImplicitLod %43 %45 
                                                      OpStore %42 %46 
                   read_only Texture2DSampled %48 = OpLoad %13 
                                        f32_4 %49 = OpLoad %20 
                                        f32_2 %50 = OpVectorShuffle %49 %49 2 3 
                                        f32_4 %51 = OpImageSampleImplicitLod %48 %50 
                                                      OpStore %47 %51 
                               Uniform f32_4* %54 = OpAccessChain %28 %30 
                                        f32_4 %55 = OpLoad %54 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_2 %59 = OpFMul %56 %58 
                                        f32_2 %60 = OpLoad %17 
                                        f32_2 %61 = OpFAdd %59 %60 
                                        f32_3 %62 = OpLoad %53 
                                        f32_3 %63 = OpVectorShuffle %62 %61 3 4 2 
                                                      OpStore %53 %63 
                   read_only Texture2DSampled %65 = OpLoad %13 
                                        f32_3 %66 = OpLoad %53 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_4 %68 = OpImageSampleImplicitLod %65 %67 
                                                      OpStore %64 %68 
                               Uniform f32_4* %71 = OpAccessChain %28 %30 
                                        f32_4 %72 = OpLoad %71 
                                        f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                                        f32_2 %76 = OpFMul %73 %75 
                                        f32_2 %77 = OpLoad %17 
                                        f32_2 %78 = OpFAdd %76 %77 
                                                      OpStore %70 %78 
                   read_only Texture2DSampled %80 = OpLoad %13 
                                        f32_2 %81 = OpLoad %70 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                                      OpStore %79 %82 
                                        f32_4 %84 = OpLoad %42 
                                        f32_4 %87 = OpFMul %84 %86 
                                                      OpStore %83 %87 
                                        f32_4 %89 = OpLoad %9 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %83 
                                        f32_4 %94 = OpFAdd %92 %93 
                                                      OpStore %88 %94 
                                        f32_4 %95 = OpLoad %47 
                                        f32_4 %96 = OpFMul %95 %86 
                                        f32_4 %97 = OpLoad %88 
                                        f32_4 %98 = OpFAdd %96 %97 
                                                      OpStore %88 %98 
                                        f32_4 %99 = OpLoad %64 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %88 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %88 %104 
                                       f32_4 %105 = OpLoad %79 
                                       f32_4 %106 = OpFMul %105 %101 
                                       f32_4 %107 = OpLoad %88 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %88 %108 
                                Private f32* %111 = OpAccessChain %88 %109 
                                         f32 %112 = OpLoad %111 
                                  Input f32* %117 = OpAccessChain %114 %115 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFMul %112 %118 
                                Private f32* %121 = OpAccessChain %20 %120 
                                                      OpStore %121 %119 
                                Private f32* %122 = OpAccessChain %20 %120 
                                         f32 %123 = OpLoad %122 
                                         f32 %125 = OpFMul %123 %124 
                                Private f32* %126 = OpAccessChain %20 %120 
                                                      OpStore %126 %125 
                                       f32_3 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 1 1 1 
                              Uniform f32_4* %134 = OpAccessChain %28 %132 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFMul %131 %136 
                                                      OpStore %127 %137 
                              Uniform f32_4* %139 = OpAccessChain %28 %132 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpLoad %129 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 0 0 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_3 %145 = OpLoad %127 
                                       f32_3 %146 = OpFAdd %144 %145 
                                                      OpStore %127 %146 
                              Uniform f32_4* %148 = OpAccessChain %28 %132 %147 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpLoad %129 
                                       f32_3 %152 = OpVectorShuffle %151 %151 2 2 2 
                                       f32_3 %153 = OpFMul %150 %152 
                                       f32_3 %154 = OpLoad %127 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %127 %155 
                                       f32_3 %156 = OpLoad %127 
                              Uniform f32_4* %158 = OpAccessChain %28 %132 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %156 %160 
                                                      OpStore %127 %161 
                                Uniform f32* %166 = OpAccessChain %28 %133 %120 
                                         f32 %167 = OpLoad %166 
                                        bool %168 = OpFOrdEqual %167 %36 
                                                      OpStore %164 %168 
                                                      OpSelectionMerge %171 None 
                                                      OpBranchConditional %169 %170 %171 
                                             %170 = OpLabel 
                                        bool %172 = OpLoad %164 
                                                      OpSelectionMerge %174 None 
                                                      OpBranchConditional %172 %173 %174 
                                             %173 = OpLabel 
                                                      OpBranch %174 
                                             %174 = OpLabel 
                                                      OpBranch %171 
                                             %171 = OpLabel 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %260 
                                             %176 = OpLabel 
                                Uniform f32* %178 = OpAccessChain %28 %133 %115 
                                         f32 %179 = OpLoad %178 
                                        bool %180 = OpFOrdEqual %179 %36 
                                                      OpStore %164 %180 
                                       f32_3 %182 = OpLoad %129 
                                       f32_3 %183 = OpVectorShuffle %182 %182 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %28 %147 %133 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %183 %186 
                                                      OpStore %181 %187 
                              Uniform f32_4* %188 = OpAccessChain %28 %147 %138 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpLoad %129 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %181 
                                       f32_3 %195 = OpFAdd %193 %194 
                                                      OpStore %181 %195 
                              Uniform f32_4* %196 = OpAccessChain %28 %147 %147 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpLoad %129 
                                       f32_3 %200 = OpVectorShuffle %199 %199 2 2 2 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_3 %202 = OpLoad %181 
                                       f32_3 %203 = OpFAdd %201 %202 
                                                      OpStore %181 %203 
                                       f32_3 %204 = OpLoad %181 
                              Uniform f32_4* %205 = OpAccessChain %28 %147 %157 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFAdd %204 %207 
                                                      OpStore %181 %208 
                                        bool %211 = OpLoad %164 
                                                      OpSelectionMerge %213 None 
                                                      OpBranchConditional %211 %212 %215 
                                             %212 = OpLabel 
                                       f32_3 %214 = OpLoad %181 
                                                      OpStore %210 %214 
                                                      OpBranch %213 
                                             %215 = OpLabel 
                                       f32_3 %216 = OpLoad %129 
                                                      OpStore %210 %216 
                                                      OpBranch %213 
                                             %213 = OpLabel 
                                       f32_3 %217 = OpLoad %210 
                                                      OpStore %53 %217 
                                       f32_3 %218 = OpLoad %53 
                              Uniform f32_3* %221 = OpAccessChain %28 %219 
                                       f32_3 %222 = OpLoad %221 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpFAdd %218 %223 
                                                      OpStore %53 %224 
                                       f32_3 %226 = OpLoad %53 
                              Uniform f32_3* %227 = OpAccessChain %28 %157 
                                       f32_3 %228 = OpLoad %227 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %225 
                                       f32_4 %231 = OpVectorShuffle %230 %229 0 4 5 6 
                                                      OpStore %225 %231 
                                Private f32* %232 = OpAccessChain %225 %115 
                                         f32 %233 = OpLoad %232 
                                         f32 %235 = OpFMul %233 %234 
                                         f32 %236 = OpFAdd %235 %124 
                                Private f32* %237 = OpAccessChain %53 %120 
                                                      OpStore %237 %236 
                                Uniform f32* %239 = OpAccessChain %28 %133 %238 
                                         f32 %240 = OpLoad %239 
                                         f32 %242 = OpFMul %240 %241 
                                         f32 %243 = OpFAdd %242 %124 
                                Private f32* %244 = OpAccessChain %181 %120 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %181 %120 
                                         f32 %246 = OpLoad %245 
                                Private f32* %247 = OpAccessChain %53 %120 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpExtInst %1 40 %246 %248 
                                Private f32* %250 = OpAccessChain %225 %120 
                                                      OpStore %250 %249 
                  read_only Texture3DSampled %255 = OpLoad %254 
                                       f32_4 %256 = OpLoad %225 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 2 3 
                                       f32_4 %258 = OpImageSampleImplicitLod %255 %257 
                                                      OpStore %225 %258 
                                       f32_4 %259 = OpLoad %225 
                                                      OpStore %83 %259 
                                                      OpBranch %177 
                                             %260 = OpLabel 
                                Private f32* %261 = OpAccessChain %83 %120 
                                                      OpStore %261 %36 
                                Private f32* %262 = OpAccessChain %83 %115 
                                                      OpStore %262 %36 
                                Private f32* %263 = OpAccessChain %83 %238 
                                                      OpStore %263 %36 
                                Private f32* %264 = OpAccessChain %83 %109 
                                                      OpStore %264 %36 
                                                      OpBranch %177 
                                             %177 = OpLabel 
                                       f32_4 %266 = OpLoad %83 
                              Uniform f32_4* %267 = OpAccessChain %28 %138 
                                       f32_4 %268 = OpLoad %267 
                                         f32 %269 = OpDot %266 %268 
                                Private f32* %270 = OpAccessChain %265 %120 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %265 %120 
                                         f32 %272 = OpLoad %271 
                                         f32 %274 = OpExtInst %1 43 %272 %273 %36 
                                Private f32* %275 = OpAccessChain %265 %120 
                                                      OpStore %275 %274 
                                       f32_3 %276 = OpLoad %127 
                                       f32_3 %277 = OpLoad %127 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %53 %120 
                                                      OpStore %279 %278 
                  read_only Texture2DSampled %281 = OpLoad %280 
                                       f32_3 %282 = OpLoad %53 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 0 
                                       f32_4 %284 = OpImageSampleImplicitLod %281 %283 
                                         f32 %285 = OpCompositeExtract %284 3 
                                Private f32* %286 = OpAccessChain %53 %120 
                                                      OpStore %286 %285 
                read_only TextureCubeSampled %291 = OpLoad %290 
                                       f32_3 %292 = OpLoad %127 
                                       f32_4 %293 = OpImageSampleImplicitLod %291 %292 
                                         f32 %294 = OpCompositeExtract %293 3 
                                Private f32* %295 = OpAccessChain %127 %120 
                                                      OpStore %295 %294 
                                Private f32* %296 = OpAccessChain %127 %120 
                                         f32 %297 = OpLoad %296 
                                Private f32* %298 = OpAccessChain %53 %120 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %297 %299 
                                Private f32* %301 = OpAccessChain %127 %120 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %265 %120 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %127 %120 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                Private f32* %307 = OpAccessChain %127 %120 
                                                      OpStore %307 %306 
                                       f32_4 %308 = OpLoad %88 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                              Uniform f32_4* %311 = OpAccessChain %28 %310 
                                       f32_4 %312 = OpLoad %311 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFMul %309 %313 
                                                      OpStore %265 %314 
                                       f32_3 %317 = OpLoad %127 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 0 0 
                                       f32_3 %319 = OpLoad %265 
                                       f32_3 %320 = OpFMul %318 %319 
                                       f32_4 %321 = OpLoad %316 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %316 %322 
                                Private f32* %323 = OpAccessChain %20 %120 
                                         f32 %324 = OpLoad %323 
                                 Output f32* %326 = OpAccessChain %316 %109 
                                                      OpStore %326 %324 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	float _LightScale;
uniform 	float _HeightOffGround;
uniform 	vec4 _MeshBoundsExtents;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
void main()
{
    u_xlat0.x = abs(_LightScale) + -1.0;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.yx;
    u_xlat3 = in_POSITION0.x * _LightScale + (-u_xlat0.y);
    u_xlat6.xy = in_POSITION0.yz + (-vec2(vec2(_HeightOffGround, _HeightOffGround)));
    u_xlat0.x = (-_LightScale) * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = u_xlat6.y + 10.0;
    u_xlat1 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat3) + u_xlat1;
    u_xlatb0 = 0.0<_Perpendicular;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat2 = u_xlat2 + (-hlslcc_mtx4x4unity_ObjectToWorld[3]);
    u_xlat3 = u_xlat2.y * _LightScale;
    u_xlat0.x = u_xlat3 * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = (-_MeshBoundsExtents.y) * abs(_LightScale) + u_xlat0.x;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = _LightScale + _LightScale;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.xy;
    vs_TEXCOORD3.xy = u_xlat2.xy / u_xlat0.xy;
    vs_TEXCOORD3.zw = u_xlat2.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_TexelSize;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat10_3;
vec2 u_xlat4;
vec4 u_xlat10_4;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat10_3 = texture(_MainTex, u_xlat3.xy);
    u_xlat4.xy = _MainTex_TexelSize.xy * vec2(-2.0, -2.0) + vs_TEXCOORD0.xy;
    u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
    u_xlat16_2 = u_xlat10_2 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003);
    u_xlat16_0 = u_xlat10_0 * vec4(0.300000012, 0.300000012, 0.300000012, 0.300000012) + u_xlat16_2;
    u_xlat16_0 = u_xlat10_1 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_3 * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_4 * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat15 = u_xlat16_0.w * vs_TEXCOORD3.y;
    SV_Target0.w = u_xlat15 * 0.75;
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat2.y * 0.25 + 0.75;
        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat16);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat15 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat15 = u_xlat15 * u_xlat10_1.w;
    u_xlat0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 309
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %42 %186 %218 %229 %230 %243 %271 %291 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %186 Location 186 
                                                      OpMemberDecorate %216 0 BuiltIn 216 
                                                      OpMemberDecorate %216 1 BuiltIn 216 
                                                      OpMemberDecorate %216 2 BuiltIn 216 
                                                      OpDecorate %216 Block 
                                                      OpDecorate %229 Location 229 
                                                      OpDecorate %230 Location 230 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %271 Location 271 
                                                      OpDecorate %291 Location 291 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %24 = OpConstant 3.674022E-40 
                                          u32 %26 = OpConstant 0 
                                              %27 = OpTypePointer Private %6 
                                              %29 = OpTypeVector %6 2 
                                          i32 %32 = OpConstant 6 
                                              %33 = OpTypePointer Uniform %7 
                                 Private f32* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                              %43 = OpTypePointer Input %6 
                                          u32 %49 = OpConstant 1 
                                              %54 = OpTypePointer Private %29 
                               Private f32_2* %55 = OpVariable Private 
                                          i32 %58 = OpConstant 5 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %87 = OpConstant 0 
                                          i32 %88 = OpConstant 1 
                                              %99 = OpTypeBool 
                                             %100 = OpTypePointer Private %99 
                               Private bool* %101 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 3 
                                             %107 = OpTypePointer Function %6 
                                         f32 %112 = OpConstant 3.674022E-40 
                              Private f32_4* %116 = OpVariable Private 
                                         i32 %129 = OpConstant 2 
                                             %184 = OpTypeVector %6 3 
                                             %185 = OpTypePointer Output %184 
                               Output f32_3* %186 = OpVariable Output 
                                             %215 = OpTypeArray %6 %49 
                                             %216 = OpTypeStruct %7 %6 %215 
                                             %217 = OpTypePointer Output %216 
        Output struct {f32_4; f32; f32[1];}* %218 = OpVariable Output 
                                             %226 = OpTypePointer Output %7 
                                             %228 = OpTypePointer Output %29 
                               Output f32_2* %229 = OpVariable Output 
                                Input f32_4* %230 = OpVariable Input 
                                         i32 %233 = OpConstant 7 
                                             %242 = OpTypePointer Input %184 
                                Input f32_3* %243 = OpVariable Input 
                                         u32 %261 = OpConstant 2 
                                Private f32* %263 = OpVariable Private 
                               Output f32_3* %271 = OpVariable Output 
                               Output f32_4* %291 = OpVariable Output 
                                             %303 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %108 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpExtInst %1 4 %22 
                                          f32 %25 = OpFAdd %23 %24 
                                 Private f32* %28 = OpAccessChain %9 %26 
                                                      OpStore %28 %25 
                                        f32_4 %30 = OpLoad %9 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 0 
                               Uniform f32_4* %34 = OpAccessChain %17 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_2 %36 = OpVectorShuffle %35 %35 1 0 
                                        f32_2 %37 = OpFMul %31 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
                                                      OpStore %9 %39 
                                   Input f32* %44 = OpAccessChain %42 %26 
                                          f32 %45 = OpLoad %44 
                                 Uniform f32* %46 = OpAccessChain %17 %19 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFMul %45 %47 
                                 Private f32* %50 = OpAccessChain %9 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFNegate %51 
                                          f32 %53 = OpFAdd %48 %52 
                                                      OpStore %40 %53 
                                        f32_4 %56 = OpLoad %42 
                                        f32_2 %57 = OpVectorShuffle %56 %56 1 2 
                                 Uniform f32* %59 = OpAccessChain %17 %58 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %61 = OpAccessChain %17 %58 
                                          f32 %62 = OpLoad %61 
                                        f32_2 %63 = OpCompositeConstruct %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                          f32 %65 = OpCompositeExtract %63 1 
                                        f32_2 %66 = OpCompositeConstruct %64 %65 
                                        f32_2 %67 = OpFNegate %66 
                                        f32_2 %68 = OpFAdd %57 %67 
                                                      OpStore %55 %68 
                                 Uniform f32* %69 = OpAccessChain %17 %19 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                 Private f32* %72 = OpAccessChain %55 %26 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %26 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFAdd %74 %76 
                                 Private f32* %78 = OpAccessChain %9 %26 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %55 %49 
                                          f32 %80 = OpLoad %79 
                                          f32 %82 = OpFAdd %80 %81 
                                 Private f32* %83 = OpAccessChain %55 %26 
                                                      OpStore %83 %82 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 0 0 0 0 
                               Uniform f32_4* %89 = OpAccessChain %17 %87 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFMul %86 %90 
                                                      OpStore %84 %91 
                               Uniform f32_4* %92 = OpAccessChain %17 %87 %87 
                                        f32_4 %93 = OpLoad %92 
                                          f32 %94 = OpLoad %40 
                                        f32_4 %95 = OpCompositeConstruct %94 %94 %94 %94 
                                        f32_4 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %84 
                                        f32_4 %98 = OpFAdd %96 %97 
                                                      OpStore %84 %98 
                                Uniform f32* %104 = OpAccessChain %17 %103 
                                         f32 %105 = OpLoad %104 
                                        bool %106 = OpFOrdLessThan %102 %105 
                                                      OpStore %101 %106 
                                        bool %109 = OpLoad %101 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %113 
                                             %110 = OpLabel 
                                                      OpStore %108 %112 
                                                      OpBranch %111 
                                             %113 = OpLabel 
                                                      OpStore %108 %24 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                         f32 %114 = OpLoad %108 
                                Private f32* %115 = OpAccessChain %9 %26 
                                                      OpStore %115 %114 
                                       f32_4 %117 = OpLoad %42 
                                       f32_4 %118 = OpVectorShuffle %117 %117 1 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %17 %87 %88 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFMul %118 %120 
                                                      OpStore %116 %121 
                              Uniform f32_4* %122 = OpAccessChain %17 %87 %87 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %42 
                                       f32_4 %125 = OpVectorShuffle %124 %124 0 0 0 0 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %116 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %116 %128 
                              Uniform f32_4* %130 = OpAccessChain %17 %87 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %42 
                                       f32_4 %133 = OpVectorShuffle %132 %132 2 2 2 2 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %116 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %116 %136 
                              Uniform f32_4* %137 = OpAccessChain %17 %87 %103 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpLoad %42 
                                       f32_4 %140 = OpVectorShuffle %139 %139 3 3 3 3 
                                       f32_4 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %116 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %116 %143 
                                       f32_4 %144 = OpLoad %116 
                              Uniform f32_4* %145 = OpAccessChain %17 %87 %103 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFNegate %146 
                                       f32_4 %148 = OpFAdd %144 %147 
                                                      OpStore %116 %148 
                                Private f32* %149 = OpAccessChain %116 %49 
                                         f32 %150 = OpLoad %149 
                                Uniform f32* %151 = OpAccessChain %17 %19 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %150 %152 
                                                      OpStore %40 %153 
                                         f32 %154 = OpLoad %40 
                                Private f32* %155 = OpAccessChain %9 %26 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                Private f32* %158 = OpAccessChain %55 %26 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %9 %26 
                                                      OpStore %161 %160 
                                Uniform f32* %162 = OpAccessChain %17 %32 %49 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                Uniform f32* %165 = OpAccessChain %17 %19 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpExtInst %1 4 %166 
                                         f32 %168 = OpFMul %164 %167 
                                Private f32* %169 = OpAccessChain %9 %26 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %26 
                                                      OpStore %172 %171 
                              Uniform f32_4* %173 = OpAccessChain %17 %87 %129 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %84 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                              Uniform f32_4* %181 = OpAccessChain %17 %87 %103 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpFAdd %180 %182 
                                                      OpStore %84 %183 
                              Uniform f32_4* %187 = OpAccessChain %17 %87 %103 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %42 
                                       f32_3 %191 = OpVectorShuffle %190 %190 3 3 3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %192 %194 
                                                      OpStore %186 %195 
                                       f32_4 %196 = OpLoad %84 
                                       f32_4 %197 = OpVectorShuffle %196 %196 1 1 1 1 
                              Uniform f32_4* %198 = OpAccessChain %17 %129 %88 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpFMul %197 %199 
                                                      OpStore %9 %200 
                              Uniform f32_4* %201 = OpAccessChain %17 %129 %87 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %84 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 0 0 0 
                                       f32_4 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %9 %207 
                              Uniform f32_4* %208 = OpAccessChain %17 %129 %129 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %84 
                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %9 %214 
                              Uniform f32_4* %219 = OpAccessChain %17 %129 %103 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %84 
                                       f32_4 %222 = OpVectorShuffle %221 %221 3 3 3 3 
                                       f32_4 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpFAdd %223 %224 
                               Output f32_4* %227 = OpAccessChain %218 %87 
                                                      OpStore %227 %225 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                              Uniform f32_4* %234 = OpAccessChain %17 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_2 %237 = OpFMul %232 %236 
                              Uniform f32_4* %238 = OpAccessChain %17 %233 
                                       f32_4 %239 = OpLoad %238 
                                       f32_2 %240 = OpVectorShuffle %239 %239 2 3 
                                       f32_2 %241 = OpFAdd %237 %240 
                                                      OpStore %229 %241 
                                       f32_3 %244 = OpLoad %243 
                              Uniform f32_4* %245 = OpAccessChain %17 %88 %87 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %244 %247 
                                Private f32* %249 = OpAccessChain %9 %26 
                                                      OpStore %249 %248 
                                       f32_3 %250 = OpLoad %243 
                              Uniform f32_4* %251 = OpAccessChain %17 %88 %88 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %250 %253 
                                Private f32* %255 = OpAccessChain %9 %49 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %243 
                              Uniform f32_4* %257 = OpAccessChain %17 %88 %129 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %256 %259 
                                Private f32* %262 = OpAccessChain %9 %261 
                                                      OpStore %262 %260 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                         f32 %268 = OpDot %265 %267 
                                                      OpStore %263 %268 
                                         f32 %269 = OpLoad %263 
                                         f32 %270 = OpExtInst %1 32 %269 
                                                      OpStore %263 %270 
                                         f32 %272 = OpLoad %263 
                                       f32_3 %273 = OpCompositeConstruct %272 %272 %272 
                                       f32_4 %274 = OpLoad %9 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                                      OpStore %271 %276 
                                Uniform f32* %277 = OpAccessChain %17 %19 
                                         f32 %278 = OpLoad %277 
                                Uniform f32* %279 = OpAccessChain %17 %19 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFAdd %278 %280 
                                Private f32* %282 = OpAccessChain %9 %26 
                                                      OpStore %282 %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 0 
                              Uniform f32_4* %285 = OpAccessChain %17 %32 
                                       f32_4 %286 = OpLoad %285 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                       f32_2 %288 = OpFMul %284 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
                                                      OpStore %9 %290 
                                       f32_4 %292 = OpLoad %116 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                       f32_4 %294 = OpLoad %9 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFDiv %293 %295 
                                       f32_4 %297 = OpLoad %291 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %291 %298 
                                       f32_4 %299 = OpLoad %116 
                                       f32_2 %300 = OpVectorShuffle %299 %299 2 3 
                                       f32_4 %301 = OpLoad %291 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
                                                      OpStore %291 %302 
                                 Output f32* %304 = OpAccessChain %218 %87 %49 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFNegate %305 
                                 Output f32* %307 = OpAccessChain %218 %87 %49 
                                                      OpStore %307 %306 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 313
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %114 %129 %301 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %25 ArrayStride 25 
                                                      OpMemberDecorate %26 0 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpMemberDecorate %26 5 RelaxedPrecision 
                                                      OpMemberDecorate %26 5 Offset 26 
                                                      OpMemberDecorate %26 6 Offset 26 
                                                      OpMemberDecorate %26 7 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %175 SpecId 175 
                                                      OpDecorate %254 DescriptorSet 254 
                                                      OpDecorate %254 Binding 254 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %280 DescriptorSet 280 
                                                      OpDecorate %280 Binding 280 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %301 Location 301 
                                                      OpDecorate %304 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeVector %6 3 
                                              %25 = OpTypeArray %7 %22 
                                              %26 = OpTypeStruct %7 %7 %23 %24 %24 %7 %25 %7 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4;}* %28 = OpVariable Uniform 
                                              %29 = OpTypeInt 32 1 
                                          i32 %30 = OpConstant 7 
                                              %31 = OpTypePointer Uniform %7 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          f32 %36 = OpConstant 3.674022E-40 
                                        f32_4 %37 = OpConstantComposite %35 %36 %36 %35 
                               Private f32_4* %42 = OpVariable Private 
                               Private f32_4* %47 = OpVariable Private 
                                              %52 = OpTypePointer Private %24 
                               Private f32_3* %53 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                        f32_2 %58 = OpConstantComposite %57 %57 
                               Private f32_4* %64 = OpVariable Private 
                                              %69 = OpTypePointer Private %15 
                               Private f32_2* %70 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                        f32_2 %75 = OpConstantComposite %74 %74 
                               Private f32_4* %79 = OpVariable Private 
                               Private f32_4* %83 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_4 %86 = OpConstantComposite %85 %85 %85 %85 
                               Private f32_4* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                        f32_4 %91 = OpConstantComposite %90 %90 %90 %90 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_4 %101 = OpConstantComposite %100 %100 %100 %100 
                                         u32 %109 = OpConstant 3 
                                             %110 = OpTypePointer Private %6 
                                             %113 = OpTypePointer Input %7 
                                Input f32_4* %114 = OpVariable Input 
                                         u32 %115 = OpConstant 1 
                                             %116 = OpTypePointer Input %6 
                                         u32 %120 = OpConstant 0 
                                         f32 %124 = OpConstant 3.674022E-40 
                              Private f32_3* %127 = OpVariable Private 
                                             %128 = OpTypePointer Input %24 
                                Input f32_3* %129 = OpVariable Input 
                                         i32 %132 = OpConstant 6 
                                         i32 %133 = OpConstant 1 
                                         i32 %138 = OpConstant 0 
                                         i32 %147 = OpConstant 2 
                                         i32 %157 = OpConstant 3 
                                             %162 = OpTypeBool 
                                             %163 = OpTypePointer Private %162 
                               Private bool* %164 = OpVariable Private 
                                             %165 = OpTypePointer Uniform %6 
                                        bool %169 = OpConstantFalse 
                                        bool %175 = OpSpecConstantFalse 
                              Private f32_3* %181 = OpVariable Private 
                                             %209 = OpTypePointer Function %24 
                                         i32 %219 = OpConstant 4 
                                             %220 = OpTypePointer Uniform %24 
                              Private f32_4* %225 = OpVariable Private 
                                         f32 %234 = OpConstant 3.674022E-40 
                                         u32 %238 = OpConstant 2 
                                         f32 %241 = OpConstant 3.674022E-40 
                                             %251 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %252 = OpTypeSampledImage %251 
                                             %253 = OpTypePointer UniformConstant %252 
 UniformConstant read_only Texture3DSampled* %254 = OpVariable UniformConstant 
                              Private f32_3* %265 = OpVariable Private 
                                         f32 %273 = OpConstant 3.674022E-40 
 UniformConstant read_only Texture2DSampled* %280 = OpVariable UniformConstant 
                                         i32 %295 = OpConstant 5 
                                             %300 = OpTypePointer Output %7 
                               Output f32_4* %301 = OpVariable Output 
                                             %310 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %210 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                               Uniform f32_4* %32 = OpAccessChain %28 %30 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 1 0 1 
                                        f32_4 %38 = OpFMul %34 %37 
                                        f32_2 %39 = OpLoad %17 
                                        f32_4 %40 = OpVectorShuffle %39 %39 0 1 0 1 
                                        f32_4 %41 = OpFAdd %38 %40 
                                                      OpStore %20 %41 
                   read_only Texture2DSampled %43 = OpLoad %13 
                                        f32_4 %44 = OpLoad %20 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpImageSampleImplicitLod %43 %45 
                                                      OpStore %42 %46 
                   read_only Texture2DSampled %48 = OpLoad %13 
                                        f32_4 %49 = OpLoad %20 
                                        f32_2 %50 = OpVectorShuffle %49 %49 2 3 
                                        f32_4 %51 = OpImageSampleImplicitLod %48 %50 
                                                      OpStore %47 %51 
                               Uniform f32_4* %54 = OpAccessChain %28 %30 
                                        f32_4 %55 = OpLoad %54 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_2 %59 = OpFMul %56 %58 
                                        f32_2 %60 = OpLoad %17 
                                        f32_2 %61 = OpFAdd %59 %60 
                                        f32_3 %62 = OpLoad %53 
                                        f32_3 %63 = OpVectorShuffle %62 %61 3 4 2 
                                                      OpStore %53 %63 
                   read_only Texture2DSampled %65 = OpLoad %13 
                                        f32_3 %66 = OpLoad %53 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_4 %68 = OpImageSampleImplicitLod %65 %67 
                                                      OpStore %64 %68 
                               Uniform f32_4* %71 = OpAccessChain %28 %30 
                                        f32_4 %72 = OpLoad %71 
                                        f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                                        f32_2 %76 = OpFMul %73 %75 
                                        f32_2 %77 = OpLoad %17 
                                        f32_2 %78 = OpFAdd %76 %77 
                                                      OpStore %70 %78 
                   read_only Texture2DSampled %80 = OpLoad %13 
                                        f32_2 %81 = OpLoad %70 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                                      OpStore %79 %82 
                                        f32_4 %84 = OpLoad %42 
                                        f32_4 %87 = OpFMul %84 %86 
                                                      OpStore %83 %87 
                                        f32_4 %89 = OpLoad %9 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %83 
                                        f32_4 %94 = OpFAdd %92 %93 
                                                      OpStore %88 %94 
                                        f32_4 %95 = OpLoad %47 
                                        f32_4 %96 = OpFMul %95 %86 
                                        f32_4 %97 = OpLoad %88 
                                        f32_4 %98 = OpFAdd %96 %97 
                                                      OpStore %88 %98 
                                        f32_4 %99 = OpLoad %64 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %88 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %88 %104 
                                       f32_4 %105 = OpLoad %79 
                                       f32_4 %106 = OpFMul %105 %101 
                                       f32_4 %107 = OpLoad %88 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %88 %108 
                                Private f32* %111 = OpAccessChain %88 %109 
                                         f32 %112 = OpLoad %111 
                                  Input f32* %117 = OpAccessChain %114 %115 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFMul %112 %118 
                                Private f32* %121 = OpAccessChain %20 %120 
                                                      OpStore %121 %119 
                                Private f32* %122 = OpAccessChain %20 %120 
                                         f32 %123 = OpLoad %122 
                                         f32 %125 = OpFMul %123 %124 
                                Private f32* %126 = OpAccessChain %20 %120 
                                                      OpStore %126 %125 
                                       f32_3 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 1 1 1 
                              Uniform f32_4* %134 = OpAccessChain %28 %132 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFMul %131 %136 
                                                      OpStore %127 %137 
                              Uniform f32_4* %139 = OpAccessChain %28 %132 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpLoad %129 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 0 0 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_3 %145 = OpLoad %127 
                                       f32_3 %146 = OpFAdd %144 %145 
                                                      OpStore %127 %146 
                              Uniform f32_4* %148 = OpAccessChain %28 %132 %147 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpLoad %129 
                                       f32_3 %152 = OpVectorShuffle %151 %151 2 2 2 
                                       f32_3 %153 = OpFMul %150 %152 
                                       f32_3 %154 = OpLoad %127 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %127 %155 
                                       f32_3 %156 = OpLoad %127 
                              Uniform f32_4* %158 = OpAccessChain %28 %132 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFAdd %156 %160 
                                                      OpStore %127 %161 
                                Uniform f32* %166 = OpAccessChain %28 %133 %120 
                                         f32 %167 = OpLoad %166 
                                        bool %168 = OpFOrdEqual %167 %36 
                                                      OpStore %164 %168 
                                                      OpSelectionMerge %171 None 
                                                      OpBranchConditional %169 %170 %171 
                                             %170 = OpLabel 
                                        bool %172 = OpLoad %164 
                                                      OpSelectionMerge %174 None 
                                                      OpBranchConditional %172 %173 %174 
                                             %173 = OpLabel 
                                                      OpBranch %174 
                                             %174 = OpLabel 
                                                      OpBranch %171 
                                             %171 = OpLabel 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %260 
                                             %176 = OpLabel 
                                Uniform f32* %178 = OpAccessChain %28 %133 %115 
                                         f32 %179 = OpLoad %178 
                                        bool %180 = OpFOrdEqual %179 %36 
                                                      OpStore %164 %180 
                                       f32_3 %182 = OpLoad %129 
                                       f32_3 %183 = OpVectorShuffle %182 %182 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %28 %147 %133 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %183 %186 
                                                      OpStore %181 %187 
                              Uniform f32_4* %188 = OpAccessChain %28 %147 %138 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpLoad %129 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %181 
                                       f32_3 %195 = OpFAdd %193 %194 
                                                      OpStore %181 %195 
                              Uniform f32_4* %196 = OpAccessChain %28 %147 %147 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpLoad %129 
                                       f32_3 %200 = OpVectorShuffle %199 %199 2 2 2 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_3 %202 = OpLoad %181 
                                       f32_3 %203 = OpFAdd %201 %202 
                                                      OpStore %181 %203 
                                       f32_3 %204 = OpLoad %181 
                              Uniform f32_4* %205 = OpAccessChain %28 %147 %157 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFAdd %204 %207 
                                                      OpStore %181 %208 
                                        bool %211 = OpLoad %164 
                                                      OpSelectionMerge %213 None 
                                                      OpBranchConditional %211 %212 %215 
                                             %212 = OpLabel 
                                       f32_3 %214 = OpLoad %181 
                                                      OpStore %210 %214 
                                                      OpBranch %213 
                                             %215 = OpLabel 
                                       f32_3 %216 = OpLoad %129 
                                                      OpStore %210 %216 
                                                      OpBranch %213 
                                             %213 = OpLabel 
                                       f32_3 %217 = OpLoad %210 
                                                      OpStore %53 %217 
                                       f32_3 %218 = OpLoad %53 
                              Uniform f32_3* %221 = OpAccessChain %28 %219 
                                       f32_3 %222 = OpLoad %221 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpFAdd %218 %223 
                                                      OpStore %53 %224 
                                       f32_3 %226 = OpLoad %53 
                              Uniform f32_3* %227 = OpAccessChain %28 %157 
                                       f32_3 %228 = OpLoad %227 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %225 
                                       f32_4 %231 = OpVectorShuffle %230 %229 0 4 5 6 
                                                      OpStore %225 %231 
                                Private f32* %232 = OpAccessChain %225 %115 
                                         f32 %233 = OpLoad %232 
                                         f32 %235 = OpFMul %233 %234 
                                         f32 %236 = OpFAdd %235 %124 
                                Private f32* %237 = OpAccessChain %53 %120 
                                                      OpStore %237 %236 
                                Uniform f32* %239 = OpAccessChain %28 %133 %238 
                                         f32 %240 = OpLoad %239 
                                         f32 %242 = OpFMul %240 %241 
                                         f32 %243 = OpFAdd %242 %124 
                                Private f32* %244 = OpAccessChain %181 %120 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %181 %120 
                                         f32 %246 = OpLoad %245 
                                Private f32* %247 = OpAccessChain %53 %120 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpExtInst %1 40 %246 %248 
                                Private f32* %250 = OpAccessChain %225 %120 
                                                      OpStore %250 %249 
                  read_only Texture3DSampled %255 = OpLoad %254 
                                       f32_4 %256 = OpLoad %225 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 2 3 
                                       f32_4 %258 = OpImageSampleImplicitLod %255 %257 
                                                      OpStore %225 %258 
                                       f32_4 %259 = OpLoad %225 
                                                      OpStore %83 %259 
                                                      OpBranch %177 
                                             %260 = OpLabel 
                                Private f32* %261 = OpAccessChain %83 %120 
                                                      OpStore %261 %36 
                                Private f32* %262 = OpAccessChain %83 %115 
                                                      OpStore %262 %36 
                                Private f32* %263 = OpAccessChain %83 %238 
                                                      OpStore %263 %36 
                                Private f32* %264 = OpAccessChain %83 %109 
                                                      OpStore %264 %36 
                                                      OpBranch %177 
                                             %177 = OpLabel 
                                       f32_4 %266 = OpLoad %83 
                              Uniform f32_4* %267 = OpAccessChain %28 %138 
                                       f32_4 %268 = OpLoad %267 
                                         f32 %269 = OpDot %266 %268 
                                Private f32* %270 = OpAccessChain %265 %120 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %265 %120 
                                         f32 %272 = OpLoad %271 
                                         f32 %274 = OpExtInst %1 43 %272 %273 %36 
                                Private f32* %275 = OpAccessChain %265 %120 
                                                      OpStore %275 %274 
                                       f32_3 %276 = OpLoad %127 
                                       f32_3 %277 = OpLoad %127 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %127 %120 
                                                      OpStore %279 %278 
                  read_only Texture2DSampled %281 = OpLoad %280 
                                       f32_3 %282 = OpLoad %127 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 0 
                                       f32_4 %284 = OpImageSampleImplicitLod %281 %283 
                                         f32 %285 = OpCompositeExtract %284 3 
                                Private f32* %286 = OpAccessChain %127 %120 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %265 %120 
                                         f32 %288 = OpLoad %287 
                                Private f32* %289 = OpAccessChain %127 %120 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %127 %120 
                                                      OpStore %292 %291 
                                       f32_4 %293 = OpLoad %88 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                              Uniform f32_4* %296 = OpAccessChain %28 %295 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFMul %294 %298 
                                                      OpStore %265 %299 
                                       f32_3 %302 = OpLoad %127 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 0 0 
                                       f32_3 %304 = OpLoad %265 
                                       f32_3 %305 = OpFMul %303 %304 
                                       f32_4 %306 = OpLoad %301 
                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
                                                      OpStore %301 %307 
                                Private f32* %308 = OpAccessChain %20 %120 
                                         f32 %309 = OpLoad %308 
                                 Output f32* %311 = OpAccessChain %301 %109 
                                                      OpStore %311 %309 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	float _LightScale;
uniform 	float _HeightOffGround;
uniform 	vec4 _MeshBoundsExtents;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
void main()
{
    u_xlat0.x = abs(_LightScale) + -1.0;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.yx;
    u_xlat3 = in_POSITION0.x * _LightScale + (-u_xlat0.y);
    u_xlat6.xy = in_POSITION0.yz + (-vec2(vec2(_HeightOffGround, _HeightOffGround)));
    u_xlat0.x = (-_LightScale) * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = u_xlat6.y + 10.0;
    u_xlat1 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat3) + u_xlat1;
    u_xlatb0 = 0.0<_Perpendicular;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat2 = u_xlat2 + (-hlslcc_mtx4x4unity_ObjectToWorld[3]);
    u_xlat3 = u_xlat2.y * _LightScale;
    u_xlat0.x = u_xlat3 * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = (-_MeshBoundsExtents.y) * abs(_LightScale) + u_xlat0.x;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = _LightScale + _LightScale;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.xy;
    vs_TEXCOORD3.xy = u_xlat2.xy / u_xlat0.xy;
    vs_TEXCOORD3.zw = u_xlat2.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_TexelSize;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat10_3;
vec2 u_xlat4;
vec4 u_xlat10_4;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat10_3 = texture(_MainTex, u_xlat3.xy);
    u_xlat4.xy = _MainTex_TexelSize.xy * vec2(-2.0, -2.0) + vs_TEXCOORD0.xy;
    u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
    u_xlat16_2 = u_xlat10_2 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003);
    u_xlat16_0 = u_xlat10_0 * vec4(0.300000012, 0.300000012, 0.300000012, 0.300000012) + u_xlat16_2;
    u_xlat16_0 = u_xlat10_1 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_3 * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_4 * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat15 = u_xlat16_0.w * vs_TEXCOORD3.y;
    SV_Target0.w = u_xlat15 * 0.75;
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat2.y * 0.25 + 0.75;
        u_xlat11 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat11);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat15 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat15 = u_xlat15 * u_xlat10_1.w;
    u_xlat0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 309
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %42 %186 %218 %229 %230 %243 %271 %291 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %186 Location 186 
                                                      OpMemberDecorate %216 0 BuiltIn 216 
                                                      OpMemberDecorate %216 1 BuiltIn 216 
                                                      OpMemberDecorate %216 2 BuiltIn 216 
                                                      OpDecorate %216 Block 
                                                      OpDecorate %229 Location 229 
                                                      OpDecorate %230 Location 230 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %271 Location 271 
                                                      OpDecorate %291 Location 291 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %24 = OpConstant 3.674022E-40 
                                          u32 %26 = OpConstant 0 
                                              %27 = OpTypePointer Private %6 
                                              %29 = OpTypeVector %6 2 
                                          i32 %32 = OpConstant 6 
                                              %33 = OpTypePointer Uniform %7 
                                 Private f32* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                              %43 = OpTypePointer Input %6 
                                          u32 %49 = OpConstant 1 
                                              %54 = OpTypePointer Private %29 
                               Private f32_2* %55 = OpVariable Private 
                                          i32 %58 = OpConstant 5 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %87 = OpConstant 0 
                                          i32 %88 = OpConstant 1 
                                              %99 = OpTypeBool 
                                             %100 = OpTypePointer Private %99 
                               Private bool* %101 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 3 
                                             %107 = OpTypePointer Function %6 
                                         f32 %112 = OpConstant 3.674022E-40 
                              Private f32_4* %116 = OpVariable Private 
                                         i32 %129 = OpConstant 2 
                                             %184 = OpTypeVector %6 3 
                                             %185 = OpTypePointer Output %184 
                               Output f32_3* %186 = OpVariable Output 
                                             %215 = OpTypeArray %6 %49 
                                             %216 = OpTypeStruct %7 %6 %215 
                                             %217 = OpTypePointer Output %216 
        Output struct {f32_4; f32; f32[1];}* %218 = OpVariable Output 
                                             %226 = OpTypePointer Output %7 
                                             %228 = OpTypePointer Output %29 
                               Output f32_2* %229 = OpVariable Output 
                                Input f32_4* %230 = OpVariable Input 
                                         i32 %233 = OpConstant 7 
                                             %242 = OpTypePointer Input %184 
                                Input f32_3* %243 = OpVariable Input 
                                         u32 %261 = OpConstant 2 
                                Private f32* %263 = OpVariable Private 
                               Output f32_3* %271 = OpVariable Output 
                               Output f32_4* %291 = OpVariable Output 
                                             %303 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %108 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpExtInst %1 4 %22 
                                          f32 %25 = OpFAdd %23 %24 
                                 Private f32* %28 = OpAccessChain %9 %26 
                                                      OpStore %28 %25 
                                        f32_4 %30 = OpLoad %9 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 0 
                               Uniform f32_4* %34 = OpAccessChain %17 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_2 %36 = OpVectorShuffle %35 %35 1 0 
                                        f32_2 %37 = OpFMul %31 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
                                                      OpStore %9 %39 
                                   Input f32* %44 = OpAccessChain %42 %26 
                                          f32 %45 = OpLoad %44 
                                 Uniform f32* %46 = OpAccessChain %17 %19 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFMul %45 %47 
                                 Private f32* %50 = OpAccessChain %9 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFNegate %51 
                                          f32 %53 = OpFAdd %48 %52 
                                                      OpStore %40 %53 
                                        f32_4 %56 = OpLoad %42 
                                        f32_2 %57 = OpVectorShuffle %56 %56 1 2 
                                 Uniform f32* %59 = OpAccessChain %17 %58 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %61 = OpAccessChain %17 %58 
                                          f32 %62 = OpLoad %61 
                                        f32_2 %63 = OpCompositeConstruct %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                          f32 %65 = OpCompositeExtract %63 1 
                                        f32_2 %66 = OpCompositeConstruct %64 %65 
                                        f32_2 %67 = OpFNegate %66 
                                        f32_2 %68 = OpFAdd %57 %67 
                                                      OpStore %55 %68 
                                 Uniform f32* %69 = OpAccessChain %17 %19 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                 Private f32* %72 = OpAccessChain %55 %26 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %26 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFAdd %74 %76 
                                 Private f32* %78 = OpAccessChain %9 %26 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %55 %49 
                                          f32 %80 = OpLoad %79 
                                          f32 %82 = OpFAdd %80 %81 
                                 Private f32* %83 = OpAccessChain %55 %26 
                                                      OpStore %83 %82 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 0 0 0 0 
                               Uniform f32_4* %89 = OpAccessChain %17 %87 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFMul %86 %90 
                                                      OpStore %84 %91 
                               Uniform f32_4* %92 = OpAccessChain %17 %87 %87 
                                        f32_4 %93 = OpLoad %92 
                                          f32 %94 = OpLoad %40 
                                        f32_4 %95 = OpCompositeConstruct %94 %94 %94 %94 
                                        f32_4 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %84 
                                        f32_4 %98 = OpFAdd %96 %97 
                                                      OpStore %84 %98 
                                Uniform f32* %104 = OpAccessChain %17 %103 
                                         f32 %105 = OpLoad %104 
                                        bool %106 = OpFOrdLessThan %102 %105 
                                                      OpStore %101 %106 
                                        bool %109 = OpLoad %101 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %113 
                                             %110 = OpLabel 
                                                      OpStore %108 %112 
                                                      OpBranch %111 
                                             %113 = OpLabel 
                                                      OpStore %108 %24 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                         f32 %114 = OpLoad %108 
                                Private f32* %115 = OpAccessChain %9 %26 
                                                      OpStore %115 %114 
                                       f32_4 %117 = OpLoad %42 
                                       f32_4 %118 = OpVectorShuffle %117 %117 1 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %17 %87 %88 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFMul %118 %120 
                                                      OpStore %116 %121 
                              Uniform f32_4* %122 = OpAccessChain %17 %87 %87 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %42 
                                       f32_4 %125 = OpVectorShuffle %124 %124 0 0 0 0 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %116 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %116 %128 
                              Uniform f32_4* %130 = OpAccessChain %17 %87 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %42 
                                       f32_4 %133 = OpVectorShuffle %132 %132 2 2 2 2 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %116 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %116 %136 
                              Uniform f32_4* %137 = OpAccessChain %17 %87 %103 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpLoad %42 
                                       f32_4 %140 = OpVectorShuffle %139 %139 3 3 3 3 
                                       f32_4 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %116 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %116 %143 
                                       f32_4 %144 = OpLoad %116 
                              Uniform f32_4* %145 = OpAccessChain %17 %87 %103 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFNegate %146 
                                       f32_4 %148 = OpFAdd %144 %147 
                                                      OpStore %116 %148 
                                Private f32* %149 = OpAccessChain %116 %49 
                                         f32 %150 = OpLoad %149 
                                Uniform f32* %151 = OpAccessChain %17 %19 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %150 %152 
                                                      OpStore %40 %153 
                                         f32 %154 = OpLoad %40 
                                Private f32* %155 = OpAccessChain %9 %26 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                Private f32* %158 = OpAccessChain %55 %26 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %9 %26 
                                                      OpStore %161 %160 
                                Uniform f32* %162 = OpAccessChain %17 %32 %49 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                Uniform f32* %165 = OpAccessChain %17 %19 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpExtInst %1 4 %166 
                                         f32 %168 = OpFMul %164 %167 
                                Private f32* %169 = OpAccessChain %9 %26 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %26 
                                                      OpStore %172 %171 
                              Uniform f32_4* %173 = OpAccessChain %17 %87 %129 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %84 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                              Uniform f32_4* %181 = OpAccessChain %17 %87 %103 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpFAdd %180 %182 
                                                      OpStore %84 %183 
                              Uniform f32_4* %187 = OpAccessChain %17 %87 %103 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %42 
                                       f32_3 %191 = OpVectorShuffle %190 %190 3 3 3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %192 %194 
                                                      OpStore %186 %195 
                                       f32_4 %196 = OpLoad %84 
                                       f32_4 %197 = OpVectorShuffle %196 %196 1 1 1 1 
                              Uniform f32_4* %198 = OpAccessChain %17 %129 %88 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpFMul %197 %199 
                                                      OpStore %9 %200 
                              Uniform f32_4* %201 = OpAccessChain %17 %129 %87 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %84 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 0 0 0 
                                       f32_4 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %9 %207 
                              Uniform f32_4* %208 = OpAccessChain %17 %129 %129 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %84 
                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %9 %214 
                              Uniform f32_4* %219 = OpAccessChain %17 %129 %103 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %84 
                                       f32_4 %222 = OpVectorShuffle %221 %221 3 3 3 3 
                                       f32_4 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpFAdd %223 %224 
                               Output f32_4* %227 = OpAccessChain %218 %87 
                                                      OpStore %227 %225 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                              Uniform f32_4* %234 = OpAccessChain %17 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_2 %237 = OpFMul %232 %236 
                              Uniform f32_4* %238 = OpAccessChain %17 %233 
                                       f32_4 %239 = OpLoad %238 
                                       f32_2 %240 = OpVectorShuffle %239 %239 2 3 
                                       f32_2 %241 = OpFAdd %237 %240 
                                                      OpStore %229 %241 
                                       f32_3 %244 = OpLoad %243 
                              Uniform f32_4* %245 = OpAccessChain %17 %88 %87 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %244 %247 
                                Private f32* %249 = OpAccessChain %9 %26 
                                                      OpStore %249 %248 
                                       f32_3 %250 = OpLoad %243 
                              Uniform f32_4* %251 = OpAccessChain %17 %88 %88 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %250 %253 
                                Private f32* %255 = OpAccessChain %9 %49 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %243 
                              Uniform f32_4* %257 = OpAccessChain %17 %88 %129 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %256 %259 
                                Private f32* %262 = OpAccessChain %9 %261 
                                                      OpStore %262 %260 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                         f32 %268 = OpDot %265 %267 
                                                      OpStore %263 %268 
                                         f32 %269 = OpLoad %263 
                                         f32 %270 = OpExtInst %1 32 %269 
                                                      OpStore %263 %270 
                                         f32 %272 = OpLoad %263 
                                       f32_3 %273 = OpCompositeConstruct %272 %272 %272 
                                       f32_4 %274 = OpLoad %9 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                                      OpStore %271 %276 
                                Uniform f32* %277 = OpAccessChain %17 %19 
                                         f32 %278 = OpLoad %277 
                                Uniform f32* %279 = OpAccessChain %17 %19 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFAdd %278 %280 
                                Private f32* %282 = OpAccessChain %9 %26 
                                                      OpStore %282 %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 0 
                              Uniform f32_4* %285 = OpAccessChain %17 %32 
                                       f32_4 %286 = OpLoad %285 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                       f32_2 %288 = OpFMul %284 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
                                                      OpStore %9 %290 
                                       f32_4 %292 = OpLoad %116 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                       f32_4 %294 = OpLoad %9 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFDiv %293 %295 
                                       f32_4 %297 = OpLoad %291 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %291 %298 
                                       f32_4 %299 = OpLoad %116 
                                       f32_2 %300 = OpVectorShuffle %299 %299 2 3 
                                       f32_4 %301 = OpLoad %291 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
                                                      OpStore %291 %302 
                                 Output f32* %304 = OpAccessChain %218 %87 %49 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFNegate %305 
                                 Output f32* %307 = OpAccessChain %218 %87 %49 
                                                      OpStore %307 %306 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 306
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %114 %129 %294 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %25 ArrayStride 25 
                                                      OpMemberDecorate %26 0 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpMemberDecorate %26 5 RelaxedPrecision 
                                                      OpMemberDecorate %26 5 Offset 26 
                                                      OpMemberDecorate %26 6 Offset 26 
                                                      OpMemberDecorate %26 7 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %175 SpecId 175 
                                                      OpDecorate %252 DescriptorSet 252 
                                                      OpDecorate %252 Binding 252 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 DescriptorSet 274 
                                                      OpDecorate %274 Binding 274 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %294 Location 294 
                                                      OpDecorate %297 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeVector %6 3 
                                              %25 = OpTypeArray %7 %22 
                                              %26 = OpTypeStruct %7 %7 %23 %24 %24 %7 %25 %7 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4;}* %28 = OpVariable Uniform 
                                              %29 = OpTypeInt 32 1 
                                          i32 %30 = OpConstant 7 
                                              %31 = OpTypePointer Uniform %7 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          f32 %36 = OpConstant 3.674022E-40 
                                        f32_4 %37 = OpConstantComposite %35 %36 %36 %35 
                               Private f32_4* %42 = OpVariable Private 
                               Private f32_4* %47 = OpVariable Private 
                                              %52 = OpTypePointer Private %24 
                               Private f32_3* %53 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                        f32_2 %58 = OpConstantComposite %57 %57 
                               Private f32_4* %64 = OpVariable Private 
                                              %69 = OpTypePointer Private %15 
                               Private f32_2* %70 = OpVariable Private 
                                          f32 %74 = OpConstant 3.674022E-40 
                                        f32_2 %75 = OpConstantComposite %74 %74 
                               Private f32_4* %79 = OpVariable Private 
                               Private f32_4* %83 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_4 %86 = OpConstantComposite %85 %85 %85 %85 
                               Private f32_4* %88 = OpVariable Private 
                                          f32 %90 = OpConstant 3.674022E-40 
                                        f32_4 %91 = OpConstantComposite %90 %90 %90 %90 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_4 %101 = OpConstantComposite %100 %100 %100 %100 
                                         u32 %109 = OpConstant 3 
                                             %110 = OpTypePointer Private %6 
                                             %113 = OpTypePointer Input %7 
                                Input f32_4* %114 = OpVariable Input 
                                         u32 %115 = OpConstant 1 
                                             %116 = OpTypePointer Input %6 
                                         u32 %120 = OpConstant 0 
                                         f32 %124 = OpConstant 3.674022E-40 
                              Private f32_2* %127 = OpVariable Private 
                                             %128 = OpTypePointer Input %24 
                                Input f32_3* %129 = OpVariable Input 
                                         i32 %132 = OpConstant 6 
                                         i32 %133 = OpConstant 1 
                                         i32 %138 = OpConstant 0 
                                         i32 %147 = OpConstant 2 
                                         i32 %157 = OpConstant 3 
                                             %162 = OpTypeBool 
                                             %163 = OpTypePointer Private %162 
                               Private bool* %164 = OpVariable Private 
                                             %165 = OpTypePointer Uniform %6 
                                        bool %169 = OpConstantFalse 
                                        bool %175 = OpSpecConstantFalse 
                                             %208 = OpTypePointer Function %24 
                                         i32 %218 = OpConstant 4 
                                             %219 = OpTypePointer Uniform %24 
                              Private f32_4* %224 = OpVariable Private 
                                Private f32* %231 = OpVariable Private 
                                         f32 %234 = OpConstant 3.674022E-40 
                                         u32 %237 = OpConstant 2 
                                         f32 %240 = OpConstant 3.674022E-40 
                                             %249 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %250 = OpTypeSampledImage %249 
                                             %251 = OpTypePointer UniformConstant %250 
 UniformConstant read_only Texture3DSampled* %252 = OpVariable UniformConstant 
                              Private f32_3* %263 = OpVariable Private 
                                         f32 %271 = OpConstant 3.674022E-40 
 UniformConstant read_only Texture2DSampled* %274 = OpVariable UniformConstant 
                                         i32 %288 = OpConstant 5 
                                             %293 = OpTypePointer Output %7 
                               Output f32_4* %294 = OpVariable Output 
                                             %303 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %209 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                               Uniform f32_4* %32 = OpAccessChain %28 %30 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 1 0 1 
                                        f32_4 %38 = OpFMul %34 %37 
                                        f32_2 %39 = OpLoad %17 
                                        f32_4 %40 = OpVectorShuffle %39 %39 0 1 0 1 
                                        f32_4 %41 = OpFAdd %38 %40 
                                                      OpStore %20 %41 
                   read_only Texture2DSampled %43 = OpLoad %13 
                                        f32_4 %44 = OpLoad %20 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpImageSampleImplicitLod %43 %45 
                                                      OpStore %42 %46 
                   read_only Texture2DSampled %48 = OpLoad %13 
                                        f32_4 %49 = OpLoad %20 
                                        f32_2 %50 = OpVectorShuffle %49 %49 2 3 
                                        f32_4 %51 = OpImageSampleImplicitLod %48 %50 
                                                      OpStore %47 %51 
                               Uniform f32_4* %54 = OpAccessChain %28 %30 
                                        f32_4 %55 = OpLoad %54 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_2 %59 = OpFMul %56 %58 
                                        f32_2 %60 = OpLoad %17 
                                        f32_2 %61 = OpFAdd %59 %60 
                                        f32_3 %62 = OpLoad %53 
                                        f32_3 %63 = OpVectorShuffle %62 %61 3 4 2 
                                                      OpStore %53 %63 
                   read_only Texture2DSampled %65 = OpLoad %13 
                                        f32_3 %66 = OpLoad %53 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_4 %68 = OpImageSampleImplicitLod %65 %67 
                                                      OpStore %64 %68 
                               Uniform f32_4* %71 = OpAccessChain %28 %30 
                                        f32_4 %72 = OpLoad %71 
                                        f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                                        f32_2 %76 = OpFMul %73 %75 
                                        f32_2 %77 = OpLoad %17 
                                        f32_2 %78 = OpFAdd %76 %77 
                                                      OpStore %70 %78 
                   read_only Texture2DSampled %80 = OpLoad %13 
                                        f32_2 %81 = OpLoad %70 
                                        f32_4 %82 = OpImageSampleImplicitLod %80 %81 
                                                      OpStore %79 %82 
                                        f32_4 %84 = OpLoad %42 
                                        f32_4 %87 = OpFMul %84 %86 
                                                      OpStore %83 %87 
                                        f32_4 %89 = OpLoad %9 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %83 
                                        f32_4 %94 = OpFAdd %92 %93 
                                                      OpStore %88 %94 
                                        f32_4 %95 = OpLoad %47 
                                        f32_4 %96 = OpFMul %95 %86 
                                        f32_4 %97 = OpLoad %88 
                                        f32_4 %98 = OpFAdd %96 %97 
                                                      OpStore %88 %98 
                                        f32_4 %99 = OpLoad %64 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %88 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %88 %104 
                                       f32_4 %105 = OpLoad %79 
                                       f32_4 %106 = OpFMul %105 %101 
                                       f32_4 %107 = OpLoad %88 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %88 %108 
                                Private f32* %111 = OpAccessChain %88 %109 
                                         f32 %112 = OpLoad %111 
                                  Input f32* %117 = OpAccessChain %114 %115 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFMul %112 %118 
                                Private f32* %121 = OpAccessChain %20 %120 
                                                      OpStore %121 %119 
                                Private f32* %122 = OpAccessChain %20 %120 
                                         f32 %123 = OpLoad %122 
                                         f32 %125 = OpFMul %123 %124 
                                Private f32* %126 = OpAccessChain %20 %120 
                                                      OpStore %126 %125 
                                       f32_3 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 1 1 
                              Uniform f32_4* %134 = OpAccessChain %28 %132 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                       f32_2 %137 = OpFMul %131 %136 
                                                      OpStore %127 %137 
                              Uniform f32_4* %139 = OpAccessChain %28 %132 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_3 %142 = OpLoad %129 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 0 
                                       f32_2 %144 = OpFMul %141 %143 
                                       f32_2 %145 = OpLoad %127 
                                       f32_2 %146 = OpFAdd %144 %145 
                                                      OpStore %127 %146 
                              Uniform f32_4* %148 = OpAccessChain %28 %132 %147 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_3 %151 = OpLoad %129 
                                       f32_2 %152 = OpVectorShuffle %151 %151 2 2 
                                       f32_2 %153 = OpFMul %150 %152 
                                       f32_2 %154 = OpLoad %127 
                                       f32_2 %155 = OpFAdd %153 %154 
                                                      OpStore %127 %155 
                                       f32_2 %156 = OpLoad %127 
                              Uniform f32_4* %158 = OpAccessChain %28 %132 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
                                       f32_2 %161 = OpFAdd %156 %160 
                                                      OpStore %127 %161 
                                Uniform f32* %166 = OpAccessChain %28 %133 %120 
                                         f32 %167 = OpLoad %166 
                                        bool %168 = OpFOrdEqual %167 %36 
                                                      OpStore %164 %168 
                                                      OpSelectionMerge %171 None 
                                                      OpBranchConditional %169 %170 %171 
                                             %170 = OpLabel 
                                        bool %172 = OpLoad %164 
                                                      OpSelectionMerge %174 None 
                                                      OpBranchConditional %172 %173 %174 
                                             %173 = OpLabel 
                                                      OpBranch %174 
                                             %174 = OpLabel 
                                                      OpBranch %171 
                                             %171 = OpLabel 
                                                      OpSelectionMerge %177 None 
                                                      OpBranchConditional %175 %176 %258 
                                             %176 = OpLabel 
                                Uniform f32* %178 = OpAccessChain %28 %133 %115 
                                         f32 %179 = OpLoad %178 
                                        bool %180 = OpFOrdEqual %179 %36 
                                                      OpStore %164 %180 
                                       f32_3 %181 = OpLoad %129 
                                       f32_3 %182 = OpVectorShuffle %181 %181 1 1 1 
                              Uniform f32_4* %183 = OpAccessChain %28 %147 %133 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %182 %185 
                                                      OpStore %53 %186 
                              Uniform f32_4* %187 = OpAccessChain %28 %147 %138 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpLoad %129 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 0 0 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_3 %193 = OpLoad %53 
                                       f32_3 %194 = OpFAdd %192 %193 
                                                      OpStore %53 %194 
                              Uniform f32_4* %195 = OpAccessChain %28 %147 %147 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpLoad %129 
                                       f32_3 %199 = OpVectorShuffle %198 %198 2 2 2 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_3 %201 = OpLoad %53 
                                       f32_3 %202 = OpFAdd %200 %201 
                                                      OpStore %53 %202 
                                       f32_3 %203 = OpLoad %53 
                              Uniform f32_4* %204 = OpAccessChain %28 %147 %157 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %207 = OpFAdd %203 %206 
                                                      OpStore %53 %207 
                                        bool %210 = OpLoad %164 
                                                      OpSelectionMerge %212 None 
                                                      OpBranchConditional %210 %211 %214 
                                             %211 = OpLabel 
                                       f32_3 %213 = OpLoad %53 
                                                      OpStore %209 %213 
                                                      OpBranch %212 
                                             %214 = OpLabel 
                                       f32_3 %215 = OpLoad %129 
                                                      OpStore %209 %215 
                                                      OpBranch %212 
                                             %212 = OpLabel 
                                       f32_3 %216 = OpLoad %209 
                                                      OpStore %53 %216 
                                       f32_3 %217 = OpLoad %53 
                              Uniform f32_3* %220 = OpAccessChain %28 %218 
                                       f32_3 %221 = OpLoad %220 
                                       f32_3 %222 = OpFNegate %221 
                                       f32_3 %223 = OpFAdd %217 %222 
                                                      OpStore %53 %223 
                                       f32_3 %225 = OpLoad %53 
                              Uniform f32_3* %226 = OpAccessChain %28 %157 
                                       f32_3 %227 = OpLoad %226 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %224 
                                       f32_4 %230 = OpVectorShuffle %229 %228 0 4 5 6 
                                                      OpStore %224 %230 
                                Private f32* %232 = OpAccessChain %224 %115 
                                         f32 %233 = OpLoad %232 
                                         f32 %235 = OpFMul %233 %234 
                                         f32 %236 = OpFAdd %235 %124 
                                                      OpStore %231 %236 
                                Uniform f32* %238 = OpAccessChain %28 %133 %237 
                                         f32 %239 = OpLoad %238 
                                         f32 %241 = OpFMul %239 %240 
                                         f32 %242 = OpFAdd %241 %124 
                                Private f32* %243 = OpAccessChain %53 %120 
                                                      OpStore %243 %242 
                                         f32 %244 = OpLoad %231 
                                Private f32* %245 = OpAccessChain %53 %120 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpExtInst %1 40 %244 %246 
                                Private f32* %248 = OpAccessChain %224 %120 
                                                      OpStore %248 %247 
                  read_only Texture3DSampled %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %224 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 2 3 
                                       f32_4 %256 = OpImageSampleImplicitLod %253 %255 
                                                      OpStore %224 %256 
                                       f32_4 %257 = OpLoad %224 
                                                      OpStore %83 %257 
                                                      OpBranch %177 
                                             %258 = OpLabel 
                                Private f32* %259 = OpAccessChain %83 %120 
                                                      OpStore %259 %36 
                                Private f32* %260 = OpAccessChain %83 %115 
                                                      OpStore %260 %36 
                                Private f32* %261 = OpAccessChain %83 %237 
                                                      OpStore %261 %36 
                                Private f32* %262 = OpAccessChain %83 %109 
                                                      OpStore %262 %36 
                                                      OpBranch %177 
                                             %177 = OpLabel 
                                       f32_4 %264 = OpLoad %83 
                              Uniform f32_4* %265 = OpAccessChain %28 %138 
                                       f32_4 %266 = OpLoad %265 
                                         f32 %267 = OpDot %264 %266 
                                Private f32* %268 = OpAccessChain %263 %120 
                                                      OpStore %268 %267 
                                Private f32* %269 = OpAccessChain %263 %120 
                                         f32 %270 = OpLoad %269 
                                         f32 %272 = OpExtInst %1 43 %270 %271 %36 
                                Private f32* %273 = OpAccessChain %263 %120 
                                                      OpStore %273 %272 
                  read_only Texture2DSampled %275 = OpLoad %274 
                                       f32_2 %276 = OpLoad %127 
                                       f32_4 %277 = OpImageSampleImplicitLod %275 %276 
                                         f32 %278 = OpCompositeExtract %277 3 
                                Private f32* %279 = OpAccessChain %127 %120 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %263 %120 
                                         f32 %281 = OpLoad %280 
                                Private f32* %282 = OpAccessChain %127 %120 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFMul %281 %283 
                                Private f32* %285 = OpAccessChain %127 %120 
                                                      OpStore %285 %284 
                                       f32_4 %286 = OpLoad %88 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                              Uniform f32_4* %289 = OpAccessChain %28 %288 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFMul %287 %291 
                                                      OpStore %263 %292 
                                       f32_2 %295 = OpLoad %127 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 0 0 
                                       f32_3 %297 = OpLoad %263 
                                       f32_3 %298 = OpFMul %296 %297 
                                       f32_4 %299 = OpLoad %294 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %294 %300 
                                Private f32* %301 = OpAccessChain %20 %120 
                                         f32 %302 = OpLoad %301 
                                 Output f32* %304 = OpAccessChain %294 %109 
                                                      OpStore %304 %302 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	float _LightScale;
uniform 	float _HeightOffGround;
uniform 	vec4 _MeshBoundsExtents;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
void main()
{
    u_xlat0.x = abs(_LightScale) + -1.0;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.yx;
    u_xlat3 = in_POSITION0.x * _LightScale + (-u_xlat0.y);
    u_xlat6.xy = in_POSITION0.yz + (-vec2(vec2(_HeightOffGround, _HeightOffGround)));
    u_xlat0.x = (-_LightScale) * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = u_xlat6.y + 10.0;
    u_xlat1 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat3) + u_xlat1;
    u_xlatb0 = 0.0<_Perpendicular;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat2 = u_xlat2 + (-hlslcc_mtx4x4unity_ObjectToWorld[3]);
    u_xlat3 = u_xlat2.y * _LightScale;
    u_xlat0.x = u_xlat3 * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = (-_MeshBoundsExtents.y) * abs(_LightScale) + u_xlat0.x;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = _LightScale + _LightScale;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.xy;
    vs_TEXCOORD3.xy = u_xlat2.xy / u_xlat0.xy;
    vs_TEXCOORD3.zw = u_xlat2.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _MainTex_TexelSize;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
vec2 u_xlat3;
vec4 u_xlat10_3;
vec2 u_xlat4;
vec4 u_xlat10_4;
float u_xlat6;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat10_3 = texture(_MainTex, u_xlat3.xy);
    u_xlat4.xy = _MainTex_TexelSize.xy * vec2(-2.0, -2.0) + vs_TEXCOORD0.xy;
    u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
    u_xlat16_2 = u_xlat10_2 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003);
    u_xlat16_0 = u_xlat10_0 * vec4(0.300000012, 0.300000012, 0.300000012, 0.300000012) + u_xlat16_2;
    u_xlat16_0 = u_xlat10_1 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_3 * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_4 * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat15 = u_xlat16_0.w * vs_TEXCOORD3.y;
    SV_Target0.w = u_xlat15 * 0.75;
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
        u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat1.y * 0.25 + 0.75;
        u_xlat6 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat15, u_xlat6);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat15 = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 309
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %42 %186 %218 %229 %230 %243 %271 %291 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %186 Location 186 
                                                      OpMemberDecorate %216 0 BuiltIn 216 
                                                      OpMemberDecorate %216 1 BuiltIn 216 
                                                      OpMemberDecorate %216 2 BuiltIn 216 
                                                      OpDecorate %216 Block 
                                                      OpDecorate %229 Location 229 
                                                      OpDecorate %230 Location 230 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %271 Location 271 
                                                      OpDecorate %291 Location 291 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %24 = OpConstant 3.674022E-40 
                                          u32 %26 = OpConstant 0 
                                              %27 = OpTypePointer Private %6 
                                              %29 = OpTypeVector %6 2 
                                          i32 %32 = OpConstant 6 
                                              %33 = OpTypePointer Uniform %7 
                                 Private f32* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                              %43 = OpTypePointer Input %6 
                                          u32 %49 = OpConstant 1 
                                              %54 = OpTypePointer Private %29 
                               Private f32_2* %55 = OpVariable Private 
                                          i32 %58 = OpConstant 5 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %87 = OpConstant 0 
                                          i32 %88 = OpConstant 1 
                                              %99 = OpTypeBool 
                                             %100 = OpTypePointer Private %99 
                               Private bool* %101 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 3 
                                             %107 = OpTypePointer Function %6 
                                         f32 %112 = OpConstant 3.674022E-40 
                              Private f32_4* %116 = OpVariable Private 
                                         i32 %129 = OpConstant 2 
                                             %184 = OpTypeVector %6 3 
                                             %185 = OpTypePointer Output %184 
                               Output f32_3* %186 = OpVariable Output 
                                             %215 = OpTypeArray %6 %49 
                                             %216 = OpTypeStruct %7 %6 %215 
                                             %217 = OpTypePointer Output %216 
        Output struct {f32_4; f32; f32[1];}* %218 = OpVariable Output 
                                             %226 = OpTypePointer Output %7 
                                             %228 = OpTypePointer Output %29 
                               Output f32_2* %229 = OpVariable Output 
                                Input f32_4* %230 = OpVariable Input 
                                         i32 %233 = OpConstant 7 
                                             %242 = OpTypePointer Input %184 
                                Input f32_3* %243 = OpVariable Input 
                                         u32 %261 = OpConstant 2 
                                Private f32* %263 = OpVariable Private 
                               Output f32_3* %271 = OpVariable Output 
                               Output f32_4* %291 = OpVariable Output 
                                             %303 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %108 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpExtInst %1 4 %22 
                                          f32 %25 = OpFAdd %23 %24 
                                 Private f32* %28 = OpAccessChain %9 %26 
                                                      OpStore %28 %25 
                                        f32_4 %30 = OpLoad %9 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 0 
                               Uniform f32_4* %34 = OpAccessChain %17 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_2 %36 = OpVectorShuffle %35 %35 1 0 
                                        f32_2 %37 = OpFMul %31 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
                                                      OpStore %9 %39 
                                   Input f32* %44 = OpAccessChain %42 %26 
                                          f32 %45 = OpLoad %44 
                                 Uniform f32* %46 = OpAccessChain %17 %19 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFMul %45 %47 
                                 Private f32* %50 = OpAccessChain %9 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFNegate %51 
                                          f32 %53 = OpFAdd %48 %52 
                                                      OpStore %40 %53 
                                        f32_4 %56 = OpLoad %42 
                                        f32_2 %57 = OpVectorShuffle %56 %56 1 2 
                                 Uniform f32* %59 = OpAccessChain %17 %58 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %61 = OpAccessChain %17 %58 
                                          f32 %62 = OpLoad %61 
                                        f32_2 %63 = OpCompositeConstruct %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                          f32 %65 = OpCompositeExtract %63 1 
                                        f32_2 %66 = OpCompositeConstruct %64 %65 
                                        f32_2 %67 = OpFNegate %66 
                                        f32_2 %68 = OpFAdd %57 %67 
                                                      OpStore %55 %68 
                                 Uniform f32* %69 = OpAccessChain %17 %19 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                 Private f32* %72 = OpAccessChain %55 %26 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %26 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFAdd %74 %76 
                                 Private f32* %78 = OpAccessChain %9 %26 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %55 %49 
                                          f32 %80 = OpLoad %79 
                                          f32 %82 = OpFAdd %80 %81 
                                 Private f32* %83 = OpAccessChain %55 %26 
                                                      OpStore %83 %82 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 0 0 0 0 
                               Uniform f32_4* %89 = OpAccessChain %17 %87 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFMul %86 %90 
                                                      OpStore %84 %91 
                               Uniform f32_4* %92 = OpAccessChain %17 %87 %87 
                                        f32_4 %93 = OpLoad %92 
                                          f32 %94 = OpLoad %40 
                                        f32_4 %95 = OpCompositeConstruct %94 %94 %94 %94 
                                        f32_4 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %84 
                                        f32_4 %98 = OpFAdd %96 %97 
                                                      OpStore %84 %98 
                                Uniform f32* %104 = OpAccessChain %17 %103 
                                         f32 %105 = OpLoad %104 
                                        bool %106 = OpFOrdLessThan %102 %105 
                                                      OpStore %101 %106 
                                        bool %109 = OpLoad %101 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %113 
                                             %110 = OpLabel 
                                                      OpStore %108 %112 
                                                      OpBranch %111 
                                             %113 = OpLabel 
                                                      OpStore %108 %24 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                         f32 %114 = OpLoad %108 
                                Private f32* %115 = OpAccessChain %9 %26 
                                                      OpStore %115 %114 
                                       f32_4 %117 = OpLoad %42 
                                       f32_4 %118 = OpVectorShuffle %117 %117 1 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %17 %87 %88 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFMul %118 %120 
                                                      OpStore %116 %121 
                              Uniform f32_4* %122 = OpAccessChain %17 %87 %87 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %42 
                                       f32_4 %125 = OpVectorShuffle %124 %124 0 0 0 0 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %116 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %116 %128 
                              Uniform f32_4* %130 = OpAccessChain %17 %87 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %42 
                                       f32_4 %133 = OpVectorShuffle %132 %132 2 2 2 2 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %116 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %116 %136 
                              Uniform f32_4* %137 = OpAccessChain %17 %87 %103 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpLoad %42 
                                       f32_4 %140 = OpVectorShuffle %139 %139 3 3 3 3 
                                       f32_4 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %116 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %116 %143 
                                       f32_4 %144 = OpLoad %116 
                              Uniform f32_4* %145 = OpAccessChain %17 %87 %103 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFNegate %146 
                                       f32_4 %148 = OpFAdd %144 %147 
                                                      OpStore %116 %148 
                                Private f32* %149 = OpAccessChain %116 %49 
                                         f32 %150 = OpLoad %149 
                                Uniform f32* %151 = OpAccessChain %17 %19 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %150 %152 
                                                      OpStore %40 %153 
                                         f32 %154 = OpLoad %40 
                                Private f32* %155 = OpAccessChain %9 %26 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                Private f32* %158 = OpAccessChain %55 %26 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %9 %26 
                                                      OpStore %161 %160 
                                Uniform f32* %162 = OpAccessChain %17 %32 %49 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                Uniform f32* %165 = OpAccessChain %17 %19 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpExtInst %1 4 %166 
                                         f32 %168 = OpFMul %164 %167 
                                Private f32* %169 = OpAccessChain %9 %26 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %26 
                                                      OpStore %172 %171 
                              Uniform f32_4* %173 = OpAccessChain %17 %87 %129 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %84 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                              Uniform f32_4* %181 = OpAccessChain %17 %87 %103 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpFAdd %180 %182 
                                                      OpStore %84 %183 
                              Uniform f32_4* %187 = OpAccessChain %17 %87 %103 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %42 
                                       f32_3 %191 = OpVectorShuffle %190 %190 3 3 3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %192 %194 
                                                      OpStore %186 %195 
                                       f32_4 %196 = OpLoad %84 
                                       f32_4 %197 = OpVectorShuffle %196 %196 1 1 1 1 
                              Uniform f32_4* %198 = OpAccessChain %17 %129 %88 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpFMul %197 %199 
                                                      OpStore %9 %200 
                              Uniform f32_4* %201 = OpAccessChain %17 %129 %87 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %84 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 0 0 0 
                                       f32_4 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %9 %207 
                              Uniform f32_4* %208 = OpAccessChain %17 %129 %129 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %84 
                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %9 %214 
                              Uniform f32_4* %219 = OpAccessChain %17 %129 %103 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %84 
                                       f32_4 %222 = OpVectorShuffle %221 %221 3 3 3 3 
                                       f32_4 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpFAdd %223 %224 
                               Output f32_4* %227 = OpAccessChain %218 %87 
                                                      OpStore %227 %225 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                              Uniform f32_4* %234 = OpAccessChain %17 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_2 %237 = OpFMul %232 %236 
                              Uniform f32_4* %238 = OpAccessChain %17 %233 
                                       f32_4 %239 = OpLoad %238 
                                       f32_2 %240 = OpVectorShuffle %239 %239 2 3 
                                       f32_2 %241 = OpFAdd %237 %240 
                                                      OpStore %229 %241 
                                       f32_3 %244 = OpLoad %243 
                              Uniform f32_4* %245 = OpAccessChain %17 %88 %87 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %244 %247 
                                Private f32* %249 = OpAccessChain %9 %26 
                                                      OpStore %249 %248 
                                       f32_3 %250 = OpLoad %243 
                              Uniform f32_4* %251 = OpAccessChain %17 %88 %88 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %250 %253 
                                Private f32* %255 = OpAccessChain %9 %49 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %243 
                              Uniform f32_4* %257 = OpAccessChain %17 %88 %129 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %256 %259 
                                Private f32* %262 = OpAccessChain %9 %261 
                                                      OpStore %262 %260 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                         f32 %268 = OpDot %265 %267 
                                                      OpStore %263 %268 
                                         f32 %269 = OpLoad %263 
                                         f32 %270 = OpExtInst %1 32 %269 
                                                      OpStore %263 %270 
                                         f32 %272 = OpLoad %263 
                                       f32_3 %273 = OpCompositeConstruct %272 %272 %272 
                                       f32_4 %274 = OpLoad %9 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                                      OpStore %271 %276 
                                Uniform f32* %277 = OpAccessChain %17 %19 
                                         f32 %278 = OpLoad %277 
                                Uniform f32* %279 = OpAccessChain %17 %19 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFAdd %278 %280 
                                Private f32* %282 = OpAccessChain %9 %26 
                                                      OpStore %282 %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 0 
                              Uniform f32_4* %285 = OpAccessChain %17 %32 
                                       f32_4 %286 = OpLoad %285 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                       f32_2 %288 = OpFMul %284 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
                                                      OpStore %9 %290 
                                       f32_4 %292 = OpLoad %116 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                       f32_4 %294 = OpLoad %9 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFDiv %293 %295 
                                       f32_4 %297 = OpLoad %291 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %291 %298 
                                       f32_4 %299 = OpLoad %116 
                                       f32_2 %300 = OpVectorShuffle %299 %299 2 3 
                                       f32_4 %301 = OpLoad %291 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
                                                      OpStore %291 %302 
                                 Output f32* %304 = OpAccessChain %218 %87 %49 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFNegate %305 
                                 Output f32* %307 = OpAccessChain %218 %87 %49 
                                                      OpStore %307 %306 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 263
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %113 %147 %251 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpMemberDecorate %25 0 RelaxedPrecision 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 RelaxedPrecision 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %140 SpecId 140 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %251 Location 251 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeVector %6 3 
                                              %25 = OpTypeStruct %7 %7 %23 %24 %24 %7 %7 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 6 
                                              %30 = OpTypePointer Uniform %7 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          f32 %35 = OpConstant 3.674022E-40 
                                        f32_4 %36 = OpConstantComposite %34 %35 %35 %34 
                               Private f32_4* %41 = OpVariable Private 
                               Private f32_4* %46 = OpVariable Private 
                                              %51 = OpTypePointer Private %24 
                               Private f32_3* %52 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                        f32_2 %57 = OpConstantComposite %56 %56 
                               Private f32_4* %63 = OpVariable Private 
                                              %68 = OpTypePointer Private %15 
                               Private f32_2* %69 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                        f32_2 %74 = OpConstantComposite %73 %73 
                               Private f32_4* %78 = OpVariable Private 
                               Private f32_4* %82 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                        f32_4 %85 = OpConstantComposite %84 %84 %84 %84 
                               Private f32_4* %87 = OpVariable Private 
                                          f32 %89 = OpConstant 3.674022E-40 
                                        f32_4 %90 = OpConstantComposite %89 %89 %89 %89 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_4 %100 = OpConstantComposite %99 %99 %99 %99 
                                         u32 %108 = OpConstant 3 
                                             %109 = OpTypePointer Private %6 
                                             %112 = OpTypePointer Input %7 
                                Input f32_4* %113 = OpVariable Input 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypePointer Input %6 
                                         u32 %119 = OpConstant 0 
                                         f32 %123 = OpConstant 3.674022E-40 
                                             %126 = OpTypeBool 
                                             %127 = OpTypePointer Private %126 
                               Private bool* %128 = OpVariable Private 
                                         i32 %129 = OpConstant 1 
                                             %130 = OpTypePointer Uniform %6 
                                        bool %134 = OpConstantFalse 
                                        bool %140 = OpSpecConstantFalse 
                                             %146 = OpTypePointer Input %24 
                                Input f32_3* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 2 
                                         i32 %155 = OpConstant 0 
                                         i32 %173 = OpConstant 3 
                              Private f32_3* %178 = OpVariable Private 
                                             %179 = OpTypePointer Function %24 
                                         i32 %189 = OpConstant 4 
                                             %190 = OpTypePointer Uniform %24 
                              Private f32_4* %195 = OpVariable Private 
                                         f32 %204 = OpConstant 3.674022E-40 
                                Private f32* %208 = OpVariable Private 
                                         u32 %209 = OpConstant 2 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %220 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %221 = OpTypeSampledImage %220 
                                             %222 = OpTypePointer UniformConstant %221 
 UniformConstant read_only Texture3DSampled* %223 = OpVariable UniformConstant 
                                Private f32* %234 = OpVariable Private 
                                         f32 %240 = OpConstant 3.674022E-40 
                              Private f32_3* %242 = OpVariable Private 
                                         i32 %245 = OpConstant 5 
                                             %250 = OpTypePointer Output %7 
                               Output f32_4* %251 = OpVariable Output 
                                             %260 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %180 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 1 0 1 
                                        f32_4 %37 = OpFMul %33 %36 
                                        f32_2 %38 = OpLoad %17 
                                        f32_4 %39 = OpVectorShuffle %38 %38 0 1 0 1 
                                        f32_4 %40 = OpFAdd %37 %39 
                                                      OpStore %20 %40 
                   read_only Texture2DSampled %42 = OpLoad %13 
                                        f32_4 %43 = OpLoad %20 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpImageSampleImplicitLod %42 %44 
                                                      OpStore %41 %45 
                   read_only Texture2DSampled %47 = OpLoad %13 
                                        f32_4 %48 = OpLoad %20 
                                        f32_2 %49 = OpVectorShuffle %48 %48 2 3 
                                        f32_4 %50 = OpImageSampleImplicitLod %47 %49 
                                                      OpStore %46 %50 
                               Uniform f32_4* %53 = OpAccessChain %27 %29 
                                        f32_4 %54 = OpLoad %53 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                                        f32_2 %58 = OpFMul %55 %57 
                                        f32_2 %59 = OpLoad %17 
                                        f32_2 %60 = OpFAdd %58 %59 
                                        f32_3 %61 = OpLoad %52 
                                        f32_3 %62 = OpVectorShuffle %61 %60 3 4 2 
                                                      OpStore %52 %62 
                   read_only Texture2DSampled %64 = OpLoad %13 
                                        f32_3 %65 = OpLoad %52 
                                        f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                                        f32_4 %67 = OpImageSampleImplicitLod %64 %66 
                                                      OpStore %63 %67 
                               Uniform f32_4* %70 = OpAccessChain %27 %29 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                        f32_2 %75 = OpFMul %72 %74 
                                        f32_2 %76 = OpLoad %17 
                                        f32_2 %77 = OpFAdd %75 %76 
                                                      OpStore %69 %77 
                   read_only Texture2DSampled %79 = OpLoad %13 
                                        f32_2 %80 = OpLoad %69 
                                        f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                                      OpStore %78 %81 
                                        f32_4 %83 = OpLoad %41 
                                        f32_4 %86 = OpFMul %83 %85 
                                                      OpStore %82 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %82 
                                        f32_4 %93 = OpFAdd %91 %92 
                                                      OpStore %87 %93 
                                        f32_4 %94 = OpLoad %46 
                                        f32_4 %95 = OpFMul %94 %85 
                                        f32_4 %96 = OpLoad %87 
                                        f32_4 %97 = OpFAdd %95 %96 
                                                      OpStore %87 %97 
                                        f32_4 %98 = OpLoad %63 
                                       f32_4 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %87 
                                       f32_4 %103 = OpFAdd %101 %102 
                                                      OpStore %87 %103 
                                       f32_4 %104 = OpLoad %78 
                                       f32_4 %105 = OpFMul %104 %100 
                                       f32_4 %106 = OpLoad %87 
                                       f32_4 %107 = OpFAdd %105 %106 
                                                      OpStore %87 %107 
                                Private f32* %110 = OpAccessChain %87 %108 
                                         f32 %111 = OpLoad %110 
                                  Input f32* %116 = OpAccessChain %113 %114 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %111 %117 
                                Private f32* %120 = OpAccessChain %20 %119 
                                                      OpStore %120 %118 
                                Private f32* %121 = OpAccessChain %20 %119 
                                         f32 %122 = OpLoad %121 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %20 %119 
                                                      OpStore %125 %124 
                                Uniform f32* %131 = OpAccessChain %27 %129 %119 
                                         f32 %132 = OpLoad %131 
                                        bool %133 = OpFOrdEqual %132 %35 
                                                      OpStore %128 %133 
                                                      OpSelectionMerge %136 None 
                                                      OpBranchConditional %134 %135 %136 
                                             %135 = OpLabel 
                                        bool %137 = OpLoad %128 
                                                      OpSelectionMerge %139 None 
                                                      OpBranchConditional %137 %138 %139 
                                             %138 = OpLabel 
                                                      OpBranch %139 
                                             %139 = OpLabel 
                                                      OpBranch %136 
                                             %136 = OpLabel 
                                                      OpSelectionMerge %142 None 
                                                      OpBranchConditional %140 %141 %229 
                                             %141 = OpLabel 
                                Uniform f32* %143 = OpAccessChain %27 %129 %114 
                                         f32 %144 = OpLoad %143 
                                        bool %145 = OpFOrdEqual %144 %35 
                                                      OpStore %128 %145 
                                       f32_3 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 1 1 1 
                              Uniform f32_4* %151 = OpAccessChain %27 %150 %129 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFMul %149 %153 
                                                      OpStore %52 %154 
                              Uniform f32_4* %156 = OpAccessChain %27 %150 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpLoad %147 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 0 0 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_3 %162 = OpLoad %52 
                                       f32_3 %163 = OpFAdd %161 %162 
                                                      OpStore %52 %163 
                              Uniform f32_4* %164 = OpAccessChain %27 %150 %150 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpLoad %147 
                                       f32_3 %168 = OpVectorShuffle %167 %167 2 2 2 
                                       f32_3 %169 = OpFMul %166 %168 
                                       f32_3 %170 = OpLoad %52 
                                       f32_3 %171 = OpFAdd %169 %170 
                                                      OpStore %52 %171 
                                       f32_3 %172 = OpLoad %52 
                              Uniform f32_4* %174 = OpAccessChain %27 %150 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFAdd %172 %176 
                                                      OpStore %52 %177 
                                        bool %181 = OpLoad %128 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %185 
                                             %182 = OpLabel 
                                       f32_3 %184 = OpLoad %52 
                                                      OpStore %180 %184 
                                                      OpBranch %183 
                                             %185 = OpLabel 
                                       f32_3 %186 = OpLoad %147 
                                                      OpStore %180 %186 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %187 = OpLoad %180 
                                                      OpStore %178 %187 
                                       f32_3 %188 = OpLoad %178 
                              Uniform f32_3* %191 = OpAccessChain %27 %189 
                                       f32_3 %192 = OpLoad %191 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %188 %193 
                                                      OpStore %178 %194 
                                       f32_3 %196 = OpLoad %178 
                              Uniform f32_3* %197 = OpAccessChain %27 %173 
                                       f32_3 %198 = OpLoad %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %195 
                                       f32_4 %201 = OpVectorShuffle %200 %199 0 4 5 6 
                                                      OpStore %195 %201 
                                Private f32* %202 = OpAccessChain %195 %114 
                                         f32 %203 = OpLoad %202 
                                         f32 %205 = OpFMul %203 %204 
                                         f32 %206 = OpFAdd %205 %123 
                                Private f32* %207 = OpAccessChain %178 %119 
                                                      OpStore %207 %206 
                                Uniform f32* %210 = OpAccessChain %27 %129 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %213 = OpFMul %211 %212 
                                         f32 %214 = OpFAdd %213 %123 
                                                      OpStore %208 %214 
                                         f32 %215 = OpLoad %208 
                                Private f32* %216 = OpAccessChain %178 %119 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpExtInst %1 40 %215 %217 
                                Private f32* %219 = OpAccessChain %195 %119 
                                                      OpStore %219 %218 
                  read_only Texture3DSampled %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %195 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 2 3 
                                       f32_4 %227 = OpImageSampleImplicitLod %224 %226 
                                                      OpStore %195 %227 
                                       f32_4 %228 = OpLoad %195 
                                                      OpStore %82 %228 
                                                      OpBranch %142 
                                             %229 = OpLabel 
                                Private f32* %230 = OpAccessChain %82 %119 
                                                      OpStore %230 %35 
                                Private f32* %231 = OpAccessChain %82 %114 
                                                      OpStore %231 %35 
                                Private f32* %232 = OpAccessChain %82 %209 
                                                      OpStore %232 %35 
                                Private f32* %233 = OpAccessChain %82 %108 
                                                      OpStore %233 %35 
                                                      OpBranch %142 
                                             %142 = OpLabel 
                                       f32_4 %235 = OpLoad %82 
                              Uniform f32_4* %236 = OpAccessChain %27 %155 
                                       f32_4 %237 = OpLoad %236 
                                         f32 %238 = OpDot %235 %237 
                                                      OpStore %234 %238 
                                         f32 %239 = OpLoad %234 
                                         f32 %241 = OpExtInst %1 43 %239 %240 %35 
                                                      OpStore %234 %241 
                                       f32_4 %243 = OpLoad %87 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                              Uniform f32_4* %246 = OpAccessChain %27 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFMul %244 %248 
                                                      OpStore %242 %249 
                                         f32 %252 = OpLoad %234 
                                       f32_3 %253 = OpCompositeConstruct %252 %252 %252 
                                       f32_3 %254 = OpLoad %242 
                                       f32_3 %255 = OpFMul %253 %254 
                                       f32_4 %256 = OpLoad %251 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %251 %257 
                                Private f32* %258 = OpAccessChain %20 %119 
                                         f32 %259 = OpLoad %258 
                                 Output f32* %261 = OpAccessChain %251 %108 
                                                      OpStore %261 %259 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	float _LightScale;
uniform 	float _HeightOffGround;
uniform 	vec4 _MeshBoundsExtents;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
float u_xlat9;
void main()
{
    u_xlat0.x = abs(_LightScale) + -1.0;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.yx;
    u_xlat3 = in_POSITION0.x * _LightScale + (-u_xlat0.y);
    u_xlat6.xy = in_POSITION0.yz + (-vec2(vec2(_HeightOffGround, _HeightOffGround)));
    u_xlat0.x = (-_LightScale) * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = u_xlat6.y + 10.0;
    u_xlat1 = u_xlat0.xxxx * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat3) + u_xlat1;
    u_xlatb0 = 0.0<_Perpendicular;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat2 = u_xlat2 + (-hlslcc_mtx4x4unity_ObjectToWorld[3]);
    u_xlat3 = u_xlat2.y * _LightScale;
    u_xlat0.x = u_xlat3 * u_xlat0.x + u_xlat6.x;
    u_xlat0.x = (-_MeshBoundsExtents.y) * abs(_LightScale) + u_xlat0.x;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.x = _LightScale + _LightScale;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.xy;
    vs_TEXCOORD3.xy = u_xlat2.xy / u_xlat0.xy;
    vs_TEXCOORD3.zw = u_xlat2.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_TexelSize;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat16_2;
vec4 u_xlat10_2;
bool u_xlatb2;
vec2 u_xlat3;
vec4 u_xlat10_3;
vec2 u_xlat4;
vec4 u_xlat10_4;
vec2 u_xlat7;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat10_3 = texture(_MainTex, u_xlat3.xy);
    u_xlat4.xy = _MainTex_TexelSize.xy * vec2(-2.0, -2.0) + vs_TEXCOORD0.xy;
    u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
    u_xlat16_2 = u_xlat10_2 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003);
    u_xlat16_0 = u_xlat10_0 * vec4(0.300000012, 0.300000012, 0.300000012, 0.300000012) + u_xlat16_2;
    u_xlat16_0 = u_xlat10_1 * vec4(0.200000003, 0.200000003, 0.200000003, 0.200000003) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_3 * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat16_0 = u_xlat10_4 * vec4(0.100000001, 0.100000001, 0.100000001, 0.100000001) + u_xlat16_0;
    u_xlat15 = u_xlat16_0.w * vs_TEXCOORD3.y;
    SV_Target0.w = u_xlat15 * 0.75;
    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat2.y * 0.25 + 0.75;
        u_xlat7.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat15, u_xlat7.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat15 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlatb2 = 0.0<u_xlat1.z;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat7.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat7.xy);
    u_xlat16 = u_xlat2.x * u_xlat10_3.w;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat1.x = u_xlat16 * u_xlat10_2.w;
    u_xlat15 = u_xlat15 * u_xlat1.x;
    u_xlat0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;
    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 309
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %42 %186 %218 %229 %230 %243 %271 %291 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %186 Location 186 
                                                      OpMemberDecorate %216 0 BuiltIn 216 
                                                      OpMemberDecorate %216 1 BuiltIn 216 
                                                      OpMemberDecorate %216 2 BuiltIn 216 
                                                      OpDecorate %216 Block 
                                                      OpDecorate %229 Location 229 
                                                      OpDecorate %230 Location 230 
                                                      OpDecorate %243 Location 243 
                                                      OpDecorate %271 Location 271 
                                                      OpDecorate %291 Location 291 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 4 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeStruct %12 %13 %14 %6 %6 %6 %7 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32; f32; f32; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %6 
                                          f32 %24 = OpConstant 3.674022E-40 
                                          u32 %26 = OpConstant 0 
                                              %27 = OpTypePointer Private %6 
                                              %29 = OpTypeVector %6 2 
                                          i32 %32 = OpConstant 6 
                                              %33 = OpTypePointer Uniform %7 
                                 Private f32* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                                 Input f32_4* %42 = OpVariable Input 
                                              %43 = OpTypePointer Input %6 
                                          u32 %49 = OpConstant 1 
                                              %54 = OpTypePointer Private %29 
                               Private f32_2* %55 = OpVariable Private 
                                          i32 %58 = OpConstant 5 
                                          f32 %81 = OpConstant 3.674022E-40 
                               Private f32_4* %84 = OpVariable Private 
                                          i32 %87 = OpConstant 0 
                                          i32 %88 = OpConstant 1 
                                              %99 = OpTypeBool 
                                             %100 = OpTypePointer Private %99 
                               Private bool* %101 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         i32 %103 = OpConstant 3 
                                             %107 = OpTypePointer Function %6 
                                         f32 %112 = OpConstant 3.674022E-40 
                              Private f32_4* %116 = OpVariable Private 
                                         i32 %129 = OpConstant 2 
                                             %184 = OpTypeVector %6 3 
                                             %185 = OpTypePointer Output %184 
                               Output f32_3* %186 = OpVariable Output 
                                             %215 = OpTypeArray %6 %49 
                                             %216 = OpTypeStruct %7 %6 %215 
                                             %217 = OpTypePointer Output %216 
        Output struct {f32_4; f32; f32[1];}* %218 = OpVariable Output 
                                             %226 = OpTypePointer Output %7 
                                             %228 = OpTypePointer Output %29 
                               Output f32_2* %229 = OpVariable Output 
                                Input f32_4* %230 = OpVariable Input 
                                         i32 %233 = OpConstant 7 
                                             %242 = OpTypePointer Input %184 
                                Input f32_3* %243 = OpVariable Input 
                                         u32 %261 = OpConstant 2 
                                Private f32* %263 = OpVariable Private 
                               Output f32_3* %271 = OpVariable Output 
                               Output f32_4* %291 = OpVariable Output 
                                             %303 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %108 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %17 %19 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpExtInst %1 4 %22 
                                          f32 %25 = OpFAdd %23 %24 
                                 Private f32* %28 = OpAccessChain %9 %26 
                                                      OpStore %28 %25 
                                        f32_4 %30 = OpLoad %9 
                                        f32_2 %31 = OpVectorShuffle %30 %30 0 0 
                               Uniform f32_4* %34 = OpAccessChain %17 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_2 %36 = OpVectorShuffle %35 %35 1 0 
                                        f32_2 %37 = OpFMul %31 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
                                                      OpStore %9 %39 
                                   Input f32* %44 = OpAccessChain %42 %26 
                                          f32 %45 = OpLoad %44 
                                 Uniform f32* %46 = OpAccessChain %17 %19 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFMul %45 %47 
                                 Private f32* %50 = OpAccessChain %9 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFNegate %51 
                                          f32 %53 = OpFAdd %48 %52 
                                                      OpStore %40 %53 
                                        f32_4 %56 = OpLoad %42 
                                        f32_2 %57 = OpVectorShuffle %56 %56 1 2 
                                 Uniform f32* %59 = OpAccessChain %17 %58 
                                          f32 %60 = OpLoad %59 
                                 Uniform f32* %61 = OpAccessChain %17 %58 
                                          f32 %62 = OpLoad %61 
                                        f32_2 %63 = OpCompositeConstruct %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                          f32 %65 = OpCompositeExtract %63 1 
                                        f32_2 %66 = OpCompositeConstruct %64 %65 
                                        f32_2 %67 = OpFNegate %66 
                                        f32_2 %68 = OpFAdd %57 %67 
                                                      OpStore %55 %68 
                                 Uniform f32* %69 = OpAccessChain %17 %19 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                 Private f32* %72 = OpAccessChain %55 %26 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFMul %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %26 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFAdd %74 %76 
                                 Private f32* %78 = OpAccessChain %9 %26 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %55 %49 
                                          f32 %80 = OpLoad %79 
                                          f32 %82 = OpFAdd %80 %81 
                                 Private f32* %83 = OpAccessChain %55 %26 
                                                      OpStore %83 %82 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 0 0 0 0 
                               Uniform f32_4* %89 = OpAccessChain %17 %87 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFMul %86 %90 
                                                      OpStore %84 %91 
                               Uniform f32_4* %92 = OpAccessChain %17 %87 %87 
                                        f32_4 %93 = OpLoad %92 
                                          f32 %94 = OpLoad %40 
                                        f32_4 %95 = OpCompositeConstruct %94 %94 %94 %94 
                                        f32_4 %96 = OpFMul %93 %95 
                                        f32_4 %97 = OpLoad %84 
                                        f32_4 %98 = OpFAdd %96 %97 
                                                      OpStore %84 %98 
                                Uniform f32* %104 = OpAccessChain %17 %103 
                                         f32 %105 = OpLoad %104 
                                        bool %106 = OpFOrdLessThan %102 %105 
                                                      OpStore %101 %106 
                                        bool %109 = OpLoad %101 
                                                      OpSelectionMerge %111 None 
                                                      OpBranchConditional %109 %110 %113 
                                             %110 = OpLabel 
                                                      OpStore %108 %112 
                                                      OpBranch %111 
                                             %113 = OpLabel 
                                                      OpStore %108 %24 
                                                      OpBranch %111 
                                             %111 = OpLabel 
                                         f32 %114 = OpLoad %108 
                                Private f32* %115 = OpAccessChain %9 %26 
                                                      OpStore %115 %114 
                                       f32_4 %117 = OpLoad %42 
                                       f32_4 %118 = OpVectorShuffle %117 %117 1 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %17 %87 %88 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFMul %118 %120 
                                                      OpStore %116 %121 
                              Uniform f32_4* %122 = OpAccessChain %17 %87 %87 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpLoad %42 
                                       f32_4 %125 = OpVectorShuffle %124 %124 0 0 0 0 
                                       f32_4 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %116 
                                       f32_4 %128 = OpFAdd %126 %127 
                                                      OpStore %116 %128 
                              Uniform f32_4* %130 = OpAccessChain %17 %87 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_4 %132 = OpLoad %42 
                                       f32_4 %133 = OpVectorShuffle %132 %132 2 2 2 2 
                                       f32_4 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %116 
                                       f32_4 %136 = OpFAdd %134 %135 
                                                      OpStore %116 %136 
                              Uniform f32_4* %137 = OpAccessChain %17 %87 %103 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpLoad %42 
                                       f32_4 %140 = OpVectorShuffle %139 %139 3 3 3 3 
                                       f32_4 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %116 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %116 %143 
                                       f32_4 %144 = OpLoad %116 
                              Uniform f32_4* %145 = OpAccessChain %17 %87 %103 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFNegate %146 
                                       f32_4 %148 = OpFAdd %144 %147 
                                                      OpStore %116 %148 
                                Private f32* %149 = OpAccessChain %116 %49 
                                         f32 %150 = OpLoad %149 
                                Uniform f32* %151 = OpAccessChain %17 %19 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %150 %152 
                                                      OpStore %40 %153 
                                         f32 %154 = OpLoad %40 
                                Private f32* %155 = OpAccessChain %9 %26 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                Private f32* %158 = OpAccessChain %55 %26 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %9 %26 
                                                      OpStore %161 %160 
                                Uniform f32* %162 = OpAccessChain %17 %32 %49 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                Uniform f32* %165 = OpAccessChain %17 %19 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpExtInst %1 4 %166 
                                         f32 %168 = OpFMul %164 %167 
                                Private f32* %169 = OpAccessChain %9 %26 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %26 
                                                      OpStore %172 %171 
                              Uniform f32_4* %173 = OpAccessChain %17 %87 %129 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %84 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %9 %179 
                                       f32_4 %180 = OpLoad %9 
                              Uniform f32_4* %181 = OpAccessChain %17 %87 %103 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpFAdd %180 %182 
                                                      OpStore %84 %183 
                              Uniform f32_4* %187 = OpAccessChain %17 %87 %103 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %42 
                                       f32_3 %191 = OpVectorShuffle %190 %190 3 3 3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %192 %194 
                                                      OpStore %186 %195 
                                       f32_4 %196 = OpLoad %84 
                                       f32_4 %197 = OpVectorShuffle %196 %196 1 1 1 1 
                              Uniform f32_4* %198 = OpAccessChain %17 %129 %88 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpFMul %197 %199 
                                                      OpStore %9 %200 
                              Uniform f32_4* %201 = OpAccessChain %17 %129 %87 
                                       f32_4 %202 = OpLoad %201 
                                       f32_4 %203 = OpLoad %84 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 0 0 0 
                                       f32_4 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFAdd %205 %206 
                                                      OpStore %9 %207 
                              Uniform f32_4* %208 = OpAccessChain %17 %129 %129 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %84 
                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
                                       f32_4 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %9 %214 
                              Uniform f32_4* %219 = OpAccessChain %17 %129 %103 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %84 
                                       f32_4 %222 = OpVectorShuffle %221 %221 3 3 3 3 
                                       f32_4 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpFAdd %223 %224 
                               Output f32_4* %227 = OpAccessChain %218 %87 
                                                      OpStore %227 %225 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                              Uniform f32_4* %234 = OpAccessChain %17 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_2 %237 = OpFMul %232 %236 
                              Uniform f32_4* %238 = OpAccessChain %17 %233 
                                       f32_4 %239 = OpLoad %238 
                                       f32_2 %240 = OpVectorShuffle %239 %239 2 3 
                                       f32_2 %241 = OpFAdd %237 %240 
                                                      OpStore %229 %241 
                                       f32_3 %244 = OpLoad %243 
                              Uniform f32_4* %245 = OpAccessChain %17 %88 %87 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %244 %247 
                                Private f32* %249 = OpAccessChain %9 %26 
                                                      OpStore %249 %248 
                                       f32_3 %250 = OpLoad %243 
                              Uniform f32_4* %251 = OpAccessChain %17 %88 %88 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %250 %253 
                                Private f32* %255 = OpAccessChain %9 %49 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %243 
                              Uniform f32_4* %257 = OpAccessChain %17 %88 %129 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %256 %259 
                                Private f32* %262 = OpAccessChain %9 %261 
                                                      OpStore %262 %260 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                         f32 %268 = OpDot %265 %267 
                                                      OpStore %263 %268 
                                         f32 %269 = OpLoad %263 
                                         f32 %270 = OpExtInst %1 32 %269 
                                                      OpStore %263 %270 
                                         f32 %272 = OpLoad %263 
                                       f32_3 %273 = OpCompositeConstruct %272 %272 %272 
                                       f32_4 %274 = OpLoad %9 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                                      OpStore %271 %276 
                                Uniform f32* %277 = OpAccessChain %17 %19 
                                         f32 %278 = OpLoad %277 
                                Uniform f32* %279 = OpAccessChain %17 %19 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFAdd %278 %280 
                                Private f32* %282 = OpAccessChain %9 %26 
                                                      OpStore %282 %281 
                                       f32_4 %283 = OpLoad %9 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 0 
                              Uniform f32_4* %285 = OpAccessChain %17 %32 
                                       f32_4 %286 = OpLoad %285 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                       f32_2 %288 = OpFMul %284 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
                                                      OpStore %9 %290 
                                       f32_4 %292 = OpLoad %116 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                       f32_4 %294 = OpLoad %9 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFDiv %293 %295 
                                       f32_4 %297 = OpLoad %291 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %291 %298 
                                       f32_4 %299 = OpLoad %116 
                                       f32_2 %300 = OpVectorShuffle %299 %299 2 3 
                                       f32_4 %301 = OpLoad %291 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
                                                      OpStore %291 %302 
                                 Output f32* %304 = OpAccessChain %218 %87 %49 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFNegate %305 
                                 Output f32* %307 = OpAccessChain %218 %87 %49 
                                                      OpStore %307 %306 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 361
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %113 %128 %349 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %25 ArrayStride 25 
                                                      OpMemberDecorate %26 0 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpMemberDecorate %26 5 RelaxedPrecision 
                                                      OpMemberDecorate %26 5 Offset 26 
                                                      OpMemberDecorate %26 6 Offset 26 
                                                      OpMemberDecorate %26 7 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %78 RelaxedPrecision 
                                                      OpDecorate %79 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %91 RelaxedPrecision 
                                                      OpDecorate %92 RelaxedPrecision 
                                                      OpDecorate %93 RelaxedPrecision 
                                                      OpDecorate %94 RelaxedPrecision 
                                                      OpDecorate %95 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %170 SpecId 170 
                                                      OpDecorate %260 DescriptorSet 260 
                                                      OpDecorate %260 Binding 260 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %305 DescriptorSet 305 
                                                      OpDecorate %305 Binding 305 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %324 DescriptorSet 324 
                                                      OpDecorate %324 Binding 324 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %349 Location 349 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %21 = OpTypeInt 32 0 
                                          u32 %22 = OpConstant 4 
                                              %23 = OpTypeArray %7 %22 
                                              %24 = OpTypeVector %6 3 
                                              %25 = OpTypeArray %7 %22 
                                              %26 = OpTypeStruct %7 %7 %23 %24 %24 %7 %25 %7 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4;}* %28 = OpVariable Uniform 
                                              %29 = OpTypeInt 32 1 
                                          i32 %30 = OpConstant 7 
                                              %31 = OpTypePointer Uniform %7 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          f32 %36 = OpConstant 3.674022E-40 
                                        f32_4 %37 = OpConstantComposite %35 %36 %36 %35 
                               Private f32_4* %42 = OpVariable Private 
                               Private f32_4* %47 = OpVariable Private 
                               Private f32_4* %52 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                        f32_2 %57 = OpConstantComposite %56 %56 
                               Private f32_4* %63 = OpVariable Private 
                                              %68 = OpTypePointer Private %15 
                               Private f32_2* %69 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                        f32_2 %74 = OpConstantComposite %73 %73 
                               Private f32_4* %78 = OpVariable Private 
                               Private f32_4* %82 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                        f32_4 %85 = OpConstantComposite %84 %84 %84 %84 
                               Private f32_4* %87 = OpVariable Private 
                                          f32 %89 = OpConstant 3.674022E-40 
                                        f32_4 %90 = OpConstantComposite %89 %89 %89 %89 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_4 %100 = OpConstantComposite %99 %99 %99 %99 
                                         u32 %108 = OpConstant 3 
                                             %109 = OpTypePointer Private %6 
                                             %112 = OpTypePointer Input %7 
                                Input f32_4* %113 = OpVariable Input 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypePointer Input %6 
                                         u32 %119 = OpConstant 0 
                                         f32 %123 = OpConstant 3.674022E-40 
                              Private f32_4* %126 = OpVariable Private 
                                             %127 = OpTypePointer Input %24 
                                Input f32_3* %128 = OpVariable Input 
                                         i32 %131 = OpConstant 6 
                                         i32 %132 = OpConstant 1 
                                         i32 %136 = OpConstant 0 
                                         i32 %144 = OpConstant 2 
                                         i32 %153 = OpConstant 3 
                                             %157 = OpTypeBool 
                                             %158 = OpTypePointer Private %157 
                               Private bool* %159 = OpVariable Private 
                                             %160 = OpTypePointer Uniform %6 
                                        bool %164 = OpConstantFalse 
                                        bool %170 = OpSpecConstantFalse 
                                             %214 = OpTypePointer Private %24 
                              Private f32_3* %215 = OpVariable Private 
                                             %216 = OpTypePointer Function %24 
                                         i32 %227 = OpConstant 4 
                                             %228 = OpTypePointer Uniform %24 
                                         f32 %241 = OpConstant 3.674022E-40 
                                Private f32* %245 = OpVariable Private 
                                         u32 %246 = OpConstant 2 
                                         f32 %249 = OpConstant 3.674022E-40 
                                             %257 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %258 = OpTypeSampledImage %257 
                                             %259 = OpTypePointer UniformConstant %258 
 UniformConstant read_only Texture3DSampled* %260 = OpVariable UniformConstant 
                              Private f32_4* %265 = OpVariable Private 
                                Private f32* %272 = OpVariable Private 
                                         f32 %278 = OpConstant 3.674022E-40 
                              Private f32_3* %283 = OpVariable Private 
                                             %284 = OpTypePointer Function %6 
                                       f32_2 %301 = OpConstantComposite %249 %249 
 UniformConstant read_only Texture2DSampled* %305 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %324 = OpVariable UniformConstant 
                                         i32 %343 = OpConstant 5 
                                             %348 = OpTypePointer Output %7 
                               Output f32_4* %349 = OpVariable Output 
                                             %358 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %217 = OpVariable Function 
                               Function f32* %285 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                               Uniform f32_4* %32 = OpAccessChain %28 %30 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 1 0 1 
                                        f32_4 %38 = OpFMul %34 %37 
                                        f32_2 %39 = OpLoad %17 
                                        f32_4 %40 = OpVectorShuffle %39 %39 0 1 0 1 
                                        f32_4 %41 = OpFAdd %38 %40 
                                                      OpStore %20 %41 
                   read_only Texture2DSampled %43 = OpLoad %13 
                                        f32_4 %44 = OpLoad %20 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpImageSampleImplicitLod %43 %45 
                                                      OpStore %42 %46 
                   read_only Texture2DSampled %48 = OpLoad %13 
                                        f32_4 %49 = OpLoad %20 
                                        f32_2 %50 = OpVectorShuffle %49 %49 2 3 
                                        f32_4 %51 = OpImageSampleImplicitLod %48 %50 
                                                      OpStore %47 %51 
                               Uniform f32_4* %53 = OpAccessChain %28 %30 
                                        f32_4 %54 = OpLoad %53 
                                        f32_2 %55 = OpVectorShuffle %54 %54 0 1 
                                        f32_2 %58 = OpFMul %55 %57 
                                        f32_2 %59 = OpLoad %17 
                                        f32_2 %60 = OpFAdd %58 %59 
                                        f32_4 %61 = OpLoad %52 
                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 2 3 
                                                      OpStore %52 %62 
                   read_only Texture2DSampled %64 = OpLoad %13 
                                        f32_4 %65 = OpLoad %52 
                                        f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                                        f32_4 %67 = OpImageSampleImplicitLod %64 %66 
                                                      OpStore %63 %67 
                               Uniform f32_4* %70 = OpAccessChain %28 %30 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                        f32_2 %75 = OpFMul %72 %74 
                                        f32_2 %76 = OpLoad %17 
                                        f32_2 %77 = OpFAdd %75 %76 
                                                      OpStore %69 %77 
                   read_only Texture2DSampled %79 = OpLoad %13 
                                        f32_2 %80 = OpLoad %69 
                                        f32_4 %81 = OpImageSampleImplicitLod %79 %80 
                                                      OpStore %78 %81 
                                        f32_4 %83 = OpLoad %42 
                                        f32_4 %86 = OpFMul %83 %85 
                                                      OpStore %82 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %82 
                                        f32_4 %93 = OpFAdd %91 %92 
                                                      OpStore %87 %93 
                                        f32_4 %94 = OpLoad %47 
                                        f32_4 %95 = OpFMul %94 %85 
                                        f32_4 %96 = OpLoad %87 
                                        f32_4 %97 = OpFAdd %95 %96 
                                                      OpStore %87 %97 
                                        f32_4 %98 = OpLoad %63 
                                       f32_4 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %87 
                                       f32_4 %103 = OpFAdd %101 %102 
                                                      OpStore %87 %103 
                                       f32_4 %104 = OpLoad %78 
                                       f32_4 %105 = OpFMul %104 %100 
                                       f32_4 %106 = OpLoad %87 
                                       f32_4 %107 = OpFAdd %105 %106 
                                                      OpStore %87 %107 
                                Private f32* %110 = OpAccessChain %87 %108 
                                         f32 %111 = OpLoad %110 
                                  Input f32* %116 = OpAccessChain %113 %114 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %111 %117 
                                Private f32* %120 = OpAccessChain %20 %119 
                                                      OpStore %120 %118 
                                Private f32* %121 = OpAccessChain %20 %119 
                                         f32 %122 = OpLoad %121 
                                         f32 %124 = OpFMul %122 %123 
                                Private f32* %125 = OpAccessChain %20 %119 
                                                      OpStore %125 %124 
                                       f32_3 %129 = OpLoad %128 
                                       f32_4 %130 = OpVectorShuffle %129 %129 1 1 1 1 
                              Uniform f32_4* %133 = OpAccessChain %28 %131 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpFMul %130 %134 
                                                      OpStore %126 %135 
                              Uniform f32_4* %137 = OpAccessChain %28 %131 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpLoad %128 
                                       f32_4 %140 = OpVectorShuffle %139 %139 0 0 0 0 
                                       f32_4 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %126 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %126 %143 
                              Uniform f32_4* %145 = OpAccessChain %28 %131 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpLoad %128 
                                       f32_4 %148 = OpVectorShuffle %147 %147 2 2 2 2 
                                       f32_4 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %126 
                                       f32_4 %151 = OpFAdd %149 %150 
                                                      OpStore %126 %151 
                                       f32_4 %152 = OpLoad %126 
                              Uniform f32_4* %154 = OpAccessChain %28 %131 %153 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpFAdd %152 %155 
                                                      OpStore %126 %156 
                                Uniform f32* %161 = OpAccessChain %28 %132 %119 
                                         f32 %162 = OpLoad %161 
                                        bool %163 = OpFOrdEqual %162 %36 
                                                      OpStore %159 %163 
                                                      OpSelectionMerge %166 None 
                                                      OpBranchConditional %164 %165 %166 
                                             %165 = OpLabel 
                                        bool %167 = OpLoad %159 
                                                      OpSelectionMerge %169 None 
                                                      OpBranchConditional %167 %168 %169 
                                             %168 = OpLabel 
                                                      OpBranch %169 
                                             %169 = OpLabel 
                                                      OpBranch %166 
                                             %166 = OpLabel 
                                                      OpSelectionMerge %172 None 
                                                      OpBranchConditional %170 %171 %267 
                                             %171 = OpLabel 
                                Uniform f32* %173 = OpAccessChain %28 %132 %114 
                                         f32 %174 = OpLoad %173 
                                        bool %175 = OpFOrdEqual %174 %36 
                                                      OpStore %159 %175 
                                       f32_3 %176 = OpLoad %128 
                                       f32_3 %177 = OpVectorShuffle %176 %176 1 1 1 
                              Uniform f32_4* %178 = OpAccessChain %28 %144 %132 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFMul %177 %180 
                                       f32_4 %182 = OpLoad %52 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %52 %183 
                              Uniform f32_4* %184 = OpAccessChain %28 %144 %136 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpLoad %128 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 0 0 
                                       f32_3 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %52 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %189 %191 
                                       f32_4 %193 = OpLoad %52 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %52 %194 
                              Uniform f32_4* %195 = OpAccessChain %28 %144 %144 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpLoad %128 
                                       f32_3 %199 = OpVectorShuffle %198 %198 2 2 2 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %52 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %52 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %52 %205 
                                       f32_4 %206 = OpLoad %52 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                              Uniform f32_4* %208 = OpAccessChain %28 %144 %153 
                                       f32_4 %209 = OpLoad %208 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %211 = OpFAdd %207 %210 
                                       f32_4 %212 = OpLoad %52 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                                      OpStore %52 %213 
                                        bool %218 = OpLoad %159 
                                                      OpSelectionMerge %220 None 
                                                      OpBranchConditional %218 %219 %223 
                                             %219 = OpLabel 
                                       f32_4 %221 = OpLoad %52 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                                      OpStore %217 %222 
                                                      OpBranch %220 
                                             %223 = OpLabel 
                                       f32_3 %224 = OpLoad %128 
                                                      OpStore %217 %224 
                                                      OpBranch %220 
                                             %220 = OpLabel 
                                       f32_3 %225 = OpLoad %217 
                                                      OpStore %215 %225 
                                       f32_3 %226 = OpLoad %215 
                              Uniform f32_3* %229 = OpAccessChain %28 %227 
                                       f32_3 %230 = OpLoad %229 
                                       f32_3 %231 = OpFNegate %230 
                                       f32_3 %232 = OpFAdd %226 %231 
                                                      OpStore %215 %232 
                                       f32_3 %233 = OpLoad %215 
                              Uniform f32_3* %234 = OpAccessChain %28 %153 
                                       f32_3 %235 = OpLoad %234 
                                       f32_3 %236 = OpFMul %233 %235 
                                       f32_4 %237 = OpLoad %52 
                                       f32_4 %238 = OpVectorShuffle %237 %236 0 4 5 6 
                                                      OpStore %52 %238 
                                Private f32* %239 = OpAccessChain %52 %114 
                                         f32 %240 = OpLoad %239 
                                         f32 %242 = OpFMul %240 %241 
                                         f32 %243 = OpFAdd %242 %123 
                                Private f32* %244 = OpAccessChain %215 %119 
                                                      OpStore %244 %243 
                                Uniform f32* %247 = OpAccessChain %28 %132 %246 
                                         f32 %248 = OpLoad %247 
                                         f32 %250 = OpFMul %248 %249 
                                         f32 %251 = OpFAdd %250 %123 
                                                      OpStore %245 %251 
                                         f32 %252 = OpLoad %245 
                                Private f32* %253 = OpAccessChain %215 %119 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 40 %252 %254 
                                Private f32* %256 = OpAccessChain %52 %119 
                                                      OpStore %256 %255 
                  read_only Texture3DSampled %261 = OpLoad %260 
                                       f32_4 %262 = OpLoad %52 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 2 3 
                                       f32_4 %264 = OpImageSampleImplicitLod %261 %263 
                                                      OpStore %52 %264 
                                       f32_4 %266 = OpLoad %52 
                                                      OpStore %265 %266 
                                                      OpBranch %172 
                                             %267 = OpLabel 
                                Private f32* %268 = OpAccessChain %265 %119 
                                                      OpStore %268 %36 
                                Private f32* %269 = OpAccessChain %265 %114 
                                                      OpStore %269 %36 
                                Private f32* %270 = OpAccessChain %265 %246 
                                                      OpStore %270 %36 
                                Private f32* %271 = OpAccessChain %265 %108 
                                                      OpStore %271 %36 
                                                      OpBranch %172 
                                             %172 = OpLabel 
                                       f32_4 %273 = OpLoad %265 
                              Uniform f32_4* %274 = OpAccessChain %28 %136 
                                       f32_4 %275 = OpLoad %274 
                                         f32 %276 = OpDot %273 %275 
                                                      OpStore %272 %276 
                                         f32 %277 = OpLoad %272 
                                         f32 %279 = OpExtInst %1 43 %277 %278 %36 
                                                      OpStore %272 %279 
                                Private f32* %280 = OpAccessChain %126 %246 
                                         f32 %281 = OpLoad %280 
                                        bool %282 = OpFOrdLessThan %278 %281 
                                                      OpStore %159 %282 
                                        bool %286 = OpLoad %159 
                                                      OpSelectionMerge %288 None 
                                                      OpBranchConditional %286 %287 %289 
                                             %287 = OpLabel 
                                                      OpStore %285 %36 
                                                      OpBranch %288 
                                             %289 = OpLabel 
                                                      OpStore %285 %278 
                                                      OpBranch %288 
                                             %288 = OpLabel 
                                         f32 %290 = OpLoad %285 
                                Private f32* %291 = OpAccessChain %283 %119 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %126 
                                       f32_2 %293 = OpVectorShuffle %292 %292 0 1 
                                       f32_4 %294 = OpLoad %126 
                                       f32_2 %295 = OpVectorShuffle %294 %294 3 3 
                                       f32_2 %296 = OpFDiv %293 %295 
                                       f32_3 %297 = OpLoad %215 
                                       f32_3 %298 = OpVectorShuffle %297 %296 3 4 2 
                                                      OpStore %215 %298 
                                       f32_3 %299 = OpLoad %215 
                                       f32_2 %300 = OpVectorShuffle %299 %299 0 1 
                                       f32_2 %302 = OpFAdd %300 %301 
                                       f32_3 %303 = OpLoad %215 
                                       f32_3 %304 = OpVectorShuffle %303 %302 3 4 2 
                                                      OpStore %215 %304 
                  read_only Texture2DSampled %306 = OpLoad %305 
                                       f32_3 %307 = OpLoad %215 
                                       f32_2 %308 = OpVectorShuffle %307 %307 0 1 
                                       f32_4 %309 = OpImageSampleImplicitLod %306 %308 
                                         f32 %310 = OpCompositeExtract %309 3 
                                Private f32* %311 = OpAccessChain %215 %119 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %215 %119 
                                         f32 %313 = OpLoad %312 
                                Private f32* %314 = OpAccessChain %283 %119 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %313 %315 
                                Private f32* %317 = OpAccessChain %283 %119 
                                                      OpStore %317 %316 
                                       f32_4 %318 = OpLoad %126 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_4 %320 = OpLoad %126 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                         f32 %322 = OpDot %319 %321 
                                Private f32* %323 = OpAccessChain %215 %119 
                                                      OpStore %323 %322 
                  read_only Texture2DSampled %325 = OpLoad %324 
                                       f32_3 %326 = OpLoad %215 
                                       f32_2 %327 = OpVectorShuffle %326 %326 0 0 
                                       f32_4 %328 = OpImageSampleImplicitLod %325 %327 
                                         f32 %329 = OpCompositeExtract %328 3 
                                Private f32* %330 = OpAccessChain %215 %119 
                                                      OpStore %330 %329 
                                Private f32* %331 = OpAccessChain %215 %119 
                                         f32 %332 = OpLoad %331 
                                Private f32* %333 = OpAccessChain %283 %119 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                Private f32* %336 = OpAccessChain %283 %119 
                                                      OpStore %336 %335 
                                         f32 %337 = OpLoad %272 
                                Private f32* %338 = OpAccessChain %283 %119 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %337 %339 
                                                      OpStore %272 %340 
                                       f32_4 %341 = OpLoad %87 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                              Uniform f32_4* %344 = OpAccessChain %28 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_3 %347 = OpFMul %342 %346 
                                                      OpStore %283 %347 
                                         f32 %350 = OpLoad %272 
                                       f32_3 %351 = OpCompositeConstruct %350 %350 %350 
                                       f32_3 %352 = OpLoad %283 
                                       f32_3 %353 = OpFMul %351 %352 
                                       f32_4 %354 = OpLoad %349 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %349 %355 
                                Private f32* %356 = OpAccessChain %20 %119 
                                         f32 %357 = OpLoad %356 
                                 Output f32* %359 = OpAccessChain %349 %108 
                                                      OpStore %359 %357 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
}
}
 Pass {
  Name "META"
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 357593
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	float _Perpendicular;
uniform 	float _LightScale;
uniform 	float _HeightOffGround;
uniform 	vec4 _MeshBoundsExtents;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
vec2 u_xlat8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlatb0 = 0.0<_Perpendicular;
    u_xlat0.x = (u_xlatb0) ? 1.0 : -1.0;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat1 + (-hlslcc_mtx4x4unity_ObjectToWorld[3]);
    u_xlat4 = u_xlat1.y * _LightScale;
    u_xlat8.xy = in_POSITION0.yz + (-vec2(vec2(_HeightOffGround, _HeightOffGround)));
    u_xlat12 = u_xlat8.y + 10.0;
    u_xlat0.x = u_xlat4 * u_xlat0.x + u_xlat12;
    u_xlat2.z = (-_MeshBoundsExtents.y) * abs(_LightScale) + u_xlat0.x;
    u_xlatb0 = 0.0<u_xlat2.z;
    u_xlat3.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.x = abs(_LightScale) + -1.0;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.yx;
    u_xlat2.x = in_POSITION0.x * _LightScale + (-u_xlat0.y);
    u_xlat2.y = (-_LightScale) * u_xlat8.x + u_xlat0.x;
    u_xlat3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlatb12 = 0.0<u_xlat0.z;
    u_xlat2.z = u_xlatb12 ? 9.99999975e-005 : float(0.0);
    u_xlat2.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat2.xyz : u_xlat0.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = _LightScale + _LightScale;
    u_xlat0.xy = u_xlat0.xx * _MeshBoundsExtents.xy;
    vs_TEXCOORD1.xy = u_xlat1.xy / u_xlat0.xy;
    vs_TEXCOORD1.zw = u_xlat1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _MainTex_TexelSize;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + u_xlat16_0.xyz;
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat10_1 = texture(_MainTex, u_xlat1.xy);
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat16_0.xyz;
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(-2.0, -2.0) + vs_TEXCOORD0.xy;
    u_xlat10_1 = texture(_MainTex, u_xlat1.xy);
    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat16_0.xyz;
    u_xlat16_1.xyz = log2(u_xlat16_0.xyz);
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.yyy;
    u_xlat9 = unity_OneOverOutputBoost;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(u_xlat9);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = min(u_xlat1.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat1.w = 1.0;
    u_xlat1 = (unity_MetaFragmentControl.x) ? u_xlat1 : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.152653009, 0.152653009, 0.152653009) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat0 : u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 348
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %42 %177 %219 %292 %303 %304 %330 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %42 Location 42 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %219 Location 219 
                                                      OpMemberDecorate %290 0 BuiltIn 290 
                                                      OpMemberDecorate %290 1 BuiltIn 290 
                                                      OpMemberDecorate %290 2 BuiltIn 290 
                                                      OpDecorate %290 Block 
                                                      OpDecorate %303 Location 303 
                                                      OpDecorate %304 Location 304 
                                                      OpDecorate %330 Location 330 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 4 
                                              %14 = OpTypeArray %11 %13 
                                              %15 = OpTypeArray %11 %13 
                                              %16 = OpTypeVector %12 4 
                                              %17 = OpTypeStruct %14 %15 %11 %11 %9 %9 %9 %11 %16 %11 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32; f32_4; u32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %9 
                                              %26 = OpTypePointer Private %11 
                               Private f32_4* %27 = OpVariable Private 
                                              %28 = OpTypePointer Function %9 
                                          f32 %33 = OpConstant 3.674022E-40 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          u32 %37 = OpConstant 0 
                                              %38 = OpTypePointer Private %9 
                               Private f32_4* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %11 
                                 Input f32_4* %42 = OpVariable Input 
                                          i32 %45 = OpConstant 0 
                                          i32 %46 = OpConstant 1 
                                              %47 = OpTypePointer Uniform %11 
                                          i32 %58 = OpConstant 2 
                                          i32 %66 = OpConstant 3 
                                 Private f32* %79 = OpVariable Private 
                                          u32 %80 = OpConstant 1 
                                          i32 %83 = OpConstant 5 
                                              %87 = OpTypeVector %9 2 
                                              %88 = OpTypePointer Private %87 
                               Private f32_2* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 6 
                                Private f32* %103 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                              Private f32_4* %115 = OpVariable Private 
                                         i32 %116 = OpConstant 7 
                                         u32 %127 = OpConstant 2 
                                             %132 = OpTypeVector %9 3 
                                             %133 = OpTypePointer Private %132 
                              Private f32_3* %134 = OpVariable Private 
                                         f32 %139 = OpConstant 3.674022E-40 
                                             %156 = OpTypePointer Input %9 
                                Input f32_4* %177 = OpVariable Input 
                                             %190 = OpTypePointer Function %132 
                                         i32 %192 = OpConstant 8 
                                             %193 = OpTypeVector %6 4 
                                             %194 = OpTypePointer Uniform %16 
                               Private bool* %208 = OpVariable Private 
                                Input f32_4* %219 = OpVariable Input 
                                             %289 = OpTypeArray %9 %80 
                                             %290 = OpTypeStruct %11 %9 %289 
                                             %291 = OpTypePointer Output %290 
        Output struct {f32_4; f32; f32[1];}* %292 = OpVariable Output 
                                             %300 = OpTypePointer Output %11 
                                             %302 = OpTypePointer Output %87 
                               Output f32_2* %303 = OpVariable Output 
                                Input f32_4* %304 = OpVariable Input 
                                         i32 %307 = OpConstant 9 
                               Output f32_4* %330 = OpVariable Output 
                                             %342 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %29 = OpVariable Function 
                               Function f32* %135 = OpVariable Function 
                             Function f32_3* %191 = OpVariable Function 
                               Function f32* %212 = OpVariable Function 
                             Function f32_3* %232 = OpVariable Function 
                                 Uniform f32* %23 = OpAccessChain %19 %21 
                                          f32 %24 = OpLoad %23 
                                         bool %25 = OpFOrdLessThan %10 %24 
                                                      OpStore %8 %25 
                                         bool %30 = OpLoad %8 
                                                      OpSelectionMerge %32 None 
                                                      OpBranchConditional %30 %31 %34 
                                              %31 = OpLabel 
                                                      OpStore %29 %33 
                                                      OpBranch %32 
                                              %34 = OpLabel 
                                                      OpStore %29 %35 
                                                      OpBranch %32 
                                              %32 = OpLabel 
                                          f32 %36 = OpLoad %29 
                                 Private f32* %39 = OpAccessChain %27 %37 
                                                      OpStore %39 %36 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpVectorShuffle %43 %43 1 1 1 1 
                               Uniform f32_4* %48 = OpAccessChain %19 %45 %46 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFMul %44 %49 
                                                      OpStore %40 %50 
                               Uniform f32_4* %51 = OpAccessChain %19 %45 %45 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %42 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %40 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %40 %57 
                               Uniform f32_4* %59 = OpAccessChain %19 %45 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_4 %61 = OpLoad %42 
                                        f32_4 %62 = OpVectorShuffle %61 %61 2 2 2 2 
                                        f32_4 %63 = OpFMul %60 %62 
                                        f32_4 %64 = OpLoad %40 
                                        f32_4 %65 = OpFAdd %63 %64 
                                                      OpStore %40 %65 
                               Uniform f32_4* %67 = OpAccessChain %19 %45 %66 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %42 
                                        f32_4 %70 = OpVectorShuffle %69 %69 3 3 3 3 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %40 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %40 %73 
                                        f32_4 %74 = OpLoad %40 
                               Uniform f32_4* %75 = OpAccessChain %19 %45 %66 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpFNegate %76 
                                        f32_4 %78 = OpFAdd %74 %77 
                                                      OpStore %40 %78 
                                 Private f32* %81 = OpAccessChain %40 %80 
                                          f32 %82 = OpLoad %81 
                                 Uniform f32* %84 = OpAccessChain %19 %83 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFMul %82 %85 
                                                      OpStore %79 %86 
                                        f32_4 %90 = OpLoad %42 
                                        f32_2 %91 = OpVectorShuffle %90 %90 1 2 
                                 Uniform f32* %93 = OpAccessChain %19 %92 
                                          f32 %94 = OpLoad %93 
                                 Uniform f32* %95 = OpAccessChain %19 %92 
                                          f32 %96 = OpLoad %95 
                                        f32_2 %97 = OpCompositeConstruct %94 %96 
                                          f32 %98 = OpCompositeExtract %97 0 
                                          f32 %99 = OpCompositeExtract %97 1 
                                       f32_2 %100 = OpCompositeConstruct %98 %99 
                                       f32_2 %101 = OpFNegate %100 
                                       f32_2 %102 = OpFAdd %91 %101 
                                                      OpStore %89 %102 
                                Private f32* %104 = OpAccessChain %89 %80 
                                         f32 %105 = OpLoad %104 
                                         f32 %107 = OpFAdd %105 %106 
                                                      OpStore %103 %107 
                                         f32 %108 = OpLoad %79 
                                Private f32* %109 = OpAccessChain %27 %37 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %108 %110 
                                         f32 %112 = OpLoad %103 
                                         f32 %113 = OpFAdd %111 %112 
                                Private f32* %114 = OpAccessChain %27 %37 
                                                      OpStore %114 %113 
                                Uniform f32* %117 = OpAccessChain %19 %116 %80 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Uniform f32* %120 = OpAccessChain %19 %83 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpExtInst %1 4 %121 
                                         f32 %123 = OpFMul %119 %122 
                                Private f32* %124 = OpAccessChain %27 %37 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFAdd %123 %125 
                                Private f32* %128 = OpAccessChain %115 %127 
                                                      OpStore %128 %126 
                                Private f32* %129 = OpAccessChain %115 %127 
                                         f32 %130 = OpLoad %129 
                                        bool %131 = OpFOrdLessThan %10 %130 
                                                      OpStore %8 %131 
                                        bool %136 = OpLoad %8 
                                                      OpSelectionMerge %138 None 
                                                      OpBranchConditional %136 %137 %140 
                                             %137 = OpLabel 
                                                      OpStore %135 %139 
                                                      OpBranch %138 
                                             %140 = OpLabel 
                                                      OpStore %135 %10 
                                                      OpBranch %138 
                                             %138 = OpLabel 
                                         f32 %141 = OpLoad %135 
                                Private f32* %142 = OpAccessChain %134 %127 
                                                      OpStore %142 %141 
                                Uniform f32* %143 = OpAccessChain %19 %83 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpExtInst %1 4 %144 
                                         f32 %146 = OpFAdd %145 %35 
                                Private f32* %147 = OpAccessChain %27 %37 
                                                      OpStore %147 %146 
                                       f32_4 %148 = OpLoad %27 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 0 
                              Uniform f32_4* %150 = OpAccessChain %19 %116 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 1 0 
                                       f32_2 %153 = OpFMul %149 %152 
                                       f32_4 %154 = OpLoad %27 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                                      OpStore %27 %155 
                                  Input f32* %157 = OpAccessChain %42 %37 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %159 = OpAccessChain %19 %83 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %158 %160 
                                Private f32* %162 = OpAccessChain %27 %80 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                         f32 %165 = OpFAdd %161 %164 
                                Private f32* %166 = OpAccessChain %115 %37 
                                                      OpStore %166 %165 
                                Uniform f32* %167 = OpAccessChain %19 %83 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFNegate %168 
                                Private f32* %170 = OpAccessChain %89 %37 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFMul %169 %171 
                                Private f32* %173 = OpAccessChain %27 %37 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFAdd %172 %174 
                                Private f32* %176 = OpAccessChain %115 %80 
                                                      OpStore %176 %175 
                                       f32_4 %178 = OpLoad %177 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                              Uniform f32_4* %180 = OpAccessChain %19 %58 
                                       f32_4 %181 = OpLoad %180 
                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
                                       f32_2 %183 = OpFMul %179 %182 
                              Uniform f32_4* %184 = OpAccessChain %19 %58 
                                       f32_4 %185 = OpLoad %184 
                                       f32_2 %186 = OpVectorShuffle %185 %185 2 3 
                                       f32_2 %187 = OpFAdd %183 %186 
                                       f32_3 %188 = OpLoad %134 
                                       f32_3 %189 = OpVectorShuffle %188 %187 3 4 2 
                                                      OpStore %134 %189 
                              Uniform u32_4* %195 = OpAccessChain %19 %192 
                                       u32_4 %196 = OpLoad %195 
                                         u32 %197 = OpCompositeExtract %196 0 
                                        bool %198 = OpINotEqual %197 %37 
                                                      OpSelectionMerge %200 None 
                                                      OpBranchConditional %198 %199 %202 
                                             %199 = OpLabel 
                                       f32_3 %201 = OpLoad %134 
                                                      OpStore %191 %201 
                                                      OpBranch %200 
                                             %202 = OpLabel 
                                       f32_4 %203 = OpLoad %115 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                                      OpStore %191 %204 
                                                      OpBranch %200 
                                             %200 = OpLabel 
                                       f32_3 %205 = OpLoad %191 
                                       f32_4 %206 = OpLoad %27 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %27 %207 
                                Private f32* %209 = OpAccessChain %27 %127 
                                         f32 %210 = OpLoad %209 
                                        bool %211 = OpFOrdLessThan %10 %210 
                                                      OpStore %208 %211 
                                        bool %213 = OpLoad %208 
                                                      OpSelectionMerge %215 None 
                                                      OpBranchConditional %213 %214 %216 
                                             %214 = OpLabel 
                                                      OpStore %212 %139 
                                                      OpBranch %215 
                                             %216 = OpLabel 
                                                      OpStore %212 %10 
                                                      OpBranch %215 
                                             %215 = OpLabel 
                                         f32 %217 = OpLoad %212 
                                Private f32* %218 = OpAccessChain %115 %127 
                                                      OpStore %218 %217 
                                       f32_4 %220 = OpLoad %219 
                                       f32_2 %221 = OpVectorShuffle %220 %220 0 1 
                              Uniform f32_4* %222 = OpAccessChain %19 %66 
                                       f32_4 %223 = OpLoad %222 
                                       f32_2 %224 = OpVectorShuffle %223 %223 0 1 
                                       f32_2 %225 = OpFMul %221 %224 
                              Uniform f32_4* %226 = OpAccessChain %19 %66 
                                       f32_4 %227 = OpLoad %226 
                                       f32_2 %228 = OpVectorShuffle %227 %227 2 3 
                                       f32_2 %229 = OpFAdd %225 %228 
                                       f32_4 %230 = OpLoad %115 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 2 3 
                                                      OpStore %115 %231 
                              Uniform u32_4* %233 = OpAccessChain %19 %192 
                                       u32_4 %234 = OpLoad %233 
                                         u32 %235 = OpCompositeExtract %234 1 
                                        bool %236 = OpINotEqual %235 %37 
                                                      OpSelectionMerge %238 None 
                                                      OpBranchConditional %236 %237 %241 
                                             %237 = OpLabel 
                                       f32_4 %239 = OpLoad %115 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                                      OpStore %232 %240 
                                                      OpBranch %238 
                                             %241 = OpLabel 
                                       f32_4 %242 = OpLoad %27 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                                      OpStore %232 %243 
                                                      OpBranch %238 
                                             %238 = OpLabel 
                                       f32_3 %244 = OpLoad %232 
                                       f32_4 %245 = OpLoad %27 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %27 %246 
                                       f32_4 %247 = OpLoad %27 
                                       f32_4 %248 = OpVectorShuffle %247 %247 1 1 1 1 
                              Uniform f32_4* %249 = OpAccessChain %19 %45 %46 
                                       f32_4 %250 = OpLoad %249 
                                       f32_4 %251 = OpFMul %248 %250 
                                                      OpStore %115 %251 
                              Uniform f32_4* %252 = OpAccessChain %19 %45 %45 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %27 
                                       f32_4 %255 = OpVectorShuffle %254 %254 0 0 0 0 
                                       f32_4 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %115 
                                       f32_4 %258 = OpFAdd %256 %257 
                                                      OpStore %115 %258 
                              Uniform f32_4* %259 = OpAccessChain %19 %45 %58 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %27 
                                       f32_4 %262 = OpVectorShuffle %261 %261 2 2 2 2 
                                       f32_4 %263 = OpFMul %260 %262 
                                       f32_4 %264 = OpLoad %115 
                                       f32_4 %265 = OpFAdd %263 %264 
                                                      OpStore %27 %265 
                                       f32_4 %266 = OpLoad %27 
                              Uniform f32_4* %267 = OpAccessChain %19 %45 %66 
                                       f32_4 %268 = OpLoad %267 
                                       f32_4 %269 = OpFAdd %266 %268 
                                                      OpStore %27 %269 
                                       f32_4 %270 = OpLoad %27 
                                       f32_4 %271 = OpVectorShuffle %270 %270 1 1 1 1 
                              Uniform f32_4* %272 = OpAccessChain %19 %46 %46 
                                       f32_4 %273 = OpLoad %272 
                                       f32_4 %274 = OpFMul %271 %273 
                                                      OpStore %115 %274 
                              Uniform f32_4* %275 = OpAccessChain %19 %46 %45 
                                       f32_4 %276 = OpLoad %275 
                                       f32_4 %277 = OpLoad %27 
                                       f32_4 %278 = OpVectorShuffle %277 %277 0 0 0 0 
                                       f32_4 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %115 
                                       f32_4 %281 = OpFAdd %279 %280 
                                                      OpStore %115 %281 
                              Uniform f32_4* %282 = OpAccessChain %19 %46 %58 
                                       f32_4 %283 = OpLoad %282 
                                       f32_4 %284 = OpLoad %27 
                                       f32_4 %285 = OpVectorShuffle %284 %284 2 2 2 2 
                                       f32_4 %286 = OpFMul %283 %285 
                                       f32_4 %287 = OpLoad %115 
                                       f32_4 %288 = OpFAdd %286 %287 
                                                      OpStore %115 %288 
                              Uniform f32_4* %293 = OpAccessChain %19 %46 %66 
                                       f32_4 %294 = OpLoad %293 
                                       f32_4 %295 = OpLoad %27 
                                       f32_4 %296 = OpVectorShuffle %295 %295 3 3 3 3 
                                       f32_4 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %115 
                                       f32_4 %299 = OpFAdd %297 %298 
                               Output f32_4* %301 = OpAccessChain %292 %45 
                                                      OpStore %301 %299 
                                       f32_4 %305 = OpLoad %304 
                                       f32_2 %306 = OpVectorShuffle %305 %305 0 1 
                              Uniform f32_4* %308 = OpAccessChain %19 %307 
                                       f32_4 %309 = OpLoad %308 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                                       f32_2 %311 = OpFMul %306 %310 
                              Uniform f32_4* %312 = OpAccessChain %19 %307 
                                       f32_4 %313 = OpLoad %312 
                                       f32_2 %314 = OpVectorShuffle %313 %313 2 3 
                                       f32_2 %315 = OpFAdd %311 %314 
                                                      OpStore %303 %315 
                                Uniform f32* %316 = OpAccessChain %19 %83 
                                         f32 %317 = OpLoad %316 
                                Uniform f32* %318 = OpAccessChain %19 %83 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFAdd %317 %319 
                                Private f32* %321 = OpAccessChain %27 %37 
                                                      OpStore %321 %320 
                                       f32_4 %322 = OpLoad %27 
                                       f32_2 %323 = OpVectorShuffle %322 %322 0 0 
                              Uniform f32_4* %324 = OpAccessChain %19 %116 
                                       f32_4 %325 = OpLoad %324 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFMul %323 %326 
                                       f32_4 %328 = OpLoad %27 
                                       f32_4 %329 = OpVectorShuffle %328 %327 4 5 2 3 
                                                      OpStore %27 %329 
                                       f32_4 %331 = OpLoad %40 
                                       f32_2 %332 = OpVectorShuffle %331 %331 0 1 
                                       f32_4 %333 = OpLoad %27 
                                       f32_2 %334 = OpVectorShuffle %333 %333 0 1 
                                       f32_2 %335 = OpFDiv %332 %334 
                                       f32_4 %336 = OpLoad %330 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 2 3 
                                                      OpStore %330 %337 
                                       f32_4 %338 = OpLoad %40 
                                       f32_2 %339 = OpVectorShuffle %338 %338 2 3 
                                       f32_4 %340 = OpLoad %330 
                                       f32_4 %341 = OpVectorShuffle %340 %339 0 1 4 5 
                                                      OpStore %330 %341 
                                 Output f32* %343 = OpAccessChain %292 %45 %80 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFNegate %344 
                                 Output f32* %346 = OpAccessChain %292 %45 %80 
                                                      OpStore %346 %345 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 248
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %112 %234 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %234 Location 234 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %19 = OpTypeVector %6 4 
                                              %22 = OpTypePointer Private %19 
                               Private f32_4* %23 = OpVariable Private 
                                              %24 = OpTypeInt 32 0 
                                              %25 = OpTypeVector %24 4 
                                              %26 = OpTypeStruct %19 %25 %6 %6 %6 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; u32_4; f32; f32; f32;}* %28 = OpVariable Uniform 
                                              %29 = OpTypeInt 32 1 
                                          i32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Uniform %19 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          f32 %36 = OpConstant 3.674022E-40 
                                        f32_4 %37 = OpConstantComposite %35 %36 %36 %35 
                               Private f32_3* %42 = OpVariable Private 
                               Private f32_3* %48 = OpVariable Private 
                               Private f32_3* %54 = OpVariable Private 
                                          f32 %56 = OpConstant 3.674022E-40 
                                        f32_3 %57 = OpConstantComposite %56 %56 %56 
                                          f32 %60 = OpConstant 3.674022E-40 
                                        f32_3 %61 = OpConstantComposite %60 %60 %60 
                               Private f32_3* %69 = OpVariable Private 
                                          f32 %73 = OpConstant 3.674022E-40 
                                        f32_2 %74 = OpConstantComposite %73 %73 
                                          f32 %86 = OpConstant 3.674022E-40 
                                        f32_3 %87 = OpConstantComposite %86 %86 %86 
                                          f32 %94 = OpConstant 3.674022E-40 
                                        f32_2 %95 = OpConstantComposite %94 %94 
                                             %111 = OpTypePointer Input %19 
                                Input f32_4* %112 = OpVariable Input 
                              Private f32_4* %116 = OpVariable Private 
                              Private f32_3* %121 = OpVariable Private 
                                         f32 %123 = OpConstant 3.674022E-40 
                                       f32_3 %124 = OpConstantComposite %123 %123 %123 
                                         f32 %126 = OpConstant 3.674022E-40 
                                       f32_3 %127 = OpConstantComposite %126 %126 %126 
                                         f32 %130 = OpConstant 3.674022E-40 
                                       f32_3 %131 = OpConstantComposite %130 %130 %130 
                                         f32 %136 = OpConstant 3.674022E-40 
                                       f32_3 %137 = OpConstantComposite %136 %136 %136 
                                             %142 = OpTypeBool 
                                             %143 = OpTypePointer Private %142 
                               Private bool* %144 = OpVariable Private 
                                         f32 %145 = OpConstant 3.674022E-40 
                                       f32_4 %146 = OpConstantComposite %145 %145 %145 %145 
                                         i32 %147 = OpConstant 4 
                                             %148 = OpTypePointer Uniform %6 
                                             %152 = OpTypeVector %142 4 
                              Private f32_4* %155 = OpVariable Private 
                                             %156 = OpTypePointer Function %7 
                                             %167 = OpTypePointer Private %6 
                                Private f32* %168 = OpVariable Private 
                                         i32 %169 = OpConstant 2 
                                         i32 %188 = OpConstant 3 
                                         i32 %204 = OpConstant 1 
                                             %205 = OpTypePointer Uniform %25 
                                         u32 %209 = OpConstant 0 
                                       f32_3 %216 = OpConstantComposite %145 %145 %145 
                                             %220 = OpTypePointer Function %6 
                                         u32 %230 = OpConstant 3 
                                             %233 = OpTypePointer Output %19 
                               Output f32_4* %234 = OpVariable Output 
                                             %235 = OpTypePointer Function %19 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %157 = OpVariable Function 
                             Function f32_3* %203 = OpVariable Function 
                               Function f32* %221 = OpVariable Function 
                             Function f32_4* %236 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %20 = OpImageSampleImplicitLod %14 %18 
                                        f32_3 %21 = OpVectorShuffle %20 %20 0 1 2 
                                                      OpStore %9 %21 
                               Uniform f32_4* %32 = OpAccessChain %28 %30 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 0 1 0 1 
                                        f32_4 %38 = OpFMul %34 %37 
                                        f32_2 %39 = OpLoad %17 
                                        f32_4 %40 = OpVectorShuffle %39 %39 0 1 0 1 
                                        f32_4 %41 = OpFAdd %38 %40 
                                                      OpStore %23 %41 
                   read_only Texture2DSampled %43 = OpLoad %13 
                                        f32_4 %44 = OpLoad %23 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpImageSampleImplicitLod %43 %45 
                                        f32_3 %47 = OpVectorShuffle %46 %46 0 1 2 
                                                      OpStore %42 %47 
                   read_only Texture2DSampled %49 = OpLoad %13 
                                        f32_4 %50 = OpLoad %23 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                                      OpStore %48 %53 
                                        f32_3 %55 = OpLoad %42 
                                        f32_3 %58 = OpFMul %55 %57 
                                                      OpStore %54 %58 
                                        f32_3 %59 = OpLoad %9 
                                        f32_3 %62 = OpFMul %59 %61 
                                        f32_3 %63 = OpLoad %54 
                                        f32_3 %64 = OpFAdd %62 %63 
                                                      OpStore %54 %64 
                                        f32_3 %65 = OpLoad %48 
                                        f32_3 %66 = OpFMul %65 %57 
                                        f32_3 %67 = OpLoad %54 
                                        f32_3 %68 = OpFAdd %66 %67 
                                                      OpStore %54 %68 
                               Uniform f32_4* %70 = OpAccessChain %28 %30 
                                        f32_4 %71 = OpLoad %70 
                                        f32_2 %72 = OpVectorShuffle %71 %71 0 1 
                                        f32_2 %75 = OpFMul %72 %74 
                                        f32_2 %76 = OpLoad %17 
                                        f32_2 %77 = OpFAdd %75 %76 
                                        f32_3 %78 = OpLoad %69 
                                        f32_3 %79 = OpVectorShuffle %78 %77 3 4 2 
                                                      OpStore %69 %79 
                   read_only Texture2DSampled %80 = OpLoad %13 
                                        f32_3 %81 = OpLoad %69 
                                        f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                                        f32_4 %83 = OpImageSampleImplicitLod %80 %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                                      OpStore %9 %84 
                                        f32_3 %85 = OpLoad %9 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad %54 
                                        f32_3 %90 = OpFAdd %88 %89 
                                                      OpStore %54 %90 
                               Uniform f32_4* %91 = OpAccessChain %28 %30 
                                        f32_4 %92 = OpLoad %91 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 1 
                                        f32_2 %96 = OpFMul %93 %95 
                                        f32_2 %97 = OpLoad %17 
                                        f32_2 %98 = OpFAdd %96 %97 
                                        f32_3 %99 = OpLoad %69 
                                       f32_3 %100 = OpVectorShuffle %99 %98 3 4 2 
                                                      OpStore %69 %100 
                  read_only Texture2DSampled %101 = OpLoad %13 
                                       f32_3 %102 = OpLoad %69 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpImageSampleImplicitLod %101 %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                                      OpStore %9 %105 
                                       f32_3 %106 = OpLoad %9 
                                       f32_3 %107 = OpFMul %106 %87 
                                       f32_3 %108 = OpLoad %54 
                                       f32_3 %109 = OpFAdd %107 %108 
                                                      OpStore %54 %109 
                                       f32_3 %110 = OpLoad %54 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 1 1 1 
                                       f32_3 %115 = OpFMul %110 %114 
                                                      OpStore %69 %115 
                                       f32_3 %117 = OpLoad %54 
                                       f32_3 %118 = OpExtInst %1 30 %117 
                                       f32_4 %119 = OpLoad %116 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %116 %120 
                                       f32_3 %122 = OpLoad %69 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_3 %128 = OpFAdd %125 %127 
                                                      OpStore %121 %128 
                                       f32_3 %129 = OpLoad %69 
                                       f32_3 %132 = OpFMul %129 %131 
                                                      OpStore %69 %132 
                                       f32_3 %133 = OpLoad %69 
                                       f32_3 %134 = OpLoad %121 
                                       f32_3 %135 = OpFMul %133 %134 
                                       f32_3 %138 = OpFAdd %135 %137 
                                                      OpStore %121 %138 
                                       f32_3 %139 = OpLoad %69 
                                       f32_3 %140 = OpLoad %121 
                                       f32_3 %141 = OpFMul %139 %140 
                                                      OpStore %121 %141 
                                Uniform f32* %149 = OpAccessChain %28 %147 
                                         f32 %150 = OpLoad %149 
                                       f32_4 %151 = OpCompositeConstruct %150 %150 %150 %150 
                                      bool_4 %153 = OpFOrdNotEqual %146 %151 
                                        bool %154 = OpAny %153 
                                                      OpStore %144 %154 
                                        bool %158 = OpLoad %144 
                                                      OpSelectionMerge %160 None 
                                                      OpBranchConditional %158 %159 %162 
                                             %159 = OpLabel 
                                       f32_3 %161 = OpLoad %69 
                                                      OpStore %157 %161 
                                                      OpBranch %160 
                                             %162 = OpLabel 
                                       f32_3 %163 = OpLoad %121 
                                                      OpStore %157 %163 
                                                      OpBranch %160 
                                             %160 = OpLabel 
                                       f32_3 %164 = OpLoad %157 
                                       f32_4 %165 = OpLoad %155 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 5 6 3 
                                                      OpStore %155 %166 
                                Uniform f32* %170 = OpAccessChain %28 %169 
                                         f32 %171 = OpLoad %170 
                                                      OpStore %168 %171 
                                         f32 %172 = OpLoad %168 
                                         f32 %173 = OpExtInst %1 43 %172 %145 %36 
                                                      OpStore %168 %173 
                                       f32_4 %174 = OpLoad %116 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                         f32 %176 = OpLoad %168 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %23 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %23 %180 
                                       f32_4 %181 = OpLoad %23 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpExtInst %1 29 %182 
                                       f32_4 %184 = OpLoad %23 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                      OpStore %23 %185 
                                       f32_4 %186 = OpLoad %23 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                Uniform f32* %189 = OpAccessChain %28 %188 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %191 = OpAccessChain %28 %188 
                                         f32 %192 = OpLoad %191 
                                Uniform f32* %193 = OpAccessChain %28 %188 
                                         f32 %194 = OpLoad %193 
                                       f32_3 %195 = OpCompositeConstruct %190 %192 %194 
                                         f32 %196 = OpCompositeExtract %195 0 
                                         f32 %197 = OpCompositeExtract %195 1 
                                         f32 %198 = OpCompositeExtract %195 2 
                                       f32_3 %199 = OpCompositeConstruct %196 %197 %198 
                                       f32_3 %200 = OpExtInst %1 37 %187 %199 
                                       f32_4 %201 = OpLoad %23 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %23 %202 
                              Uniform u32_4* %206 = OpAccessChain %28 %204 
                                       u32_4 %207 = OpLoad %206 
                                         u32 %208 = OpCompositeExtract %207 0 
                                        bool %210 = OpINotEqual %208 %209 
                                                      OpSelectionMerge %212 None 
                                                      OpBranchConditional %210 %211 %215 
                                             %211 = OpLabel 
                                       f32_4 %213 = OpLoad %23 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                                      OpStore %203 %214 
                                                      OpBranch %212 
                                             %215 = OpLabel 
                                                      OpStore %203 %216 
                                                      OpBranch %212 
                                             %212 = OpLabel 
                                       f32_3 %217 = OpLoad %203 
                                       f32_4 %218 = OpLoad %116 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %116 %219 
                              Uniform u32_4* %222 = OpAccessChain %28 %204 
                                       u32_4 %223 = OpLoad %222 
                                         u32 %224 = OpCompositeExtract %223 0 
                                        bool %225 = OpINotEqual %224 %209 
                                                      OpSelectionMerge %227 None 
                                                      OpBranchConditional %225 %226 %228 
                                             %226 = OpLabel 
                                                      OpStore %221 %36 
                                                      OpBranch %227 
                                             %228 = OpLabel 
                                                      OpStore %221 %145 
                                                      OpBranch %227 
                                             %227 = OpLabel 
                                         f32 %229 = OpLoad %221 
                                Private f32* %231 = OpAccessChain %116 %230 
                                                      OpStore %231 %229 
                                Private f32* %232 = OpAccessChain %155 %230 
                                                      OpStore %232 %36 
                              Uniform u32_4* %237 = OpAccessChain %28 %204 
                                       u32_4 %238 = OpLoad %237 
                                         u32 %239 = OpCompositeExtract %238 1 
                                        bool %240 = OpINotEqual %239 %209 
                                                      OpSelectionMerge %242 None 
                                                      OpBranchConditional %240 %241 %244 
                                             %241 = OpLabel 
                                       f32_4 %243 = OpLoad %155 
                                                      OpStore %236 %243 
                                                      OpBranch %242 
                                             %244 = OpLabel 
                                       f32_4 %245 = OpLoad %116 
                                                      OpStore %236 %245 
                                                      OpBranch %242 
                                             %242 = OpLabel 
                                       f32_4 %246 = OpLoad %236 
                                                      OpStore %234 %246 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
Fallback "VertexLit"
}