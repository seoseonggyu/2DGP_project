//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Brave/ItemSpecific/MetalSkinShader" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_OverrideColor ("Override Color", Color) = (1,1,1,0)
_Perpendicular ("Is Perpendicular Tilt", Float) = 1
}
SubShader {
 LOD 110
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 63653
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat13;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb4 = 0.0<_Perpendicular;
    u_xlat4 = (u_xlatb4) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD4 = u_xlat0;
    vs_TEXCOORD5 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat12;
float u_xlat19;
bool u_xlatb19;
float u_xlat21;
void main()
{
    u_xlat6.x = vs_TEXCOORD1.w;
    u_xlat6.y = vs_TEXCOORD2.w;
    u_xlat6.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat19 = u_xlat2.w + -0.100000001;
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat19 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat19) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat19 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat19 = min(u_xlat19, 1.0);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat4.z = sqrt(u_xlat19);
    u_xlat19 = fract(_Time.y);
    u_xlat3.x = u_xlat19 * 4.0;
    u_xlat21 = vs_TEXCOORD4.x + (-vs_TEXCOORD5.x);
    u_xlat21 = u_xlat21 + vs_TEXCOORD4.y;
    u_xlat21 = u_xlat21 + (-vs_TEXCOORD5.y);
    u_xlat21 = u_xlat21 * 0.5 + -0.100000001;
    u_xlat21 = fract(u_xlat21);
    u_xlatb3 = u_xlat3.x<u_xlat21;
    u_xlat19 = u_xlat19 * 4.0 + 0.100000001;
    u_xlatb19 = u_xlat21<u_xlat19;
    u_xlatb19 = u_xlatb19 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb19)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat19 = u_xlat2.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb19){
        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb19)) ? u_xlat5.xyz : u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat12 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12, u_xlat6.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.yyz * vs_TEXCOORD6.xyz;
    u_xlat0.xzw = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xxx;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xzw);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xzw = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xzw;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat0.xzw;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    u_xlat0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    u_xlat5.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat5;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 338
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %153 %165 %166 %178 %185 %219 %297 %301 %323 %325 %329 %331 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %151 0 BuiltIn 151 
                                                      OpMemberDecorate %151 1 BuiltIn 151 
                                                      OpMemberDecorate %151 2 BuiltIn 151 
                                                      OpDecorate %151 Block 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %185 Location 185 
                                                      OpDecorate %219 Location 219 
                                                      OpDecorate %297 Location 297 
                                                      OpDecorate %301 Location 301 
                                                      OpDecorate %323 Location 323 
                                                      OpDecorate %325 Location 325 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %329 Location 329 
                                                      OpDecorate %331 Location 331 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %7 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          i32 %76 = OpConstant 4 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Function %6 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                               Private f32_4* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                              Private f32_4* %130 = OpVariable Private 
                                             %150 = OpTypeArray %6 %13 
                                             %151 = OpTypeStruct %7 %6 %150 
                                             %152 = OpTypePointer Output %151 
        Output struct {f32_4; f32; f32[1];}* %153 = OpVariable Output 
                                             %161 = OpTypePointer Output %7 
                                             %163 = OpTypeVector %6 2 
                                             %164 = OpTypePointer Output %163 
                               Output f32_2* %165 = OpVariable Output 
                                Input f32_4* %166 = OpVariable Input 
                                         i32 %169 = OpConstant 5 
                               Output f32_4* %178 = OpVariable Output 
                                             %181 = OpTypePointer Output %6 
                                             %183 = OpTypeVector %6 3 
                                             %184 = OpTypePointer Input %183 
                                Input f32_3* %185 = OpVariable Input 
                                Private f32* %204 = OpVariable Private 
                                Input f32_4* %219 = OpVariable Input 
                                             %264 = OpTypePointer Private %183 
                              Private f32_3* %265 = OpVariable Private 
                               Output f32_4* %297 = OpVariable Output 
                               Output f32_4* %301 = OpVariable Output 
                               Output f32_4* %323 = OpVariable Output 
                               Output f32_4* %325 = OpVariable Output 
                                             %328 = OpTypePointer Output %183 
                               Output f32_3* %329 = OpVariable Output 
                                       f32_3 %330 = OpConstantComposite %75 %75 %75 
                               Output f32_4* %331 = OpVariable Output 
                                       f32_4 %332 = OpConstantComposite %75 %75 %75 %75 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %82 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %77 = OpAccessChain %23 %76 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %75 %78 
                                                      OpStore %74 %79 
                                         bool %83 = OpLoad %74 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %87 
                                              %84 = OpLabel 
                                                      OpStore %82 %86 
                                                      OpBranch %85 
                                              %87 = OpLabel 
                                                      OpStore %82 %88 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %89 = OpLoad %82 
                                                      OpStore %80 %89 
                                 Private f32* %90 = OpAccessChain %9 %31 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpLoad %80 
                                          f32 %93 = OpFMul %91 %92 
                                   Input f32* %94 = OpAccessChain %11 %46 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                        f32_4 %99 = OpLoad %11 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %26 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpFMul %100 %103 
                                                      OpStore %98 %104 
                              Uniform f32_4* %105 = OpAccessChain %23 %25 %25 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %11 
                                       f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %98 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %98 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %43 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %114 0 0 0 0 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %98 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %23 %25 %54 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %98 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %54 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %11 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %9 %129 
                                       f32_4 %131 = OpLoad %98 
                                       f32_4 %132 = OpVectorShuffle %131 %131 1 1 1 1 
                              Uniform f32_4* %133 = OpAccessChain %23 %54 %26 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpFMul %132 %134 
                                                      OpStore %130 %135 
                              Uniform f32_4* %136 = OpAccessChain %23 %54 %25 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %98 
                                       f32_4 %139 = OpVectorShuffle %138 %138 0 0 0 0 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %130 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %130 %142 
                              Uniform f32_4* %143 = OpAccessChain %23 %54 %43 
                                       f32_4 %144 = OpLoad %143 
                                       f32_4 %145 = OpLoad %98 
                                       f32_4 %146 = OpVectorShuffle %145 %145 2 2 2 2 
                                       f32_4 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %130 
                                       f32_4 %149 = OpFAdd %147 %148 
                                                      OpStore %130 %149 
                              Uniform f32_4* %154 = OpAccessChain %23 %54 %54 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %98 
                                       f32_4 %157 = OpVectorShuffle %156 %156 3 3 3 3 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %130 
                                       f32_4 %160 = OpFAdd %158 %159 
                               Output f32_4* %162 = OpAccessChain %153 %25 
                                                      OpStore %162 %160 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                              Uniform f32_4* %170 = OpAccessChain %23 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_2 %173 = OpFMul %168 %172 
                              Uniform f32_4* %174 = OpAccessChain %23 %169 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 3 
                                       f32_2 %177 = OpFAdd %173 %176 
                                                      OpStore %165 %177 
                                Private f32* %179 = OpAccessChain %9 %31 
                                         f32 %180 = OpLoad %179 
                                 Output f32* %182 = OpAccessChain %178 %57 
                                                      OpStore %182 %180 
                                       f32_3 %186 = OpLoad %185 
                              Uniform f32_4* %187 = OpAccessChain %23 %26 %25 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %186 %189 
                                Private f32* %191 = OpAccessChain %98 %13 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %185 
                              Uniform f32_4* %193 = OpAccessChain %23 %26 %26 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %192 %195 
                                Private f32* %197 = OpAccessChain %98 %46 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %185 
                              Uniform f32_4* %199 = OpAccessChain %23 %26 %43 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %198 %201 
                                Private f32* %203 = OpAccessChain %98 %31 
                                                      OpStore %203 %202 
                                       f32_4 %205 = OpLoad %98 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %98 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                                      OpStore %204 %209 
                                         f32 %210 = OpLoad %204 
                                         f32 %211 = OpExtInst %1 32 %210 
                                                      OpStore %204 %211 
                                         f32 %212 = OpLoad %204 
                                       f32_3 %213 = OpCompositeConstruct %212 %212 %212 
                                       f32_4 %214 = OpLoad %98 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_4 %217 = OpLoad %98 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %98 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_3 %221 = OpVectorShuffle %220 %220 1 1 1 
                              Uniform f32_4* %222 = OpAccessChain %23 %25 %26 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 1 2 0 
                                       f32_3 %225 = OpFMul %221 %224 
                                       f32_4 %226 = OpLoad %130 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                                      OpStore %130 %227 
                              Uniform f32_4* %228 = OpAccessChain %23 %25 %25 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 2 0 
                                       f32_4 %231 = OpLoad %219 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 0 0 
                                       f32_3 %233 = OpFMul %230 %232 
                                       f32_4 %234 = OpLoad %130 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFAdd %233 %235 
                                       f32_4 %237 = OpLoad %130 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 6 3 
                                                      OpStore %130 %238 
                              Uniform f32_4* %239 = OpAccessChain %23 %25 %43 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 1 2 0 
                                       f32_4 %242 = OpLoad %219 
                                       f32_3 %243 = OpVectorShuffle %242 %242 2 2 2 
                                       f32_3 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %130 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFAdd %244 %246 
                                       f32_4 %248 = OpLoad %130 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %130 %249 
                                       f32_4 %250 = OpLoad %130 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %130 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %251 %253 
                                                      OpStore %204 %254 
                                         f32 %255 = OpLoad %204 
                                         f32 %256 = OpExtInst %1 32 %255 
                                                      OpStore %204 %256 
                                         f32 %257 = OpLoad %204 
                                       f32_3 %258 = OpCompositeConstruct %257 %257 %257 
                                       f32_4 %259 = OpLoad %130 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_4 %262 = OpLoad %130 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %130 %263 
                                       f32_4 %266 = OpLoad %98 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_4 %268 = OpLoad %130 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFMul %267 %269 
                                                      OpStore %265 %270 
                                       f32_4 %271 = OpLoad %98 
                                       f32_3 %272 = OpVectorShuffle %271 %271 2 0 1 
                                       f32_4 %273 = OpLoad %130 
                                       f32_3 %274 = OpVectorShuffle %273 %273 1 2 0 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_3 %276 = OpLoad %265 
                                       f32_3 %277 = OpFNegate %276 
                                       f32_3 %278 = OpFAdd %275 %277 
                                                      OpStore %265 %278 
                                  Input f32* %279 = OpAccessChain %219 %57 
                                         f32 %280 = OpLoad %279 
                                Uniform f32* %281 = OpAccessChain %23 %43 %57 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %280 %282 
                                                      OpStore %204 %283 
                                         f32 %284 = OpLoad %204 
                                       f32_3 %285 = OpCompositeConstruct %284 %284 %284 
                                       f32_3 %286 = OpLoad %265 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %265 %287 
                                Private f32* %288 = OpAccessChain %265 %31 
                                         f32 %289 = OpLoad %288 
                                 Output f32* %290 = OpAccessChain %178 %13 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %130 %46 
                                         f32 %292 = OpLoad %291 
                                 Output f32* %293 = OpAccessChain %178 %31 
                                                      OpStore %293 %292 
                                Private f32* %294 = OpAccessChain %98 %13 
                                         f32 %295 = OpLoad %294 
                                 Output f32* %296 = OpAccessChain %178 %46 
                                                      OpStore %296 %295 
                                Private f32* %298 = OpAccessChain %130 %31 
                                         f32 %299 = OpLoad %298 
                                 Output f32* %300 = OpAccessChain %297 %31 
                                                      OpStore %300 %299 
                                Private f32* %302 = OpAccessChain %130 %13 
                                         f32 %303 = OpLoad %302 
                                 Output f32* %304 = OpAccessChain %301 %31 
                                                      OpStore %304 %303 
                                Private f32* %305 = OpAccessChain %98 %46 
                                         f32 %306 = OpLoad %305 
                                 Output f32* %307 = OpAccessChain %297 %46 
                                                      OpStore %307 %306 
                                Private f32* %308 = OpAccessChain %98 %31 
                                         f32 %309 = OpLoad %308 
                                 Output f32* %310 = OpAccessChain %301 %46 
                                                      OpStore %310 %309 
                                Private f32* %311 = OpAccessChain %9 %13 
                                         f32 %312 = OpLoad %311 
                                 Output f32* %313 = OpAccessChain %297 %57 
                                                      OpStore %313 %312 
                                Private f32* %314 = OpAccessChain %265 %13 
                                         f32 %315 = OpLoad %314 
                                 Output f32* %316 = OpAccessChain %297 %13 
                                                      OpStore %316 %315 
                                Private f32* %317 = OpAccessChain %265 %46 
                                         f32 %318 = OpLoad %317 
                                 Output f32* %319 = OpAccessChain %301 %13 
                                                      OpStore %319 %318 
                                Private f32* %320 = OpAccessChain %9 %46 
                                         f32 %321 = OpLoad %320 
                                 Output f32* %322 = OpAccessChain %301 %57 
                                                      OpStore %322 %321 
                                       f32_4 %324 = OpLoad %9 
                                                      OpStore %323 %324 
                              Uniform f32_4* %326 = OpAccessChain %23 %25 %54 
                                       f32_4 %327 = OpLoad %326 
                                                      OpStore %325 %327 
                                                      OpStore %329 %330 
                                                      OpStore %331 %332 
                                 Output f32* %333 = OpAccessChain %153 %25 %13 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFNegate %334 
                                 Output f32* %336 = OpAccessChain %153 %25 %13 
                                                      OpStore %336 %335 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 456
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %63 %148 %151 %371 %451 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %26 Location 26 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 RelaxedPrecision 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 RelaxedPrecision 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpMemberDecorate %36 8 RelaxedPrecision 
                                                      OpMemberDecorate %36 8 Offset 36 
                                                      OpMemberDecorate %36 9 Offset 36 
                                                      OpMemberDecorate %36 10 RelaxedPrecision 
                                                      OpMemberDecorate %36 10 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %63 Location 63 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %233 SpecId 233 
                                                      OpDecorate %323 DescriptorSet 323 
                                                      OpDecorate %323 Binding 323 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %371 Location 371 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %451 Location 451 
                                                      OpDecorate %453 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeInt 32 0 
                                          u32 %14 = OpConstant 3 
                                              %15 = OpTypePointer Input %6 
                                          u32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Private %6 
                                 Input f32_4* %21 = OpVariable Input 
                                          u32 %24 = OpConstant 1 
                                 Input f32_4* %26 = OpVariable Input 
                                          u32 %29 = OpConstant 2 
                               Private f32_3* %31 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %10 %34 
                                              %36 = OpTypeStruct %10 %7 %10 %10 %10 %35 %7 %7 %10 %10 %6 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %7 
                                              %45 = OpTypePointer Private %10 
                               Private f32_4* %46 = OpVariable Private 
                               Private f32_4* %55 = OpVariable Private 
                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %57 = OpTypeSampledImage %56 
                                              %58 = OpTypePointer UniformConstant %57 
  UniformConstant read_only Texture2DSampled* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeVector %6 2 
                                              %62 = OpTypePointer Input %61 
                                 Input f32_2* %63 = OpVariable Input 
                               Private f32_3* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %77 = OpConstant 3.674022E-40 
                                          i32 %80 = OpConstant 0 
                                          i32 %82 = OpConstant -1 
                                          f32 %90 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                        f32_3 %93 = OpConstantComposite %90 %91 %92 
                               Private f32_4* %96 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_3 %100 = OpConstantComposite %77 %77 %99 
                                         f32 %118 = OpConstant 3.674022E-40 
                                       f32_2 %119 = OpConstantComposite %118 %118 
                                Private f32* %123 = OpVariable Private 
                                         f32 %130 = OpConstant 3.674022E-40 
                                Private f32* %138 = OpVariable Private 
                                             %139 = OpTypePointer Uniform %6 
                                Private f32* %143 = OpVariable Private 
                                         f32 %145 = OpConstant 3.674022E-40 
                              Private f32_3* %147 = OpVariable Private 
                                Input f32_4* %148 = OpVariable Input 
                                Input f32_4* %151 = OpVariable Input 
                                         f32 %172 = OpConstant 3.674022E-40 
                               Private bool* %180 = OpVariable Private 
                                         f32 %187 = OpConstant 3.674022E-40 
                              Private f32_3* %196 = OpVariable Private 
                                             %197 = OpTypePointer Function %7 
                                       f32_3 %202 = OpConstantComposite %130 %130 %130 
                                         i32 %209 = OpConstant 10 
                                         i32 %223 = OpConstant 4 
                                        bool %227 = OpConstantFalse 
                                        bool %233 = OpSpecConstantFalse 
                                         i32 %241 = OpConstant 5 
                                             %242 = OpTypePointer Uniform %10 
                                         i32 %260 = OpConstant 2 
                                         i32 %274 = OpConstant 3 
                                         i32 %291 = OpConstant 7 
                                         i32 %297 = OpConstant 6 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                Private f32* %310 = OpVariable Private 
                                             %320 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %321 = OpTypeSampledImage %320 
                                             %322 = OpTypePointer UniformConstant %321 
 UniformConstant read_only Texture3DSampled* %323 = OpVariable UniformConstant 
                              Private f32_4* %328 = OpVariable Private 
                                             %370 = OpTypePointer Input %7 
                                Input f32_3* %371 = OpVariable Input 
                                Private f32* %384 = OpVariable Private 
                              Private f32_3* %402 = OpVariable Private 
                                         f32 %409 = OpConstant 3.674022E-40 
                                         i32 %418 = OpConstant 8 
                                         i32 %438 = OpConstant 9 
                                             %450 = OpTypePointer Output %10 
                               Output f32_4* %451 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %198 = OpVariable Function 
                             Function f32_3* %281 = OpVariable Function 
                                   Input f32* %16 = OpAccessChain %12 %14 
                                          f32 %17 = OpLoad %16 
                                 Private f32* %20 = OpAccessChain %9 %18 
                                                      OpStore %20 %17 
                                   Input f32* %22 = OpAccessChain %21 %14 
                                          f32 %23 = OpLoad %22 
                                 Private f32* %25 = OpAccessChain %9 %24 
                                                      OpStore %25 %23 
                                   Input f32* %27 = OpAccessChain %26 %14 
                                          f32 %28 = OpLoad %27 
                                 Private f32* %30 = OpAccessChain %9 %29 
                                                      OpStore %30 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpFNegate %32 
                               Uniform f32_3* %42 = OpAccessChain %38 %40 
                                        f32_3 %43 = OpLoad %42 
                                        f32_3 %44 = OpFAdd %33 %43 
                                                      OpStore %31 %44 
                                        f32_3 %47 = OpLoad %31 
                                        f32_3 %48 = OpLoad %31 
                                          f32 %49 = OpDot %47 %48 
                                 Private f32* %50 = OpAccessChain %46 %18 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %46 %18 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpExtInst %1 32 %52 
                                 Private f32* %54 = OpAccessChain %46 %18 
                                                      OpStore %54 %53 
                   read_only Texture2DSampled %60 = OpLoad %59 
                                        f32_2 %64 = OpLoad %63 
                                        f32_4 %65 = OpImageSampleImplicitLod %60 %64 
                                                      OpStore %55 %65 
                                 Private f32* %67 = OpAccessChain %55 %14 
                                          f32 %68 = OpLoad %67 
                                          f32 %70 = OpFAdd %68 %69 
                                 Private f32* %71 = OpAccessChain %66 %18 
                                                      OpStore %71 %70 
                                 Private f32* %75 = OpAccessChain %66 %18 
                                          f32 %76 = OpLoad %75 
                                         bool %78 = OpFOrdLessThan %76 %77 
                                                      OpStore %74 %78 
                                         bool %79 = OpLoad %74 
                                          i32 %81 = OpSelect %79 %40 %80 
                                          i32 %83 = OpIMul %81 %82 
                                         bool %84 = OpINotEqual %83 %80 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %86 
                                              %85 = OpLabel 
                                                      OpKill
                                              %86 = OpLabel 
                                        f32_4 %88 = OpLoad %55 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                          f32 %94 = OpDot %89 %93 
                                 Private f32* %95 = OpAccessChain %66 %18 
                                                      OpStore %95 %94 
                                        f32_3 %97 = OpLoad %66 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %96 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %96 %103 
                                       f32_4 %104 = OpLoad %96 
                                       f32_2 %105 = OpVectorShuffle %104 %104 1 1 
                                       f32_4 %106 = OpLoad %55 
                                       f32_2 %107 = OpVectorShuffle %106 %106 3 3 
                                         f32 %108 = OpDot %105 %107 
                                Private f32* %109 = OpAccessChain %66 %18 
                                                      OpStore %109 %108 
                                Private f32* %110 = OpAccessChain %96 %24 
                                         f32 %111 = OpLoad %110 
                                Private f32* %112 = OpAccessChain %96 %24 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFAdd %111 %113 
                                Private f32* %115 = OpAccessChain %66 %24 
                                                      OpStore %115 %114 
                                       f32_3 %116 = OpLoad %66 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_2 %120 = OpFAdd %117 %119 
                                       f32_3 %121 = OpLoad %66 
                                       f32_3 %122 = OpVectorShuffle %121 %120 3 4 2 
                                                      OpStore %66 %122 
                                       f32_3 %124 = OpLoad %66 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_3 %126 = OpLoad %66 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                         f32 %128 = OpDot %125 %127 
                                                      OpStore %123 %128 
                                         f32 %129 = OpLoad %123 
                                         f32 %131 = OpExtInst %1 37 %129 %130 
                                                      OpStore %123 %131 
                                         f32 %132 = OpLoad %123 
                                         f32 %133 = OpFNegate %132 
                                         f32 %134 = OpFAdd %133 %130 
                                                      OpStore %123 %134 
                                         f32 %135 = OpLoad %123 
                                         f32 %136 = OpExtInst %1 31 %135 
                                Private f32* %137 = OpAccessChain %66 %29 
                                                      OpStore %137 %136 
                                Uniform f32* %140 = OpAccessChain %38 %80 %24 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpExtInst %1 10 %141 
                                                      OpStore %138 %142 
                                         f32 %144 = OpLoad %138 
                                         f32 %146 = OpFMul %144 %145 
                                                      OpStore %143 %146 
                                  Input f32* %149 = OpAccessChain %148 %18 
                                         f32 %150 = OpLoad %149 
                                  Input f32* %152 = OpAccessChain %151 %18 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                         f32 %155 = OpFAdd %150 %154 
                                Private f32* %156 = OpAccessChain %147 %18 
                                                      OpStore %156 %155 
                                Private f32* %157 = OpAccessChain %147 %18 
                                         f32 %158 = OpLoad %157 
                                  Input f32* %159 = OpAccessChain %148 %24 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %147 %18 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %147 %18 
                                         f32 %164 = OpLoad %163 
                                  Input f32* %165 = OpAccessChain %151 %24 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %164 %167 
                                Private f32* %169 = OpAccessChain %147 %18 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %147 %18 
                                         f32 %171 = OpLoad %170 
                                         f32 %173 = OpFMul %171 %172 
                                         f32 %174 = OpFAdd %173 %69 
                                Private f32* %175 = OpAccessChain %147 %18 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %147 %18 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpExtInst %1 10 %177 
                                Private f32* %179 = OpAccessChain %147 %18 
                                                      OpStore %179 %178 
                                         f32 %181 = OpLoad %143 
                                Private f32* %182 = OpAccessChain %147 %18 
                                         f32 %183 = OpLoad %182 
                                        bool %184 = OpFOrdLessThan %181 %183 
                                                      OpStore %180 %184 
                                         f32 %185 = OpLoad %138 
                                         f32 %186 = OpFMul %185 %145 
                                         f32 %188 = OpFAdd %186 %187 
                                                      OpStore %138 %188 
                                Private f32* %189 = OpAccessChain %147 %18 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpLoad %138 
                                        bool %192 = OpFOrdLessThan %190 %191 
                                                      OpStore %74 %192 
                                        bool %193 = OpLoad %74 
                                        bool %194 = OpLoad %180 
                                        bool %195 = OpLogicalAnd %193 %194 
                                                      OpStore %74 %195 
                                        bool %199 = OpLoad %74 
                                                      OpSelectionMerge %201 None 
                                                      OpBranchConditional %199 %200 %203 
                                             %200 = OpLabel 
                                                      OpStore %198 %202 
                                                      OpBranch %201 
                                             %203 = OpLabel 
                                       f32_4 %204 = OpLoad %96 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                                      OpStore %198 %205 
                                                      OpBranch %201 
                                             %201 = OpLabel 
                                       f32_3 %206 = OpLoad %198 
                                                      OpStore %196 %206 
                                Private f32* %207 = OpAccessChain %55 %14 
                                         f32 %208 = OpLoad %207 
                                Uniform f32* %210 = OpAccessChain %38 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFNegate %211 
                                         f32 %213 = OpFAdd %208 %212 
                                                      OpStore %123 %213 
                                         f32 %214 = OpLoad %123 
                                        bool %215 = OpFOrdLessThan %214 %77 
                                                      OpStore %74 %215 
                                        bool %216 = OpLoad %74 
                                         i32 %217 = OpSelect %216 %40 %80 
                                         i32 %218 = OpIMul %217 %82 
                                        bool %219 = OpINotEqual %218 %80 
                                                      OpSelectionMerge %221 None 
                                                      OpBranchConditional %219 %220 %221 
                                             %220 = OpLabel 
                                                      OpKill
                                             %221 = OpLabel 
                                Uniform f32* %224 = OpAccessChain %38 %223 %18 
                                         f32 %225 = OpLoad %224 
                                        bool %226 = OpFOrdEqual %225 %130 
                                                      OpStore %74 %226 
                                                      OpSelectionMerge %229 None 
                                                      OpBranchConditional %227 %228 %229 
                                             %228 = OpLabel 
                                        bool %230 = OpLoad %74 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %232 
                                             %231 = OpLabel 
                                                      OpBranch %232 
                                             %232 = OpLabel 
                                                      OpBranch %229 
                                             %229 = OpLabel 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %233 %234 %330 
                                             %234 = OpLabel 
                                Uniform f32* %236 = OpAccessChain %38 %223 %24 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdEqual %237 %130 
                                                      OpStore %74 %238 
                                       f32_4 %239 = OpLoad %21 
                                       f32_3 %240 = OpVectorShuffle %239 %239 3 3 3 
                              Uniform f32_4* %243 = OpAccessChain %38 %241 %40 
                                       f32_4 %244 = OpLoad %243 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_3 %246 = OpFMul %240 %245 
                                       f32_4 %247 = OpLoad %96 
                                       f32_4 %248 = OpVectorShuffle %247 %246 4 5 6 3 
                                                      OpStore %96 %248 
                              Uniform f32_4* %249 = OpAccessChain %38 %241 %80 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %12 
                                       f32_3 %253 = OpVectorShuffle %252 %252 3 3 3 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %96 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %254 %256 
                                       f32_4 %258 = OpLoad %96 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %96 %259 
                              Uniform f32_4* %261 = OpAccessChain %38 %241 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %26 
                                       f32_3 %265 = OpVectorShuffle %264 %264 3 3 3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %96 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %266 %268 
                                       f32_4 %270 = OpLoad %96 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %96 %271 
                                       f32_4 %272 = OpLoad %96 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_4* %275 = OpAccessChain %38 %241 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %273 %277 
                                       f32_4 %279 = OpLoad %96 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %96 %280 
                                        bool %282 = OpLoad %74 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %287 
                                             %283 = OpLabel 
                                       f32_4 %285 = OpLoad %96 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                                      OpStore %281 %286 
                                                      OpBranch %284 
                                             %287 = OpLabel 
                                       f32_3 %288 = OpLoad %9 
                                                      OpStore %281 %288 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                       f32_3 %289 = OpLoad %281 
                                                      OpStore %9 %289 
                                       f32_3 %290 = OpLoad %9 
                              Uniform f32_3* %292 = OpAccessChain %38 %291 
                                       f32_3 %293 = OpLoad %292 
                                       f32_3 %294 = OpFNegate %293 
                                       f32_3 %295 = OpFAdd %290 %294 
                                                      OpStore %9 %295 
                                       f32_3 %296 = OpLoad %9 
                              Uniform f32_3* %298 = OpAccessChain %38 %297 
                                       f32_3 %299 = OpLoad %298 
                                       f32_3 %300 = OpFMul %296 %299 
                                       f32_4 %301 = OpLoad %96 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 4 5 6 
                                                      OpStore %96 %302 
                                Private f32* %303 = OpAccessChain %96 %24 
                                         f32 %304 = OpLoad %303 
                                         f32 %306 = OpFMul %304 %305 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %309 = OpAccessChain %9 %18 
                                                      OpStore %309 %308 
                                Uniform f32* %311 = OpAccessChain %38 %223 %29 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %312 %172 
                                         f32 %314 = OpFAdd %313 %307 
                                                      OpStore %310 %314 
                                         f32 %315 = OpLoad %310 
                                Private f32* %316 = OpAccessChain %9 %18 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpExtInst %1 40 %315 %317 
                                Private f32* %319 = OpAccessChain %96 %18 
                                                      OpStore %319 %318 
                  read_only Texture3DSampled %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %96 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 2 3 
                                       f32_4 %327 = OpImageSampleImplicitLod %324 %326 
                                                      OpStore %96 %327 
                                       f32_4 %329 = OpLoad %96 
                                                      OpStore %328 %329 
                                                      OpBranch %235 
                                             %330 = OpLabel 
                                Private f32* %331 = OpAccessChain %328 %18 
                                                      OpStore %331 %130 
                                Private f32* %332 = OpAccessChain %328 %24 
                                                      OpStore %332 %130 
                                Private f32* %333 = OpAccessChain %328 %29 
                                                      OpStore %333 %130 
                                Private f32* %334 = OpAccessChain %328 %14 
                                                      OpStore %334 %130 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                       f32_4 %335 = OpLoad %328 
                              Uniform f32_4* %336 = OpAccessChain %38 %274 
                                       f32_4 %337 = OpLoad %336 
                                         f32 %338 = OpDot %335 %337 
                                                      OpStore %123 %338 
                                         f32 %339 = OpLoad %123 
                                         f32 %340 = OpExtInst %1 43 %339 %77 %130 
                                                      OpStore %123 %340 
                                       f32_4 %341 = OpLoad %12 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpLoad %66 
                                         f32 %344 = OpDot %342 %343 
                                Private f32* %345 = OpAccessChain %147 %18 
                                                      OpStore %345 %344 
                                       f32_4 %346 = OpLoad %21 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpLoad %66 
                                         f32 %349 = OpDot %347 %348 
                                Private f32* %350 = OpAccessChain %147 %24 
                                                      OpStore %350 %349 
                                       f32_4 %351 = OpLoad %26 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpLoad %66 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %147 %29 
                                                      OpStore %355 %354 
                                       f32_3 %356 = OpLoad %147 
                                       f32_3 %357 = OpLoad %147 
                                         f32 %358 = OpDot %356 %357 
                                Private f32* %359 = OpAccessChain %9 %18 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %9 %18 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpExtInst %1 32 %361 
                                Private f32* %363 = OpAccessChain %9 %18 
                                                      OpStore %363 %362 
                                       f32_3 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %147 
                                       f32_3 %367 = OpFMul %365 %366 
                                                      OpStore %9 %367 
                                       f32_3 %368 = OpLoad %196 
                                       f32_3 %369 = OpVectorShuffle %368 %368 1 1 2 
                                       f32_3 %372 = OpLoad %371 
                                       f32_3 %373 = OpFMul %369 %372 
                                       f32_4 %374 = OpLoad %328 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %328 %375 
                                       f32_3 %376 = OpLoad %31 
                                       f32_4 %377 = OpLoad %46 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpFMul %376 %378 
                              Uniform f32_4* %380 = OpAccessChain %38 %260 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %379 %382 
                                                      OpStore %66 %383 
                                       f32_3 %385 = OpLoad %66 
                                       f32_3 %386 = OpLoad %66 
                                         f32 %387 = OpDot %385 %386 
                                                      OpStore %384 %387 
                                         f32 %388 = OpLoad %384 
                                         f32 %389 = OpExtInst %1 32 %388 
                                                      OpStore %384 %389 
                                       f32_3 %390 = OpLoad %66 
                                         f32 %391 = OpLoad %384 
                                       f32_3 %392 = OpCompositeConstruct %391 %391 %391 
                                       f32_3 %393 = OpFMul %390 %392 
                                                      OpStore %66 %393 
                                       f32_3 %394 = OpLoad %9 
                                       f32_3 %395 = OpLoad %66 
                                         f32 %396 = OpDot %394 %395 
                                Private f32* %397 = OpAccessChain %66 %18 
                                                      OpStore %397 %396 
                                Private f32* %398 = OpAccessChain %66 %18 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpExtInst %1 40 %399 %77 
                                Private f32* %401 = OpAccessChain %66 %18 
                                                      OpStore %401 %400 
                                Private f32* %403 = OpAccessChain %66 %18 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpExtInst %1 30 %404 
                                Private f32* %406 = OpAccessChain %402 %18 
                                                      OpStore %406 %405 
                                Private f32* %407 = OpAccessChain %402 %18 
                                         f32 %408 = OpLoad %407 
                                         f32 %410 = OpFMul %408 %409 
                                Private f32* %411 = OpAccessChain %402 %18 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %402 %18 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 29 %413 
                                Private f32* %415 = OpAccessChain %402 %18 
                                                      OpStore %415 %414 
                                       f32_3 %416 = OpLoad %402 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 0 0 
                              Uniform f32_4* %419 = OpAccessChain %38 %418 
                                       f32_4 %420 = OpLoad %419 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_3 %422 = OpFMul %417 %421 
                                                      OpStore %402 %422 
                                       f32_3 %423 = OpLoad %196 
                              Uniform f32_4* %424 = OpAccessChain %38 %418 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFMul %423 %426 
                                       f32_3 %428 = OpLoad %402 
                                       f32_3 %429 = OpFAdd %427 %428 
                                                      OpStore %402 %429 
                                         f32 %430 = OpLoad %123 
                                       f32_3 %431 = OpCompositeConstruct %430 %430 %430 
                                       f32_3 %432 = OpLoad %402 
                                       f32_3 %433 = OpFMul %431 %432 
                                       f32_4 %434 = OpLoad %55 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %55 %435 
                                       f32_4 %436 = OpLoad %55 
                                       f32_4 %437 = OpFNegate %436 
                              Uniform f32_4* %439 = OpAccessChain %38 %438 
                                       f32_4 %440 = OpLoad %439 
                                       f32_4 %441 = OpFAdd %437 %440 
                                                      OpStore %46 %441 
                              Uniform f32_4* %442 = OpAccessChain %38 %438 
                                       f32_4 %443 = OpLoad %442 
                                       f32_4 %444 = OpVectorShuffle %443 %443 3 3 3 3 
                                       f32_4 %445 = OpLoad %46 
                                       f32_4 %446 = OpFMul %444 %445 
                                       f32_4 %447 = OpLoad %55 
                                       f32_4 %448 = OpFAdd %446 %447 
                                                      OpStore %46 %448 
                                Private f32* %449 = OpAccessChain %328 %14 
                                                      OpStore %449 %77 
                                       f32_4 %452 = OpLoad %46 
                                       f32_4 %453 = OpLoad %328 
                                       f32_4 %454 = OpFAdd %452 %453 
                                                      OpStore %451 %454 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat13;
float u_xlat14;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb4 = 0.0<_Perpendicular;
    u_xlat4 = (u_xlatb4) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD1.x = u_xlat1.z;
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.z = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat1.y;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD4 = u_xlat0;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD5 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat1);
    u_xlat3.y = dot(unity_SHBg, u_xlat1);
    u_xlat3.z = dot(unity_SHBb, u_xlat1);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat2.w = 1.0;
    u_xlat1.x = dot(unity_SHAr, u_xlat2);
    u_xlat1.y = dot(unity_SHAg, u_xlat2);
    u_xlat1.z = dot(unity_SHAb, u_xlat2);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD6.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat12;
float u_xlat19;
bool u_xlatb19;
float u_xlat21;
void main()
{
    u_xlat6.x = vs_TEXCOORD1.w;
    u_xlat6.y = vs_TEXCOORD2.w;
    u_xlat6.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat19 = u_xlat2.w + -0.100000001;
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat19 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat19) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat19 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat19 = min(u_xlat19, 1.0);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat4.z = sqrt(u_xlat19);
    u_xlat19 = fract(_Time.y);
    u_xlat3.x = u_xlat19 * 4.0;
    u_xlat21 = vs_TEXCOORD4.x + (-vs_TEXCOORD5.x);
    u_xlat21 = u_xlat21 + vs_TEXCOORD4.y;
    u_xlat21 = u_xlat21 + (-vs_TEXCOORD5.y);
    u_xlat21 = u_xlat21 * 0.5 + -0.100000001;
    u_xlat21 = fract(u_xlat21);
    u_xlatb3 = u_xlat3.x<u_xlat21;
    u_xlat19 = u_xlat19 * 4.0 + 0.100000001;
    u_xlatb19 = u_xlat21<u_xlat19;
    u_xlatb19 = u_xlatb19 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb19)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat19 = u_xlat2.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb19){
        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb19)) ? u_xlat5.xyz : u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat12 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12, u_xlat6.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.yyz * vs_TEXCOORD6.xyz;
    u_xlat0.xzw = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xxx;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xzw);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xzw = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xzw;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat0.xzw;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    u_xlat0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    u_xlat5.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat5;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 447
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %155 %167 %168 %180 %185 %242 %302 %306 %325 %330 %437 %440 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 RelaxedPrecision 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 RelaxedPrecision 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 RelaxedPrecision 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %153 0 BuiltIn 153 
                                                      OpMemberDecorate %153 1 BuiltIn 153 
                                                      OpMemberDecorate %153 2 BuiltIn 153 
                                                      OpDecorate %153 Block 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %185 Location 185 
                                                      OpDecorate %242 Location 242 
                                                      OpDecorate %302 Location 302 
                                                      OpDecorate %306 Location 306 
                                                      OpDecorate %325 Location 325 
                                                      OpDecorate %330 Location 330 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %437 Location 437 
                                                      OpDecorate %440 Location 440 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %18 %19 %7 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 7 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %34 = OpConstant 0 
                                          i32 %44 = OpConstant 2 
                                          u32 %47 = OpConstant 2 
                                          i32 %55 = OpConstant 3 
                                          u32 %58 = OpConstant 3 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %76 = OpConstant 3.674022E-40 
                                          i32 %77 = OpConstant 11 
                                 Private f32* %81 = OpVariable Private 
                                              %82 = OpTypePointer Function %6 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %89 = OpConstant 3.674022E-40 
                               Private f32_4* %99 = OpVariable Private 
                                             %102 = OpTypePointer Uniform %7 
                              Private f32_4* %131 = OpVariable Private 
                                         i32 %134 = OpConstant 10 
                                             %152 = OpTypeArray %6 %13 
                                             %153 = OpTypeStruct %7 %6 %152 
                                             %154 = OpTypePointer Output %153 
        Output struct {f32_4; f32; f32[1];}* %155 = OpVariable Output 
                                             %163 = OpTypePointer Output %7 
                                             %165 = OpTypeVector %6 2 
                                             %166 = OpTypePointer Output %165 
                               Output f32_2* %167 = OpVariable Output 
                                Input f32_4* %168 = OpVariable Input 
                                         i32 %171 = OpConstant 12 
                               Output f32_4* %180 = OpVariable Output 
                                             %183 = OpTypePointer Output %6 
                                Input f32_4* %185 = OpVariable Input 
                                             %186 = OpTypeVector %6 3 
                                Private f32* %217 = OpVariable Private 
                                         i32 %237 = OpConstant 9 
                                             %241 = OpTypePointer Input %186 
                                Input f32_3* %242 = OpVariable Input 
                                         i32 %244 = OpConstant 8 
                                Private f32* %262 = OpVariable Private 
                                             %277 = OpTypePointer Private %186 
                              Private f32_3* %278 = OpVariable Private 
                               Output f32_4* %302 = OpVariable Output 
                               Output f32_4* %306 = OpVariable Output 
                               Output f32_4* %325 = OpVariable Output 
                               Output f32_4* %330 = OpVariable Output 
                              Private f32_3* %333 = OpVariable Private 
                              Private f32_4* %350 = OpVariable Private 
                              Private f32_3* %356 = OpVariable Private 
                                         i32 %362 = OpConstant 4 
                                         i32 %368 = OpConstant 5 
                                         i32 %374 = OpConstant 6 
                                       f32_3 %403 = OpConstantComposite %76 %76 %76 
                                         f32 %411 = OpConstant 3.674022E-40 
                                       f32_3 %412 = OpConstantComposite %411 %411 %411 
                                         f32 %423 = OpConstant 3.674022E-40 
                                       f32_3 %424 = OpConstantComposite %423 %423 %423 
                                         f32 %426 = OpConstant 3.674022E-40 
                                       f32_3 %427 = OpConstantComposite %426 %426 %426 
                                             %436 = OpTypePointer Output %186 
                               Output f32_3* %437 = OpVariable Output 
                               Output f32_4* %440 = OpVariable Output 
                                       f32_4 %441 = OpConstantComposite %76 %76 %76 %76 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %83 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %35 = OpAccessChain %23 %25 %34 %13 
                                          f32 %36 = OpLoad %35 
                                   Input f32* %37 = OpAccessChain %11 %31 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFMul %36 %38 
                                 Private f32* %40 = OpAccessChain %9 %31 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpFAdd %39 %41 
                                 Private f32* %43 = OpAccessChain %9 %31 
                                                      OpStore %43 %42 
                                 Uniform f32* %45 = OpAccessChain %23 %25 %44 %13 
                                          f32 %46 = OpLoad %45 
                                   Input f32* %48 = OpAccessChain %11 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFMul %46 %49 
                                 Private f32* %51 = OpAccessChain %9 %31 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpFAdd %50 %52 
                                 Private f32* %54 = OpAccessChain %9 %31 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %23 %25 %55 %13 
                                          f32 %57 = OpLoad %56 
                                   Input f32* %59 = OpAccessChain %11 %58 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %57 %60 
                                 Private f32* %62 = OpAccessChain %9 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %9 %31 
                                          f32 %67 = OpLoad %66 
                                 Uniform f32* %68 = OpAccessChain %23 %25 %55 %13 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %67 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %78 = OpAccessChain %23 %77 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %76 %79 
                                                      OpStore %75 %80 
                                         bool %84 = OpLoad %75 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %88 
                                              %85 = OpLabel 
                                                      OpStore %83 %87 
                                                      OpBranch %86 
                                              %88 = OpLabel 
                                                      OpStore %83 %89 
                                                      OpBranch %86 
                                              %86 = OpLabel 
                                          f32 %90 = OpLoad %83 
                                                      OpStore %81 %90 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpLoad %81 
                                          f32 %94 = OpFMul %92 %93 
                                   Input f32* %95 = OpAccessChain %11 %47 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %100 = OpLoad %11 
                                       f32_4 %101 = OpVectorShuffle %100 %100 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %25 %26 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %101 %104 
                                                      OpStore %99 %105 
                              Uniform f32_4* %106 = OpAccessChain %23 %25 %34 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %11 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %99 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %99 %112 
                              Uniform f32_4* %113 = OpAccessChain %23 %25 %44 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %115 0 0 0 0 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %99 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %9 %119 
                                       f32_4 %120 = OpLoad %9 
                              Uniform f32_4* %121 = OpAccessChain %23 %25 %55 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpFAdd %120 %122 
                                                      OpStore %99 %123 
                              Uniform f32_4* %124 = OpAccessChain %23 %25 %55 
                                       f32_4 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %11 
                                       f32_4 %127 = OpVectorShuffle %126 %126 3 3 3 3 
                                       f32_4 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpFAdd %128 %129 
                                                      OpStore %9 %130 
                                       f32_4 %132 = OpLoad %99 
                                       f32_4 %133 = OpVectorShuffle %132 %132 1 1 1 1 
                              Uniform f32_4* %135 = OpAccessChain %23 %134 %26 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpFMul %133 %136 
                                                      OpStore %131 %137 
                              Uniform f32_4* %138 = OpAccessChain %23 %134 %34 
                                       f32_4 %139 = OpLoad %138 
                                       f32_4 %140 = OpLoad %99 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 0 0 0 
                                       f32_4 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %131 
                                       f32_4 %144 = OpFAdd %142 %143 
                                                      OpStore %131 %144 
                              Uniform f32_4* %145 = OpAccessChain %23 %134 %44 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpLoad %99 
                                       f32_4 %148 = OpVectorShuffle %147 %147 2 2 2 2 
                                       f32_4 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %131 
                                       f32_4 %151 = OpFAdd %149 %150 
                                                      OpStore %131 %151 
                              Uniform f32_4* %156 = OpAccessChain %23 %134 %55 
                                       f32_4 %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %99 
                                       f32_4 %159 = OpVectorShuffle %158 %158 3 3 3 3 
                                       f32_4 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %131 
                                       f32_4 %162 = OpFAdd %160 %161 
                               Output f32_4* %164 = OpAccessChain %155 %34 
                                                      OpStore %164 %162 
                                       f32_4 %169 = OpLoad %168 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                              Uniform f32_4* %172 = OpAccessChain %23 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_2 %175 = OpFMul %170 %174 
                              Uniform f32_4* %176 = OpAccessChain %23 %171 
                                       f32_4 %177 = OpLoad %176 
                                       f32_2 %178 = OpVectorShuffle %177 %177 2 3 
                                       f32_2 %179 = OpFAdd %175 %178 
                                                      OpStore %167 %179 
                                Private f32* %181 = OpAccessChain %9 %31 
                                         f32 %182 = OpLoad %181 
                                 Output f32* %184 = OpAccessChain %180 %58 
                                                      OpStore %184 %182 
                                       f32_4 %187 = OpLoad %185 
                                       f32_3 %188 = OpVectorShuffle %187 %187 1 1 1 
                              Uniform f32_4* %189 = OpAccessChain %23 %25 %26 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 1 2 0 
                                       f32_3 %192 = OpFMul %188 %191 
                                       f32_4 %193 = OpLoad %99 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %99 %194 
                              Uniform f32_4* %195 = OpAccessChain %23 %25 %34 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 1 2 0 
                                       f32_4 %198 = OpLoad %185 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 0 0 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %99 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %99 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %99 %205 
                              Uniform f32_4* %206 = OpAccessChain %23 %25 %44 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 1 2 0 
                                       f32_4 %209 = OpLoad %185 
                                       f32_3 %210 = OpVectorShuffle %209 %209 2 2 2 
                                       f32_3 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %99 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %214 = OpFAdd %211 %213 
                                       f32_4 %215 = OpLoad %99 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 6 3 
                                                      OpStore %99 %216 
                                       f32_4 %218 = OpLoad %99 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_4 %220 = OpLoad %99 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                         f32 %222 = OpDot %219 %221 
                                                      OpStore %217 %222 
                                         f32 %223 = OpLoad %217 
                                         f32 %224 = OpExtInst %1 32 %223 
                                                      OpStore %217 %224 
                                         f32 %225 = OpLoad %217 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_4 %227 = OpLoad %99 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %99 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %99 %231 
                                Private f32* %232 = OpAccessChain %99 %47 
                                         f32 %233 = OpLoad %232 
                                 Output f32* %234 = OpAccessChain %180 %31 
                                                      OpStore %234 %233 
                                  Input f32* %235 = OpAccessChain %185 %58 
                                         f32 %236 = OpLoad %235 
                                Uniform f32* %238 = OpAccessChain %23 %237 %58 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpFMul %236 %239 
                                                      OpStore %217 %240 
                                       f32_3 %243 = OpLoad %242 
                              Uniform f32_4* %245 = OpAccessChain %23 %244 %34 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %243 %247 
                                Private f32* %249 = OpAccessChain %131 %31 
                                                      OpStore %249 %248 
                                       f32_3 %250 = OpLoad %242 
                              Uniform f32_4* %251 = OpAccessChain %23 %244 %26 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %250 %253 
                                Private f32* %255 = OpAccessChain %131 %13 
                                                      OpStore %255 %254 
                                       f32_3 %256 = OpLoad %242 
                              Uniform f32_4* %257 = OpAccessChain %23 %244 %44 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpDot %256 %259 
                                Private f32* %261 = OpAccessChain %131 %47 
                                                      OpStore %261 %260 
                                       f32_4 %263 = OpLoad %131 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_4 %265 = OpLoad %131 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                         f32 %267 = OpDot %264 %266 
                                                      OpStore %262 %267 
                                         f32 %268 = OpLoad %262 
                                         f32 %269 = OpExtInst %1 32 %268 
                                                      OpStore %262 %269 
                                         f32 %270 = OpLoad %262 
                                       f32_3 %271 = OpCompositeConstruct %270 %270 %270 
                                       f32_4 %272 = OpLoad %131 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %131 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %131 %276 
                                       f32_4 %279 = OpLoad %99 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_4 %281 = OpLoad %131 
                                       f32_3 %282 = OpVectorShuffle %281 %281 2 0 1 
                                       f32_3 %283 = OpFMul %280 %282 
                                                      OpStore %278 %283 
                                       f32_4 %284 = OpLoad %131 
                                       f32_3 %285 = OpVectorShuffle %284 %284 1 2 0 
                                       f32_4 %286 = OpLoad %99 
                                       f32_3 %287 = OpVectorShuffle %286 %286 1 2 0 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_3 %289 = OpLoad %278 
                                       f32_3 %290 = OpFNegate %289 
                                       f32_3 %291 = OpFAdd %288 %290 
                                                      OpStore %278 %291 
                                         f32 %292 = OpLoad %217 
                                       f32_3 %293 = OpCompositeConstruct %292 %292 %292 
                                       f32_3 %294 = OpLoad %278 
                                       f32_3 %295 = OpFMul %293 %294 
                                                      OpStore %278 %295 
                                Private f32* %296 = OpAccessChain %278 %31 
                                         f32 %297 = OpLoad %296 
                                 Output f32* %298 = OpAccessChain %180 %13 
                                                      OpStore %298 %297 
                                Private f32* %299 = OpAccessChain %131 %31 
                                         f32 %300 = OpLoad %299 
                                 Output f32* %301 = OpAccessChain %180 %47 
                                                      OpStore %301 %300 
                                Private f32* %303 = OpAccessChain %99 %31 
                                         f32 %304 = OpLoad %303 
                                 Output f32* %305 = OpAccessChain %302 %31 
                                                      OpStore %305 %304 
                                Private f32* %307 = OpAccessChain %99 %13 
                                         f32 %308 = OpLoad %307 
                                 Output f32* %309 = OpAccessChain %306 %31 
                                                      OpStore %309 %308 
                                Private f32* %310 = OpAccessChain %9 %13 
                                         f32 %311 = OpLoad %310 
                                 Output f32* %312 = OpAccessChain %302 %58 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %278 %13 
                                         f32 %314 = OpLoad %313 
                                 Output f32* %315 = OpAccessChain %302 %13 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %278 %47 
                                         f32 %317 = OpLoad %316 
                                 Output f32* %318 = OpAccessChain %306 %13 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %131 %13 
                                         f32 %320 = OpLoad %319 
                                 Output f32* %321 = OpAccessChain %302 %47 
                                                      OpStore %321 %320 
                                Private f32* %322 = OpAccessChain %9 %47 
                                         f32 %323 = OpLoad %322 
                                 Output f32* %324 = OpAccessChain %306 %58 
                                                      OpStore %324 %323 
                                       f32_4 %326 = OpLoad %9 
                                                      OpStore %325 %326 
                                Private f32* %327 = OpAccessChain %131 %47 
                                         f32 %328 = OpLoad %327 
                                 Output f32* %329 = OpAccessChain %306 %47 
                                                      OpStore %329 %328 
                              Uniform f32_4* %331 = OpAccessChain %23 %25 %55 
                                       f32_4 %332 = OpLoad %331 
                                                      OpStore %330 %332 
                                Private f32* %334 = OpAccessChain %131 %13 
                                         f32 %335 = OpLoad %334 
                                Private f32* %336 = OpAccessChain %131 %13 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFMul %335 %337 
                                Private f32* %339 = OpAccessChain %333 %31 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %131 %31 
                                         f32 %341 = OpLoad %340 
                                Private f32* %342 = OpAccessChain %131 %31 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %333 %31 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFNegate %346 
                                         f32 %348 = OpFAdd %344 %347 
                                Private f32* %349 = OpAccessChain %333 %31 
                                                      OpStore %349 %348 
                                       f32_4 %351 = OpLoad %131 
                                       f32_4 %352 = OpVectorShuffle %351 %351 1 2 2 0 
                                       f32_4 %353 = OpLoad %131 
                                       f32_4 %354 = OpVectorShuffle %353 %353 0 1 2 2 
                                       f32_4 %355 = OpFMul %352 %354 
                                                      OpStore %350 %355 
                              Uniform f32_4* %357 = OpAccessChain %23 %55 
                                       f32_4 %358 = OpLoad %357 
                                       f32_4 %359 = OpLoad %350 
                                         f32 %360 = OpDot %358 %359 
                                Private f32* %361 = OpAccessChain %356 %31 
                                                      OpStore %361 %360 
                              Uniform f32_4* %363 = OpAccessChain %23 %362 
                                       f32_4 %364 = OpLoad %363 
                                       f32_4 %365 = OpLoad %350 
                                         f32 %366 = OpDot %364 %365 
                                Private f32* %367 = OpAccessChain %356 %13 
                                                      OpStore %367 %366 
                              Uniform f32_4* %369 = OpAccessChain %23 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_4 %371 = OpLoad %350 
                                         f32 %372 = OpDot %370 %371 
                                Private f32* %373 = OpAccessChain %356 %47 
                                                      OpStore %373 %372 
                              Uniform f32_4* %375 = OpAccessChain %23 %374 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpLoad %333 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 0 0 
                                       f32_3 %380 = OpFMul %377 %379 
                                       f32_3 %381 = OpLoad %356 
                                       f32_3 %382 = OpFAdd %380 %381 
                                                      OpStore %333 %382 
                                Private f32* %383 = OpAccessChain %131 %58 
                                                      OpStore %383 %89 
                              Uniform f32_4* %384 = OpAccessChain %23 %34 
                                       f32_4 %385 = OpLoad %384 
                                       f32_4 %386 = OpLoad %131 
                                         f32 %387 = OpDot %385 %386 
                                Private f32* %388 = OpAccessChain %356 %31 
                                                      OpStore %388 %387 
                              Uniform f32_4* %389 = OpAccessChain %23 %26 
                                       f32_4 %390 = OpLoad %389 
                                       f32_4 %391 = OpLoad %131 
                                         f32 %392 = OpDot %390 %391 
                                Private f32* %393 = OpAccessChain %356 %13 
                                                      OpStore %393 %392 
                              Uniform f32_4* %394 = OpAccessChain %23 %44 
                                       f32_4 %395 = OpLoad %394 
                                       f32_4 %396 = OpLoad %131 
                                         f32 %397 = OpDot %395 %396 
                                Private f32* %398 = OpAccessChain %356 %47 
                                                      OpStore %398 %397 
                                       f32_3 %399 = OpLoad %333 
                                       f32_3 %400 = OpLoad %356 
                                       f32_3 %401 = OpFAdd %399 %400 
                                                      OpStore %333 %401 
                                       f32_3 %402 = OpLoad %333 
                                       f32_3 %404 = OpExtInst %1 40 %402 %403 
                                                      OpStore %333 %404 
                                       f32_3 %405 = OpLoad %333 
                                       f32_3 %406 = OpExtInst %1 30 %405 
                                       f32_4 %407 = OpLoad %99 
                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 6 3 
                                                      OpStore %99 %408 
                                       f32_4 %409 = OpLoad %99 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_3 %413 = OpFMul %410 %412 
                                       f32_4 %414 = OpLoad %99 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
                                                      OpStore %99 %415 
                                       f32_4 %416 = OpLoad %99 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                       f32_3 %418 = OpExtInst %1 29 %417 
                                       f32_4 %419 = OpLoad %99 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %99 %420 
                                       f32_4 %421 = OpLoad %99 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
                                       f32_3 %425 = OpFMul %422 %424 
                                       f32_3 %428 = OpFAdd %425 %427 
                                       f32_4 %429 = OpLoad %99 
                                       f32_4 %430 = OpVectorShuffle %429 %428 4 5 6 3 
                                                      OpStore %99 %430 
                                       f32_4 %431 = OpLoad %99 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpExtInst %1 40 %432 %403 
                                       f32_4 %434 = OpLoad %99 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %99 %435 
                                       f32_4 %438 = OpLoad %99 
                                       f32_3 %439 = OpVectorShuffle %438 %438 0 1 2 
                                                      OpStore %437 %439 
                                                      OpStore %440 %441 
                                 Output f32* %442 = OpAccessChain %155 %34 %13 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFNegate %443 
                                 Output f32* %445 = OpAccessChain %155 %34 %13 
                                                      OpStore %445 %444 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 456
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %63 %148 %151 %371 %451 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %26 Location 26 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 RelaxedPrecision 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 RelaxedPrecision 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpMemberDecorate %36 8 RelaxedPrecision 
                                                      OpMemberDecorate %36 8 Offset 36 
                                                      OpMemberDecorate %36 9 Offset 36 
                                                      OpMemberDecorate %36 10 RelaxedPrecision 
                                                      OpMemberDecorate %36 10 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %63 Location 63 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %233 SpecId 233 
                                                      OpDecorate %323 DescriptorSet 323 
                                                      OpDecorate %323 Binding 323 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %371 Location 371 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %451 Location 451 
                                                      OpDecorate %453 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeInt 32 0 
                                          u32 %14 = OpConstant 3 
                                              %15 = OpTypePointer Input %6 
                                          u32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Private %6 
                                 Input f32_4* %21 = OpVariable Input 
                                          u32 %24 = OpConstant 1 
                                 Input f32_4* %26 = OpVariable Input 
                                          u32 %29 = OpConstant 2 
                               Private f32_3* %31 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %10 %34 
                                              %36 = OpTypeStruct %10 %7 %10 %10 %10 %35 %7 %7 %10 %10 %6 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %7 
                                              %45 = OpTypePointer Private %10 
                               Private f32_4* %46 = OpVariable Private 
                               Private f32_4* %55 = OpVariable Private 
                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %57 = OpTypeSampledImage %56 
                                              %58 = OpTypePointer UniformConstant %57 
  UniformConstant read_only Texture2DSampled* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeVector %6 2 
                                              %62 = OpTypePointer Input %61 
                                 Input f32_2* %63 = OpVariable Input 
                               Private f32_3* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %77 = OpConstant 3.674022E-40 
                                          i32 %80 = OpConstant 0 
                                          i32 %82 = OpConstant -1 
                                          f32 %90 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                        f32_3 %93 = OpConstantComposite %90 %91 %92 
                               Private f32_4* %96 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_3 %100 = OpConstantComposite %77 %77 %99 
                                         f32 %118 = OpConstant 3.674022E-40 
                                       f32_2 %119 = OpConstantComposite %118 %118 
                                Private f32* %123 = OpVariable Private 
                                         f32 %130 = OpConstant 3.674022E-40 
                                Private f32* %138 = OpVariable Private 
                                             %139 = OpTypePointer Uniform %6 
                                Private f32* %143 = OpVariable Private 
                                         f32 %145 = OpConstant 3.674022E-40 
                              Private f32_3* %147 = OpVariable Private 
                                Input f32_4* %148 = OpVariable Input 
                                Input f32_4* %151 = OpVariable Input 
                                         f32 %172 = OpConstant 3.674022E-40 
                               Private bool* %180 = OpVariable Private 
                                         f32 %187 = OpConstant 3.674022E-40 
                              Private f32_3* %196 = OpVariable Private 
                                             %197 = OpTypePointer Function %7 
                                       f32_3 %202 = OpConstantComposite %130 %130 %130 
                                         i32 %209 = OpConstant 10 
                                         i32 %223 = OpConstant 4 
                                        bool %227 = OpConstantFalse 
                                        bool %233 = OpSpecConstantFalse 
                                         i32 %241 = OpConstant 5 
                                             %242 = OpTypePointer Uniform %10 
                                         i32 %260 = OpConstant 2 
                                         i32 %274 = OpConstant 3 
                                         i32 %291 = OpConstant 7 
                                         i32 %297 = OpConstant 6 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                Private f32* %310 = OpVariable Private 
                                             %320 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %321 = OpTypeSampledImage %320 
                                             %322 = OpTypePointer UniformConstant %321 
 UniformConstant read_only Texture3DSampled* %323 = OpVariable UniformConstant 
                              Private f32_4* %328 = OpVariable Private 
                                             %370 = OpTypePointer Input %7 
                                Input f32_3* %371 = OpVariable Input 
                                Private f32* %384 = OpVariable Private 
                              Private f32_3* %402 = OpVariable Private 
                                         f32 %409 = OpConstant 3.674022E-40 
                                         i32 %418 = OpConstant 8 
                                         i32 %438 = OpConstant 9 
                                             %450 = OpTypePointer Output %10 
                               Output f32_4* %451 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %198 = OpVariable Function 
                             Function f32_3* %281 = OpVariable Function 
                                   Input f32* %16 = OpAccessChain %12 %14 
                                          f32 %17 = OpLoad %16 
                                 Private f32* %20 = OpAccessChain %9 %18 
                                                      OpStore %20 %17 
                                   Input f32* %22 = OpAccessChain %21 %14 
                                          f32 %23 = OpLoad %22 
                                 Private f32* %25 = OpAccessChain %9 %24 
                                                      OpStore %25 %23 
                                   Input f32* %27 = OpAccessChain %26 %14 
                                          f32 %28 = OpLoad %27 
                                 Private f32* %30 = OpAccessChain %9 %29 
                                                      OpStore %30 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpFNegate %32 
                               Uniform f32_3* %42 = OpAccessChain %38 %40 
                                        f32_3 %43 = OpLoad %42 
                                        f32_3 %44 = OpFAdd %33 %43 
                                                      OpStore %31 %44 
                                        f32_3 %47 = OpLoad %31 
                                        f32_3 %48 = OpLoad %31 
                                          f32 %49 = OpDot %47 %48 
                                 Private f32* %50 = OpAccessChain %46 %18 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %46 %18 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpExtInst %1 32 %52 
                                 Private f32* %54 = OpAccessChain %46 %18 
                                                      OpStore %54 %53 
                   read_only Texture2DSampled %60 = OpLoad %59 
                                        f32_2 %64 = OpLoad %63 
                                        f32_4 %65 = OpImageSampleImplicitLod %60 %64 
                                                      OpStore %55 %65 
                                 Private f32* %67 = OpAccessChain %55 %14 
                                          f32 %68 = OpLoad %67 
                                          f32 %70 = OpFAdd %68 %69 
                                 Private f32* %71 = OpAccessChain %66 %18 
                                                      OpStore %71 %70 
                                 Private f32* %75 = OpAccessChain %66 %18 
                                          f32 %76 = OpLoad %75 
                                         bool %78 = OpFOrdLessThan %76 %77 
                                                      OpStore %74 %78 
                                         bool %79 = OpLoad %74 
                                          i32 %81 = OpSelect %79 %40 %80 
                                          i32 %83 = OpIMul %81 %82 
                                         bool %84 = OpINotEqual %83 %80 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %86 
                                              %85 = OpLabel 
                                                      OpKill
                                              %86 = OpLabel 
                                        f32_4 %88 = OpLoad %55 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                          f32 %94 = OpDot %89 %93 
                                 Private f32* %95 = OpAccessChain %66 %18 
                                                      OpStore %95 %94 
                                        f32_3 %97 = OpLoad %66 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %96 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %96 %103 
                                       f32_4 %104 = OpLoad %96 
                                       f32_2 %105 = OpVectorShuffle %104 %104 1 1 
                                       f32_4 %106 = OpLoad %55 
                                       f32_2 %107 = OpVectorShuffle %106 %106 3 3 
                                         f32 %108 = OpDot %105 %107 
                                Private f32* %109 = OpAccessChain %66 %18 
                                                      OpStore %109 %108 
                                Private f32* %110 = OpAccessChain %96 %24 
                                         f32 %111 = OpLoad %110 
                                Private f32* %112 = OpAccessChain %96 %24 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFAdd %111 %113 
                                Private f32* %115 = OpAccessChain %66 %24 
                                                      OpStore %115 %114 
                                       f32_3 %116 = OpLoad %66 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_2 %120 = OpFAdd %117 %119 
                                       f32_3 %121 = OpLoad %66 
                                       f32_3 %122 = OpVectorShuffle %121 %120 3 4 2 
                                                      OpStore %66 %122 
                                       f32_3 %124 = OpLoad %66 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_3 %126 = OpLoad %66 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                         f32 %128 = OpDot %125 %127 
                                                      OpStore %123 %128 
                                         f32 %129 = OpLoad %123 
                                         f32 %131 = OpExtInst %1 37 %129 %130 
                                                      OpStore %123 %131 
                                         f32 %132 = OpLoad %123 
                                         f32 %133 = OpFNegate %132 
                                         f32 %134 = OpFAdd %133 %130 
                                                      OpStore %123 %134 
                                         f32 %135 = OpLoad %123 
                                         f32 %136 = OpExtInst %1 31 %135 
                                Private f32* %137 = OpAccessChain %66 %29 
                                                      OpStore %137 %136 
                                Uniform f32* %140 = OpAccessChain %38 %80 %24 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpExtInst %1 10 %141 
                                                      OpStore %138 %142 
                                         f32 %144 = OpLoad %138 
                                         f32 %146 = OpFMul %144 %145 
                                                      OpStore %143 %146 
                                  Input f32* %149 = OpAccessChain %148 %18 
                                         f32 %150 = OpLoad %149 
                                  Input f32* %152 = OpAccessChain %151 %18 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                         f32 %155 = OpFAdd %150 %154 
                                Private f32* %156 = OpAccessChain %147 %18 
                                                      OpStore %156 %155 
                                Private f32* %157 = OpAccessChain %147 %18 
                                         f32 %158 = OpLoad %157 
                                  Input f32* %159 = OpAccessChain %148 %24 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %147 %18 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %147 %18 
                                         f32 %164 = OpLoad %163 
                                  Input f32* %165 = OpAccessChain %151 %24 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %164 %167 
                                Private f32* %169 = OpAccessChain %147 %18 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %147 %18 
                                         f32 %171 = OpLoad %170 
                                         f32 %173 = OpFMul %171 %172 
                                         f32 %174 = OpFAdd %173 %69 
                                Private f32* %175 = OpAccessChain %147 %18 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %147 %18 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpExtInst %1 10 %177 
                                Private f32* %179 = OpAccessChain %147 %18 
                                                      OpStore %179 %178 
                                         f32 %181 = OpLoad %143 
                                Private f32* %182 = OpAccessChain %147 %18 
                                         f32 %183 = OpLoad %182 
                                        bool %184 = OpFOrdLessThan %181 %183 
                                                      OpStore %180 %184 
                                         f32 %185 = OpLoad %138 
                                         f32 %186 = OpFMul %185 %145 
                                         f32 %188 = OpFAdd %186 %187 
                                                      OpStore %138 %188 
                                Private f32* %189 = OpAccessChain %147 %18 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpLoad %138 
                                        bool %192 = OpFOrdLessThan %190 %191 
                                                      OpStore %74 %192 
                                        bool %193 = OpLoad %74 
                                        bool %194 = OpLoad %180 
                                        bool %195 = OpLogicalAnd %193 %194 
                                                      OpStore %74 %195 
                                        bool %199 = OpLoad %74 
                                                      OpSelectionMerge %201 None 
                                                      OpBranchConditional %199 %200 %203 
                                             %200 = OpLabel 
                                                      OpStore %198 %202 
                                                      OpBranch %201 
                                             %203 = OpLabel 
                                       f32_4 %204 = OpLoad %96 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                                      OpStore %198 %205 
                                                      OpBranch %201 
                                             %201 = OpLabel 
                                       f32_3 %206 = OpLoad %198 
                                                      OpStore %196 %206 
                                Private f32* %207 = OpAccessChain %55 %14 
                                         f32 %208 = OpLoad %207 
                                Uniform f32* %210 = OpAccessChain %38 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFNegate %211 
                                         f32 %213 = OpFAdd %208 %212 
                                                      OpStore %123 %213 
                                         f32 %214 = OpLoad %123 
                                        bool %215 = OpFOrdLessThan %214 %77 
                                                      OpStore %74 %215 
                                        bool %216 = OpLoad %74 
                                         i32 %217 = OpSelect %216 %40 %80 
                                         i32 %218 = OpIMul %217 %82 
                                        bool %219 = OpINotEqual %218 %80 
                                                      OpSelectionMerge %221 None 
                                                      OpBranchConditional %219 %220 %221 
                                             %220 = OpLabel 
                                                      OpKill
                                             %221 = OpLabel 
                                Uniform f32* %224 = OpAccessChain %38 %223 %18 
                                         f32 %225 = OpLoad %224 
                                        bool %226 = OpFOrdEqual %225 %130 
                                                      OpStore %74 %226 
                                                      OpSelectionMerge %229 None 
                                                      OpBranchConditional %227 %228 %229 
                                             %228 = OpLabel 
                                        bool %230 = OpLoad %74 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %232 
                                             %231 = OpLabel 
                                                      OpBranch %232 
                                             %232 = OpLabel 
                                                      OpBranch %229 
                                             %229 = OpLabel 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %233 %234 %330 
                                             %234 = OpLabel 
                                Uniform f32* %236 = OpAccessChain %38 %223 %24 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdEqual %237 %130 
                                                      OpStore %74 %238 
                                       f32_4 %239 = OpLoad %21 
                                       f32_3 %240 = OpVectorShuffle %239 %239 3 3 3 
                              Uniform f32_4* %243 = OpAccessChain %38 %241 %40 
                                       f32_4 %244 = OpLoad %243 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_3 %246 = OpFMul %240 %245 
                                       f32_4 %247 = OpLoad %96 
                                       f32_4 %248 = OpVectorShuffle %247 %246 4 5 6 3 
                                                      OpStore %96 %248 
                              Uniform f32_4* %249 = OpAccessChain %38 %241 %80 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %12 
                                       f32_3 %253 = OpVectorShuffle %252 %252 3 3 3 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %96 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %254 %256 
                                       f32_4 %258 = OpLoad %96 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %96 %259 
                              Uniform f32_4* %261 = OpAccessChain %38 %241 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %26 
                                       f32_3 %265 = OpVectorShuffle %264 %264 3 3 3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %96 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %266 %268 
                                       f32_4 %270 = OpLoad %96 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %96 %271 
                                       f32_4 %272 = OpLoad %96 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_4* %275 = OpAccessChain %38 %241 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %273 %277 
                                       f32_4 %279 = OpLoad %96 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %96 %280 
                                        bool %282 = OpLoad %74 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %287 
                                             %283 = OpLabel 
                                       f32_4 %285 = OpLoad %96 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                                      OpStore %281 %286 
                                                      OpBranch %284 
                                             %287 = OpLabel 
                                       f32_3 %288 = OpLoad %9 
                                                      OpStore %281 %288 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                       f32_3 %289 = OpLoad %281 
                                                      OpStore %9 %289 
                                       f32_3 %290 = OpLoad %9 
                              Uniform f32_3* %292 = OpAccessChain %38 %291 
                                       f32_3 %293 = OpLoad %292 
                                       f32_3 %294 = OpFNegate %293 
                                       f32_3 %295 = OpFAdd %290 %294 
                                                      OpStore %9 %295 
                                       f32_3 %296 = OpLoad %9 
                              Uniform f32_3* %298 = OpAccessChain %38 %297 
                                       f32_3 %299 = OpLoad %298 
                                       f32_3 %300 = OpFMul %296 %299 
                                       f32_4 %301 = OpLoad %96 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 4 5 6 
                                                      OpStore %96 %302 
                                Private f32* %303 = OpAccessChain %96 %24 
                                         f32 %304 = OpLoad %303 
                                         f32 %306 = OpFMul %304 %305 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %309 = OpAccessChain %9 %18 
                                                      OpStore %309 %308 
                                Uniform f32* %311 = OpAccessChain %38 %223 %29 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %312 %172 
                                         f32 %314 = OpFAdd %313 %307 
                                                      OpStore %310 %314 
                                         f32 %315 = OpLoad %310 
                                Private f32* %316 = OpAccessChain %9 %18 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpExtInst %1 40 %315 %317 
                                Private f32* %319 = OpAccessChain %96 %18 
                                                      OpStore %319 %318 
                  read_only Texture3DSampled %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %96 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 2 3 
                                       f32_4 %327 = OpImageSampleImplicitLod %324 %326 
                                                      OpStore %96 %327 
                                       f32_4 %329 = OpLoad %96 
                                                      OpStore %328 %329 
                                                      OpBranch %235 
                                             %330 = OpLabel 
                                Private f32* %331 = OpAccessChain %328 %18 
                                                      OpStore %331 %130 
                                Private f32* %332 = OpAccessChain %328 %24 
                                                      OpStore %332 %130 
                                Private f32* %333 = OpAccessChain %328 %29 
                                                      OpStore %333 %130 
                                Private f32* %334 = OpAccessChain %328 %14 
                                                      OpStore %334 %130 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                       f32_4 %335 = OpLoad %328 
                              Uniform f32_4* %336 = OpAccessChain %38 %274 
                                       f32_4 %337 = OpLoad %336 
                                         f32 %338 = OpDot %335 %337 
                                                      OpStore %123 %338 
                                         f32 %339 = OpLoad %123 
                                         f32 %340 = OpExtInst %1 43 %339 %77 %130 
                                                      OpStore %123 %340 
                                       f32_4 %341 = OpLoad %12 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpLoad %66 
                                         f32 %344 = OpDot %342 %343 
                                Private f32* %345 = OpAccessChain %147 %18 
                                                      OpStore %345 %344 
                                       f32_4 %346 = OpLoad %21 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpLoad %66 
                                         f32 %349 = OpDot %347 %348 
                                Private f32* %350 = OpAccessChain %147 %24 
                                                      OpStore %350 %349 
                                       f32_4 %351 = OpLoad %26 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpLoad %66 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %147 %29 
                                                      OpStore %355 %354 
                                       f32_3 %356 = OpLoad %147 
                                       f32_3 %357 = OpLoad %147 
                                         f32 %358 = OpDot %356 %357 
                                Private f32* %359 = OpAccessChain %9 %18 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %9 %18 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpExtInst %1 32 %361 
                                Private f32* %363 = OpAccessChain %9 %18 
                                                      OpStore %363 %362 
                                       f32_3 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %147 
                                       f32_3 %367 = OpFMul %365 %366 
                                                      OpStore %9 %367 
                                       f32_3 %368 = OpLoad %196 
                                       f32_3 %369 = OpVectorShuffle %368 %368 1 1 2 
                                       f32_3 %372 = OpLoad %371 
                                       f32_3 %373 = OpFMul %369 %372 
                                       f32_4 %374 = OpLoad %328 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %328 %375 
                                       f32_3 %376 = OpLoad %31 
                                       f32_4 %377 = OpLoad %46 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpFMul %376 %378 
                              Uniform f32_4* %380 = OpAccessChain %38 %260 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %379 %382 
                                                      OpStore %66 %383 
                                       f32_3 %385 = OpLoad %66 
                                       f32_3 %386 = OpLoad %66 
                                         f32 %387 = OpDot %385 %386 
                                                      OpStore %384 %387 
                                         f32 %388 = OpLoad %384 
                                         f32 %389 = OpExtInst %1 32 %388 
                                                      OpStore %384 %389 
                                       f32_3 %390 = OpLoad %66 
                                         f32 %391 = OpLoad %384 
                                       f32_3 %392 = OpCompositeConstruct %391 %391 %391 
                                       f32_3 %393 = OpFMul %390 %392 
                                                      OpStore %66 %393 
                                       f32_3 %394 = OpLoad %9 
                                       f32_3 %395 = OpLoad %66 
                                         f32 %396 = OpDot %394 %395 
                                Private f32* %397 = OpAccessChain %66 %18 
                                                      OpStore %397 %396 
                                Private f32* %398 = OpAccessChain %66 %18 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpExtInst %1 40 %399 %77 
                                Private f32* %401 = OpAccessChain %66 %18 
                                                      OpStore %401 %400 
                                Private f32* %403 = OpAccessChain %66 %18 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpExtInst %1 30 %404 
                                Private f32* %406 = OpAccessChain %402 %18 
                                                      OpStore %406 %405 
                                Private f32* %407 = OpAccessChain %402 %18 
                                         f32 %408 = OpLoad %407 
                                         f32 %410 = OpFMul %408 %409 
                                Private f32* %411 = OpAccessChain %402 %18 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %402 %18 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 29 %413 
                                Private f32* %415 = OpAccessChain %402 %18 
                                                      OpStore %415 %414 
                                       f32_3 %416 = OpLoad %402 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 0 0 
                              Uniform f32_4* %419 = OpAccessChain %38 %418 
                                       f32_4 %420 = OpLoad %419 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_3 %422 = OpFMul %417 %421 
                                                      OpStore %402 %422 
                                       f32_3 %423 = OpLoad %196 
                              Uniform f32_4* %424 = OpAccessChain %38 %418 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFMul %423 %426 
                                       f32_3 %428 = OpLoad %402 
                                       f32_3 %429 = OpFAdd %427 %428 
                                                      OpStore %402 %429 
                                         f32 %430 = OpLoad %123 
                                       f32_3 %431 = OpCompositeConstruct %430 %430 %430 
                                       f32_3 %432 = OpLoad %402 
                                       f32_3 %433 = OpFMul %431 %432 
                                       f32_4 %434 = OpLoad %55 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %55 %435 
                                       f32_4 %436 = OpLoad %55 
                                       f32_4 %437 = OpFNegate %436 
                              Uniform f32_4* %439 = OpAccessChain %38 %438 
                                       f32_4 %440 = OpLoad %439 
                                       f32_4 %441 = OpFAdd %437 %440 
                                                      OpStore %46 %441 
                              Uniform f32_4* %442 = OpAccessChain %38 %438 
                                       f32_4 %443 = OpLoad %442 
                                       f32_4 %444 = OpVectorShuffle %443 %443 3 3 3 3 
                                       f32_4 %445 = OpLoad %46 
                                       f32_4 %446 = OpFMul %444 %445 
                                       f32_4 %447 = OpLoad %55 
                                       f32_4 %448 = OpFAdd %446 %447 
                                                      OpStore %46 %448 
                                Private f32* %449 = OpAccessChain %328 %14 
                                                      OpStore %449 %77 
                                       f32_4 %452 = OpLoad %46 
                                       f32_4 %453 = OpLoad %328 
                                       f32_4 %454 = OpFAdd %452 %453 
                                                      OpStore %451 %454 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
out vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
bool u_xlatb5;
float u_xlat17;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb5 = 0.0<_Perpendicular;
    u_xlat5 = (u_xlatb5) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat5 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat17 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat17) * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.x = u_xlat3.z;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat3.x;
    vs_TEXCOORD3.x = u_xlat3.y;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD4 = u_xlat0;
    vs_TEXCOORD5 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
in  vec4 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
vec2 u_xlat12;
float u_xlat19;
bool u_xlatb19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
void main()
{
    u_xlat6.x = vs_TEXCOORD1.w;
    u_xlat6.y = vs_TEXCOORD2.w;
    u_xlat6.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat19 = u_xlat2.w + -0.100000001;
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat19 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat19) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat19 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat19 = min(u_xlat19, 1.0);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat4.z = sqrt(u_xlat19);
    u_xlat19 = fract(_Time.y);
    u_xlat3.x = u_xlat19 * 4.0;
    u_xlat21 = vs_TEXCOORD4.x + (-vs_TEXCOORD5.x);
    u_xlat21 = u_xlat21 + vs_TEXCOORD4.y;
    u_xlat21 = u_xlat21 + (-vs_TEXCOORD5.y);
    u_xlat21 = u_xlat21 * 0.5 + -0.100000001;
    u_xlat21 = fract(u_xlat21);
    u_xlatb3 = u_xlat3.x<u_xlat21;
    u_xlat19 = u_xlat19 * 4.0 + 0.100000001;
    u_xlatb19 = u_xlat21<u_xlat19;
    u_xlatb19 = u_xlatb19 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb19)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat19 = u_xlat2.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.xyz = u_xlat6.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = (-u_xlat19) + u_xlat21;
    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat19;
    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlatb21 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat5.xyz : u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat12.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12.x, u_xlat6.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat12.xy);
    u_xlat12.x = u_xlat19 + u_xlat10_5.x;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat6.x = min(u_xlat12.x, u_xlat6.x);
    u_xlat6.x = (u_xlatb21) ? u_xlat6.x : u_xlat12.x;
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat12.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.yyz * vs_TEXCOORD6.xyz;
    u_xlat0.xzw = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xxx;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xzw);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xzw = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xzw;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat0.xzw;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    u_xlat0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    u_xlat5.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat5;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 356
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %161 %167 %168 %180 %187 %223 %286 %290 %312 %314 %318 %337 %349 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %159 0 BuiltIn 159 
                                                      OpMemberDecorate %159 1 BuiltIn 159 
                                                      OpMemberDecorate %159 2 BuiltIn 159 
                                                      OpDecorate %159 Block 
                                                      OpDecorate %167 Location 167 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %187 Location 187 
                                                      OpDecorate %223 Location 223 
                                                      OpDecorate %286 Location 286 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %312 Location 312 
                                                      OpDecorate %314 Location 314 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %318 Location 318 
                                                      OpDecorate %337 Location 337 
                                                      OpDecorate %349 Location 349 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %18 %19 %7 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                          i32 %33 = OpConstant 0 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          i32 %76 = OpConstant 5 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Function %6 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                               Private f32_4* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                              Private f32_4* %130 = OpVariable Private 
                                         i32 %133 = OpConstant 4 
                                             %158 = OpTypeArray %6 %13 
                                             %159 = OpTypeStruct %7 %6 %158 
                                             %160 = OpTypePointer Output %159 
        Output struct {f32_4; f32; f32[1];}* %161 = OpVariable Output 
                                             %163 = OpTypePointer Output %7 
                                             %165 = OpTypeVector %6 2 
                                             %166 = OpTypePointer Output %165 
                               Output f32_2* %167 = OpVariable Output 
                                Input f32_4* %168 = OpVariable Input 
                                         i32 %171 = OpConstant 6 
                               Output f32_4* %180 = OpVariable Output 
                                             %183 = OpTypePointer Output %6 
                                             %185 = OpTypeVector %6 3 
                                             %186 = OpTypePointer Input %185 
                                Input f32_3* %187 = OpVariable Input 
                                Private f32* %206 = OpVariable Private 
                                             %221 = OpTypePointer Private %185 
                              Private f32_3* %222 = OpVariable Private 
                                Input f32_4* %223 = OpVariable Input 
                              Private f32_3* %255 = OpVariable Private 
                               Output f32_4* %286 = OpVariable Output 
                               Output f32_4* %290 = OpVariable Output 
                               Output f32_4* %312 = OpVariable Output 
                               Output f32_4* %314 = OpVariable Output 
                                             %317 = OpTypePointer Output %185 
                               Output f32_3* %318 = OpVariable Output 
                                       f32_3 %319 = OpConstantComposite %75 %75 %75 
                                         f32 %328 = OpConstant 3.674022E-40 
                                       f32_2 %333 = OpConstantComposite %328 %328 
                               Output f32_4* %337 = OpVariable Output 
                               Output f32_4* %349 = OpVariable Output 
                                       f32_4 %350 = OpConstantComposite %75 %75 %75 %75 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %82 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %27 = OpAccessChain %23 %25 %25 %13 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFMul %16 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %33 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %30 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %30 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %30 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %30 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %30 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %30 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %30 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %30 
                                                      OpStore %71 %70 
                                 Uniform f32* %77 = OpAccessChain %23 %76 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %75 %78 
                                                      OpStore %74 %79 
                                         bool %83 = OpLoad %74 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %87 
                                              %84 = OpLabel 
                                                      OpStore %82 %86 
                                                      OpBranch %85 
                                              %87 = OpLabel 
                                                      OpStore %82 %88 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %89 = OpLoad %82 
                                                      OpStore %80 %89 
                                 Private f32* %90 = OpAccessChain %9 %30 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpLoad %80 
                                          f32 %93 = OpFMul %91 %92 
                                   Input f32* %94 = OpAccessChain %11 %46 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %30 
                                                      OpStore %97 %96 
                                        f32_4 %99 = OpLoad %11 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %25 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpFMul %100 %103 
                                                      OpStore %98 %104 
                              Uniform f32_4* %105 = OpAccessChain %23 %25 %33 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %11 
                                       f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %98 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %98 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %43 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %114 0 0 0 0 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %98 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %23 %25 %54 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %98 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %54 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %11 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %9 %129 
                                       f32_4 %131 = OpLoad %98 
                                       f32_4 %132 = OpVectorShuffle %131 %131 1 1 1 1 
                              Uniform f32_4* %134 = OpAccessChain %23 %133 %25 
                                       f32_4 %135 = OpLoad %134 
                                       f32_4 %136 = OpFMul %132 %135 
                                                      OpStore %130 %136 
                              Uniform f32_4* %137 = OpAccessChain %23 %133 %33 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpLoad %98 
                                       f32_4 %140 = OpVectorShuffle %139 %139 0 0 0 0 
                                       f32_4 %141 = OpFMul %138 %140 
                                       f32_4 %142 = OpLoad %130 
                                       f32_4 %143 = OpFAdd %141 %142 
                                                      OpStore %130 %143 
                              Uniform f32_4* %144 = OpAccessChain %23 %133 %43 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpLoad %98 
                                       f32_4 %147 = OpVectorShuffle %146 %146 2 2 2 2 
                                       f32_4 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %130 
                                       f32_4 %150 = OpFAdd %148 %149 
                                                      OpStore %130 %150 
                              Uniform f32_4* %151 = OpAccessChain %23 %133 %54 
                                       f32_4 %152 = OpLoad %151 
                                       f32_4 %153 = OpLoad %98 
                                       f32_4 %154 = OpVectorShuffle %153 %153 3 3 3 3 
                                       f32_4 %155 = OpFMul %152 %154 
                                       f32_4 %156 = OpLoad %130 
                                       f32_4 %157 = OpFAdd %155 %156 
                                                      OpStore %98 %157 
                                       f32_4 %162 = OpLoad %98 
                               Output f32_4* %164 = OpAccessChain %161 %33 
                                                      OpStore %164 %162 
                                       f32_4 %169 = OpLoad %168 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                              Uniform f32_4* %172 = OpAccessChain %23 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_2 %175 = OpFMul %170 %174 
                              Uniform f32_4* %176 = OpAccessChain %23 %171 
                                       f32_4 %177 = OpLoad %176 
                                       f32_2 %178 = OpVectorShuffle %177 %177 2 3 
                                       f32_2 %179 = OpFAdd %175 %178 
                                                      OpStore %167 %179 
                                Private f32* %181 = OpAccessChain %9 %30 
                                         f32 %182 = OpLoad %181 
                                 Output f32* %184 = OpAccessChain %180 %57 
                                                      OpStore %184 %182 
                                       f32_3 %188 = OpLoad %187 
                              Uniform f32_4* %189 = OpAccessChain %23 %43 %33 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %188 %191 
                                Private f32* %193 = OpAccessChain %130 %13 
                                                      OpStore %193 %192 
                                       f32_3 %194 = OpLoad %187 
                              Uniform f32_4* %195 = OpAccessChain %23 %43 %25 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %194 %197 
                                Private f32* %199 = OpAccessChain %130 %46 
                                                      OpStore %199 %198 
                                       f32_3 %200 = OpLoad %187 
                              Uniform f32_4* %201 = OpAccessChain %23 %43 %43 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %200 %203 
                                Private f32* %205 = OpAccessChain %130 %30 
                                                      OpStore %205 %204 
                                       f32_4 %207 = OpLoad %130 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_4 %209 = OpLoad %130 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                         f32 %211 = OpDot %208 %210 
                                                      OpStore %206 %211 
                                         f32 %212 = OpLoad %206 
                                         f32 %213 = OpExtInst %1 32 %212 
                                                      OpStore %206 %213 
                                         f32 %214 = OpLoad %206 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_4 %216 = OpLoad %130 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %130 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %130 %220 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 1 1 1 
                              Uniform f32_4* %226 = OpAccessChain %23 %25 %25 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 1 2 0 
                                       f32_3 %229 = OpFMul %225 %228 
                                                      OpStore %222 %229 
                              Uniform f32_4* %230 = OpAccessChain %23 %25 %33 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 1 2 0 
                                       f32_4 %233 = OpLoad %223 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 0 0 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_3 %236 = OpLoad %222 
                                       f32_3 %237 = OpFAdd %235 %236 
                                                      OpStore %222 %237 
                              Uniform f32_4* %238 = OpAccessChain %23 %25 %43 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 1 2 0 
                                       f32_4 %241 = OpLoad %223 
                                       f32_3 %242 = OpVectorShuffle %241 %241 2 2 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_3 %244 = OpLoad %222 
                                       f32_3 %245 = OpFAdd %243 %244 
                                                      OpStore %222 %245 
                                       f32_3 %246 = OpLoad %222 
                                       f32_3 %247 = OpLoad %222 
                                         f32 %248 = OpDot %246 %247 
                                                      OpStore %206 %248 
                                         f32 %249 = OpLoad %206 
                                         f32 %250 = OpExtInst %1 32 %249 
                                                      OpStore %206 %250 
                                         f32 %251 = OpLoad %206 
                                       f32_3 %252 = OpCompositeConstruct %251 %251 %251 
                                       f32_3 %253 = OpLoad %222 
                                       f32_3 %254 = OpFMul %252 %253 
                                                      OpStore %222 %254 
                                       f32_4 %256 = OpLoad %130 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpLoad %222 
                                       f32_3 %259 = OpFMul %257 %258 
                                                      OpStore %255 %259 
                                       f32_4 %260 = OpLoad %130 
                                       f32_3 %261 = OpVectorShuffle %260 %260 2 0 1 
                                       f32_3 %262 = OpLoad %222 
                                       f32_3 %263 = OpVectorShuffle %262 %262 1 2 0 
                                       f32_3 %264 = OpFMul %261 %263 
                                       f32_3 %265 = OpLoad %255 
                                       f32_3 %266 = OpFNegate %265 
                                       f32_3 %267 = OpFAdd %264 %266 
                                                      OpStore %255 %267 
                                  Input f32* %268 = OpAccessChain %223 %57 
                                         f32 %269 = OpLoad %268 
                                Uniform f32* %270 = OpAccessChain %23 %54 %57 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFMul %269 %271 
                                                      OpStore %206 %272 
                                         f32 %273 = OpLoad %206 
                                       f32_3 %274 = OpCompositeConstruct %273 %273 %273 
                                       f32_3 %275 = OpLoad %255 
                                       f32_3 %276 = OpFMul %274 %275 
                                                      OpStore %255 %276 
                                Private f32* %277 = OpAccessChain %255 %30 
                                         f32 %278 = OpLoad %277 
                                 Output f32* %279 = OpAccessChain %180 %13 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %222 %46 
                                         f32 %281 = OpLoad %280 
                                 Output f32* %282 = OpAccessChain %180 %30 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %130 %13 
                                         f32 %284 = OpLoad %283 
                                 Output f32* %285 = OpAccessChain %180 %46 
                                                      OpStore %285 %284 
                                Private f32* %287 = OpAccessChain %222 %30 
                                         f32 %288 = OpLoad %287 
                                 Output f32* %289 = OpAccessChain %286 %30 
                                                      OpStore %289 %288 
                                Private f32* %291 = OpAccessChain %222 %13 
                                         f32 %292 = OpLoad %291 
                                 Output f32* %293 = OpAccessChain %290 %30 
                                                      OpStore %293 %292 
                                Private f32* %294 = OpAccessChain %130 %46 
                                         f32 %295 = OpLoad %294 
                                 Output f32* %296 = OpAccessChain %286 %46 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %130 %30 
                                         f32 %298 = OpLoad %297 
                                 Output f32* %299 = OpAccessChain %290 %46 
                                                      OpStore %299 %298 
                                Private f32* %300 = OpAccessChain %9 %13 
                                         f32 %301 = OpLoad %300 
                                 Output f32* %302 = OpAccessChain %286 %57 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %255 %13 
                                         f32 %304 = OpLoad %303 
                                 Output f32* %305 = OpAccessChain %286 %13 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %255 %46 
                                         f32 %307 = OpLoad %306 
                                 Output f32* %308 = OpAccessChain %290 %13 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %9 %46 
                                         f32 %310 = OpLoad %309 
                                 Output f32* %311 = OpAccessChain %290 %57 
                                                      OpStore %311 %310 
                                       f32_4 %313 = OpLoad %9 
                                                      OpStore %312 %313 
                              Uniform f32_4* %315 = OpAccessChain %23 %25 %54 
                                       f32_4 %316 = OpLoad %315 
                                                      OpStore %314 %316 
                                                      OpStore %318 %319 
                                Private f32* %320 = OpAccessChain %98 %13 
                                         f32 %321 = OpLoad %320 
                                Uniform f32* %322 = OpAccessChain %23 %33 %30 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFMul %321 %323 
                                Private f32* %325 = OpAccessChain %9 %30 
                                                      OpStore %325 %324 
                                Private f32* %326 = OpAccessChain %9 %30 
                                         f32 %327 = OpLoad %326 
                                         f32 %329 = OpFMul %327 %328 
                                Private f32* %330 = OpAccessChain %9 %57 
                                                      OpStore %330 %329 
                                       f32_4 %331 = OpLoad %98 
                                       f32_2 %332 = OpVectorShuffle %331 %331 0 3 
                                       f32_2 %334 = OpFMul %332 %333 
                                       f32_4 %335 = OpLoad %9 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 1 5 3 
                                                      OpStore %9 %336 
                                       f32_4 %338 = OpLoad %98 
                                       f32_2 %339 = OpVectorShuffle %338 %338 2 3 
                                       f32_4 %340 = OpLoad %337 
                                       f32_4 %341 = OpVectorShuffle %340 %339 0 1 4 5 
                                                      OpStore %337 %341 
                                       f32_4 %342 = OpLoad %9 
                                       f32_2 %343 = OpVectorShuffle %342 %342 2 2 
                                       f32_4 %344 = OpLoad %9 
                                       f32_2 %345 = OpVectorShuffle %344 %344 0 3 
                                       f32_2 %346 = OpFAdd %343 %345 
                                       f32_4 %347 = OpLoad %337 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 2 3 
                                                      OpStore %337 %348 
                                                      OpStore %349 %350 
                                 Output f32* %351 = OpAccessChain %161 %33 %13 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFNegate %352 
                                 Output f32* %354 = OpAccessChain %161 %33 %13 
                                                      OpStore %354 %353 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 540
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %64 %147 %150 %392 %456 %535 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %26 Location 26 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 RelaxedPrecision 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 RelaxedPrecision 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 RelaxedPrecision 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpMemberDecorate %37 7 Offset 37 
                                                      OpMemberDecorate %37 8 Offset 37 
                                                      OpMemberDecorate %37 9 Offset 37 
                                                      OpMemberDecorate %37 10 Offset 37 
                                                      OpMemberDecorate %37 11 RelaxedPrecision 
                                                      OpMemberDecorate %37 11 Offset 37 
                                                      OpMemberDecorate %37 12 Offset 37 
                                                      OpMemberDecorate %37 13 RelaxedPrecision 
                                                      OpMemberDecorate %37 13 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %64 Location 64 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %285 SpecId 285 
                                                      OpDecorate %374 DescriptorSet 374 
                                                      OpDecorate %374 Binding 374 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 Location 392 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %401 DescriptorSet 401 
                                                      OpDecorate %401 Binding 401 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %535 Location 535 
                                                      OpDecorate %537 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeInt 32 0 
                                          u32 %14 = OpConstant 3 
                                              %15 = OpTypePointer Input %6 
                                          u32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Private %6 
                                 Input f32_4* %21 = OpVariable Input 
                                          u32 %24 = OpConstant 1 
                                 Input f32_4* %26 = OpVariable Input 
                                          u32 %29 = OpConstant 2 
                               Private f32_3* %31 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %10 %34 
                                              %36 = OpTypeArray %10 %34 
                                              %37 = OpTypeStruct %10 %7 %10 %10 %10 %10 %35 %10 %36 %7 %7 %10 %10 %6 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 1 
                                              %42 = OpTypePointer Uniform %7 
                                              %46 = OpTypePointer Private %10 
                               Private f32_4* %47 = OpVariable Private 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                                              %63 = OpTypePointer Input %62 
                                 Input f32_2* %64 = OpVariable Input 
                               Private f32_3* %67 = OpVariable Private 
                                          f32 %70 = OpConstant 3.674022E-40 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %81 = OpConstant 0 
                                          i32 %83 = OpConstant -1 
                                          f32 %91 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_3 %94 = OpConstantComposite %91 %92 %93 
                               Private f32_3* %97 = OpVariable Private 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %78 %78 %100 
                                         f32 %117 = OpConstant 3.674022E-40 
                                       f32_2 %118 = OpConstantComposite %117 %117 
                                Private f32* %122 = OpVariable Private 
                                         f32 %129 = OpConstant 3.674022E-40 
                                Private f32* %137 = OpVariable Private 
                                             %138 = OpTypePointer Uniform %6 
                                Private f32* %142 = OpVariable Private 
                                         f32 %144 = OpConstant 3.674022E-40 
                              Private f32_4* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                Input f32_4* %150 = OpVariable Input 
                                         f32 %171 = OpConstant 3.674022E-40 
                               Private bool* %179 = OpVariable Private 
                                         f32 %186 = OpConstant 3.674022E-40 
                              Private f32_3* %195 = OpVariable Private 
                                             %196 = OpTypePointer Function %7 
                                       f32_3 %201 = OpConstantComposite %129 %129 %129 
                                         i32 %207 = OpConstant 13 
                                         i32 %221 = OpConstant 6 
                                         i32 %228 = OpConstant 2 
                                         i32 %236 = OpConstant 5 
                                             %237 = OpTypePointer Uniform %10 
                                         i32 %265 = OpConstant 4 
                               Private bool* %274 = OpVariable Private 
                                         i32 %275 = OpConstant 7 
                                        bool %279 = OpConstantFalse 
                                        bool %285 = OpSpecConstantFalse 
                               Private bool* %288 = OpVariable Private 
                                         i32 %294 = OpConstant 8 
                                         i32 %325 = OpConstant 3 
                                         i32 %342 = OpConstant 10 
                                         i32 %348 = OpConstant 9 
                                         f32 %356 = OpConstant 3.674022E-40 
                                         f32 %358 = OpConstant 3.674022E-40 
                                Private f32* %361 = OpVariable Private 
                                             %371 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %372 = OpTypeSampledImage %371 
                                             %373 = OpTypePointer UniformConstant %372 
 UniformConstant read_only Texture3DSampled* %374 = OpVariable UniformConstant 
                              Private f32_4* %379 = OpVariable Private 
                                Input f32_4* %392 = OpVariable Input 
                                Private f32* %400 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %401 = OpVariable UniformConstant 
                                Private f32* %407 = OpVariable Private 
                                             %416 = OpTypePointer Function %6 
                              Private f32_4* %452 = OpVariable Private 
                                             %455 = OpTypePointer Input %7 
                                Input f32_3* %456 = OpVariable Input 
                              Private f32_3* %486 = OpVariable Private 
                                         f32 %493 = OpConstant 3.674022E-40 
                                         i32 %502 = OpConstant 11 
                                         i32 %522 = OpConstant 12 
                                             %534 = OpTypePointer Output %10 
                               Output f32_4* %535 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %197 = OpVariable Function 
                             Function f32_3* %332 = OpVariable Function 
                               Function f32* %417 = OpVariable Function 
                                   Input f32* %16 = OpAccessChain %12 %14 
                                          f32 %17 = OpLoad %16 
                                 Private f32* %20 = OpAccessChain %9 %18 
                                                      OpStore %20 %17 
                                   Input f32* %22 = OpAccessChain %21 %14 
                                          f32 %23 = OpLoad %22 
                                 Private f32* %25 = OpAccessChain %9 %24 
                                                      OpStore %25 %23 
                                   Input f32* %27 = OpAccessChain %26 %14 
                                          f32 %28 = OpLoad %27 
                                 Private f32* %30 = OpAccessChain %9 %29 
                                                      OpStore %30 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpFNegate %32 
                               Uniform f32_3* %43 = OpAccessChain %39 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %33 %44 
                                                      OpStore %31 %45 
                                        f32_3 %48 = OpLoad %31 
                                        f32_3 %49 = OpLoad %31 
                                          f32 %50 = OpDot %48 %49 
                                 Private f32* %51 = OpAccessChain %47 %18 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %47 %18 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpExtInst %1 32 %53 
                                 Private f32* %55 = OpAccessChain %47 %18 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_2 %65 = OpLoad %64 
                                        f32_4 %66 = OpImageSampleImplicitLod %61 %65 
                                                      OpStore %56 %66 
                                 Private f32* %68 = OpAccessChain %56 %14 
                                          f32 %69 = OpLoad %68 
                                          f32 %71 = OpFAdd %69 %70 
                                 Private f32* %72 = OpAccessChain %67 %18 
                                                      OpStore %72 %71 
                                 Private f32* %76 = OpAccessChain %67 %18 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                         bool %80 = OpLoad %75 
                                          i32 %82 = OpSelect %80 %41 %81 
                                          i32 %84 = OpIMul %82 %83 
                                         bool %85 = OpINotEqual %84 %81 
                                                      OpSelectionMerge %87 None 
                                                      OpBranchConditional %85 %86 %87 
                                              %86 = OpLabel 
                                                      OpKill
                                              %87 = OpLabel 
                                        f32_4 %89 = OpLoad %56 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                          f32 %95 = OpDot %90 %94 
                                 Private f32* %96 = OpAccessChain %67 %18 
                                                      OpStore %96 %95 
                                        f32_3 %98 = OpLoad %67 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %102 = OpFAdd %99 %101 
                                                      OpStore %97 %102 
                                       f32_3 %103 = OpLoad %97 
                                       f32_2 %104 = OpVectorShuffle %103 %103 1 1 
                                       f32_4 %105 = OpLoad %56 
                                       f32_2 %106 = OpVectorShuffle %105 %105 3 3 
                                         f32 %107 = OpDot %104 %106 
                                Private f32* %108 = OpAccessChain %67 %18 
                                                      OpStore %108 %107 
                                Private f32* %109 = OpAccessChain %97 %24 
                                         f32 %110 = OpLoad %109 
                                Private f32* %111 = OpAccessChain %97 %24 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %110 %112 
                                Private f32* %114 = OpAccessChain %67 %24 
                                                      OpStore %114 %113 
                                       f32_3 %115 = OpLoad %67 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %119 = OpFAdd %116 %118 
                                       f32_3 %120 = OpLoad %67 
                                       f32_3 %121 = OpVectorShuffle %120 %119 3 4 2 
                                                      OpStore %67 %121 
                                       f32_3 %123 = OpLoad %67 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_3 %125 = OpLoad %67 
                                       f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                         f32 %127 = OpDot %124 %126 
                                                      OpStore %122 %127 
                                         f32 %128 = OpLoad %122 
                                         f32 %130 = OpExtInst %1 37 %128 %129 
                                                      OpStore %122 %130 
                                         f32 %131 = OpLoad %122 
                                         f32 %132 = OpFNegate %131 
                                         f32 %133 = OpFAdd %132 %129 
                                                      OpStore %122 %133 
                                         f32 %134 = OpLoad %122 
                                         f32 %135 = OpExtInst %1 31 %134 
                                Private f32* %136 = OpAccessChain %67 %29 
                                                      OpStore %136 %135 
                                Uniform f32* %139 = OpAccessChain %39 %81 %24 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpExtInst %1 10 %140 
                                                      OpStore %137 %141 
                                         f32 %143 = OpLoad %137 
                                         f32 %145 = OpFMul %143 %144 
                                                      OpStore %142 %145 
                                  Input f32* %148 = OpAccessChain %147 %18 
                                         f32 %149 = OpLoad %148 
                                  Input f32* %151 = OpAccessChain %150 %18 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                         f32 %154 = OpFAdd %149 %153 
                                Private f32* %155 = OpAccessChain %146 %18 
                                                      OpStore %155 %154 
                                Private f32* %156 = OpAccessChain %146 %18 
                                         f32 %157 = OpLoad %156 
                                  Input f32* %158 = OpAccessChain %147 %24 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %146 %18 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %146 %18 
                                         f32 %163 = OpLoad %162 
                                  Input f32* %164 = OpAccessChain %150 %24 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFNegate %165 
                                         f32 %167 = OpFAdd %163 %166 
                                Private f32* %168 = OpAccessChain %146 %18 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %146 %18 
                                         f32 %170 = OpLoad %169 
                                         f32 %172 = OpFMul %170 %171 
                                         f32 %173 = OpFAdd %172 %70 
                                Private f32* %174 = OpAccessChain %146 %18 
                                                      OpStore %174 %173 
                                Private f32* %175 = OpAccessChain %146 %18 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpExtInst %1 10 %176 
                                Private f32* %178 = OpAccessChain %146 %18 
                                                      OpStore %178 %177 
                                         f32 %180 = OpLoad %142 
                                Private f32* %181 = OpAccessChain %146 %18 
                                         f32 %182 = OpLoad %181 
                                        bool %183 = OpFOrdLessThan %180 %182 
                                                      OpStore %179 %183 
                                         f32 %184 = OpLoad %137 
                                         f32 %185 = OpFMul %184 %144 
                                         f32 %187 = OpFAdd %185 %186 
                                                      OpStore %137 %187 
                                Private f32* %188 = OpAccessChain %146 %18 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpLoad %137 
                                        bool %191 = OpFOrdLessThan %189 %190 
                                                      OpStore %75 %191 
                                        bool %192 = OpLoad %75 
                                        bool %193 = OpLoad %179 
                                        bool %194 = OpLogicalAnd %192 %193 
                                                      OpStore %75 %194 
                                        bool %198 = OpLoad %75 
                                                      OpSelectionMerge %200 None 
                                                      OpBranchConditional %198 %199 %202 
                                             %199 = OpLabel 
                                                      OpStore %197 %201 
                                                      OpBranch %200 
                                             %202 = OpLabel 
                                       f32_3 %203 = OpLoad %97 
                                                      OpStore %197 %203 
                                                      OpBranch %200 
                                             %200 = OpLabel 
                                       f32_3 %204 = OpLoad %197 
                                                      OpStore %195 %204 
                                Private f32* %205 = OpAccessChain %56 %14 
                                         f32 %206 = OpLoad %205 
                                Uniform f32* %208 = OpAccessChain %39 %207 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %206 %210 
                                                      OpStore %122 %211 
                                         f32 %212 = OpLoad %122 
                                        bool %213 = OpFOrdLessThan %212 %78 
                                                      OpStore %75 %213 
                                        bool %214 = OpLoad %75 
                                         i32 %215 = OpSelect %214 %41 %81 
                                         i32 %216 = OpIMul %215 %83 
                                        bool %217 = OpINotEqual %216 %81 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %217 %218 %219 
                                             %218 = OpLabel 
                                                      OpKill
                                             %219 = OpLabel 
                                Uniform f32* %222 = OpAccessChain %39 %221 %81 %29 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %97 %18 
                                                      OpStore %224 %223 
                                Uniform f32* %225 = OpAccessChain %39 %221 %41 %29 
                                         f32 %226 = OpLoad %225 
                                Private f32* %227 = OpAccessChain %97 %24 
                                                      OpStore %227 %226 
                                Uniform f32* %229 = OpAccessChain %39 %221 %228 %29 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %97 %29 
                                                      OpStore %231 %230 
                                       f32_3 %232 = OpLoad %31 
                                       f32_3 %233 = OpLoad %97 
                                         f32 %234 = OpDot %232 %233 
                                                      OpStore %137 %234 
                                       f32_3 %235 = OpLoad %9 
                              Uniform f32_4* %238 = OpAccessChain %39 %236 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFNegate %240 
                                       f32_3 %242 = OpFAdd %235 %241 
                                                      OpStore %97 %242 
                                       f32_3 %243 = OpLoad %97 
                                       f32_3 %244 = OpLoad %97 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %97 %18 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %97 %18 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpExtInst %1 31 %248 
                                Private f32* %250 = OpAccessChain %97 %18 
                                                      OpStore %250 %249 
                                         f32 %251 = OpLoad %137 
                                         f32 %252 = OpFNegate %251 
                                Private f32* %253 = OpAccessChain %97 %18 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFAdd %252 %254 
                                Private f32* %256 = OpAccessChain %97 %18 
                                                      OpStore %256 %255 
                                Uniform f32* %257 = OpAccessChain %39 %236 %14 
                                         f32 %258 = OpLoad %257 
                                Private f32* %259 = OpAccessChain %97 %18 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFMul %258 %260 
                                         f32 %262 = OpLoad %137 
                                         f32 %263 = OpFAdd %261 %262 
                                                      OpStore %137 %263 
                                         f32 %264 = OpLoad %137 
                                Uniform f32* %266 = OpAccessChain %39 %265 %29 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFMul %264 %267 
                                Uniform f32* %269 = OpAccessChain %39 %265 %14 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFAdd %268 %270 
                                                      OpStore %137 %271 
                                         f32 %272 = OpLoad %137 
                                         f32 %273 = OpExtInst %1 43 %272 %78 %129 
                                                      OpStore %137 %273 
                                Uniform f32* %276 = OpAccessChain %39 %275 %18 
                                         f32 %277 = OpLoad %276 
                                        bool %278 = OpFOrdEqual %277 %129 
                                                      OpStore %274 %278 
                                                      OpSelectionMerge %281 None 
                                                      OpBranchConditional %279 %280 %281 
                                             %280 = OpLabel 
                                        bool %282 = OpLoad %274 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %284 
                                             %283 = OpLabel 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                                      OpBranch %281 
                                             %281 = OpLabel 
                                                      OpSelectionMerge %287 None 
                                                      OpBranchConditional %285 %286 %381 
                                             %286 = OpLabel 
                                Uniform f32* %289 = OpAccessChain %39 %275 %24 
                                         f32 %290 = OpLoad %289 
                                        bool %291 = OpFOrdEqual %290 %129 
                                                      OpStore %288 %291 
                                       f32_4 %292 = OpLoad %21 
                                       f32_3 %293 = OpVectorShuffle %292 %292 3 3 3 
                              Uniform f32_4* %295 = OpAccessChain %39 %294 %41 
                                       f32_4 %296 = OpLoad %295 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpFMul %293 %297 
                                       f32_4 %299 = OpLoad %146 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %146 %300 
                              Uniform f32_4* %301 = OpAccessChain %39 %294 %81 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %12 
                                       f32_3 %305 = OpVectorShuffle %304 %304 3 3 3 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_4 %307 = OpLoad %146 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFAdd %306 %308 
                                       f32_4 %310 = OpLoad %146 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %146 %311 
                              Uniform f32_4* %312 = OpAccessChain %39 %294 %228 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %26 
                                       f32_3 %316 = OpVectorShuffle %315 %315 3 3 3 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %146 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %146 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %146 %322 
                                       f32_4 %323 = OpLoad %146 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %39 %294 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %324 %328 
                                       f32_4 %330 = OpLoad %146 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %146 %331 
                                        bool %333 = OpLoad %288 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %338 
                                             %334 = OpLabel 
                                       f32_4 %336 = OpLoad %146 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                                      OpStore %332 %337 
                                                      OpBranch %335 
                                             %338 = OpLabel 
                                       f32_3 %339 = OpLoad %9 
                                                      OpStore %332 %339 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_3 %340 = OpLoad %332 
                                                      OpStore %9 %340 
                                       f32_3 %341 = OpLoad %9 
                              Uniform f32_3* %343 = OpAccessChain %39 %342 
                                       f32_3 %344 = OpLoad %343 
                                       f32_3 %345 = OpFNegate %344 
                                       f32_3 %346 = OpFAdd %341 %345 
                                                      OpStore %9 %346 
                                       f32_3 %347 = OpLoad %9 
                              Uniform f32_3* %349 = OpAccessChain %39 %348 
                                       f32_3 %350 = OpLoad %349 
                                       f32_3 %351 = OpFMul %347 %350 
                                       f32_4 %352 = OpLoad %146 
                                       f32_4 %353 = OpVectorShuffle %352 %351 0 4 5 6 
                                                      OpStore %146 %353 
                                Private f32* %354 = OpAccessChain %146 %24 
                                         f32 %355 = OpLoad %354 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %359 = OpFAdd %357 %358 
                                Private f32* %360 = OpAccessChain %9 %18 
                                                      OpStore %360 %359 
                                Uniform f32* %362 = OpAccessChain %39 %275 %29 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %363 %171 
                                         f32 %365 = OpFAdd %364 %358 
                                                      OpStore %361 %365 
                                         f32 %366 = OpLoad %361 
                                Private f32* %367 = OpAccessChain %9 %18 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 40 %366 %368 
                                Private f32* %370 = OpAccessChain %146 %18 
                                                      OpStore %370 %369 
                  read_only Texture3DSampled %375 = OpLoad %374 
                                       f32_4 %376 = OpLoad %146 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 2 3 
                                       f32_4 %378 = OpImageSampleImplicitLod %375 %377 
                                                      OpStore %146 %378 
                                       f32_4 %380 = OpLoad %146 
                                                      OpStore %379 %380 
                                                      OpBranch %287 
                                             %381 = OpLabel 
                                Private f32* %382 = OpAccessChain %379 %18 
                                                      OpStore %382 %129 
                                Private f32* %383 = OpAccessChain %379 %24 
                                                      OpStore %383 %129 
                                Private f32* %384 = OpAccessChain %379 %29 
                                                      OpStore %384 %129 
                                Private f32* %385 = OpAccessChain %379 %14 
                                                      OpStore %385 %129 
                                                      OpBranch %287 
                                             %287 = OpLabel 
                                       f32_4 %386 = OpLoad %379 
                              Uniform f32_4* %387 = OpAccessChain %39 %325 
                                       f32_4 %388 = OpLoad %387 
                                         f32 %389 = OpDot %386 %388 
                                                      OpStore %122 %389 
                                         f32 %390 = OpLoad %122 
                                         f32 %391 = OpExtInst %1 43 %390 %78 %129 
                                                      OpStore %122 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_4 %395 = OpLoad %392 
                                       f32_2 %396 = OpVectorShuffle %395 %395 3 3 
                                       f32_2 %397 = OpFDiv %394 %396 
                                       f32_3 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %397 3 4 2 
                                                      OpStore %9 %399 
                  read_only Texture2DSampled %402 = OpLoad %401 
                                       f32_3 %403 = OpLoad %9 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
                                       f32_4 %405 = OpImageSampleImplicitLod %402 %404 
                                         f32 %406 = OpCompositeExtract %405 0 
                                                      OpStore %400 %406 
                                         f32 %408 = OpLoad %137 
                                         f32 %409 = OpLoad %400 
                                         f32 %410 = OpFAdd %408 %409 
                                                      OpStore %407 %410 
                                         f32 %411 = OpLoad %407 
                                         f32 %412 = OpExtInst %1 43 %411 %78 %129 
                                                      OpStore %407 %412 
                                         f32 %413 = OpLoad %122 
                                         f32 %414 = OpLoad %407 
                                         f32 %415 = OpExtInst %1 37 %413 %414 
                                                      OpStore %122 %415 
                                        bool %418 = OpLoad %274 
                                                      OpSelectionMerge %420 None 
                                                      OpBranchConditional %418 %419 %422 
                                             %419 = OpLabel 
                                         f32 %421 = OpLoad %122 
                                                      OpStore %417 %421 
                                                      OpBranch %420 
                                             %422 = OpLabel 
                                         f32 %423 = OpLoad %407 
                                                      OpStore %417 %423 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         f32 %424 = OpLoad %417 
                                                      OpStore %122 %424 
                                       f32_4 %425 = OpLoad %12 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpLoad %67 
                                         f32 %428 = OpDot %426 %427 
                                Private f32* %429 = OpAccessChain %97 %18 
                                                      OpStore %429 %428 
                                       f32_4 %430 = OpLoad %21 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_3 %432 = OpLoad %67 
                                         f32 %433 = OpDot %431 %432 
                                Private f32* %434 = OpAccessChain %97 %24 
                                                      OpStore %434 %433 
                                       f32_4 %435 = OpLoad %26 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpLoad %67 
                                         f32 %438 = OpDot %436 %437 
                                Private f32* %439 = OpAccessChain %97 %29 
                                                      OpStore %439 %438 
                                       f32_3 %440 = OpLoad %97 
                                       f32_3 %441 = OpLoad %97 
                                         f32 %442 = OpDot %440 %441 
                                Private f32* %443 = OpAccessChain %9 %18 
                                                      OpStore %443 %442 
                                Private f32* %444 = OpAccessChain %9 %18 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpExtInst %1 32 %445 
                                Private f32* %447 = OpAccessChain %9 %18 
                                                      OpStore %447 %446 
                                       f32_3 %448 = OpLoad %9 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 0 0 
                                       f32_3 %450 = OpLoad %97 
                                       f32_3 %451 = OpFMul %449 %450 
                                                      OpStore %9 %451 
                                       f32_3 %453 = OpLoad %195 
                                       f32_3 %454 = OpVectorShuffle %453 %453 1 1 2 
                                       f32_3 %457 = OpLoad %456 
                                       f32_3 %458 = OpFMul %454 %457 
                                       f32_4 %459 = OpLoad %452 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                      OpStore %452 %460 
                                       f32_3 %461 = OpLoad %31 
                                       f32_4 %462 = OpLoad %47 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 0 0 
                                       f32_3 %464 = OpFMul %461 %463 
                              Uniform f32_4* %465 = OpAccessChain %39 %228 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFAdd %464 %467 
                                                      OpStore %67 %468 
                                       f32_3 %469 = OpLoad %67 
                                       f32_3 %470 = OpLoad %67 
                                         f32 %471 = OpDot %469 %470 
                                                      OpStore %407 %471 
                                         f32 %472 = OpLoad %407 
                                         f32 %473 = OpExtInst %1 32 %472 
                                                      OpStore %407 %473 
                                       f32_3 %474 = OpLoad %67 
                                         f32 %475 = OpLoad %407 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %67 %477 
                                       f32_3 %478 = OpLoad %9 
                                       f32_3 %479 = OpLoad %67 
                                         f32 %480 = OpDot %478 %479 
                                Private f32* %481 = OpAccessChain %67 %18 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %67 %18 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpExtInst %1 40 %483 %78 
                                Private f32* %485 = OpAccessChain %67 %18 
                                                      OpStore %485 %484 
                                Private f32* %487 = OpAccessChain %67 %18 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpExtInst %1 30 %488 
                                Private f32* %490 = OpAccessChain %486 %18 
                                                      OpStore %490 %489 
                                Private f32* %491 = OpAccessChain %486 %18 
                                         f32 %492 = OpLoad %491 
                                         f32 %494 = OpFMul %492 %493 
                                Private f32* %495 = OpAccessChain %486 %18 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %486 %18 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpExtInst %1 29 %497 
                                Private f32* %499 = OpAccessChain %486 %18 
                                                      OpStore %499 %498 
                                       f32_3 %500 = OpLoad %486 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 0 0 
                              Uniform f32_4* %503 = OpAccessChain %39 %502 
                                       f32_4 %504 = OpLoad %503 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                                       f32_3 %506 = OpFMul %501 %505 
                                                      OpStore %486 %506 
                                       f32_3 %507 = OpLoad %195 
                              Uniform f32_4* %508 = OpAccessChain %39 %502 
                                       f32_4 %509 = OpLoad %508 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFMul %507 %510 
                                       f32_3 %512 = OpLoad %486 
                                       f32_3 %513 = OpFAdd %511 %512 
                                                      OpStore %486 %513 
                                         f32 %514 = OpLoad %122 
                                       f32_3 %515 = OpCompositeConstruct %514 %514 %514 
                                       f32_3 %516 = OpLoad %486 
                                       f32_3 %517 = OpFMul %515 %516 
                                       f32_4 %518 = OpLoad %56 
                                       f32_4 %519 = OpVectorShuffle %518 %517 4 5 6 3 
                                                      OpStore %56 %519 
                                       f32_4 %520 = OpLoad %56 
                                       f32_4 %521 = OpFNegate %520 
                              Uniform f32_4* %523 = OpAccessChain %39 %522 
                                       f32_4 %524 = OpLoad %523 
                                       f32_4 %525 = OpFAdd %521 %524 
                                                      OpStore %47 %525 
                              Uniform f32_4* %526 = OpAccessChain %39 %522 
                                       f32_4 %527 = OpLoad %526 
                                       f32_4 %528 = OpVectorShuffle %527 %527 3 3 3 3 
                                       f32_4 %529 = OpLoad %47 
                                       f32_4 %530 = OpFMul %528 %529 
                                       f32_4 %531 = OpLoad %56 
                                       f32_4 %532 = OpFAdd %530 %531 
                                                      OpStore %47 %532 
                                Private f32* %533 = OpAccessChain %452 %14 
                                                      OpStore %533 %78 
                                       f32_4 %536 = OpLoad %47 
                                       f32_4 %537 = OpLoad %452 
                                       f32_4 %538 = OpFAdd %536 %537 
                                                      OpStore %535 %538 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
out vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
bool u_xlatb5;
float u_xlat17;
float u_xlat18;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb5 = 0.0<_Perpendicular;
    u_xlat5 = (u_xlatb5) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat5 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    vs_TEXCOORD1.x = u_xlat2.z;
    u_xlat17 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.zxy;
    u_xlat4.xyz = u_xlat3.yzx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat4.xyz = vec3(u_xlat17) * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    vs_TEXCOORD2.z = u_xlat3.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD4 = u_xlat0;
    vs_TEXCOORD3.z = u_xlat3.z;
    vs_TEXCOORD5 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.x = u_xlat3.y * u_xlat3.y;
    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat2);
    u_xlat4.y = dot(unity_SHBg, u_xlat2);
    u_xlat4.z = dot(unity_SHBb, u_xlat2);
    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
    u_xlat3.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat3);
    u_xlat2.y = dot(unity_SHAg, u_xlat3);
    u_xlat2.z = dot(unity_SHAb, u_xlat3);
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD6.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
in  vec4 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
vec2 u_xlat12;
float u_xlat19;
bool u_xlatb19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
void main()
{
    u_xlat6.x = vs_TEXCOORD1.w;
    u_xlat6.y = vs_TEXCOORD2.w;
    u_xlat6.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat19 = u_xlat2.w + -0.100000001;
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat19 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat19) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat19 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat19 = min(u_xlat19, 1.0);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat4.z = sqrt(u_xlat19);
    u_xlat19 = fract(_Time.y);
    u_xlat3.x = u_xlat19 * 4.0;
    u_xlat21 = vs_TEXCOORD4.x + (-vs_TEXCOORD5.x);
    u_xlat21 = u_xlat21 + vs_TEXCOORD4.y;
    u_xlat21 = u_xlat21 + (-vs_TEXCOORD5.y);
    u_xlat21 = u_xlat21 * 0.5 + -0.100000001;
    u_xlat21 = fract(u_xlat21);
    u_xlatb3 = u_xlat3.x<u_xlat21;
    u_xlat19 = u_xlat19 * 4.0 + 0.100000001;
    u_xlatb19 = u_xlat21<u_xlat19;
    u_xlatb19 = u_xlatb19 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb19)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat19 = u_xlat2.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.xyz = u_xlat6.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = (-u_xlat19) + u_xlat21;
    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat19;
    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlatb21 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat5.xyz : u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat12.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12.x, u_xlat6.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat12.xy);
    u_xlat12.x = u_xlat19 + u_xlat10_5.x;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat6.x = min(u_xlat12.x, u_xlat6.x);
    u_xlat6.x = (u_xlatb21) ? u_xlat6.x : u_xlat12.x;
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat12.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.yyz * vs_TEXCOORD6.xyz;
    u_xlat0.xzw = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xxx;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xzw);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xzw = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xzw;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat0.xzw;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    u_xlat0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    u_xlat5.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat5;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 475
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %162 %168 %169 %181 %186 %244 %304 %308 %327 %332 %440 %456 %468 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 RelaxedPrecision 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 RelaxedPrecision 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %160 0 BuiltIn 160 
                                                      OpMemberDecorate %160 1 BuiltIn 160 
                                                      OpMemberDecorate %160 2 BuiltIn 160 
                                                      OpDecorate %160 Block 
                                                      OpDecorate %168 Location 168 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %181 Location 181 
                                                      OpDecorate %186 Location 186 
                                                      OpDecorate %244 Location 244 
                                                      OpDecorate %304 Location 304 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %327 Location 327 
                                                      OpDecorate %332 Location 332 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %440 Location 440 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %468 Location 468 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %18 %19 %7 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 8 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %34 = OpConstant 0 
                                          i32 %44 = OpConstant 2 
                                          u32 %47 = OpConstant 2 
                                          i32 %55 = OpConstant 3 
                                          u32 %58 = OpConstant 3 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %76 = OpConstant 3.674022E-40 
                                          i32 %77 = OpConstant 12 
                                 Private f32* %81 = OpVariable Private 
                                              %82 = OpTypePointer Function %6 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %89 = OpConstant 3.674022E-40 
                               Private f32_4* %99 = OpVariable Private 
                                             %102 = OpTypePointer Uniform %7 
                              Private f32_4* %131 = OpVariable Private 
                                         i32 %134 = OpConstant 11 
                                             %159 = OpTypeArray %6 %13 
                                             %160 = OpTypeStruct %7 %6 %159 
                                             %161 = OpTypePointer Output %160 
        Output struct {f32_4; f32; f32[1];}* %162 = OpVariable Output 
                                             %164 = OpTypePointer Output %7 
                                             %166 = OpTypeVector %6 2 
                                             %167 = OpTypePointer Output %166 
                               Output f32_2* %168 = OpVariable Output 
                                Input f32_4* %169 = OpVariable Input 
                                         i32 %172 = OpConstant 13 
                               Output f32_4* %181 = OpVariable Output 
                                             %184 = OpTypePointer Output %6 
                                Input f32_4* %186 = OpVariable Input 
                                             %187 = OpTypeVector %6 3 
                                Private f32* %218 = OpVariable Private 
                                         i32 %238 = OpConstant 10 
                              Private f32_4* %242 = OpVariable Private 
                                             %243 = OpTypePointer Input %187 
                                Input f32_3* %244 = OpVariable Input 
                                         i32 %246 = OpConstant 9 
                                Private f32* %264 = OpVariable Private 
                                             %279 = OpTypePointer Private %187 
                              Private f32_3* %280 = OpVariable Private 
                               Output f32_4* %304 = OpVariable Output 
                               Output f32_4* %308 = OpVariable Output 
                               Output f32_4* %327 = OpVariable Output 
                               Output f32_4* %332 = OpVariable Output 
                              Private f32_3* %335 = OpVariable Private 
                              Private f32_4* %352 = OpVariable Private 
                              Private f32_3* %358 = OpVariable Private 
                                         i32 %359 = OpConstant 4 
                                         i32 %365 = OpConstant 5 
                                         i32 %371 = OpConstant 6 
                                         i32 %377 = OpConstant 7 
                                       f32_3 %406 = OpConstantComposite %76 %76 %76 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_3 %415 = OpConstantComposite %414 %414 %414 
                                         f32 %426 = OpConstant 3.674022E-40 
                                       f32_3 %427 = OpConstantComposite %426 %426 %426 
                                         f32 %429 = OpConstant 3.674022E-40 
                                       f32_3 %430 = OpConstantComposite %429 %429 %429 
                                             %439 = OpTypePointer Output %187 
                               Output f32_3* %440 = OpVariable Output 
                                         f32 %451 = OpConstant 3.674022E-40 
                                       f32_3 %452 = OpConstantComposite %451 %451 %451 
                               Output f32_4* %456 = OpVariable Output 
                               Output f32_4* %468 = OpVariable Output 
                                       f32_4 %469 = OpConstantComposite %76 %76 %76 %76 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %83 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %35 = OpAccessChain %23 %25 %34 %13 
                                          f32 %36 = OpLoad %35 
                                   Input f32* %37 = OpAccessChain %11 %31 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFMul %36 %38 
                                 Private f32* %40 = OpAccessChain %9 %31 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpFAdd %39 %41 
                                 Private f32* %43 = OpAccessChain %9 %31 
                                                      OpStore %43 %42 
                                 Uniform f32* %45 = OpAccessChain %23 %25 %44 %13 
                                          f32 %46 = OpLoad %45 
                                   Input f32* %48 = OpAccessChain %11 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFMul %46 %49 
                                 Private f32* %51 = OpAccessChain %9 %31 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpFAdd %50 %52 
                                 Private f32* %54 = OpAccessChain %9 %31 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %23 %25 %55 %13 
                                          f32 %57 = OpLoad %56 
                                   Input f32* %59 = OpAccessChain %11 %58 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %57 %60 
                                 Private f32* %62 = OpAccessChain %9 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %9 %31 
                                          f32 %67 = OpLoad %66 
                                 Uniform f32* %68 = OpAccessChain %23 %25 %55 %13 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %67 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %78 = OpAccessChain %23 %77 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %76 %79 
                                                      OpStore %75 %80 
                                         bool %84 = OpLoad %75 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %88 
                                              %85 = OpLabel 
                                                      OpStore %83 %87 
                                                      OpBranch %86 
                                              %88 = OpLabel 
                                                      OpStore %83 %89 
                                                      OpBranch %86 
                                              %86 = OpLabel 
                                          f32 %90 = OpLoad %83 
                                                      OpStore %81 %90 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpLoad %81 
                                          f32 %94 = OpFMul %92 %93 
                                   Input f32* %95 = OpAccessChain %11 %47 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %100 = OpLoad %11 
                                       f32_4 %101 = OpVectorShuffle %100 %100 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %23 %25 %26 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %101 %104 
                                                      OpStore %99 %105 
                              Uniform f32_4* %106 = OpAccessChain %23 %25 %34 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %11 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %99 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %99 %112 
                              Uniform f32_4* %113 = OpAccessChain %23 %25 %44 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %115 0 0 0 0 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %99 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %9 %119 
                                       f32_4 %120 = OpLoad %9 
                              Uniform f32_4* %121 = OpAccessChain %23 %25 %55 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpFAdd %120 %122 
                                                      OpStore %99 %123 
                              Uniform f32_4* %124 = OpAccessChain %23 %25 %55 
                                       f32_4 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %11 
                                       f32_4 %127 = OpVectorShuffle %126 %126 3 3 3 3 
                                       f32_4 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpFAdd %128 %129 
                                                      OpStore %9 %130 
                                       f32_4 %132 = OpLoad %99 
                                       f32_4 %133 = OpVectorShuffle %132 %132 1 1 1 1 
                              Uniform f32_4* %135 = OpAccessChain %23 %134 %26 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpFMul %133 %136 
                                                      OpStore %131 %137 
                              Uniform f32_4* %138 = OpAccessChain %23 %134 %34 
                                       f32_4 %139 = OpLoad %138 
                                       f32_4 %140 = OpLoad %99 
                                       f32_4 %141 = OpVectorShuffle %140 %140 0 0 0 0 
                                       f32_4 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %131 
                                       f32_4 %144 = OpFAdd %142 %143 
                                                      OpStore %131 %144 
                              Uniform f32_4* %145 = OpAccessChain %23 %134 %44 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpLoad %99 
                                       f32_4 %148 = OpVectorShuffle %147 %147 2 2 2 2 
                                       f32_4 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %131 
                                       f32_4 %151 = OpFAdd %149 %150 
                                                      OpStore %131 %151 
                              Uniform f32_4* %152 = OpAccessChain %23 %134 %55 
                                       f32_4 %153 = OpLoad %152 
                                       f32_4 %154 = OpLoad %99 
                                       f32_4 %155 = OpVectorShuffle %154 %154 3 3 3 3 
                                       f32_4 %156 = OpFMul %153 %155 
                                       f32_4 %157 = OpLoad %131 
                                       f32_4 %158 = OpFAdd %156 %157 
                                                      OpStore %99 %158 
                                       f32_4 %163 = OpLoad %99 
                               Output f32_4* %165 = OpAccessChain %162 %34 
                                                      OpStore %165 %163 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                              Uniform f32_4* %173 = OpAccessChain %23 %172 
                                       f32_4 %174 = OpLoad %173 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 1 
                                       f32_2 %176 = OpFMul %171 %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %172 
                                       f32_4 %178 = OpLoad %177 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 3 
                                       f32_2 %180 = OpFAdd %176 %179 
                                                      OpStore %168 %180 
                                Private f32* %182 = OpAccessChain %9 %31 
                                         f32 %183 = OpLoad %182 
                                 Output f32* %185 = OpAccessChain %181 %58 
                                                      OpStore %185 %183 
                                       f32_4 %188 = OpLoad %186 
                                       f32_3 %189 = OpVectorShuffle %188 %188 1 1 1 
                              Uniform f32_4* %190 = OpAccessChain %23 %25 %26 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 1 2 0 
                                       f32_3 %193 = OpFMul %189 %192 
                                       f32_4 %194 = OpLoad %131 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %131 %195 
                              Uniform f32_4* %196 = OpAccessChain %23 %25 %34 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 1 2 0 
                                       f32_4 %199 = OpLoad %186 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 0 0 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %131 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_3 %204 = OpFAdd %201 %203 
                                       f32_4 %205 = OpLoad %131 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
                                                      OpStore %131 %206 
                              Uniform f32_4* %207 = OpAccessChain %23 %25 %44 
                                       f32_4 %208 = OpLoad %207 
                                       f32_3 %209 = OpVectorShuffle %208 %208 1 2 0 
                                       f32_4 %210 = OpLoad %186 
                                       f32_3 %211 = OpVectorShuffle %210 %210 2 2 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %131 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFAdd %212 %214 
                                       f32_4 %216 = OpLoad %131 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %131 %217 
                                       f32_4 %219 = OpLoad %131 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_4 %221 = OpLoad %131 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                         f32 %223 = OpDot %220 %222 
                                                      OpStore %218 %223 
                                         f32 %224 = OpLoad %218 
                                         f32 %225 = OpExtInst %1 32 %224 
                                                      OpStore %218 %225 
                                         f32 %226 = OpLoad %218 
                                       f32_3 %227 = OpCompositeConstruct %226 %226 %226 
                                       f32_4 %228 = OpLoad %131 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %131 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %131 %232 
                                Private f32* %233 = OpAccessChain %131 %47 
                                         f32 %234 = OpLoad %233 
                                 Output f32* %235 = OpAccessChain %181 %31 
                                                      OpStore %235 %234 
                                  Input f32* %236 = OpAccessChain %186 %58 
                                         f32 %237 = OpLoad %236 
                                Uniform f32* %239 = OpAccessChain %23 %238 %58 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFMul %237 %240 
                                                      OpStore %218 %241 
                                       f32_3 %245 = OpLoad %244 
                              Uniform f32_4* %247 = OpAccessChain %23 %246 %34 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                         f32 %250 = OpDot %245 %249 
                                Private f32* %251 = OpAccessChain %242 %31 
                                                      OpStore %251 %250 
                                       f32_3 %252 = OpLoad %244 
                              Uniform f32_4* %253 = OpAccessChain %23 %246 %26 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                         f32 %256 = OpDot %252 %255 
                                Private f32* %257 = OpAccessChain %242 %13 
                                                      OpStore %257 %256 
                                       f32_3 %258 = OpLoad %244 
                              Uniform f32_4* %259 = OpAccessChain %23 %246 %44 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                         f32 %262 = OpDot %258 %261 
                                Private f32* %263 = OpAccessChain %242 %47 
                                                      OpStore %263 %262 
                                       f32_4 %265 = OpLoad %242 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %242 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                         f32 %269 = OpDot %266 %268 
                                                      OpStore %264 %269 
                                         f32 %270 = OpLoad %264 
                                         f32 %271 = OpExtInst %1 32 %270 
                                                      OpStore %264 %271 
                                         f32 %272 = OpLoad %264 
                                       f32_3 %273 = OpCompositeConstruct %272 %272 %272 
                                       f32_4 %274 = OpLoad %242 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_4 %277 = OpLoad %242 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 6 3 
                                                      OpStore %242 %278 
                                       f32_4 %281 = OpLoad %131 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_4 %283 = OpLoad %242 
                                       f32_3 %284 = OpVectorShuffle %283 %283 2 0 1 
                                       f32_3 %285 = OpFMul %282 %284 
                                                      OpStore %280 %285 
                                       f32_4 %286 = OpLoad %242 
                                       f32_3 %287 = OpVectorShuffle %286 %286 1 2 0 
                                       f32_4 %288 = OpLoad %131 
                                       f32_3 %289 = OpVectorShuffle %288 %288 1 2 0 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_3 %291 = OpLoad %280 
                                       f32_3 %292 = OpFNegate %291 
                                       f32_3 %293 = OpFAdd %290 %292 
                                                      OpStore %280 %293 
                                         f32 %294 = OpLoad %218 
                                       f32_3 %295 = OpCompositeConstruct %294 %294 %294 
                                       f32_3 %296 = OpLoad %280 
                                       f32_3 %297 = OpFMul %295 %296 
                                                      OpStore %280 %297 
                                Private f32* %298 = OpAccessChain %280 %31 
                                         f32 %299 = OpLoad %298 
                                 Output f32* %300 = OpAccessChain %181 %13 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %242 %31 
                                         f32 %302 = OpLoad %301 
                                 Output f32* %303 = OpAccessChain %181 %47 
                                                      OpStore %303 %302 
                                Private f32* %305 = OpAccessChain %131 %31 
                                         f32 %306 = OpLoad %305 
                                 Output f32* %307 = OpAccessChain %304 %31 
                                                      OpStore %307 %306 
                                Private f32* %309 = OpAccessChain %131 %13 
                                         f32 %310 = OpLoad %309 
                                 Output f32* %311 = OpAccessChain %308 %31 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %9 %13 
                                         f32 %313 = OpLoad %312 
                                 Output f32* %314 = OpAccessChain %304 %58 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %280 %13 
                                         f32 %316 = OpLoad %315 
                                 Output f32* %317 = OpAccessChain %304 %13 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %280 %47 
                                         f32 %319 = OpLoad %318 
                                 Output f32* %320 = OpAccessChain %308 %13 
                                                      OpStore %320 %319 
                                Private f32* %321 = OpAccessChain %242 %13 
                                         f32 %322 = OpLoad %321 
                                 Output f32* %323 = OpAccessChain %304 %47 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %9 %47 
                                         f32 %325 = OpLoad %324 
                                 Output f32* %326 = OpAccessChain %308 %58 
                                                      OpStore %326 %325 
                                       f32_4 %328 = OpLoad %9 
                                                      OpStore %327 %328 
                                Private f32* %329 = OpAccessChain %242 %47 
                                         f32 %330 = OpLoad %329 
                                 Output f32* %331 = OpAccessChain %308 %47 
                                                      OpStore %331 %330 
                              Uniform f32_4* %333 = OpAccessChain %23 %25 %55 
                                       f32_4 %334 = OpLoad %333 
                                                      OpStore %332 %334 
                                Private f32* %336 = OpAccessChain %242 %13 
                                         f32 %337 = OpLoad %336 
                                Private f32* %338 = OpAccessChain %242 %13 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %337 %339 
                                Private f32* %341 = OpAccessChain %335 %31 
                                                      OpStore %341 %340 
                                Private f32* %342 = OpAccessChain %242 %31 
                                         f32 %343 = OpLoad %342 
                                Private f32* %344 = OpAccessChain %242 %31 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFMul %343 %345 
                                Private f32* %347 = OpAccessChain %335 %31 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFNegate %348 
                                         f32 %350 = OpFAdd %346 %349 
                                Private f32* %351 = OpAccessChain %335 %31 
                                                      OpStore %351 %350 
                                       f32_4 %353 = OpLoad %242 
                                       f32_4 %354 = OpVectorShuffle %353 %353 1 2 2 0 
                                       f32_4 %355 = OpLoad %242 
                                       f32_4 %356 = OpVectorShuffle %355 %355 0 1 2 2 
                                       f32_4 %357 = OpFMul %354 %356 
                                                      OpStore %352 %357 
                              Uniform f32_4* %360 = OpAccessChain %23 %359 
                                       f32_4 %361 = OpLoad %360 
                                       f32_4 %362 = OpLoad %352 
                                         f32 %363 = OpDot %361 %362 
                                Private f32* %364 = OpAccessChain %358 %31 
                                                      OpStore %364 %363 
                              Uniform f32_4* %366 = OpAccessChain %23 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_4 %368 = OpLoad %352 
                                         f32 %369 = OpDot %367 %368 
                                Private f32* %370 = OpAccessChain %358 %13 
                                                      OpStore %370 %369 
                              Uniform f32_4* %372 = OpAccessChain %23 %371 
                                       f32_4 %373 = OpLoad %372 
                                       f32_4 %374 = OpLoad %352 
                                         f32 %375 = OpDot %373 %374 
                                Private f32* %376 = OpAccessChain %358 %47 
                                                      OpStore %376 %375 
                              Uniform f32_4* %378 = OpAccessChain %23 %377 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpLoad %335 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 0 0 
                                       f32_3 %383 = OpFMul %380 %382 
                                       f32_3 %384 = OpLoad %358 
                                       f32_3 %385 = OpFAdd %383 %384 
                                                      OpStore %335 %385 
                                Private f32* %386 = OpAccessChain %242 %58 
                                                      OpStore %386 %89 
                              Uniform f32_4* %387 = OpAccessChain %23 %26 
                                       f32_4 %388 = OpLoad %387 
                                       f32_4 %389 = OpLoad %242 
                                         f32 %390 = OpDot %388 %389 
                                Private f32* %391 = OpAccessChain %358 %31 
                                                      OpStore %391 %390 
                              Uniform f32_4* %392 = OpAccessChain %23 %44 
                                       f32_4 %393 = OpLoad %392 
                                       f32_4 %394 = OpLoad %242 
                                         f32 %395 = OpDot %393 %394 
                                Private f32* %396 = OpAccessChain %358 %13 
                                                      OpStore %396 %395 
                              Uniform f32_4* %397 = OpAccessChain %23 %55 
                                       f32_4 %398 = OpLoad %397 
                                       f32_4 %399 = OpLoad %242 
                                         f32 %400 = OpDot %398 %399 
                                Private f32* %401 = OpAccessChain %358 %47 
                                                      OpStore %401 %400 
                                       f32_3 %402 = OpLoad %335 
                                       f32_3 %403 = OpLoad %358 
                                       f32_3 %404 = OpFAdd %402 %403 
                                                      OpStore %335 %404 
                                       f32_3 %405 = OpLoad %335 
                                       f32_3 %407 = OpExtInst %1 40 %405 %406 
                                                      OpStore %335 %407 
                                       f32_3 %408 = OpLoad %335 
                                       f32_3 %409 = OpExtInst %1 30 %408 
                                       f32_4 %410 = OpLoad %131 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %131 %411 
                                       f32_4 %412 = OpLoad %131 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_4 %417 = OpLoad %131 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
                                                      OpStore %131 %418 
                                       f32_4 %419 = OpLoad %131 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
                                       f32_3 %421 = OpExtInst %1 29 %420 
                                       f32_4 %422 = OpLoad %131 
                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 6 3 
                                                      OpStore %131 %423 
                                       f32_4 %424 = OpLoad %131 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                       f32_3 %428 = OpFMul %425 %427 
                                       f32_3 %431 = OpFAdd %428 %430 
                                       f32_4 %432 = OpLoad %131 
                                       f32_4 %433 = OpVectorShuffle %432 %431 4 5 6 3 
                                                      OpStore %131 %433 
                                       f32_4 %434 = OpLoad %131 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpExtInst %1 40 %435 %406 
                                       f32_4 %437 = OpLoad %131 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
                                                      OpStore %131 %438 
                                       f32_4 %441 = OpLoad %131 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                                      OpStore %440 %442 
                                Private f32* %443 = OpAccessChain %99 %13 
                                         f32 %444 = OpLoad %443 
                                Uniform f32* %445 = OpAccessChain %23 %34 %31 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpFMul %444 %446 
                                Private f32* %448 = OpAccessChain %99 %13 
                                                      OpStore %448 %447 
                                       f32_4 %449 = OpLoad %99 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 3 1 
                                       f32_3 %453 = OpFMul %450 %452 
                                       f32_4 %454 = OpLoad %131 
                                       f32_4 %455 = OpVectorShuffle %454 %453 4 1 5 6 
                                                      OpStore %131 %455 
                                       f32_4 %457 = OpLoad %99 
                                       f32_2 %458 = OpVectorShuffle %457 %457 2 3 
                                       f32_4 %459 = OpLoad %456 
                                       f32_4 %460 = OpVectorShuffle %459 %458 0 1 4 5 
                                                      OpStore %456 %460 
                                       f32_4 %461 = OpLoad %131 
                                       f32_2 %462 = OpVectorShuffle %461 %461 2 2 
                                       f32_4 %463 = OpLoad %131 
                                       f32_2 %464 = OpVectorShuffle %463 %463 0 3 
                                       f32_2 %465 = OpFAdd %462 %464 
                                       f32_4 %466 = OpLoad %456 
                                       f32_4 %467 = OpVectorShuffle %466 %465 4 5 2 3 
                                                      OpStore %456 %467 
                                                      OpStore %468 %469 
                                 Output f32* %470 = OpAccessChain %162 %34 %13 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFNegate %471 
                                 Output f32* %473 = OpAccessChain %162 %34 %13 
                                                      OpStore %473 %472 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 540
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %64 %147 %150 %392 %456 %535 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %26 Location 26 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 RelaxedPrecision 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 RelaxedPrecision 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 RelaxedPrecision 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpMemberDecorate %37 7 Offset 37 
                                                      OpMemberDecorate %37 8 Offset 37 
                                                      OpMemberDecorate %37 9 Offset 37 
                                                      OpMemberDecorate %37 10 Offset 37 
                                                      OpMemberDecorate %37 11 RelaxedPrecision 
                                                      OpMemberDecorate %37 11 Offset 37 
                                                      OpMemberDecorate %37 12 Offset 37 
                                                      OpMemberDecorate %37 13 RelaxedPrecision 
                                                      OpMemberDecorate %37 13 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %64 Location 64 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %285 SpecId 285 
                                                      OpDecorate %374 DescriptorSet 374 
                                                      OpDecorate %374 Binding 374 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 Location 392 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %401 DescriptorSet 401 
                                                      OpDecorate %401 Binding 401 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %535 Location 535 
                                                      OpDecorate %537 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeInt 32 0 
                                          u32 %14 = OpConstant 3 
                                              %15 = OpTypePointer Input %6 
                                          u32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Private %6 
                                 Input f32_4* %21 = OpVariable Input 
                                          u32 %24 = OpConstant 1 
                                 Input f32_4* %26 = OpVariable Input 
                                          u32 %29 = OpConstant 2 
                               Private f32_3* %31 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %10 %34 
                                              %36 = OpTypeArray %10 %34 
                                              %37 = OpTypeStruct %10 %7 %10 %10 %10 %10 %35 %10 %36 %7 %7 %10 %10 %6 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 1 
                                              %42 = OpTypePointer Uniform %7 
                                              %46 = OpTypePointer Private %10 
                               Private f32_4* %47 = OpVariable Private 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                                              %63 = OpTypePointer Input %62 
                                 Input f32_2* %64 = OpVariable Input 
                               Private f32_3* %67 = OpVariable Private 
                                          f32 %70 = OpConstant 3.674022E-40 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %81 = OpConstant 0 
                                          i32 %83 = OpConstant -1 
                                          f32 %91 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_3 %94 = OpConstantComposite %91 %92 %93 
                               Private f32_3* %97 = OpVariable Private 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %78 %78 %100 
                                         f32 %117 = OpConstant 3.674022E-40 
                                       f32_2 %118 = OpConstantComposite %117 %117 
                                Private f32* %122 = OpVariable Private 
                                         f32 %129 = OpConstant 3.674022E-40 
                                Private f32* %137 = OpVariable Private 
                                             %138 = OpTypePointer Uniform %6 
                                Private f32* %142 = OpVariable Private 
                                         f32 %144 = OpConstant 3.674022E-40 
                              Private f32_4* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                Input f32_4* %150 = OpVariable Input 
                                         f32 %171 = OpConstant 3.674022E-40 
                               Private bool* %179 = OpVariable Private 
                                         f32 %186 = OpConstant 3.674022E-40 
                              Private f32_3* %195 = OpVariable Private 
                                             %196 = OpTypePointer Function %7 
                                       f32_3 %201 = OpConstantComposite %129 %129 %129 
                                         i32 %207 = OpConstant 13 
                                         i32 %221 = OpConstant 6 
                                         i32 %228 = OpConstant 2 
                                         i32 %236 = OpConstant 5 
                                             %237 = OpTypePointer Uniform %10 
                                         i32 %265 = OpConstant 4 
                               Private bool* %274 = OpVariable Private 
                                         i32 %275 = OpConstant 7 
                                        bool %279 = OpConstantFalse 
                                        bool %285 = OpSpecConstantFalse 
                               Private bool* %288 = OpVariable Private 
                                         i32 %294 = OpConstant 8 
                                         i32 %325 = OpConstant 3 
                                         i32 %342 = OpConstant 10 
                                         i32 %348 = OpConstant 9 
                                         f32 %356 = OpConstant 3.674022E-40 
                                         f32 %358 = OpConstant 3.674022E-40 
                                Private f32* %361 = OpVariable Private 
                                             %371 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %372 = OpTypeSampledImage %371 
                                             %373 = OpTypePointer UniformConstant %372 
 UniformConstant read_only Texture3DSampled* %374 = OpVariable UniformConstant 
                              Private f32_4* %379 = OpVariable Private 
                                Input f32_4* %392 = OpVariable Input 
                                Private f32* %400 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %401 = OpVariable UniformConstant 
                                Private f32* %407 = OpVariable Private 
                                             %416 = OpTypePointer Function %6 
                              Private f32_4* %452 = OpVariable Private 
                                             %455 = OpTypePointer Input %7 
                                Input f32_3* %456 = OpVariable Input 
                              Private f32_3* %486 = OpVariable Private 
                                         f32 %493 = OpConstant 3.674022E-40 
                                         i32 %502 = OpConstant 11 
                                         i32 %522 = OpConstant 12 
                                             %534 = OpTypePointer Output %10 
                               Output f32_4* %535 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %197 = OpVariable Function 
                             Function f32_3* %332 = OpVariable Function 
                               Function f32* %417 = OpVariable Function 
                                   Input f32* %16 = OpAccessChain %12 %14 
                                          f32 %17 = OpLoad %16 
                                 Private f32* %20 = OpAccessChain %9 %18 
                                                      OpStore %20 %17 
                                   Input f32* %22 = OpAccessChain %21 %14 
                                          f32 %23 = OpLoad %22 
                                 Private f32* %25 = OpAccessChain %9 %24 
                                                      OpStore %25 %23 
                                   Input f32* %27 = OpAccessChain %26 %14 
                                          f32 %28 = OpLoad %27 
                                 Private f32* %30 = OpAccessChain %9 %29 
                                                      OpStore %30 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpFNegate %32 
                               Uniform f32_3* %43 = OpAccessChain %39 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %33 %44 
                                                      OpStore %31 %45 
                                        f32_3 %48 = OpLoad %31 
                                        f32_3 %49 = OpLoad %31 
                                          f32 %50 = OpDot %48 %49 
                                 Private f32* %51 = OpAccessChain %47 %18 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %47 %18 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpExtInst %1 32 %53 
                                 Private f32* %55 = OpAccessChain %47 %18 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_2 %65 = OpLoad %64 
                                        f32_4 %66 = OpImageSampleImplicitLod %61 %65 
                                                      OpStore %56 %66 
                                 Private f32* %68 = OpAccessChain %56 %14 
                                          f32 %69 = OpLoad %68 
                                          f32 %71 = OpFAdd %69 %70 
                                 Private f32* %72 = OpAccessChain %67 %18 
                                                      OpStore %72 %71 
                                 Private f32* %76 = OpAccessChain %67 %18 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                         bool %80 = OpLoad %75 
                                          i32 %82 = OpSelect %80 %41 %81 
                                          i32 %84 = OpIMul %82 %83 
                                         bool %85 = OpINotEqual %84 %81 
                                                      OpSelectionMerge %87 None 
                                                      OpBranchConditional %85 %86 %87 
                                              %86 = OpLabel 
                                                      OpKill
                                              %87 = OpLabel 
                                        f32_4 %89 = OpLoad %56 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                          f32 %95 = OpDot %90 %94 
                                 Private f32* %96 = OpAccessChain %67 %18 
                                                      OpStore %96 %95 
                                        f32_3 %98 = OpLoad %67 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %102 = OpFAdd %99 %101 
                                                      OpStore %97 %102 
                                       f32_3 %103 = OpLoad %97 
                                       f32_2 %104 = OpVectorShuffle %103 %103 1 1 
                                       f32_4 %105 = OpLoad %56 
                                       f32_2 %106 = OpVectorShuffle %105 %105 3 3 
                                         f32 %107 = OpDot %104 %106 
                                Private f32* %108 = OpAccessChain %67 %18 
                                                      OpStore %108 %107 
                                Private f32* %109 = OpAccessChain %97 %24 
                                         f32 %110 = OpLoad %109 
                                Private f32* %111 = OpAccessChain %97 %24 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %110 %112 
                                Private f32* %114 = OpAccessChain %67 %24 
                                                      OpStore %114 %113 
                                       f32_3 %115 = OpLoad %67 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %119 = OpFAdd %116 %118 
                                       f32_3 %120 = OpLoad %67 
                                       f32_3 %121 = OpVectorShuffle %120 %119 3 4 2 
                                                      OpStore %67 %121 
                                       f32_3 %123 = OpLoad %67 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_3 %125 = OpLoad %67 
                                       f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                         f32 %127 = OpDot %124 %126 
                                                      OpStore %122 %127 
                                         f32 %128 = OpLoad %122 
                                         f32 %130 = OpExtInst %1 37 %128 %129 
                                                      OpStore %122 %130 
                                         f32 %131 = OpLoad %122 
                                         f32 %132 = OpFNegate %131 
                                         f32 %133 = OpFAdd %132 %129 
                                                      OpStore %122 %133 
                                         f32 %134 = OpLoad %122 
                                         f32 %135 = OpExtInst %1 31 %134 
                                Private f32* %136 = OpAccessChain %67 %29 
                                                      OpStore %136 %135 
                                Uniform f32* %139 = OpAccessChain %39 %81 %24 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpExtInst %1 10 %140 
                                                      OpStore %137 %141 
                                         f32 %143 = OpLoad %137 
                                         f32 %145 = OpFMul %143 %144 
                                                      OpStore %142 %145 
                                  Input f32* %148 = OpAccessChain %147 %18 
                                         f32 %149 = OpLoad %148 
                                  Input f32* %151 = OpAccessChain %150 %18 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                         f32 %154 = OpFAdd %149 %153 
                                Private f32* %155 = OpAccessChain %146 %18 
                                                      OpStore %155 %154 
                                Private f32* %156 = OpAccessChain %146 %18 
                                         f32 %157 = OpLoad %156 
                                  Input f32* %158 = OpAccessChain %147 %24 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %146 %18 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %146 %18 
                                         f32 %163 = OpLoad %162 
                                  Input f32* %164 = OpAccessChain %150 %24 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFNegate %165 
                                         f32 %167 = OpFAdd %163 %166 
                                Private f32* %168 = OpAccessChain %146 %18 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %146 %18 
                                         f32 %170 = OpLoad %169 
                                         f32 %172 = OpFMul %170 %171 
                                         f32 %173 = OpFAdd %172 %70 
                                Private f32* %174 = OpAccessChain %146 %18 
                                                      OpStore %174 %173 
                                Private f32* %175 = OpAccessChain %146 %18 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpExtInst %1 10 %176 
                                Private f32* %178 = OpAccessChain %146 %18 
                                                      OpStore %178 %177 
                                         f32 %180 = OpLoad %142 
                                Private f32* %181 = OpAccessChain %146 %18 
                                         f32 %182 = OpLoad %181 
                                        bool %183 = OpFOrdLessThan %180 %182 
                                                      OpStore %179 %183 
                                         f32 %184 = OpLoad %137 
                                         f32 %185 = OpFMul %184 %144 
                                         f32 %187 = OpFAdd %185 %186 
                                                      OpStore %137 %187 
                                Private f32* %188 = OpAccessChain %146 %18 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpLoad %137 
                                        bool %191 = OpFOrdLessThan %189 %190 
                                                      OpStore %75 %191 
                                        bool %192 = OpLoad %75 
                                        bool %193 = OpLoad %179 
                                        bool %194 = OpLogicalAnd %192 %193 
                                                      OpStore %75 %194 
                                        bool %198 = OpLoad %75 
                                                      OpSelectionMerge %200 None 
                                                      OpBranchConditional %198 %199 %202 
                                             %199 = OpLabel 
                                                      OpStore %197 %201 
                                                      OpBranch %200 
                                             %202 = OpLabel 
                                       f32_3 %203 = OpLoad %97 
                                                      OpStore %197 %203 
                                                      OpBranch %200 
                                             %200 = OpLabel 
                                       f32_3 %204 = OpLoad %197 
                                                      OpStore %195 %204 
                                Private f32* %205 = OpAccessChain %56 %14 
                                         f32 %206 = OpLoad %205 
                                Uniform f32* %208 = OpAccessChain %39 %207 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %206 %210 
                                                      OpStore %122 %211 
                                         f32 %212 = OpLoad %122 
                                        bool %213 = OpFOrdLessThan %212 %78 
                                                      OpStore %75 %213 
                                        bool %214 = OpLoad %75 
                                         i32 %215 = OpSelect %214 %41 %81 
                                         i32 %216 = OpIMul %215 %83 
                                        bool %217 = OpINotEqual %216 %81 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %217 %218 %219 
                                             %218 = OpLabel 
                                                      OpKill
                                             %219 = OpLabel 
                                Uniform f32* %222 = OpAccessChain %39 %221 %81 %29 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %97 %18 
                                                      OpStore %224 %223 
                                Uniform f32* %225 = OpAccessChain %39 %221 %41 %29 
                                         f32 %226 = OpLoad %225 
                                Private f32* %227 = OpAccessChain %97 %24 
                                                      OpStore %227 %226 
                                Uniform f32* %229 = OpAccessChain %39 %221 %228 %29 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %97 %29 
                                                      OpStore %231 %230 
                                       f32_3 %232 = OpLoad %31 
                                       f32_3 %233 = OpLoad %97 
                                         f32 %234 = OpDot %232 %233 
                                                      OpStore %137 %234 
                                       f32_3 %235 = OpLoad %9 
                              Uniform f32_4* %238 = OpAccessChain %39 %236 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFNegate %240 
                                       f32_3 %242 = OpFAdd %235 %241 
                                                      OpStore %97 %242 
                                       f32_3 %243 = OpLoad %97 
                                       f32_3 %244 = OpLoad %97 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %97 %18 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %97 %18 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpExtInst %1 31 %248 
                                Private f32* %250 = OpAccessChain %97 %18 
                                                      OpStore %250 %249 
                                         f32 %251 = OpLoad %137 
                                         f32 %252 = OpFNegate %251 
                                Private f32* %253 = OpAccessChain %97 %18 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFAdd %252 %254 
                                Private f32* %256 = OpAccessChain %97 %18 
                                                      OpStore %256 %255 
                                Uniform f32* %257 = OpAccessChain %39 %236 %14 
                                         f32 %258 = OpLoad %257 
                                Private f32* %259 = OpAccessChain %97 %18 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFMul %258 %260 
                                         f32 %262 = OpLoad %137 
                                         f32 %263 = OpFAdd %261 %262 
                                                      OpStore %137 %263 
                                         f32 %264 = OpLoad %137 
                                Uniform f32* %266 = OpAccessChain %39 %265 %29 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFMul %264 %267 
                                Uniform f32* %269 = OpAccessChain %39 %265 %14 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFAdd %268 %270 
                                                      OpStore %137 %271 
                                         f32 %272 = OpLoad %137 
                                         f32 %273 = OpExtInst %1 43 %272 %78 %129 
                                                      OpStore %137 %273 
                                Uniform f32* %276 = OpAccessChain %39 %275 %18 
                                         f32 %277 = OpLoad %276 
                                        bool %278 = OpFOrdEqual %277 %129 
                                                      OpStore %274 %278 
                                                      OpSelectionMerge %281 None 
                                                      OpBranchConditional %279 %280 %281 
                                             %280 = OpLabel 
                                        bool %282 = OpLoad %274 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %284 
                                             %283 = OpLabel 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                                      OpBranch %281 
                                             %281 = OpLabel 
                                                      OpSelectionMerge %287 None 
                                                      OpBranchConditional %285 %286 %381 
                                             %286 = OpLabel 
                                Uniform f32* %289 = OpAccessChain %39 %275 %24 
                                         f32 %290 = OpLoad %289 
                                        bool %291 = OpFOrdEqual %290 %129 
                                                      OpStore %288 %291 
                                       f32_4 %292 = OpLoad %21 
                                       f32_3 %293 = OpVectorShuffle %292 %292 3 3 3 
                              Uniform f32_4* %295 = OpAccessChain %39 %294 %41 
                                       f32_4 %296 = OpLoad %295 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpFMul %293 %297 
                                       f32_4 %299 = OpLoad %146 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %146 %300 
                              Uniform f32_4* %301 = OpAccessChain %39 %294 %81 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %12 
                                       f32_3 %305 = OpVectorShuffle %304 %304 3 3 3 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_4 %307 = OpLoad %146 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFAdd %306 %308 
                                       f32_4 %310 = OpLoad %146 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %146 %311 
                              Uniform f32_4* %312 = OpAccessChain %39 %294 %228 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %26 
                                       f32_3 %316 = OpVectorShuffle %315 %315 3 3 3 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %146 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %146 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %146 %322 
                                       f32_4 %323 = OpLoad %146 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %39 %294 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %324 %328 
                                       f32_4 %330 = OpLoad %146 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %146 %331 
                                        bool %333 = OpLoad %288 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %338 
                                             %334 = OpLabel 
                                       f32_4 %336 = OpLoad %146 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                                      OpStore %332 %337 
                                                      OpBranch %335 
                                             %338 = OpLabel 
                                       f32_3 %339 = OpLoad %9 
                                                      OpStore %332 %339 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_3 %340 = OpLoad %332 
                                                      OpStore %9 %340 
                                       f32_3 %341 = OpLoad %9 
                              Uniform f32_3* %343 = OpAccessChain %39 %342 
                                       f32_3 %344 = OpLoad %343 
                                       f32_3 %345 = OpFNegate %344 
                                       f32_3 %346 = OpFAdd %341 %345 
                                                      OpStore %9 %346 
                                       f32_3 %347 = OpLoad %9 
                              Uniform f32_3* %349 = OpAccessChain %39 %348 
                                       f32_3 %350 = OpLoad %349 
                                       f32_3 %351 = OpFMul %347 %350 
                                       f32_4 %352 = OpLoad %146 
                                       f32_4 %353 = OpVectorShuffle %352 %351 0 4 5 6 
                                                      OpStore %146 %353 
                                Private f32* %354 = OpAccessChain %146 %24 
                                         f32 %355 = OpLoad %354 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %359 = OpFAdd %357 %358 
                                Private f32* %360 = OpAccessChain %9 %18 
                                                      OpStore %360 %359 
                                Uniform f32* %362 = OpAccessChain %39 %275 %29 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %363 %171 
                                         f32 %365 = OpFAdd %364 %358 
                                                      OpStore %361 %365 
                                         f32 %366 = OpLoad %361 
                                Private f32* %367 = OpAccessChain %9 %18 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 40 %366 %368 
                                Private f32* %370 = OpAccessChain %146 %18 
                                                      OpStore %370 %369 
                  read_only Texture3DSampled %375 = OpLoad %374 
                                       f32_4 %376 = OpLoad %146 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 2 3 
                                       f32_4 %378 = OpImageSampleImplicitLod %375 %377 
                                                      OpStore %146 %378 
                                       f32_4 %380 = OpLoad %146 
                                                      OpStore %379 %380 
                                                      OpBranch %287 
                                             %381 = OpLabel 
                                Private f32* %382 = OpAccessChain %379 %18 
                                                      OpStore %382 %129 
                                Private f32* %383 = OpAccessChain %379 %24 
                                                      OpStore %383 %129 
                                Private f32* %384 = OpAccessChain %379 %29 
                                                      OpStore %384 %129 
                                Private f32* %385 = OpAccessChain %379 %14 
                                                      OpStore %385 %129 
                                                      OpBranch %287 
                                             %287 = OpLabel 
                                       f32_4 %386 = OpLoad %379 
                              Uniform f32_4* %387 = OpAccessChain %39 %325 
                                       f32_4 %388 = OpLoad %387 
                                         f32 %389 = OpDot %386 %388 
                                                      OpStore %122 %389 
                                         f32 %390 = OpLoad %122 
                                         f32 %391 = OpExtInst %1 43 %390 %78 %129 
                                                      OpStore %122 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_4 %395 = OpLoad %392 
                                       f32_2 %396 = OpVectorShuffle %395 %395 3 3 
                                       f32_2 %397 = OpFDiv %394 %396 
                                       f32_3 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %397 3 4 2 
                                                      OpStore %9 %399 
                  read_only Texture2DSampled %402 = OpLoad %401 
                                       f32_3 %403 = OpLoad %9 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
                                       f32_4 %405 = OpImageSampleImplicitLod %402 %404 
                                         f32 %406 = OpCompositeExtract %405 0 
                                                      OpStore %400 %406 
                                         f32 %408 = OpLoad %137 
                                         f32 %409 = OpLoad %400 
                                         f32 %410 = OpFAdd %408 %409 
                                                      OpStore %407 %410 
                                         f32 %411 = OpLoad %407 
                                         f32 %412 = OpExtInst %1 43 %411 %78 %129 
                                                      OpStore %407 %412 
                                         f32 %413 = OpLoad %122 
                                         f32 %414 = OpLoad %407 
                                         f32 %415 = OpExtInst %1 37 %413 %414 
                                                      OpStore %122 %415 
                                        bool %418 = OpLoad %274 
                                                      OpSelectionMerge %420 None 
                                                      OpBranchConditional %418 %419 %422 
                                             %419 = OpLabel 
                                         f32 %421 = OpLoad %122 
                                                      OpStore %417 %421 
                                                      OpBranch %420 
                                             %422 = OpLabel 
                                         f32 %423 = OpLoad %407 
                                                      OpStore %417 %423 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         f32 %424 = OpLoad %417 
                                                      OpStore %122 %424 
                                       f32_4 %425 = OpLoad %12 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpLoad %67 
                                         f32 %428 = OpDot %426 %427 
                                Private f32* %429 = OpAccessChain %97 %18 
                                                      OpStore %429 %428 
                                       f32_4 %430 = OpLoad %21 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_3 %432 = OpLoad %67 
                                         f32 %433 = OpDot %431 %432 
                                Private f32* %434 = OpAccessChain %97 %24 
                                                      OpStore %434 %433 
                                       f32_4 %435 = OpLoad %26 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpLoad %67 
                                         f32 %438 = OpDot %436 %437 
                                Private f32* %439 = OpAccessChain %97 %29 
                                                      OpStore %439 %438 
                                       f32_3 %440 = OpLoad %97 
                                       f32_3 %441 = OpLoad %97 
                                         f32 %442 = OpDot %440 %441 
                                Private f32* %443 = OpAccessChain %9 %18 
                                                      OpStore %443 %442 
                                Private f32* %444 = OpAccessChain %9 %18 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpExtInst %1 32 %445 
                                Private f32* %447 = OpAccessChain %9 %18 
                                                      OpStore %447 %446 
                                       f32_3 %448 = OpLoad %9 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 0 0 
                                       f32_3 %450 = OpLoad %97 
                                       f32_3 %451 = OpFMul %449 %450 
                                                      OpStore %9 %451 
                                       f32_3 %453 = OpLoad %195 
                                       f32_3 %454 = OpVectorShuffle %453 %453 1 1 2 
                                       f32_3 %457 = OpLoad %456 
                                       f32_3 %458 = OpFMul %454 %457 
                                       f32_4 %459 = OpLoad %452 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                      OpStore %452 %460 
                                       f32_3 %461 = OpLoad %31 
                                       f32_4 %462 = OpLoad %47 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 0 0 
                                       f32_3 %464 = OpFMul %461 %463 
                              Uniform f32_4* %465 = OpAccessChain %39 %228 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFAdd %464 %467 
                                                      OpStore %67 %468 
                                       f32_3 %469 = OpLoad %67 
                                       f32_3 %470 = OpLoad %67 
                                         f32 %471 = OpDot %469 %470 
                                                      OpStore %407 %471 
                                         f32 %472 = OpLoad %407 
                                         f32 %473 = OpExtInst %1 32 %472 
                                                      OpStore %407 %473 
                                       f32_3 %474 = OpLoad %67 
                                         f32 %475 = OpLoad %407 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %67 %477 
                                       f32_3 %478 = OpLoad %9 
                                       f32_3 %479 = OpLoad %67 
                                         f32 %480 = OpDot %478 %479 
                                Private f32* %481 = OpAccessChain %67 %18 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %67 %18 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpExtInst %1 40 %483 %78 
                                Private f32* %485 = OpAccessChain %67 %18 
                                                      OpStore %485 %484 
                                Private f32* %487 = OpAccessChain %67 %18 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpExtInst %1 30 %488 
                                Private f32* %490 = OpAccessChain %486 %18 
                                                      OpStore %490 %489 
                                Private f32* %491 = OpAccessChain %486 %18 
                                         f32 %492 = OpLoad %491 
                                         f32 %494 = OpFMul %492 %493 
                                Private f32* %495 = OpAccessChain %486 %18 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %486 %18 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpExtInst %1 29 %497 
                                Private f32* %499 = OpAccessChain %486 %18 
                                                      OpStore %499 %498 
                                       f32_3 %500 = OpLoad %486 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 0 0 
                              Uniform f32_4* %503 = OpAccessChain %39 %502 
                                       f32_4 %504 = OpLoad %503 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                                       f32_3 %506 = OpFMul %501 %505 
                                                      OpStore %486 %506 
                                       f32_3 %507 = OpLoad %195 
                              Uniform f32_4* %508 = OpAccessChain %39 %502 
                                       f32_4 %509 = OpLoad %508 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFMul %507 %510 
                                       f32_3 %512 = OpLoad %486 
                                       f32_3 %513 = OpFAdd %511 %512 
                                                      OpStore %486 %513 
                                         f32 %514 = OpLoad %122 
                                       f32_3 %515 = OpCompositeConstruct %514 %514 %514 
                                       f32_3 %516 = OpLoad %486 
                                       f32_3 %517 = OpFMul %515 %516 
                                       f32_4 %518 = OpLoad %56 
                                       f32_4 %519 = OpVectorShuffle %518 %517 4 5 6 3 
                                                      OpStore %56 %519 
                                       f32_4 %520 = OpLoad %56 
                                       f32_4 %521 = OpFNegate %520 
                              Uniform f32_4* %523 = OpAccessChain %39 %522 
                                       f32_4 %524 = OpLoad %523 
                                       f32_4 %525 = OpFAdd %521 %524 
                                                      OpStore %47 %525 
                              Uniform f32_4* %526 = OpAccessChain %39 %522 
                                       f32_4 %527 = OpLoad %526 
                                       f32_4 %528 = OpVectorShuffle %527 %527 3 3 3 3 
                                       f32_4 %529 = OpLoad %47 
                                       f32_4 %530 = OpFMul %528 %529 
                                       f32_4 %531 = OpLoad %56 
                                       f32_4 %532 = OpFAdd %530 %531 
                                                      OpStore %47 %532 
                                Private f32* %533 = OpAccessChain %452 %14 
                                                      OpStore %533 %78 
                                       f32_4 %536 = OpLoad %47 
                                       f32_4 %537 = OpLoad %452 
                                       f32_4 %538 = OpFAdd %536 %537 
                                                      OpStore %535 %538 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
bool u_xlatb5;
float u_xlat11;
float u_xlat16;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb5 = 0.0<_Perpendicular;
    u_xlat5 = (u_xlatb5) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat5 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.x = u_xlat1.z;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat11 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.z = u_xlat2.y;
    vs_TEXCOORD2.x = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat1.y;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.z;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat2.x;
    vs_TEXCOORD4 = u_xlat0;
    vs_TEXCOORD5 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat2.zzzz * u_xlat1;
    u_xlat1 = u_xlat1 * u_xlat1;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat2.yyyy + u_xlat3;
    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
    u_xlat1 = u_xlat0 * u_xlat0 + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat2.xxxx + u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat2 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD6.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat12;
float u_xlat19;
bool u_xlatb19;
float u_xlat21;
void main()
{
    u_xlat6.x = vs_TEXCOORD1.w;
    u_xlat6.y = vs_TEXCOORD2.w;
    u_xlat6.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat19 = u_xlat2.w + -0.100000001;
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat19 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat19) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat19 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat19 = min(u_xlat19, 1.0);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat4.z = sqrt(u_xlat19);
    u_xlat19 = fract(_Time.y);
    u_xlat3.x = u_xlat19 * 4.0;
    u_xlat21 = vs_TEXCOORD4.x + (-vs_TEXCOORD5.x);
    u_xlat21 = u_xlat21 + vs_TEXCOORD4.y;
    u_xlat21 = u_xlat21 + (-vs_TEXCOORD5.y);
    u_xlat21 = u_xlat21 * 0.5 + -0.100000001;
    u_xlat21 = fract(u_xlat21);
    u_xlatb3 = u_xlat3.x<u_xlat21;
    u_xlat19 = u_xlat19 * 4.0 + 0.100000001;
    u_xlatb19 = u_xlat21<u_xlat19;
    u_xlatb19 = u_xlatb19 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb19)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat19 = u_xlat2.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb19){
        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb19)) ? u_xlat5.xyz : u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat12 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12, u_xlat6.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.yyz * vs_TEXCOORD6.xyz;
    u_xlat0.xzw = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xxx;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xzw);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xzw = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xzw;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat0.xzw;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    u_xlat0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    u_xlat5.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat5;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 465
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %157 %169 %170 %182 %187 %238 %311 %315 %337 %339 %456 %459 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 RelaxedPrecision 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %155 0 BuiltIn 155 
                                                      OpMemberDecorate %155 1 BuiltIn 155 
                                                      OpMemberDecorate %155 2 BuiltIn 155 
                                                      OpDecorate %155 Block 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %182 Location 182 
                                                      OpDecorate %187 Location 187 
                                                      OpDecorate %238 Location 238 
                                                      OpDecorate %311 Location 311 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %337 Location 337 
                                                      OpDecorate %339 Location 339 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %459 Location 459 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeStruct %7 %7 %7 %7 %18 %20 %21 %7 %22 %6 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 5 
                                          i32 %28 = OpConstant 1 
                                              %29 = OpTypePointer Uniform %6 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                                          i32 %36 = OpConstant 0 
                                          i32 %46 = OpConstant 2 
                                          u32 %49 = OpConstant 2 
                                          i32 %57 = OpConstant 3 
                                          u32 %60 = OpConstant 3 
                                              %75 = OpTypeBool 
                                              %76 = OpTypePointer Private %75 
                                Private bool* %77 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %79 = OpConstant 9 
                                 Private f32* %83 = OpVariable Private 
                                              %84 = OpTypePointer Function %6 
                                          f32 %89 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                              Private f32_4* %101 = OpVariable Private 
                                             %104 = OpTypePointer Uniform %7 
                              Private f32_4* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 8 
                                             %154 = OpTypeArray %6 %13 
                                             %155 = OpTypeStruct %7 %6 %154 
                                             %156 = OpTypePointer Output %155 
        Output struct {f32_4; f32; f32[1];}* %157 = OpVariable Output 
                                             %165 = OpTypePointer Output %7 
                                             %167 = OpTypeVector %6 2 
                                             %168 = OpTypePointer Output %167 
                               Output f32_2* %169 = OpVariable Output 
                                Input f32_4* %170 = OpVariable Input 
                                         i32 %173 = OpConstant 10 
                               Output f32_4* %182 = OpVariable Output 
                                             %185 = OpTypePointer Output %6 
                                Input f32_4* %187 = OpVariable Input 
                                             %188 = OpTypeVector %6 3 
                                Private f32* %219 = OpVariable Private 
                                             %237 = OpTypePointer Input %188 
                                Input f32_3* %238 = OpVariable Input 
                                         i32 %240 = OpConstant 6 
                              Private f32_4* %272 = OpVariable Private 
                                Private f32* %291 = OpVariable Private 
                                         i32 %294 = OpConstant 7 
                               Output f32_4* %311 = OpVariable Output 
                               Output f32_4* %315 = OpVariable Output 
                               Output f32_4* %337 = OpVariable Output 
                               Output f32_4* %339 = OpVariable Output 
                              Private f32_4* %355 = OpVariable Private 
                                         f32 %391 = OpConstant 3.674022E-40 
                                       f32_4 %392 = OpConstantComposite %391 %391 %391 %391 
                                       f32_4 %400 = OpConstantComposite %91 %91 %91 %91 
                                       f32_4 %408 = OpConstantComposite %78 %78 %78 %78 
                                         i32 %415 = OpConstant 4 
                                             %455 = OpTypePointer Output %188 
                               Output f32_3* %456 = OpVariable Output 
                               Output f32_4* %459 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %85 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %30 = OpAccessChain %25 %27 %28 %13 
                                          f32 %31 = OpLoad %30 
                                          f32 %32 = OpFMul %16 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Uniform f32* %37 = OpAccessChain %25 %27 %36 %13 
                                          f32 %38 = OpLoad %37 
                                   Input f32* %39 = OpAccessChain %11 %33 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %33 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFAdd %41 %43 
                                 Private f32* %45 = OpAccessChain %9 %33 
                                                      OpStore %45 %44 
                                 Uniform f32* %47 = OpAccessChain %25 %27 %46 %13 
                                          f32 %48 = OpLoad %47 
                                   Input f32* %50 = OpAccessChain %11 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFMul %48 %51 
                                 Private f32* %53 = OpAccessChain %9 %33 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %52 %54 
                                 Private f32* %56 = OpAccessChain %9 %33 
                                                      OpStore %56 %55 
                                 Uniform f32* %58 = OpAccessChain %25 %27 %57 %13 
                                          f32 %59 = OpLoad %58 
                                   Input f32* %61 = OpAccessChain %11 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %9 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %9 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %9 %33 
                                          f32 %69 = OpLoad %68 
                                 Uniform f32* %70 = OpAccessChain %25 %27 %57 %13 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                          f32 %73 = OpFAdd %69 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %80 = OpAccessChain %25 %79 
                                          f32 %81 = OpLoad %80 
                                         bool %82 = OpFOrdLessThan %78 %81 
                                                      OpStore %77 %82 
                                         bool %86 = OpLoad %77 
                                                      OpSelectionMerge %88 None 
                                                      OpBranchConditional %86 %87 %90 
                                              %87 = OpLabel 
                                                      OpStore %85 %89 
                                                      OpBranch %88 
                                              %90 = OpLabel 
                                                      OpStore %85 %91 
                                                      OpBranch %88 
                                              %88 = OpLabel 
                                          f32 %92 = OpLoad %85 
                                                      OpStore %83 %92 
                                 Private f32* %93 = OpAccessChain %9 %33 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpLoad %83 
                                          f32 %96 = OpFMul %94 %95 
                                   Input f32* %97 = OpAccessChain %11 %49 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFAdd %96 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_4 %102 = OpLoad %11 
                                       f32_4 %103 = OpVectorShuffle %102 %102 1 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %25 %27 %28 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpFMul %103 %106 
                                                      OpStore %101 %107 
                              Uniform f32_4* %108 = OpAccessChain %25 %27 %36 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %11 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %101 
                                       f32_4 %114 = OpFAdd %112 %113 
                                                      OpStore %101 %114 
                              Uniform f32_4* %115 = OpAccessChain %25 %27 %46 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %117 0 0 0 0 
                                       f32_4 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %101 
                                       f32_4 %121 = OpFAdd %119 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                              Uniform f32_4* %123 = OpAccessChain %25 %27 %57 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpFAdd %122 %124 
                                                      OpStore %101 %125 
                              Uniform f32_4* %126 = OpAccessChain %25 %27 %57 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpLoad %11 
                                       f32_4 %129 = OpVectorShuffle %128 %128 3 3 3 3 
                                       f32_4 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpFAdd %130 %131 
                                                      OpStore %9 %132 
                                       f32_4 %134 = OpLoad %101 
                                       f32_4 %135 = OpVectorShuffle %134 %134 1 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %25 %136 %28 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpFMul %135 %138 
                                                      OpStore %133 %139 
                              Uniform f32_4* %140 = OpAccessChain %25 %136 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpLoad %101 
                                       f32_4 %143 = OpVectorShuffle %142 %142 0 0 0 0 
                                       f32_4 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %133 
                                       f32_4 %146 = OpFAdd %144 %145 
                                                      OpStore %133 %146 
                              Uniform f32_4* %147 = OpAccessChain %25 %136 %46 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpLoad %101 
                                       f32_4 %150 = OpVectorShuffle %149 %149 2 2 2 2 
                                       f32_4 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %133 
                                       f32_4 %153 = OpFAdd %151 %152 
                                                      OpStore %133 %153 
                              Uniform f32_4* %158 = OpAccessChain %25 %136 %57 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpLoad %101 
                                       f32_4 %161 = OpVectorShuffle %160 %160 3 3 3 3 
                                       f32_4 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %133 
                                       f32_4 %164 = OpFAdd %162 %163 
                               Output f32_4* %166 = OpAccessChain %157 %36 
                                                      OpStore %166 %164 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                              Uniform f32_4* %174 = OpAccessChain %25 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpFMul %172 %176 
                              Uniform f32_4* %178 = OpAccessChain %25 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_2 %181 = OpFAdd %177 %180 
                                                      OpStore %169 %181 
                                Private f32* %183 = OpAccessChain %9 %33 
                                         f32 %184 = OpLoad %183 
                                 Output f32* %186 = OpAccessChain %182 %60 
                                                      OpStore %186 %184 
                                       f32_4 %189 = OpLoad %187 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 1 1 
                              Uniform f32_4* %191 = OpAccessChain %25 %27 %28 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpFMul %190 %193 
                                       f32_4 %195 = OpLoad %101 
                                       f32_4 %196 = OpVectorShuffle %195 %194 4 5 6 3 
                                                      OpStore %101 %196 
                              Uniform f32_4* %197 = OpAccessChain %25 %27 %36 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 1 2 0 
                                       f32_4 %200 = OpLoad %187 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %101 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFAdd %202 %204 
                                       f32_4 %206 = OpLoad %101 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %101 %207 
                              Uniform f32_4* %208 = OpAccessChain %25 %27 %46 
                                       f32_4 %209 = OpLoad %208 
                                       f32_3 %210 = OpVectorShuffle %209 %209 1 2 0 
                                       f32_4 %211 = OpLoad %187 
                                       f32_3 %212 = OpVectorShuffle %211 %211 2 2 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %101 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFAdd %213 %215 
                                       f32_4 %217 = OpLoad %101 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %101 %218 
                                       f32_4 %220 = OpLoad %101 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_4 %222 = OpLoad %101 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                         f32 %224 = OpDot %221 %223 
                                                      OpStore %219 %224 
                                         f32 %225 = OpLoad %219 
                                         f32 %226 = OpExtInst %1 32 %225 
                                                      OpStore %219 %226 
                                         f32 %227 = OpLoad %219 
                                       f32_3 %228 = OpCompositeConstruct %227 %227 %227 
                                       f32_4 %229 = OpLoad %101 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %101 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %101 %233 
                                Private f32* %234 = OpAccessChain %101 %49 
                                         f32 %235 = OpLoad %234 
                                 Output f32* %236 = OpAccessChain %182 %33 
                                                      OpStore %236 %235 
                                       f32_3 %239 = OpLoad %238 
                              Uniform f32_4* %241 = OpAccessChain %25 %240 %36 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                         f32 %244 = OpDot %239 %243 
                                Private f32* %245 = OpAccessChain %133 %13 
                                                      OpStore %245 %244 
                                       f32_3 %246 = OpLoad %238 
                              Uniform f32_4* %247 = OpAccessChain %25 %240 %28 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                         f32 %250 = OpDot %246 %249 
                                Private f32* %251 = OpAccessChain %133 %49 
                                                      OpStore %251 %250 
                                       f32_3 %252 = OpLoad %238 
                              Uniform f32_4* %253 = OpAccessChain %25 %240 %46 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                         f32 %256 = OpDot %252 %255 
                                Private f32* %257 = OpAccessChain %133 %33 
                                                      OpStore %257 %256 
                                       f32_4 %258 = OpLoad %133 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_4 %260 = OpLoad %133 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                         f32 %262 = OpDot %259 %261 
                                                      OpStore %219 %262 
                                         f32 %263 = OpLoad %219 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %219 %264 
                                         f32 %265 = OpLoad %219 
                                       f32_3 %266 = OpCompositeConstruct %265 %265 %265 
                                       f32_4 %267 = OpLoad %133 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_4 %270 = OpLoad %133 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %133 %271 
                                       f32_4 %273 = OpLoad %101 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_4 %275 = OpLoad %133 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_4 %278 = OpLoad %272 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %272 %279 
                                       f32_4 %280 = OpLoad %133 
                                       f32_3 %281 = OpVectorShuffle %280 %280 2 0 1 
                                       f32_4 %282 = OpLoad %101 
                                       f32_3 %283 = OpVectorShuffle %282 %282 1 2 0 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %272 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFNegate %286 
                                       f32_3 %288 = OpFAdd %284 %287 
                                       f32_4 %289 = OpLoad %272 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
                                                      OpStore %272 %290 
                                  Input f32* %292 = OpAccessChain %187 %60 
                                         f32 %293 = OpLoad %292 
                                Uniform f32* %295 = OpAccessChain %25 %294 %60 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpFMul %293 %296 
                                                      OpStore %291 %297 
                                         f32 %298 = OpLoad %291 
                                       f32_3 %299 = OpCompositeConstruct %298 %298 %298 
                                       f32_4 %300 = OpLoad %272 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %272 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %272 %304 
                                Private f32* %305 = OpAccessChain %272 %33 
                                         f32 %306 = OpLoad %305 
                                 Output f32* %307 = OpAccessChain %182 %13 
                                                      OpStore %307 %306 
                                Private f32* %308 = OpAccessChain %133 %13 
                                         f32 %309 = OpLoad %308 
                                 Output f32* %310 = OpAccessChain %182 %49 
                                                      OpStore %310 %309 
                                Private f32* %312 = OpAccessChain %101 %33 
                                         f32 %313 = OpLoad %312 
                                 Output f32* %314 = OpAccessChain %311 %33 
                                                      OpStore %314 %313 
                                Private f32* %316 = OpAccessChain %101 %13 
                                         f32 %317 = OpLoad %316 
                                 Output f32* %318 = OpAccessChain %315 %33 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %9 %13 
                                         f32 %320 = OpLoad %319 
                                 Output f32* %321 = OpAccessChain %311 %60 
                                                      OpStore %321 %320 
                                Private f32* %322 = OpAccessChain %272 %13 
                                         f32 %323 = OpLoad %322 
                                 Output f32* %324 = OpAccessChain %311 %13 
                                                      OpStore %324 %323 
                                Private f32* %325 = OpAccessChain %272 %49 
                                         f32 %326 = OpLoad %325 
                                 Output f32* %327 = OpAccessChain %315 %13 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %133 %49 
                                         f32 %329 = OpLoad %328 
                                 Output f32* %330 = OpAccessChain %311 %49 
                                                      OpStore %330 %329 
                                Private f32* %331 = OpAccessChain %9 %49 
                                         f32 %332 = OpLoad %331 
                                 Output f32* %333 = OpAccessChain %315 %60 
                                                      OpStore %333 %332 
                                Private f32* %334 = OpAccessChain %133 %33 
                                         f32 %335 = OpLoad %334 
                                 Output f32* %336 = OpAccessChain %315 %49 
                                                      OpStore %336 %335 
                                       f32_4 %338 = OpLoad %9 
                                                      OpStore %337 %338 
                              Uniform f32_4* %340 = OpAccessChain %25 %27 %57 
                                       f32_4 %341 = OpLoad %340 
                                                      OpStore %339 %341 
                                       f32_4 %342 = OpLoad %9 
                                       f32_4 %343 = OpVectorShuffle %342 %342 1 1 1 1 
                                       f32_4 %344 = OpFNegate %343 
                              Uniform f32_4* %345 = OpAccessChain %25 %28 
                                       f32_4 %346 = OpLoad %345 
                                       f32_4 %347 = OpFAdd %344 %346 
                                                      OpStore %101 %347 
                                       f32_4 %348 = OpLoad %133 
                                       f32_4 %349 = OpVectorShuffle %348 %348 2 2 2 2 
                                       f32_4 %350 = OpLoad %101 
                                       f32_4 %351 = OpFMul %349 %350 
                                                      OpStore %272 %351 
                                       f32_4 %352 = OpLoad %101 
                                       f32_4 %353 = OpLoad %101 
                                       f32_4 %354 = OpFMul %352 %353 
                                                      OpStore %101 %354 
                                       f32_4 %356 = OpLoad %9 
                                       f32_4 %357 = OpVectorShuffle %356 %356 0 0 0 0 
                                       f32_4 %358 = OpFNegate %357 
                              Uniform f32_4* %359 = OpAccessChain %25 %36 
                                       f32_4 %360 = OpLoad %359 
                                       f32_4 %361 = OpFAdd %358 %360 
                                                      OpStore %355 %361 
                                       f32_4 %362 = OpLoad %9 
                                       f32_4 %363 = OpVectorShuffle %362 %362 2 2 2 2 
                                       f32_4 %364 = OpFNegate %363 
                              Uniform f32_4* %365 = OpAccessChain %25 %46 
                                       f32_4 %366 = OpLoad %365 
                                       f32_4 %367 = OpFAdd %364 %366 
                                                      OpStore %9 %367 
                                       f32_4 %368 = OpLoad %355 
                                       f32_4 %369 = OpLoad %133 
                                       f32_4 %370 = OpVectorShuffle %369 %369 1 1 1 1 
                                       f32_4 %371 = OpFMul %368 %370 
                                       f32_4 %372 = OpLoad %272 
                                       f32_4 %373 = OpFAdd %371 %372 
                                                      OpStore %272 %373 
                                       f32_4 %374 = OpLoad %355 
                                       f32_4 %375 = OpLoad %355 
                                       f32_4 %376 = OpFMul %374 %375 
                                       f32_4 %377 = OpLoad %101 
                                       f32_4 %378 = OpFAdd %376 %377 
                                                      OpStore %101 %378 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %380 = OpLoad %9 
                                       f32_4 %381 = OpFMul %379 %380 
                                       f32_4 %382 = OpLoad %101 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %101 %383 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpLoad %133 
                                       f32_4 %386 = OpVectorShuffle %385 %385 0 0 0 0 
                                       f32_4 %387 = OpFMul %384 %386 
                                       f32_4 %388 = OpLoad %272 
                                       f32_4 %389 = OpFAdd %387 %388 
                                                      OpStore %9 %389 
                                       f32_4 %390 = OpLoad %101 
                                       f32_4 %393 = OpExtInst %1 40 %390 %392 
                                                      OpStore %101 %393 
                                       f32_4 %394 = OpLoad %101 
                                       f32_4 %395 = OpExtInst %1 32 %394 
                                                      OpStore %133 %395 
                                       f32_4 %396 = OpLoad %101 
                              Uniform f32_4* %397 = OpAccessChain %25 %57 
                                       f32_4 %398 = OpLoad %397 
                                       f32_4 %399 = OpFMul %396 %398 
                                       f32_4 %401 = OpFAdd %399 %400 
                                                      OpStore %101 %401 
                                       f32_4 %402 = OpLoad %101 
                                       f32_4 %403 = OpFDiv %400 %402 
                                                      OpStore %101 %403 
                                       f32_4 %404 = OpLoad %9 
                                       f32_4 %405 = OpLoad %133 
                                       f32_4 %406 = OpFMul %404 %405 
                                                      OpStore %9 %406 
                                       f32_4 %407 = OpLoad %9 
                                       f32_4 %409 = OpExtInst %1 40 %407 %408 
                                                      OpStore %9 %409 
                                       f32_4 %410 = OpLoad %101 
                                       f32_4 %411 = OpLoad %9 
                                       f32_4 %412 = OpFMul %410 %411 
                                                      OpStore %9 %412 
                                       f32_4 %413 = OpLoad %9 
                                       f32_3 %414 = OpVectorShuffle %413 %413 1 1 1 
                              Uniform f32_4* %416 = OpAccessChain %25 %415 %28 
                                       f32_4 %417 = OpLoad %416 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_3 %419 = OpFMul %414 %418 
                                       f32_4 %420 = OpLoad %101 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 6 3 
                                                      OpStore %101 %421 
                              Uniform f32_4* %422 = OpAccessChain %25 %415 %36 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_4 %425 = OpLoad %9 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 0 0 
                                       f32_3 %427 = OpFMul %424 %426 
                                       f32_4 %428 = OpLoad %101 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                       f32_3 %430 = OpFAdd %427 %429 
                                       f32_4 %431 = OpLoad %101 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                                      OpStore %101 %432 
                              Uniform f32_4* %433 = OpAccessChain %25 %415 %46 
                                       f32_4 %434 = OpLoad %433 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_4 %436 = OpLoad %9 
                                       f32_3 %437 = OpVectorShuffle %436 %436 2 2 2 
                                       f32_3 %438 = OpFMul %435 %437 
                                       f32_4 %439 = OpLoad %101 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpFAdd %438 %440 
                                       f32_4 %442 = OpLoad %9 
                                       f32_4 %443 = OpVectorShuffle %442 %441 4 5 6 3 
                                                      OpStore %9 %443 
                              Uniform f32_4* %444 = OpAccessChain %25 %415 %57 
                                       f32_4 %445 = OpLoad %444 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                       f32_4 %447 = OpLoad %9 
                                       f32_3 %448 = OpVectorShuffle %447 %447 3 3 3 
                                       f32_3 %449 = OpFMul %446 %448 
                                       f32_4 %450 = OpLoad %9 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 1 2 
                                       f32_3 %452 = OpFAdd %449 %451 
                                       f32_4 %453 = OpLoad %9 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %9 %454 
                                       f32_4 %457 = OpLoad %9 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                                      OpStore %456 %458 
                                                      OpStore %459 %408 
                                 Output f32* %460 = OpAccessChain %157 %36 %13 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpFNegate %461 
                                 Output f32* %463 = OpAccessChain %157 %36 %13 
                                                      OpStore %463 %462 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 456
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %63 %148 %151 %371 %451 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %26 Location 26 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 RelaxedPrecision 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 RelaxedPrecision 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpMemberDecorate %36 8 RelaxedPrecision 
                                                      OpMemberDecorate %36 8 Offset 36 
                                                      OpMemberDecorate %36 9 Offset 36 
                                                      OpMemberDecorate %36 10 RelaxedPrecision 
                                                      OpMemberDecorate %36 10 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %63 Location 63 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %233 SpecId 233 
                                                      OpDecorate %323 DescriptorSet 323 
                                                      OpDecorate %323 Binding 323 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %371 Location 371 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %451 Location 451 
                                                      OpDecorate %453 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeInt 32 0 
                                          u32 %14 = OpConstant 3 
                                              %15 = OpTypePointer Input %6 
                                          u32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Private %6 
                                 Input f32_4* %21 = OpVariable Input 
                                          u32 %24 = OpConstant 1 
                                 Input f32_4* %26 = OpVariable Input 
                                          u32 %29 = OpConstant 2 
                               Private f32_3* %31 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %10 %34 
                                              %36 = OpTypeStruct %10 %7 %10 %10 %10 %35 %7 %7 %10 %10 %6 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %7 
                                              %45 = OpTypePointer Private %10 
                               Private f32_4* %46 = OpVariable Private 
                               Private f32_4* %55 = OpVariable Private 
                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %57 = OpTypeSampledImage %56 
                                              %58 = OpTypePointer UniformConstant %57 
  UniformConstant read_only Texture2DSampled* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeVector %6 2 
                                              %62 = OpTypePointer Input %61 
                                 Input f32_2* %63 = OpVariable Input 
                               Private f32_3* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %77 = OpConstant 3.674022E-40 
                                          i32 %80 = OpConstant 0 
                                          i32 %82 = OpConstant -1 
                                          f32 %90 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                        f32_3 %93 = OpConstantComposite %90 %91 %92 
                               Private f32_4* %96 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_3 %100 = OpConstantComposite %77 %77 %99 
                                         f32 %118 = OpConstant 3.674022E-40 
                                       f32_2 %119 = OpConstantComposite %118 %118 
                                Private f32* %123 = OpVariable Private 
                                         f32 %130 = OpConstant 3.674022E-40 
                                Private f32* %138 = OpVariable Private 
                                             %139 = OpTypePointer Uniform %6 
                                Private f32* %143 = OpVariable Private 
                                         f32 %145 = OpConstant 3.674022E-40 
                              Private f32_3* %147 = OpVariable Private 
                                Input f32_4* %148 = OpVariable Input 
                                Input f32_4* %151 = OpVariable Input 
                                         f32 %172 = OpConstant 3.674022E-40 
                               Private bool* %180 = OpVariable Private 
                                         f32 %187 = OpConstant 3.674022E-40 
                              Private f32_3* %196 = OpVariable Private 
                                             %197 = OpTypePointer Function %7 
                                       f32_3 %202 = OpConstantComposite %130 %130 %130 
                                         i32 %209 = OpConstant 10 
                                         i32 %223 = OpConstant 4 
                                        bool %227 = OpConstantFalse 
                                        bool %233 = OpSpecConstantFalse 
                                         i32 %241 = OpConstant 5 
                                             %242 = OpTypePointer Uniform %10 
                                         i32 %260 = OpConstant 2 
                                         i32 %274 = OpConstant 3 
                                         i32 %291 = OpConstant 7 
                                         i32 %297 = OpConstant 6 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                Private f32* %310 = OpVariable Private 
                                             %320 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %321 = OpTypeSampledImage %320 
                                             %322 = OpTypePointer UniformConstant %321 
 UniformConstant read_only Texture3DSampled* %323 = OpVariable UniformConstant 
                              Private f32_4* %328 = OpVariable Private 
                                             %370 = OpTypePointer Input %7 
                                Input f32_3* %371 = OpVariable Input 
                                Private f32* %384 = OpVariable Private 
                              Private f32_3* %402 = OpVariable Private 
                                         f32 %409 = OpConstant 3.674022E-40 
                                         i32 %418 = OpConstant 8 
                                         i32 %438 = OpConstant 9 
                                             %450 = OpTypePointer Output %10 
                               Output f32_4* %451 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %198 = OpVariable Function 
                             Function f32_3* %281 = OpVariable Function 
                                   Input f32* %16 = OpAccessChain %12 %14 
                                          f32 %17 = OpLoad %16 
                                 Private f32* %20 = OpAccessChain %9 %18 
                                                      OpStore %20 %17 
                                   Input f32* %22 = OpAccessChain %21 %14 
                                          f32 %23 = OpLoad %22 
                                 Private f32* %25 = OpAccessChain %9 %24 
                                                      OpStore %25 %23 
                                   Input f32* %27 = OpAccessChain %26 %14 
                                          f32 %28 = OpLoad %27 
                                 Private f32* %30 = OpAccessChain %9 %29 
                                                      OpStore %30 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpFNegate %32 
                               Uniform f32_3* %42 = OpAccessChain %38 %40 
                                        f32_3 %43 = OpLoad %42 
                                        f32_3 %44 = OpFAdd %33 %43 
                                                      OpStore %31 %44 
                                        f32_3 %47 = OpLoad %31 
                                        f32_3 %48 = OpLoad %31 
                                          f32 %49 = OpDot %47 %48 
                                 Private f32* %50 = OpAccessChain %46 %18 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %46 %18 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpExtInst %1 32 %52 
                                 Private f32* %54 = OpAccessChain %46 %18 
                                                      OpStore %54 %53 
                   read_only Texture2DSampled %60 = OpLoad %59 
                                        f32_2 %64 = OpLoad %63 
                                        f32_4 %65 = OpImageSampleImplicitLod %60 %64 
                                                      OpStore %55 %65 
                                 Private f32* %67 = OpAccessChain %55 %14 
                                          f32 %68 = OpLoad %67 
                                          f32 %70 = OpFAdd %68 %69 
                                 Private f32* %71 = OpAccessChain %66 %18 
                                                      OpStore %71 %70 
                                 Private f32* %75 = OpAccessChain %66 %18 
                                          f32 %76 = OpLoad %75 
                                         bool %78 = OpFOrdLessThan %76 %77 
                                                      OpStore %74 %78 
                                         bool %79 = OpLoad %74 
                                          i32 %81 = OpSelect %79 %40 %80 
                                          i32 %83 = OpIMul %81 %82 
                                         bool %84 = OpINotEqual %83 %80 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %86 
                                              %85 = OpLabel 
                                                      OpKill
                                              %86 = OpLabel 
                                        f32_4 %88 = OpLoad %55 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                          f32 %94 = OpDot %89 %93 
                                 Private f32* %95 = OpAccessChain %66 %18 
                                                      OpStore %95 %94 
                                        f32_3 %97 = OpLoad %66 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %96 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %96 %103 
                                       f32_4 %104 = OpLoad %96 
                                       f32_2 %105 = OpVectorShuffle %104 %104 1 1 
                                       f32_4 %106 = OpLoad %55 
                                       f32_2 %107 = OpVectorShuffle %106 %106 3 3 
                                         f32 %108 = OpDot %105 %107 
                                Private f32* %109 = OpAccessChain %66 %18 
                                                      OpStore %109 %108 
                                Private f32* %110 = OpAccessChain %96 %24 
                                         f32 %111 = OpLoad %110 
                                Private f32* %112 = OpAccessChain %96 %24 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFAdd %111 %113 
                                Private f32* %115 = OpAccessChain %66 %24 
                                                      OpStore %115 %114 
                                       f32_3 %116 = OpLoad %66 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_2 %120 = OpFAdd %117 %119 
                                       f32_3 %121 = OpLoad %66 
                                       f32_3 %122 = OpVectorShuffle %121 %120 3 4 2 
                                                      OpStore %66 %122 
                                       f32_3 %124 = OpLoad %66 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_3 %126 = OpLoad %66 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                         f32 %128 = OpDot %125 %127 
                                                      OpStore %123 %128 
                                         f32 %129 = OpLoad %123 
                                         f32 %131 = OpExtInst %1 37 %129 %130 
                                                      OpStore %123 %131 
                                         f32 %132 = OpLoad %123 
                                         f32 %133 = OpFNegate %132 
                                         f32 %134 = OpFAdd %133 %130 
                                                      OpStore %123 %134 
                                         f32 %135 = OpLoad %123 
                                         f32 %136 = OpExtInst %1 31 %135 
                                Private f32* %137 = OpAccessChain %66 %29 
                                                      OpStore %137 %136 
                                Uniform f32* %140 = OpAccessChain %38 %80 %24 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpExtInst %1 10 %141 
                                                      OpStore %138 %142 
                                         f32 %144 = OpLoad %138 
                                         f32 %146 = OpFMul %144 %145 
                                                      OpStore %143 %146 
                                  Input f32* %149 = OpAccessChain %148 %18 
                                         f32 %150 = OpLoad %149 
                                  Input f32* %152 = OpAccessChain %151 %18 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                         f32 %155 = OpFAdd %150 %154 
                                Private f32* %156 = OpAccessChain %147 %18 
                                                      OpStore %156 %155 
                                Private f32* %157 = OpAccessChain %147 %18 
                                         f32 %158 = OpLoad %157 
                                  Input f32* %159 = OpAccessChain %148 %24 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %147 %18 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %147 %18 
                                         f32 %164 = OpLoad %163 
                                  Input f32* %165 = OpAccessChain %151 %24 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %164 %167 
                                Private f32* %169 = OpAccessChain %147 %18 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %147 %18 
                                         f32 %171 = OpLoad %170 
                                         f32 %173 = OpFMul %171 %172 
                                         f32 %174 = OpFAdd %173 %69 
                                Private f32* %175 = OpAccessChain %147 %18 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %147 %18 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpExtInst %1 10 %177 
                                Private f32* %179 = OpAccessChain %147 %18 
                                                      OpStore %179 %178 
                                         f32 %181 = OpLoad %143 
                                Private f32* %182 = OpAccessChain %147 %18 
                                         f32 %183 = OpLoad %182 
                                        bool %184 = OpFOrdLessThan %181 %183 
                                                      OpStore %180 %184 
                                         f32 %185 = OpLoad %138 
                                         f32 %186 = OpFMul %185 %145 
                                         f32 %188 = OpFAdd %186 %187 
                                                      OpStore %138 %188 
                                Private f32* %189 = OpAccessChain %147 %18 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpLoad %138 
                                        bool %192 = OpFOrdLessThan %190 %191 
                                                      OpStore %74 %192 
                                        bool %193 = OpLoad %74 
                                        bool %194 = OpLoad %180 
                                        bool %195 = OpLogicalAnd %193 %194 
                                                      OpStore %74 %195 
                                        bool %199 = OpLoad %74 
                                                      OpSelectionMerge %201 None 
                                                      OpBranchConditional %199 %200 %203 
                                             %200 = OpLabel 
                                                      OpStore %198 %202 
                                                      OpBranch %201 
                                             %203 = OpLabel 
                                       f32_4 %204 = OpLoad %96 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                                      OpStore %198 %205 
                                                      OpBranch %201 
                                             %201 = OpLabel 
                                       f32_3 %206 = OpLoad %198 
                                                      OpStore %196 %206 
                                Private f32* %207 = OpAccessChain %55 %14 
                                         f32 %208 = OpLoad %207 
                                Uniform f32* %210 = OpAccessChain %38 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFNegate %211 
                                         f32 %213 = OpFAdd %208 %212 
                                                      OpStore %123 %213 
                                         f32 %214 = OpLoad %123 
                                        bool %215 = OpFOrdLessThan %214 %77 
                                                      OpStore %74 %215 
                                        bool %216 = OpLoad %74 
                                         i32 %217 = OpSelect %216 %40 %80 
                                         i32 %218 = OpIMul %217 %82 
                                        bool %219 = OpINotEqual %218 %80 
                                                      OpSelectionMerge %221 None 
                                                      OpBranchConditional %219 %220 %221 
                                             %220 = OpLabel 
                                                      OpKill
                                             %221 = OpLabel 
                                Uniform f32* %224 = OpAccessChain %38 %223 %18 
                                         f32 %225 = OpLoad %224 
                                        bool %226 = OpFOrdEqual %225 %130 
                                                      OpStore %74 %226 
                                                      OpSelectionMerge %229 None 
                                                      OpBranchConditional %227 %228 %229 
                                             %228 = OpLabel 
                                        bool %230 = OpLoad %74 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %232 
                                             %231 = OpLabel 
                                                      OpBranch %232 
                                             %232 = OpLabel 
                                                      OpBranch %229 
                                             %229 = OpLabel 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %233 %234 %330 
                                             %234 = OpLabel 
                                Uniform f32* %236 = OpAccessChain %38 %223 %24 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdEqual %237 %130 
                                                      OpStore %74 %238 
                                       f32_4 %239 = OpLoad %21 
                                       f32_3 %240 = OpVectorShuffle %239 %239 3 3 3 
                              Uniform f32_4* %243 = OpAccessChain %38 %241 %40 
                                       f32_4 %244 = OpLoad %243 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_3 %246 = OpFMul %240 %245 
                                       f32_4 %247 = OpLoad %96 
                                       f32_4 %248 = OpVectorShuffle %247 %246 4 5 6 3 
                                                      OpStore %96 %248 
                              Uniform f32_4* %249 = OpAccessChain %38 %241 %80 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %12 
                                       f32_3 %253 = OpVectorShuffle %252 %252 3 3 3 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %96 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %254 %256 
                                       f32_4 %258 = OpLoad %96 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %96 %259 
                              Uniform f32_4* %261 = OpAccessChain %38 %241 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %26 
                                       f32_3 %265 = OpVectorShuffle %264 %264 3 3 3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %96 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %266 %268 
                                       f32_4 %270 = OpLoad %96 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %96 %271 
                                       f32_4 %272 = OpLoad %96 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_4* %275 = OpAccessChain %38 %241 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %273 %277 
                                       f32_4 %279 = OpLoad %96 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %96 %280 
                                        bool %282 = OpLoad %74 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %287 
                                             %283 = OpLabel 
                                       f32_4 %285 = OpLoad %96 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                                      OpStore %281 %286 
                                                      OpBranch %284 
                                             %287 = OpLabel 
                                       f32_3 %288 = OpLoad %9 
                                                      OpStore %281 %288 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                       f32_3 %289 = OpLoad %281 
                                                      OpStore %9 %289 
                                       f32_3 %290 = OpLoad %9 
                              Uniform f32_3* %292 = OpAccessChain %38 %291 
                                       f32_3 %293 = OpLoad %292 
                                       f32_3 %294 = OpFNegate %293 
                                       f32_3 %295 = OpFAdd %290 %294 
                                                      OpStore %9 %295 
                                       f32_3 %296 = OpLoad %9 
                              Uniform f32_3* %298 = OpAccessChain %38 %297 
                                       f32_3 %299 = OpLoad %298 
                                       f32_3 %300 = OpFMul %296 %299 
                                       f32_4 %301 = OpLoad %96 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 4 5 6 
                                                      OpStore %96 %302 
                                Private f32* %303 = OpAccessChain %96 %24 
                                         f32 %304 = OpLoad %303 
                                         f32 %306 = OpFMul %304 %305 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %309 = OpAccessChain %9 %18 
                                                      OpStore %309 %308 
                                Uniform f32* %311 = OpAccessChain %38 %223 %29 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %312 %172 
                                         f32 %314 = OpFAdd %313 %307 
                                                      OpStore %310 %314 
                                         f32 %315 = OpLoad %310 
                                Private f32* %316 = OpAccessChain %9 %18 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpExtInst %1 40 %315 %317 
                                Private f32* %319 = OpAccessChain %96 %18 
                                                      OpStore %319 %318 
                  read_only Texture3DSampled %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %96 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 2 3 
                                       f32_4 %327 = OpImageSampleImplicitLod %324 %326 
                                                      OpStore %96 %327 
                                       f32_4 %329 = OpLoad %96 
                                                      OpStore %328 %329 
                                                      OpBranch %235 
                                             %330 = OpLabel 
                                Private f32* %331 = OpAccessChain %328 %18 
                                                      OpStore %331 %130 
                                Private f32* %332 = OpAccessChain %328 %24 
                                                      OpStore %332 %130 
                                Private f32* %333 = OpAccessChain %328 %29 
                                                      OpStore %333 %130 
                                Private f32* %334 = OpAccessChain %328 %14 
                                                      OpStore %334 %130 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                       f32_4 %335 = OpLoad %328 
                              Uniform f32_4* %336 = OpAccessChain %38 %274 
                                       f32_4 %337 = OpLoad %336 
                                         f32 %338 = OpDot %335 %337 
                                                      OpStore %123 %338 
                                         f32 %339 = OpLoad %123 
                                         f32 %340 = OpExtInst %1 43 %339 %77 %130 
                                                      OpStore %123 %340 
                                       f32_4 %341 = OpLoad %12 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpLoad %66 
                                         f32 %344 = OpDot %342 %343 
                                Private f32* %345 = OpAccessChain %147 %18 
                                                      OpStore %345 %344 
                                       f32_4 %346 = OpLoad %21 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpLoad %66 
                                         f32 %349 = OpDot %347 %348 
                                Private f32* %350 = OpAccessChain %147 %24 
                                                      OpStore %350 %349 
                                       f32_4 %351 = OpLoad %26 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpLoad %66 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %147 %29 
                                                      OpStore %355 %354 
                                       f32_3 %356 = OpLoad %147 
                                       f32_3 %357 = OpLoad %147 
                                         f32 %358 = OpDot %356 %357 
                                Private f32* %359 = OpAccessChain %9 %18 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %9 %18 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpExtInst %1 32 %361 
                                Private f32* %363 = OpAccessChain %9 %18 
                                                      OpStore %363 %362 
                                       f32_3 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %147 
                                       f32_3 %367 = OpFMul %365 %366 
                                                      OpStore %9 %367 
                                       f32_3 %368 = OpLoad %196 
                                       f32_3 %369 = OpVectorShuffle %368 %368 1 1 2 
                                       f32_3 %372 = OpLoad %371 
                                       f32_3 %373 = OpFMul %369 %372 
                                       f32_4 %374 = OpLoad %328 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %328 %375 
                                       f32_3 %376 = OpLoad %31 
                                       f32_4 %377 = OpLoad %46 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpFMul %376 %378 
                              Uniform f32_4* %380 = OpAccessChain %38 %260 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %379 %382 
                                                      OpStore %66 %383 
                                       f32_3 %385 = OpLoad %66 
                                       f32_3 %386 = OpLoad %66 
                                         f32 %387 = OpDot %385 %386 
                                                      OpStore %384 %387 
                                         f32 %388 = OpLoad %384 
                                         f32 %389 = OpExtInst %1 32 %388 
                                                      OpStore %384 %389 
                                       f32_3 %390 = OpLoad %66 
                                         f32 %391 = OpLoad %384 
                                       f32_3 %392 = OpCompositeConstruct %391 %391 %391 
                                       f32_3 %393 = OpFMul %390 %392 
                                                      OpStore %66 %393 
                                       f32_3 %394 = OpLoad %9 
                                       f32_3 %395 = OpLoad %66 
                                         f32 %396 = OpDot %394 %395 
                                Private f32* %397 = OpAccessChain %66 %18 
                                                      OpStore %397 %396 
                                Private f32* %398 = OpAccessChain %66 %18 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpExtInst %1 40 %399 %77 
                                Private f32* %401 = OpAccessChain %66 %18 
                                                      OpStore %401 %400 
                                Private f32* %403 = OpAccessChain %66 %18 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpExtInst %1 30 %404 
                                Private f32* %406 = OpAccessChain %402 %18 
                                                      OpStore %406 %405 
                                Private f32* %407 = OpAccessChain %402 %18 
                                         f32 %408 = OpLoad %407 
                                         f32 %410 = OpFMul %408 %409 
                                Private f32* %411 = OpAccessChain %402 %18 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %402 %18 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 29 %413 
                                Private f32* %415 = OpAccessChain %402 %18 
                                                      OpStore %415 %414 
                                       f32_3 %416 = OpLoad %402 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 0 0 
                              Uniform f32_4* %419 = OpAccessChain %38 %418 
                                       f32_4 %420 = OpLoad %419 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_3 %422 = OpFMul %417 %421 
                                                      OpStore %402 %422 
                                       f32_3 %423 = OpLoad %196 
                              Uniform f32_4* %424 = OpAccessChain %38 %418 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFMul %423 %426 
                                       f32_3 %428 = OpLoad %402 
                                       f32_3 %429 = OpFAdd %427 %428 
                                                      OpStore %402 %429 
                                         f32 %430 = OpLoad %123 
                                       f32_3 %431 = OpCompositeConstruct %430 %430 %430 
                                       f32_3 %432 = OpLoad %402 
                                       f32_3 %433 = OpFMul %431 %432 
                                       f32_4 %434 = OpLoad %55 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %55 %435 
                                       f32_4 %436 = OpLoad %55 
                                       f32_4 %437 = OpFNegate %436 
                              Uniform f32_4* %439 = OpAccessChain %38 %438 
                                       f32_4 %440 = OpLoad %439 
                                       f32_4 %441 = OpFAdd %437 %440 
                                                      OpStore %46 %441 
                              Uniform f32_4* %442 = OpAccessChain %38 %438 
                                       f32_4 %443 = OpLoad %442 
                                       f32_4 %444 = OpVectorShuffle %443 %443 3 3 3 3 
                                       f32_4 %445 = OpLoad %46 
                                       f32_4 %446 = OpFMul %444 %445 
                                       f32_4 %447 = OpLoad %55 
                                       f32_4 %448 = OpFAdd %446 %447 
                                                      OpStore %46 %448 
                                Private f32* %449 = OpAccessChain %328 %14 
                                                      OpStore %449 %77 
                                       f32_4 %452 = OpLoad %46 
                                       f32_4 %453 = OpLoad %328 
                                       f32_4 %454 = OpFAdd %452 %453 
                                                      OpStore %451 %454 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
bool u_xlatb6;
float u_xlat18;
float u_xlat19;
float u_xlat20;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb6 = 0.0<_Perpendicular;
    u_xlat6 = (u_xlatb6) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
    vs_TEXCOORD1.x = u_xlat1.z;
    u_xlat19 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.z = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat1.y;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4 = u_xlat0;
    vs_TEXCOORD5 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat1);
    u_xlat3.y = dot(unity_SHBg, u_xlat1);
    u_xlat3.z = dot(unity_SHBb, u_xlat1);
    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
    u_xlat2 = max(u_xlat3, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat12;
float u_xlat19;
bool u_xlatb19;
float u_xlat21;
void main()
{
    u_xlat6.x = vs_TEXCOORD1.w;
    u_xlat6.y = vs_TEXCOORD2.w;
    u_xlat6.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat19 = u_xlat2.w + -0.100000001;
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat19 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat19) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat19 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat19 = min(u_xlat19, 1.0);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat4.z = sqrt(u_xlat19);
    u_xlat19 = fract(_Time.y);
    u_xlat3.x = u_xlat19 * 4.0;
    u_xlat21 = vs_TEXCOORD4.x + (-vs_TEXCOORD5.x);
    u_xlat21 = u_xlat21 + vs_TEXCOORD4.y;
    u_xlat21 = u_xlat21 + (-vs_TEXCOORD5.y);
    u_xlat21 = u_xlat21 * 0.5 + -0.100000001;
    u_xlat21 = fract(u_xlat21);
    u_xlatb3 = u_xlat3.x<u_xlat21;
    u_xlat19 = u_xlat19 * 4.0 + 0.100000001;
    u_xlatb19 = u_xlat21<u_xlat19;
    u_xlatb19 = u_xlatb19 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb19)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat19 = u_xlat2.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb19){
        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb19)) ? u_xlat5.xyz : u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat12 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12, u_xlat6.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.yyz * vs_TEXCOORD6.xyz;
    u_xlat0.xzw = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xxx;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xzw);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xzw = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xzw;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat0.xzw;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    u_xlat0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    u_xlat5.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat5;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 558
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %157 %169 %170 %182 %187 %244 %304 %308 %330 %332 %549 %552 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 RelaxedPrecision 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 RelaxedPrecision 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 RelaxedPrecision 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 RelaxedPrecision 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 RelaxedPrecision 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 RelaxedPrecision 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 RelaxedPrecision 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %155 0 BuiltIn 155 
                                                      OpMemberDecorate %155 1 BuiltIn 155 
                                                      OpMemberDecorate %155 2 BuiltIn 155 
                                                      OpDecorate %155 Block 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %182 Location 182 
                                                      OpDecorate %187 Location 187 
                                                      OpDecorate %244 Location 244 
                                                      OpDecorate %304 Location 304 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %330 Location 330 
                                                      OpDecorate %332 Location 332 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %533 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %549 Location 549 
                                                      OpDecorate %552 Location 552 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeStruct %7 %7 %7 %7 %18 %7 %7 %7 %7 %7 %7 %7 %20 %21 %7 %22 %6 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 12 
                                          i32 %28 = OpConstant 1 
                                              %29 = OpTypePointer Uniform %6 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                                          i32 %36 = OpConstant 0 
                                          i32 %46 = OpConstant 2 
                                          u32 %49 = OpConstant 2 
                                          i32 %57 = OpConstant 3 
                                          u32 %60 = OpConstant 3 
                                              %75 = OpTypeBool 
                                              %76 = OpTypePointer Private %75 
                                Private bool* %77 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %79 = OpConstant 16 
                                 Private f32* %83 = OpVariable Private 
                                              %84 = OpTypePointer Function %6 
                                          f32 %89 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                              Private f32_4* %101 = OpVariable Private 
                                             %104 = OpTypePointer Uniform %7 
                              Private f32_4* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 15 
                                             %154 = OpTypeArray %6 %13 
                                             %155 = OpTypeStruct %7 %6 %154 
                                             %156 = OpTypePointer Output %155 
        Output struct {f32_4; f32; f32[1];}* %157 = OpVariable Output 
                                             %165 = OpTypePointer Output %7 
                                             %167 = OpTypeVector %6 2 
                                             %168 = OpTypePointer Output %167 
                               Output f32_2* %169 = OpVariable Output 
                                Input f32_4* %170 = OpVariable Input 
                                         i32 %173 = OpConstant 17 
                               Output f32_4* %182 = OpVariable Output 
                                             %185 = OpTypePointer Output %6 
                                Input f32_4* %187 = OpVariable Input 
                                             %188 = OpTypeVector %6 3 
                                Private f32* %219 = OpVariable Private 
                                         i32 %239 = OpConstant 14 
                                             %243 = OpTypePointer Input %188 
                                Input f32_3* %244 = OpVariable Input 
                                         i32 %246 = OpConstant 13 
                                Private f32* %264 = OpVariable Private 
                                             %279 = OpTypePointer Private %188 
                              Private f32_3* %280 = OpVariable Private 
                               Output f32_4* %304 = OpVariable Output 
                               Output f32_4* %308 = OpVariable Output 
                               Output f32_4* %330 = OpVariable Output 
                               Output f32_4* %332 = OpVariable Output 
                              Private f32_3* %335 = OpVariable Private 
                              Private f32_4* %352 = OpVariable Private 
                              Private f32_3* %358 = OpVariable Private 
                                         i32 %359 = OpConstant 8 
                                         i32 %365 = OpConstant 9 
                                         i32 %371 = OpConstant 10 
                                         i32 %377 = OpConstant 11 
                                         i32 %387 = OpConstant 5 
                                         i32 %393 = OpConstant 6 
                                         i32 %399 = OpConstant 7 
                                       f32_3 %409 = OpConstantComposite %78 %78 %78 
                                         f32 %414 = OpConstant 3.674022E-40 
                                       f32_3 %415 = OpConstantComposite %414 %414 %414 
                                         f32 %420 = OpConstant 3.674022E-40 
                                       f32_3 %421 = OpConstantComposite %420 %420 %420 
                                         f32 %423 = OpConstant 3.674022E-40 
                                       f32_3 %424 = OpConstantComposite %423 %423 %423 
                              Private f32_4* %434 = OpVariable Private 
                              Private f32_4* %442 = OpVariable Private 
                                         f32 %478 = OpConstant 3.674022E-40 
                                       f32_4 %479 = OpConstantComposite %478 %478 %478 %478 
                                       f32_4 %487 = OpConstantComposite %91 %91 %91 %91 
                                       f32_4 %495 = OpConstantComposite %78 %78 %78 %78 
                                         i32 %502 = OpConstant 4 
                                             %548 = OpTypePointer Output %188 
                               Output f32_3* %549 = OpVariable Output 
                               Output f32_4* %552 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %85 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %30 = OpAccessChain %25 %27 %28 %13 
                                          f32 %31 = OpLoad %30 
                                          f32 %32 = OpFMul %16 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Uniform f32* %37 = OpAccessChain %25 %27 %36 %13 
                                          f32 %38 = OpLoad %37 
                                   Input f32* %39 = OpAccessChain %11 %33 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %33 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFAdd %41 %43 
                                 Private f32* %45 = OpAccessChain %9 %33 
                                                      OpStore %45 %44 
                                 Uniform f32* %47 = OpAccessChain %25 %27 %46 %13 
                                          f32 %48 = OpLoad %47 
                                   Input f32* %50 = OpAccessChain %11 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFMul %48 %51 
                                 Private f32* %53 = OpAccessChain %9 %33 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %52 %54 
                                 Private f32* %56 = OpAccessChain %9 %33 
                                                      OpStore %56 %55 
                                 Uniform f32* %58 = OpAccessChain %25 %27 %57 %13 
                                          f32 %59 = OpLoad %58 
                                   Input f32* %61 = OpAccessChain %11 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %9 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %9 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %9 %33 
                                          f32 %69 = OpLoad %68 
                                 Uniform f32* %70 = OpAccessChain %25 %27 %57 %13 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                          f32 %73 = OpFAdd %69 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %80 = OpAccessChain %25 %79 
                                          f32 %81 = OpLoad %80 
                                         bool %82 = OpFOrdLessThan %78 %81 
                                                      OpStore %77 %82 
                                         bool %86 = OpLoad %77 
                                                      OpSelectionMerge %88 None 
                                                      OpBranchConditional %86 %87 %90 
                                              %87 = OpLabel 
                                                      OpStore %85 %89 
                                                      OpBranch %88 
                                              %90 = OpLabel 
                                                      OpStore %85 %91 
                                                      OpBranch %88 
                                              %88 = OpLabel 
                                          f32 %92 = OpLoad %85 
                                                      OpStore %83 %92 
                                 Private f32* %93 = OpAccessChain %9 %33 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpLoad %83 
                                          f32 %96 = OpFMul %94 %95 
                                   Input f32* %97 = OpAccessChain %11 %49 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFAdd %96 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_4 %102 = OpLoad %11 
                                       f32_4 %103 = OpVectorShuffle %102 %102 1 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %25 %27 %28 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpFMul %103 %106 
                                                      OpStore %101 %107 
                              Uniform f32_4* %108 = OpAccessChain %25 %27 %36 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %11 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %101 
                                       f32_4 %114 = OpFAdd %112 %113 
                                                      OpStore %101 %114 
                              Uniform f32_4* %115 = OpAccessChain %25 %27 %46 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %117 0 0 0 0 
                                       f32_4 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %101 
                                       f32_4 %121 = OpFAdd %119 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                              Uniform f32_4* %123 = OpAccessChain %25 %27 %57 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpFAdd %122 %124 
                                                      OpStore %101 %125 
                              Uniform f32_4* %126 = OpAccessChain %25 %27 %57 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpLoad %11 
                                       f32_4 %129 = OpVectorShuffle %128 %128 3 3 3 3 
                                       f32_4 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpFAdd %130 %131 
                                                      OpStore %9 %132 
                                       f32_4 %134 = OpLoad %101 
                                       f32_4 %135 = OpVectorShuffle %134 %134 1 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %25 %136 %28 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpFMul %135 %138 
                                                      OpStore %133 %139 
                              Uniform f32_4* %140 = OpAccessChain %25 %136 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpLoad %101 
                                       f32_4 %143 = OpVectorShuffle %142 %142 0 0 0 0 
                                       f32_4 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %133 
                                       f32_4 %146 = OpFAdd %144 %145 
                                                      OpStore %133 %146 
                              Uniform f32_4* %147 = OpAccessChain %25 %136 %46 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpLoad %101 
                                       f32_4 %150 = OpVectorShuffle %149 %149 2 2 2 2 
                                       f32_4 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %133 
                                       f32_4 %153 = OpFAdd %151 %152 
                                                      OpStore %133 %153 
                              Uniform f32_4* %158 = OpAccessChain %25 %136 %57 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpLoad %101 
                                       f32_4 %161 = OpVectorShuffle %160 %160 3 3 3 3 
                                       f32_4 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %133 
                                       f32_4 %164 = OpFAdd %162 %163 
                               Output f32_4* %166 = OpAccessChain %157 %36 
                                                      OpStore %166 %164 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                              Uniform f32_4* %174 = OpAccessChain %25 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpFMul %172 %176 
                              Uniform f32_4* %178 = OpAccessChain %25 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_2 %181 = OpFAdd %177 %180 
                                                      OpStore %169 %181 
                                Private f32* %183 = OpAccessChain %9 %33 
                                         f32 %184 = OpLoad %183 
                                 Output f32* %186 = OpAccessChain %182 %60 
                                                      OpStore %186 %184 
                                       f32_4 %189 = OpLoad %187 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 1 1 
                              Uniform f32_4* %191 = OpAccessChain %25 %27 %28 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpFMul %190 %193 
                                       f32_4 %195 = OpLoad %101 
                                       f32_4 %196 = OpVectorShuffle %195 %194 4 5 6 3 
                                                      OpStore %101 %196 
                              Uniform f32_4* %197 = OpAccessChain %25 %27 %36 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 1 2 0 
                                       f32_4 %200 = OpLoad %187 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %101 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFAdd %202 %204 
                                       f32_4 %206 = OpLoad %101 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %101 %207 
                              Uniform f32_4* %208 = OpAccessChain %25 %27 %46 
                                       f32_4 %209 = OpLoad %208 
                                       f32_3 %210 = OpVectorShuffle %209 %209 1 2 0 
                                       f32_4 %211 = OpLoad %187 
                                       f32_3 %212 = OpVectorShuffle %211 %211 2 2 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %101 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFAdd %213 %215 
                                       f32_4 %217 = OpLoad %101 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %101 %218 
                                       f32_4 %220 = OpLoad %101 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_4 %222 = OpLoad %101 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                         f32 %224 = OpDot %221 %223 
                                                      OpStore %219 %224 
                                         f32 %225 = OpLoad %219 
                                         f32 %226 = OpExtInst %1 32 %225 
                                                      OpStore %219 %226 
                                         f32 %227 = OpLoad %219 
                                       f32_3 %228 = OpCompositeConstruct %227 %227 %227 
                                       f32_4 %229 = OpLoad %101 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %101 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %101 %233 
                                Private f32* %234 = OpAccessChain %101 %49 
                                         f32 %235 = OpLoad %234 
                                 Output f32* %236 = OpAccessChain %182 %33 
                                                      OpStore %236 %235 
                                  Input f32* %237 = OpAccessChain %187 %60 
                                         f32 %238 = OpLoad %237 
                                Uniform f32* %240 = OpAccessChain %25 %239 %60 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %238 %241 
                                                      OpStore %219 %242 
                                       f32_3 %245 = OpLoad %244 
                              Uniform f32_4* %247 = OpAccessChain %25 %246 %36 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                         f32 %250 = OpDot %245 %249 
                                Private f32* %251 = OpAccessChain %133 %33 
                                                      OpStore %251 %250 
                                       f32_3 %252 = OpLoad %244 
                              Uniform f32_4* %253 = OpAccessChain %25 %246 %28 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                         f32 %256 = OpDot %252 %255 
                                Private f32* %257 = OpAccessChain %133 %13 
                                                      OpStore %257 %256 
                                       f32_3 %258 = OpLoad %244 
                              Uniform f32_4* %259 = OpAccessChain %25 %246 %46 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                         f32 %262 = OpDot %258 %261 
                                Private f32* %263 = OpAccessChain %133 %49 
                                                      OpStore %263 %262 
                                       f32_4 %265 = OpLoad %133 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %133 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                         f32 %269 = OpDot %266 %268 
                                                      OpStore %264 %269 
                                         f32 %270 = OpLoad %264 
                                         f32 %271 = OpExtInst %1 32 %270 
                                                      OpStore %264 %271 
                                         f32 %272 = OpLoad %264 
                                       f32_3 %273 = OpCompositeConstruct %272 %272 %272 
                                       f32_4 %274 = OpLoad %133 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_4 %277 = OpLoad %133 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 6 3 
                                                      OpStore %133 %278 
                                       f32_4 %281 = OpLoad %101 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_4 %283 = OpLoad %133 
                                       f32_3 %284 = OpVectorShuffle %283 %283 2 0 1 
                                       f32_3 %285 = OpFMul %282 %284 
                                                      OpStore %280 %285 
                                       f32_4 %286 = OpLoad %133 
                                       f32_3 %287 = OpVectorShuffle %286 %286 1 2 0 
                                       f32_4 %288 = OpLoad %101 
                                       f32_3 %289 = OpVectorShuffle %288 %288 1 2 0 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_3 %291 = OpLoad %280 
                                       f32_3 %292 = OpFNegate %291 
                                       f32_3 %293 = OpFAdd %290 %292 
                                                      OpStore %280 %293 
                                         f32 %294 = OpLoad %219 
                                       f32_3 %295 = OpCompositeConstruct %294 %294 %294 
                                       f32_3 %296 = OpLoad %280 
                                       f32_3 %297 = OpFMul %295 %296 
                                                      OpStore %280 %297 
                                Private f32* %298 = OpAccessChain %280 %33 
                                         f32 %299 = OpLoad %298 
                                 Output f32* %300 = OpAccessChain %182 %13 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %133 %33 
                                         f32 %302 = OpLoad %301 
                                 Output f32* %303 = OpAccessChain %182 %49 
                                                      OpStore %303 %302 
                                Private f32* %305 = OpAccessChain %101 %33 
                                         f32 %306 = OpLoad %305 
                                 Output f32* %307 = OpAccessChain %304 %33 
                                                      OpStore %307 %306 
                                Private f32* %309 = OpAccessChain %101 %13 
                                         f32 %310 = OpLoad %309 
                                 Output f32* %311 = OpAccessChain %308 %33 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %9 %13 
                                         f32 %313 = OpLoad %312 
                                 Output f32* %314 = OpAccessChain %304 %60 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %280 %13 
                                         f32 %316 = OpLoad %315 
                                 Output f32* %317 = OpAccessChain %304 %13 
                                                      OpStore %317 %316 
                                Private f32* %318 = OpAccessChain %280 %49 
                                         f32 %319 = OpLoad %318 
                                 Output f32* %320 = OpAccessChain %308 %13 
                                                      OpStore %320 %319 
                                Private f32* %321 = OpAccessChain %133 %13 
                                         f32 %322 = OpLoad %321 
                                 Output f32* %323 = OpAccessChain %304 %49 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %9 %49 
                                         f32 %325 = OpLoad %324 
                                 Output f32* %326 = OpAccessChain %308 %60 
                                                      OpStore %326 %325 
                                Private f32* %327 = OpAccessChain %133 %49 
                                         f32 %328 = OpLoad %327 
                                 Output f32* %329 = OpAccessChain %308 %49 
                                                      OpStore %329 %328 
                                       f32_4 %331 = OpLoad %9 
                                                      OpStore %330 %331 
                              Uniform f32_4* %333 = OpAccessChain %25 %27 %57 
                                       f32_4 %334 = OpLoad %333 
                                                      OpStore %332 %334 
                                Private f32* %336 = OpAccessChain %133 %13 
                                         f32 %337 = OpLoad %336 
                                Private f32* %338 = OpAccessChain %133 %13 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %337 %339 
                                Private f32* %341 = OpAccessChain %335 %33 
                                                      OpStore %341 %340 
                                Private f32* %342 = OpAccessChain %133 %33 
                                         f32 %343 = OpLoad %342 
                                Private f32* %344 = OpAccessChain %133 %33 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFMul %343 %345 
                                Private f32* %347 = OpAccessChain %335 %33 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFNegate %348 
                                         f32 %350 = OpFAdd %346 %349 
                                Private f32* %351 = OpAccessChain %335 %33 
                                                      OpStore %351 %350 
                                       f32_4 %353 = OpLoad %133 
                                       f32_4 %354 = OpVectorShuffle %353 %353 1 2 2 0 
                                       f32_4 %355 = OpLoad %133 
                                       f32_4 %356 = OpVectorShuffle %355 %355 0 1 2 2 
                                       f32_4 %357 = OpFMul %354 %356 
                                                      OpStore %352 %357 
                              Uniform f32_4* %360 = OpAccessChain %25 %359 
                                       f32_4 %361 = OpLoad %360 
                                       f32_4 %362 = OpLoad %352 
                                         f32 %363 = OpDot %361 %362 
                                Private f32* %364 = OpAccessChain %358 %33 
                                                      OpStore %364 %363 
                              Uniform f32_4* %366 = OpAccessChain %25 %365 
                                       f32_4 %367 = OpLoad %366 
                                       f32_4 %368 = OpLoad %352 
                                         f32 %369 = OpDot %367 %368 
                                Private f32* %370 = OpAccessChain %358 %13 
                                                      OpStore %370 %369 
                              Uniform f32_4* %372 = OpAccessChain %25 %371 
                                       f32_4 %373 = OpLoad %372 
                                       f32_4 %374 = OpLoad %352 
                                         f32 %375 = OpDot %373 %374 
                                Private f32* %376 = OpAccessChain %358 %49 
                                                      OpStore %376 %375 
                              Uniform f32_4* %378 = OpAccessChain %25 %377 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpLoad %335 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 0 0 
                                       f32_3 %383 = OpFMul %380 %382 
                                       f32_3 %384 = OpLoad %358 
                                       f32_3 %385 = OpFAdd %383 %384 
                                                      OpStore %335 %385 
                                Private f32* %386 = OpAccessChain %133 %60 
                                                      OpStore %386 %91 
                              Uniform f32_4* %388 = OpAccessChain %25 %387 
                                       f32_4 %389 = OpLoad %388 
                                       f32_4 %390 = OpLoad %133 
                                         f32 %391 = OpDot %389 %390 
                                Private f32* %392 = OpAccessChain %358 %33 
                                                      OpStore %392 %391 
                              Uniform f32_4* %394 = OpAccessChain %25 %393 
                                       f32_4 %395 = OpLoad %394 
                                       f32_4 %396 = OpLoad %133 
                                         f32 %397 = OpDot %395 %396 
                                Private f32* %398 = OpAccessChain %358 %13 
                                                      OpStore %398 %397 
                              Uniform f32_4* %400 = OpAccessChain %25 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_4 %402 = OpLoad %133 
                                         f32 %403 = OpDot %401 %402 
                                Private f32* %404 = OpAccessChain %358 %49 
                                                      OpStore %404 %403 
                                       f32_3 %405 = OpLoad %335 
                                       f32_3 %406 = OpLoad %358 
                                       f32_3 %407 = OpFAdd %405 %406 
                                                      OpStore %335 %407 
                                       f32_3 %408 = OpLoad %335 
                                       f32_3 %410 = OpExtInst %1 40 %408 %409 
                                                      OpStore %335 %410 
                                       f32_3 %411 = OpLoad %335 
                                       f32_3 %412 = OpExtInst %1 30 %411 
                                                      OpStore %280 %412 
                                       f32_3 %413 = OpLoad %280 
                                       f32_3 %416 = OpFMul %413 %415 
                                                      OpStore %280 %416 
                                       f32_3 %417 = OpLoad %280 
                                       f32_3 %418 = OpExtInst %1 29 %417 
                                                      OpStore %280 %418 
                                       f32_3 %419 = OpLoad %280 
                                       f32_3 %422 = OpFMul %419 %421 
                                       f32_3 %425 = OpFAdd %422 %424 
                                                      OpStore %280 %425 
                                       f32_3 %426 = OpLoad %280 
                                       f32_3 %427 = OpExtInst %1 40 %426 %409 
                                                      OpStore %280 %427 
                                       f32_4 %428 = OpLoad %9 
                                       f32_4 %429 = OpVectorShuffle %428 %428 1 1 1 1 
                                       f32_4 %430 = OpFNegate %429 
                              Uniform f32_4* %431 = OpAccessChain %25 %28 
                                       f32_4 %432 = OpLoad %431 
                                       f32_4 %433 = OpFAdd %430 %432 
                                                      OpStore %101 %433 
                                       f32_4 %435 = OpLoad %133 
                                       f32_4 %436 = OpVectorShuffle %435 %435 1 1 1 1 
                                       f32_4 %437 = OpLoad %101 
                                       f32_4 %438 = OpFMul %436 %437 
                                                      OpStore %434 %438 
                                       f32_4 %439 = OpLoad %101 
                                       f32_4 %440 = OpLoad %101 
                                       f32_4 %441 = OpFMul %439 %440 
                                                      OpStore %101 %441 
                                       f32_4 %443 = OpLoad %9 
                                       f32_4 %444 = OpVectorShuffle %443 %443 0 0 0 0 
                                       f32_4 %445 = OpFNegate %444 
                              Uniform f32_4* %446 = OpAccessChain %25 %36 
                                       f32_4 %447 = OpLoad %446 
                                       f32_4 %448 = OpFAdd %445 %447 
                                                      OpStore %442 %448 
                                       f32_4 %449 = OpLoad %9 
                                       f32_4 %450 = OpVectorShuffle %449 %449 2 2 2 2 
                                       f32_4 %451 = OpFNegate %450 
                              Uniform f32_4* %452 = OpAccessChain %25 %46 
                                       f32_4 %453 = OpLoad %452 
                                       f32_4 %454 = OpFAdd %451 %453 
                                                      OpStore %9 %454 
                                       f32_4 %455 = OpLoad %442 
                                       f32_4 %456 = OpLoad %133 
                                       f32_4 %457 = OpVectorShuffle %456 %456 0 0 0 0 
                                       f32_4 %458 = OpFMul %455 %457 
                                       f32_4 %459 = OpLoad %434 
                                       f32_4 %460 = OpFAdd %458 %459 
                                                      OpStore %434 %460 
                                       f32_4 %461 = OpLoad %442 
                                       f32_4 %462 = OpLoad %442 
                                       f32_4 %463 = OpFMul %461 %462 
                                       f32_4 %464 = OpLoad %101 
                                       f32_4 %465 = OpFAdd %463 %464 
                                                      OpStore %101 %465 
                                       f32_4 %466 = OpLoad %9 
                                       f32_4 %467 = OpLoad %9 
                                       f32_4 %468 = OpFMul %466 %467 
                                       f32_4 %469 = OpLoad %101 
                                       f32_4 %470 = OpFAdd %468 %469 
                                                      OpStore %101 %470 
                                       f32_4 %471 = OpLoad %9 
                                       f32_4 %472 = OpLoad %133 
                                       f32_4 %473 = OpVectorShuffle %472 %472 2 2 2 2 
                                       f32_4 %474 = OpFMul %471 %473 
                                       f32_4 %475 = OpLoad %434 
                                       f32_4 %476 = OpFAdd %474 %475 
                                                      OpStore %9 %476 
                                       f32_4 %477 = OpLoad %101 
                                       f32_4 %480 = OpExtInst %1 40 %477 %479 
                                                      OpStore %101 %480 
                                       f32_4 %481 = OpLoad %101 
                                       f32_4 %482 = OpExtInst %1 32 %481 
                                                      OpStore %133 %482 
                                       f32_4 %483 = OpLoad %101 
                              Uniform f32_4* %484 = OpAccessChain %25 %57 
                                       f32_4 %485 = OpLoad %484 
                                       f32_4 %486 = OpFMul %483 %485 
                                       f32_4 %488 = OpFAdd %486 %487 
                                                      OpStore %101 %488 
                                       f32_4 %489 = OpLoad %101 
                                       f32_4 %490 = OpFDiv %487 %489 
                                                      OpStore %101 %490 
                                       f32_4 %491 = OpLoad %9 
                                       f32_4 %492 = OpLoad %133 
                                       f32_4 %493 = OpFMul %491 %492 
                                                      OpStore %9 %493 
                                       f32_4 %494 = OpLoad %9 
                                       f32_4 %496 = OpExtInst %1 40 %494 %495 
                                                      OpStore %9 %496 
                                       f32_4 %497 = OpLoad %101 
                                       f32_4 %498 = OpLoad %9 
                                       f32_4 %499 = OpFMul %497 %498 
                                                      OpStore %9 %499 
                                       f32_4 %500 = OpLoad %9 
                                       f32_3 %501 = OpVectorShuffle %500 %500 1 1 1 
                              Uniform f32_4* %503 = OpAccessChain %25 %502 %28 
                                       f32_4 %504 = OpLoad %503 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                                       f32_3 %506 = OpFMul %501 %505 
                                       f32_4 %507 = OpLoad %133 
                                       f32_4 %508 = OpVectorShuffle %507 %506 4 5 6 3 
                                                      OpStore %133 %508 
                              Uniform f32_4* %509 = OpAccessChain %25 %502 %36 
                                       f32_4 %510 = OpLoad %509 
                                       f32_3 %511 = OpVectorShuffle %510 %510 0 1 2 
                                       f32_4 %512 = OpLoad %9 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 0 0 
                                       f32_3 %514 = OpFMul %511 %513 
                                       f32_4 %515 = OpLoad %133 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFAdd %514 %516 
                                       f32_4 %518 = OpLoad %133 
                                       f32_4 %519 = OpVectorShuffle %518 %517 4 5 6 3 
                                                      OpStore %133 %519 
                              Uniform f32_4* %520 = OpAccessChain %25 %502 %46 
                                       f32_4 %521 = OpLoad %520 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_4 %523 = OpLoad %9 
                                       f32_3 %524 = OpVectorShuffle %523 %523 2 2 2 
                                       f32_3 %525 = OpFMul %522 %524 
                                       f32_4 %526 = OpLoad %133 
                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
                                       f32_3 %528 = OpFAdd %525 %527 
                                       f32_4 %529 = OpLoad %9 
                                       f32_4 %530 = OpVectorShuffle %529 %528 4 5 6 3 
                                                      OpStore %9 %530 
                              Uniform f32_4* %531 = OpAccessChain %25 %502 %57 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
                                       f32_4 %534 = OpLoad %9 
                                       f32_3 %535 = OpVectorShuffle %534 %534 3 3 3 
                                       f32_3 %536 = OpFMul %533 %535 
                                       f32_4 %537 = OpLoad %9 
                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 2 
                                       f32_3 %539 = OpFAdd %536 %538 
                                       f32_4 %540 = OpLoad %9 
                                       f32_4 %541 = OpVectorShuffle %540 %539 4 5 6 3 
                                                      OpStore %9 %541 
                                       f32_4 %542 = OpLoad %9 
                                       f32_3 %543 = OpVectorShuffle %542 %542 0 1 2 
                                       f32_3 %544 = OpLoad %280 
                                       f32_3 %545 = OpFAdd %543 %544 
                                       f32_4 %546 = OpLoad %9 
                                       f32_4 %547 = OpVectorShuffle %546 %545 4 5 6 3 
                                                      OpStore %9 %547 
                                       f32_4 %550 = OpLoad %9 
                                       f32_3 %551 = OpVectorShuffle %550 %550 0 1 2 
                                                      OpStore %549 %551 
                                                      OpStore %552 %495 
                                 Output f32* %553 = OpAccessChain %157 %36 %13 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpFNegate %554 
                                 Output f32* %556 = OpAccessChain %157 %36 %13 
                                                      OpStore %556 %555 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 456
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %63 %148 %151 %371 %451 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %26 Location 26 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 RelaxedPrecision 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 RelaxedPrecision 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpMemberDecorate %36 7 Offset 36 
                                                      OpMemberDecorate %36 8 RelaxedPrecision 
                                                      OpMemberDecorate %36 8 Offset 36 
                                                      OpMemberDecorate %36 9 Offset 36 
                                                      OpMemberDecorate %36 10 RelaxedPrecision 
                                                      OpMemberDecorate %36 10 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %63 Location 63 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %233 SpecId 233 
                                                      OpDecorate %323 DescriptorSet 323 
                                                      OpDecorate %323 Binding 323 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %371 Location 371 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %451 Location 451 
                                                      OpDecorate %453 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeInt 32 0 
                                          u32 %14 = OpConstant 3 
                                              %15 = OpTypePointer Input %6 
                                          u32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Private %6 
                                 Input f32_4* %21 = OpVariable Input 
                                          u32 %24 = OpConstant 1 
                                 Input f32_4* %26 = OpVariable Input 
                                          u32 %29 = OpConstant 2 
                               Private f32_3* %31 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %10 %34 
                                              %36 = OpTypeStruct %10 %7 %10 %10 %10 %35 %7 %7 %10 %10 %6 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %7 
                                              %45 = OpTypePointer Private %10 
                               Private f32_4* %46 = OpVariable Private 
                               Private f32_4* %55 = OpVariable Private 
                                              %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %57 = OpTypeSampledImage %56 
                                              %58 = OpTypePointer UniformConstant %57 
  UniformConstant read_only Texture2DSampled* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeVector %6 2 
                                              %62 = OpTypePointer Input %61 
                                 Input f32_2* %63 = OpVariable Input 
                               Private f32_3* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %77 = OpConstant 3.674022E-40 
                                          i32 %80 = OpConstant 0 
                                          i32 %82 = OpConstant -1 
                                          f32 %90 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                        f32_3 %93 = OpConstantComposite %90 %91 %92 
                               Private f32_4* %96 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_3 %100 = OpConstantComposite %77 %77 %99 
                                         f32 %118 = OpConstant 3.674022E-40 
                                       f32_2 %119 = OpConstantComposite %118 %118 
                                Private f32* %123 = OpVariable Private 
                                         f32 %130 = OpConstant 3.674022E-40 
                                Private f32* %138 = OpVariable Private 
                                             %139 = OpTypePointer Uniform %6 
                                Private f32* %143 = OpVariable Private 
                                         f32 %145 = OpConstant 3.674022E-40 
                              Private f32_3* %147 = OpVariable Private 
                                Input f32_4* %148 = OpVariable Input 
                                Input f32_4* %151 = OpVariable Input 
                                         f32 %172 = OpConstant 3.674022E-40 
                               Private bool* %180 = OpVariable Private 
                                         f32 %187 = OpConstant 3.674022E-40 
                              Private f32_3* %196 = OpVariable Private 
                                             %197 = OpTypePointer Function %7 
                                       f32_3 %202 = OpConstantComposite %130 %130 %130 
                                         i32 %209 = OpConstant 10 
                                         i32 %223 = OpConstant 4 
                                        bool %227 = OpConstantFalse 
                                        bool %233 = OpSpecConstantFalse 
                                         i32 %241 = OpConstant 5 
                                             %242 = OpTypePointer Uniform %10 
                                         i32 %260 = OpConstant 2 
                                         i32 %274 = OpConstant 3 
                                         i32 %291 = OpConstant 7 
                                         i32 %297 = OpConstant 6 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                Private f32* %310 = OpVariable Private 
                                             %320 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %321 = OpTypeSampledImage %320 
                                             %322 = OpTypePointer UniformConstant %321 
 UniformConstant read_only Texture3DSampled* %323 = OpVariable UniformConstant 
                              Private f32_4* %328 = OpVariable Private 
                                             %370 = OpTypePointer Input %7 
                                Input f32_3* %371 = OpVariable Input 
                                Private f32* %384 = OpVariable Private 
                              Private f32_3* %402 = OpVariable Private 
                                         f32 %409 = OpConstant 3.674022E-40 
                                         i32 %418 = OpConstant 8 
                                         i32 %438 = OpConstant 9 
                                             %450 = OpTypePointer Output %10 
                               Output f32_4* %451 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %198 = OpVariable Function 
                             Function f32_3* %281 = OpVariable Function 
                                   Input f32* %16 = OpAccessChain %12 %14 
                                          f32 %17 = OpLoad %16 
                                 Private f32* %20 = OpAccessChain %9 %18 
                                                      OpStore %20 %17 
                                   Input f32* %22 = OpAccessChain %21 %14 
                                          f32 %23 = OpLoad %22 
                                 Private f32* %25 = OpAccessChain %9 %24 
                                                      OpStore %25 %23 
                                   Input f32* %27 = OpAccessChain %26 %14 
                                          f32 %28 = OpLoad %27 
                                 Private f32* %30 = OpAccessChain %9 %29 
                                                      OpStore %30 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpFNegate %32 
                               Uniform f32_3* %42 = OpAccessChain %38 %40 
                                        f32_3 %43 = OpLoad %42 
                                        f32_3 %44 = OpFAdd %33 %43 
                                                      OpStore %31 %44 
                                        f32_3 %47 = OpLoad %31 
                                        f32_3 %48 = OpLoad %31 
                                          f32 %49 = OpDot %47 %48 
                                 Private f32* %50 = OpAccessChain %46 %18 
                                                      OpStore %50 %49 
                                 Private f32* %51 = OpAccessChain %46 %18 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpExtInst %1 32 %52 
                                 Private f32* %54 = OpAccessChain %46 %18 
                                                      OpStore %54 %53 
                   read_only Texture2DSampled %60 = OpLoad %59 
                                        f32_2 %64 = OpLoad %63 
                                        f32_4 %65 = OpImageSampleImplicitLod %60 %64 
                                                      OpStore %55 %65 
                                 Private f32* %67 = OpAccessChain %55 %14 
                                          f32 %68 = OpLoad %67 
                                          f32 %70 = OpFAdd %68 %69 
                                 Private f32* %71 = OpAccessChain %66 %18 
                                                      OpStore %71 %70 
                                 Private f32* %75 = OpAccessChain %66 %18 
                                          f32 %76 = OpLoad %75 
                                         bool %78 = OpFOrdLessThan %76 %77 
                                                      OpStore %74 %78 
                                         bool %79 = OpLoad %74 
                                          i32 %81 = OpSelect %79 %40 %80 
                                          i32 %83 = OpIMul %81 %82 
                                         bool %84 = OpINotEqual %83 %80 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %86 
                                              %85 = OpLabel 
                                                      OpKill
                                              %86 = OpLabel 
                                        f32_4 %88 = OpLoad %55 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                          f32 %94 = OpDot %89 %93 
                                 Private f32* %95 = OpAccessChain %66 %18 
                                                      OpStore %95 %94 
                                        f32_3 %97 = OpLoad %66 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %96 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 6 3 
                                                      OpStore %96 %103 
                                       f32_4 %104 = OpLoad %96 
                                       f32_2 %105 = OpVectorShuffle %104 %104 1 1 
                                       f32_4 %106 = OpLoad %55 
                                       f32_2 %107 = OpVectorShuffle %106 %106 3 3 
                                         f32 %108 = OpDot %105 %107 
                                Private f32* %109 = OpAccessChain %66 %18 
                                                      OpStore %109 %108 
                                Private f32* %110 = OpAccessChain %96 %24 
                                         f32 %111 = OpLoad %110 
                                Private f32* %112 = OpAccessChain %96 %24 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFAdd %111 %113 
                                Private f32* %115 = OpAccessChain %66 %24 
                                                      OpStore %115 %114 
                                       f32_3 %116 = OpLoad %66 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                                       f32_2 %120 = OpFAdd %117 %119 
                                       f32_3 %121 = OpLoad %66 
                                       f32_3 %122 = OpVectorShuffle %121 %120 3 4 2 
                                                      OpStore %66 %122 
                                       f32_3 %124 = OpLoad %66 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_3 %126 = OpLoad %66 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                         f32 %128 = OpDot %125 %127 
                                                      OpStore %123 %128 
                                         f32 %129 = OpLoad %123 
                                         f32 %131 = OpExtInst %1 37 %129 %130 
                                                      OpStore %123 %131 
                                         f32 %132 = OpLoad %123 
                                         f32 %133 = OpFNegate %132 
                                         f32 %134 = OpFAdd %133 %130 
                                                      OpStore %123 %134 
                                         f32 %135 = OpLoad %123 
                                         f32 %136 = OpExtInst %1 31 %135 
                                Private f32* %137 = OpAccessChain %66 %29 
                                                      OpStore %137 %136 
                                Uniform f32* %140 = OpAccessChain %38 %80 %24 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpExtInst %1 10 %141 
                                                      OpStore %138 %142 
                                         f32 %144 = OpLoad %138 
                                         f32 %146 = OpFMul %144 %145 
                                                      OpStore %143 %146 
                                  Input f32* %149 = OpAccessChain %148 %18 
                                         f32 %150 = OpLoad %149 
                                  Input f32* %152 = OpAccessChain %151 %18 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                         f32 %155 = OpFAdd %150 %154 
                                Private f32* %156 = OpAccessChain %147 %18 
                                                      OpStore %156 %155 
                                Private f32* %157 = OpAccessChain %147 %18 
                                         f32 %158 = OpLoad %157 
                                  Input f32* %159 = OpAccessChain %148 %24 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %147 %18 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %147 %18 
                                         f32 %164 = OpLoad %163 
                                  Input f32* %165 = OpAccessChain %151 %24 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %164 %167 
                                Private f32* %169 = OpAccessChain %147 %18 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %147 %18 
                                         f32 %171 = OpLoad %170 
                                         f32 %173 = OpFMul %171 %172 
                                         f32 %174 = OpFAdd %173 %69 
                                Private f32* %175 = OpAccessChain %147 %18 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %147 %18 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpExtInst %1 10 %177 
                                Private f32* %179 = OpAccessChain %147 %18 
                                                      OpStore %179 %178 
                                         f32 %181 = OpLoad %143 
                                Private f32* %182 = OpAccessChain %147 %18 
                                         f32 %183 = OpLoad %182 
                                        bool %184 = OpFOrdLessThan %181 %183 
                                                      OpStore %180 %184 
                                         f32 %185 = OpLoad %138 
                                         f32 %186 = OpFMul %185 %145 
                                         f32 %188 = OpFAdd %186 %187 
                                                      OpStore %138 %188 
                                Private f32* %189 = OpAccessChain %147 %18 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpLoad %138 
                                        bool %192 = OpFOrdLessThan %190 %191 
                                                      OpStore %74 %192 
                                        bool %193 = OpLoad %74 
                                        bool %194 = OpLoad %180 
                                        bool %195 = OpLogicalAnd %193 %194 
                                                      OpStore %74 %195 
                                        bool %199 = OpLoad %74 
                                                      OpSelectionMerge %201 None 
                                                      OpBranchConditional %199 %200 %203 
                                             %200 = OpLabel 
                                                      OpStore %198 %202 
                                                      OpBranch %201 
                                             %203 = OpLabel 
                                       f32_4 %204 = OpLoad %96 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                                      OpStore %198 %205 
                                                      OpBranch %201 
                                             %201 = OpLabel 
                                       f32_3 %206 = OpLoad %198 
                                                      OpStore %196 %206 
                                Private f32* %207 = OpAccessChain %55 %14 
                                         f32 %208 = OpLoad %207 
                                Uniform f32* %210 = OpAccessChain %38 %209 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFNegate %211 
                                         f32 %213 = OpFAdd %208 %212 
                                                      OpStore %123 %213 
                                         f32 %214 = OpLoad %123 
                                        bool %215 = OpFOrdLessThan %214 %77 
                                                      OpStore %74 %215 
                                        bool %216 = OpLoad %74 
                                         i32 %217 = OpSelect %216 %40 %80 
                                         i32 %218 = OpIMul %217 %82 
                                        bool %219 = OpINotEqual %218 %80 
                                                      OpSelectionMerge %221 None 
                                                      OpBranchConditional %219 %220 %221 
                                             %220 = OpLabel 
                                                      OpKill
                                             %221 = OpLabel 
                                Uniform f32* %224 = OpAccessChain %38 %223 %18 
                                         f32 %225 = OpLoad %224 
                                        bool %226 = OpFOrdEqual %225 %130 
                                                      OpStore %74 %226 
                                                      OpSelectionMerge %229 None 
                                                      OpBranchConditional %227 %228 %229 
                                             %228 = OpLabel 
                                        bool %230 = OpLoad %74 
                                                      OpSelectionMerge %232 None 
                                                      OpBranchConditional %230 %231 %232 
                                             %231 = OpLabel 
                                                      OpBranch %232 
                                             %232 = OpLabel 
                                                      OpBranch %229 
                                             %229 = OpLabel 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %233 %234 %330 
                                             %234 = OpLabel 
                                Uniform f32* %236 = OpAccessChain %38 %223 %24 
                                         f32 %237 = OpLoad %236 
                                        bool %238 = OpFOrdEqual %237 %130 
                                                      OpStore %74 %238 
                                       f32_4 %239 = OpLoad %21 
                                       f32_3 %240 = OpVectorShuffle %239 %239 3 3 3 
                              Uniform f32_4* %243 = OpAccessChain %38 %241 %40 
                                       f32_4 %244 = OpLoad %243 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_3 %246 = OpFMul %240 %245 
                                       f32_4 %247 = OpLoad %96 
                                       f32_4 %248 = OpVectorShuffle %247 %246 4 5 6 3 
                                                      OpStore %96 %248 
                              Uniform f32_4* %249 = OpAccessChain %38 %241 %80 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %12 
                                       f32_3 %253 = OpVectorShuffle %252 %252 3 3 3 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %96 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %254 %256 
                                       f32_4 %258 = OpLoad %96 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %96 %259 
                              Uniform f32_4* %261 = OpAccessChain %38 %241 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %26 
                                       f32_3 %265 = OpVectorShuffle %264 %264 3 3 3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %96 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %266 %268 
                                       f32_4 %270 = OpLoad %96 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %96 %271 
                                       f32_4 %272 = OpLoad %96 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_4* %275 = OpAccessChain %38 %241 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %273 %277 
                                       f32_4 %279 = OpLoad %96 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %96 %280 
                                        bool %282 = OpLoad %74 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %287 
                                             %283 = OpLabel 
                                       f32_4 %285 = OpLoad %96 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                                      OpStore %281 %286 
                                                      OpBranch %284 
                                             %287 = OpLabel 
                                       f32_3 %288 = OpLoad %9 
                                                      OpStore %281 %288 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                       f32_3 %289 = OpLoad %281 
                                                      OpStore %9 %289 
                                       f32_3 %290 = OpLoad %9 
                              Uniform f32_3* %292 = OpAccessChain %38 %291 
                                       f32_3 %293 = OpLoad %292 
                                       f32_3 %294 = OpFNegate %293 
                                       f32_3 %295 = OpFAdd %290 %294 
                                                      OpStore %9 %295 
                                       f32_3 %296 = OpLoad %9 
                              Uniform f32_3* %298 = OpAccessChain %38 %297 
                                       f32_3 %299 = OpLoad %298 
                                       f32_3 %300 = OpFMul %296 %299 
                                       f32_4 %301 = OpLoad %96 
                                       f32_4 %302 = OpVectorShuffle %301 %300 0 4 5 6 
                                                      OpStore %96 %302 
                                Private f32* %303 = OpAccessChain %96 %24 
                                         f32 %304 = OpLoad %303 
                                         f32 %306 = OpFMul %304 %305 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %309 = OpAccessChain %9 %18 
                                                      OpStore %309 %308 
                                Uniform f32* %311 = OpAccessChain %38 %223 %29 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %312 %172 
                                         f32 %314 = OpFAdd %313 %307 
                                                      OpStore %310 %314 
                                         f32 %315 = OpLoad %310 
                                Private f32* %316 = OpAccessChain %9 %18 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpExtInst %1 40 %315 %317 
                                Private f32* %319 = OpAccessChain %96 %18 
                                                      OpStore %319 %318 
                  read_only Texture3DSampled %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %96 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 2 3 
                                       f32_4 %327 = OpImageSampleImplicitLod %324 %326 
                                                      OpStore %96 %327 
                                       f32_4 %329 = OpLoad %96 
                                                      OpStore %328 %329 
                                                      OpBranch %235 
                                             %330 = OpLabel 
                                Private f32* %331 = OpAccessChain %328 %18 
                                                      OpStore %331 %130 
                                Private f32* %332 = OpAccessChain %328 %24 
                                                      OpStore %332 %130 
                                Private f32* %333 = OpAccessChain %328 %29 
                                                      OpStore %333 %130 
                                Private f32* %334 = OpAccessChain %328 %14 
                                                      OpStore %334 %130 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                       f32_4 %335 = OpLoad %328 
                              Uniform f32_4* %336 = OpAccessChain %38 %274 
                                       f32_4 %337 = OpLoad %336 
                                         f32 %338 = OpDot %335 %337 
                                                      OpStore %123 %338 
                                         f32 %339 = OpLoad %123 
                                         f32 %340 = OpExtInst %1 43 %339 %77 %130 
                                                      OpStore %123 %340 
                                       f32_4 %341 = OpLoad %12 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpLoad %66 
                                         f32 %344 = OpDot %342 %343 
                                Private f32* %345 = OpAccessChain %147 %18 
                                                      OpStore %345 %344 
                                       f32_4 %346 = OpLoad %21 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpLoad %66 
                                         f32 %349 = OpDot %347 %348 
                                Private f32* %350 = OpAccessChain %147 %24 
                                                      OpStore %350 %349 
                                       f32_4 %351 = OpLoad %26 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpLoad %66 
                                         f32 %354 = OpDot %352 %353 
                                Private f32* %355 = OpAccessChain %147 %29 
                                                      OpStore %355 %354 
                                       f32_3 %356 = OpLoad %147 
                                       f32_3 %357 = OpLoad %147 
                                         f32 %358 = OpDot %356 %357 
                                Private f32* %359 = OpAccessChain %9 %18 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %9 %18 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpExtInst %1 32 %361 
                                Private f32* %363 = OpAccessChain %9 %18 
                                                      OpStore %363 %362 
                                       f32_3 %364 = OpLoad %9 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 0 0 
                                       f32_3 %366 = OpLoad %147 
                                       f32_3 %367 = OpFMul %365 %366 
                                                      OpStore %9 %367 
                                       f32_3 %368 = OpLoad %196 
                                       f32_3 %369 = OpVectorShuffle %368 %368 1 1 2 
                                       f32_3 %372 = OpLoad %371 
                                       f32_3 %373 = OpFMul %369 %372 
                                       f32_4 %374 = OpLoad %328 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %328 %375 
                                       f32_3 %376 = OpLoad %31 
                                       f32_4 %377 = OpLoad %46 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 0 0 
                                       f32_3 %379 = OpFMul %376 %378 
                              Uniform f32_4* %380 = OpAccessChain %38 %260 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %379 %382 
                                                      OpStore %66 %383 
                                       f32_3 %385 = OpLoad %66 
                                       f32_3 %386 = OpLoad %66 
                                         f32 %387 = OpDot %385 %386 
                                                      OpStore %384 %387 
                                         f32 %388 = OpLoad %384 
                                         f32 %389 = OpExtInst %1 32 %388 
                                                      OpStore %384 %389 
                                       f32_3 %390 = OpLoad %66 
                                         f32 %391 = OpLoad %384 
                                       f32_3 %392 = OpCompositeConstruct %391 %391 %391 
                                       f32_3 %393 = OpFMul %390 %392 
                                                      OpStore %66 %393 
                                       f32_3 %394 = OpLoad %9 
                                       f32_3 %395 = OpLoad %66 
                                         f32 %396 = OpDot %394 %395 
                                Private f32* %397 = OpAccessChain %66 %18 
                                                      OpStore %397 %396 
                                Private f32* %398 = OpAccessChain %66 %18 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpExtInst %1 40 %399 %77 
                                Private f32* %401 = OpAccessChain %66 %18 
                                                      OpStore %401 %400 
                                Private f32* %403 = OpAccessChain %66 %18 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpExtInst %1 30 %404 
                                Private f32* %406 = OpAccessChain %402 %18 
                                                      OpStore %406 %405 
                                Private f32* %407 = OpAccessChain %402 %18 
                                         f32 %408 = OpLoad %407 
                                         f32 %410 = OpFMul %408 %409 
                                Private f32* %411 = OpAccessChain %402 %18 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %402 %18 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 29 %413 
                                Private f32* %415 = OpAccessChain %402 %18 
                                                      OpStore %415 %414 
                                       f32_3 %416 = OpLoad %402 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 0 0 
                              Uniform f32_4* %419 = OpAccessChain %38 %418 
                                       f32_4 %420 = OpLoad %419 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_3 %422 = OpFMul %417 %421 
                                                      OpStore %402 %422 
                                       f32_3 %423 = OpLoad %196 
                              Uniform f32_4* %424 = OpAccessChain %38 %418 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFMul %423 %426 
                                       f32_3 %428 = OpLoad %402 
                                       f32_3 %429 = OpFAdd %427 %428 
                                                      OpStore %402 %429 
                                         f32 %430 = OpLoad %123 
                                       f32_3 %431 = OpCompositeConstruct %430 %430 %430 
                                       f32_3 %432 = OpLoad %402 
                                       f32_3 %433 = OpFMul %431 %432 
                                       f32_4 %434 = OpLoad %55 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %55 %435 
                                       f32_4 %436 = OpLoad %55 
                                       f32_4 %437 = OpFNegate %436 
                              Uniform f32_4* %439 = OpAccessChain %38 %438 
                                       f32_4 %440 = OpLoad %439 
                                       f32_4 %441 = OpFAdd %437 %440 
                                                      OpStore %46 %441 
                              Uniform f32_4* %442 = OpAccessChain %38 %438 
                                       f32_4 %443 = OpLoad %442 
                                       f32_4 %444 = OpVectorShuffle %443 %443 3 3 3 3 
                                       f32_4 %445 = OpLoad %46 
                                       f32_4 %446 = OpFMul %444 %445 
                                       f32_4 %447 = OpLoad %55 
                                       f32_4 %448 = OpFAdd %446 %447 
                                                      OpStore %46 %448 
                                Private f32* %449 = OpAccessChain %328 %14 
                                                      OpStore %449 %77 
                                       f32_4 %452 = OpLoad %46 
                                       f32_4 %453 = OpLoad %328 
                                       f32_4 %454 = OpFAdd %452 %453 
                                                      OpStore %451 %454 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
out vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
bool u_xlatb6;
float u_xlat14;
float u_xlat20;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb6 = 0.0<_Perpendicular;
    u_xlat6 = (u_xlatb6) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
    vs_TEXCOORD1.x = u_xlat2.z;
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat14 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = vec3(u_xlat14) * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.z = u_xlat3.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    vs_TEXCOORD2.z = u_xlat3.z;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat3.x;
    vs_TEXCOORD4 = u_xlat0;
    vs_TEXCOORD5 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat3.zzzz * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat3.yyyy + u_xlat4;
    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3.xxxx + u_xlat4;
    u_xlat2 = max(u_xlat2, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat2);
    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat2 * u_xlat0;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD6.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
in  vec4 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
vec2 u_xlat12;
float u_xlat19;
bool u_xlatb19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
void main()
{
    u_xlat6.x = vs_TEXCOORD1.w;
    u_xlat6.y = vs_TEXCOORD2.w;
    u_xlat6.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat19 = u_xlat2.w + -0.100000001;
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat19 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat19) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat19 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat19 = min(u_xlat19, 1.0);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat4.z = sqrt(u_xlat19);
    u_xlat19 = fract(_Time.y);
    u_xlat3.x = u_xlat19 * 4.0;
    u_xlat21 = vs_TEXCOORD4.x + (-vs_TEXCOORD5.x);
    u_xlat21 = u_xlat21 + vs_TEXCOORD4.y;
    u_xlat21 = u_xlat21 + (-vs_TEXCOORD5.y);
    u_xlat21 = u_xlat21 * 0.5 + -0.100000001;
    u_xlat21 = fract(u_xlat21);
    u_xlatb3 = u_xlat3.x<u_xlat21;
    u_xlat19 = u_xlat19 * 4.0 + 0.100000001;
    u_xlatb19 = u_xlat21<u_xlat19;
    u_xlatb19 = u_xlatb19 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb19)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat19 = u_xlat2.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.xyz = u_xlat6.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = (-u_xlat19) + u_xlat21;
    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat19;
    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlatb21 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat5.xyz : u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat12.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12.x, u_xlat6.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat12.xy);
    u_xlat12.x = u_xlat19 + u_xlat10_5.x;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat6.x = min(u_xlat12.x, u_xlat6.x);
    u_xlat6.x = (u_xlatb21) ? u_xlat6.x : u_xlat12.x;
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat12.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.yyz * vs_TEXCOORD6.xyz;
    u_xlat0.xzw = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xxx;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xzw);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xzw = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xzw;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat0.xzw;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    u_xlat0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    u_xlat5.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat5;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 497
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %164 %170 %171 %183 %188 %240 %313 %317 %339 %341 %459 %479 %491 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %162 0 BuiltIn 162 
                                                      OpMemberDecorate %162 1 BuiltIn 162 
                                                      OpMemberDecorate %162 2 BuiltIn 162 
                                                      OpDecorate %162 Block 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %171 Location 171 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate %240 Location 240 
                                                      OpDecorate %313 Location 313 
                                                      OpDecorate %317 Location 317 
                                                      OpDecorate %339 Location 339 
                                                      OpDecorate %341 Location 341 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %459 Location 459 
                                                      OpDecorate %479 Location 479 
                                                      OpDecorate %491 Location 491 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeStruct %7 %7 %7 %7 %7 %18 %20 %21 %7 %22 %6 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 6 
                                          i32 %28 = OpConstant 1 
                                              %29 = OpTypePointer Uniform %6 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                                          i32 %36 = OpConstant 0 
                                          i32 %46 = OpConstant 2 
                                          u32 %49 = OpConstant 2 
                                          i32 %57 = OpConstant 3 
                                          u32 %60 = OpConstant 3 
                                              %75 = OpTypeBool 
                                              %76 = OpTypePointer Private %75 
                                Private bool* %77 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %79 = OpConstant 10 
                                 Private f32* %83 = OpVariable Private 
                                              %84 = OpTypePointer Function %6 
                                          f32 %89 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                              Private f32_4* %101 = OpVariable Private 
                                             %104 = OpTypePointer Uniform %7 
                              Private f32_4* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 9 
                                             %161 = OpTypeArray %6 %13 
                                             %162 = OpTypeStruct %7 %6 %161 
                                             %163 = OpTypePointer Output %162 
        Output struct {f32_4; f32; f32[1];}* %164 = OpVariable Output 
                                             %166 = OpTypePointer Output %7 
                                             %168 = OpTypeVector %6 2 
                                             %169 = OpTypePointer Output %168 
                               Output f32_2* %170 = OpVariable Output 
                                Input f32_4* %171 = OpVariable Input 
                                         i32 %174 = OpConstant 11 
                               Output f32_4* %183 = OpVariable Output 
                                             %186 = OpTypePointer Output %6 
                                Input f32_4* %188 = OpVariable Input 
                                             %189 = OpTypeVector %6 3 
                                Private f32* %220 = OpVariable Private 
                              Private f32_4* %238 = OpVariable Private 
                                             %239 = OpTypePointer Input %189 
                                Input f32_3* %240 = OpVariable Input 
                                         i32 %242 = OpConstant 7 
                              Private f32_4* %274 = OpVariable Private 
                                Private f32* %293 = OpVariable Private 
                                         i32 %296 = OpConstant 8 
                               Output f32_4* %313 = OpVariable Output 
                               Output f32_4* %317 = OpVariable Output 
                               Output f32_4* %339 = OpVariable Output 
                               Output f32_4* %341 = OpVariable Output 
                              Private f32_4* %357 = OpVariable Private 
                                         f32 %393 = OpConstant 3.674022E-40 
                                       f32_4 %394 = OpConstantComposite %393 %393 %393 %393 
                                         i32 %399 = OpConstant 4 
                                       f32_4 %403 = OpConstantComposite %91 %91 %91 %91 
                                       f32_4 %411 = OpConstantComposite %78 %78 %78 %78 
                                         i32 %418 = OpConstant 5 
                                             %458 = OpTypePointer Output %189 
                               Output f32_3* %459 = OpVariable Output 
                                         f32 %470 = OpConstant 3.674022E-40 
                                       f32_2 %475 = OpConstantComposite %470 %470 
                               Output f32_4* %479 = OpVariable Output 
                               Output f32_4* %491 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %85 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %30 = OpAccessChain %25 %27 %28 %13 
                                          f32 %31 = OpLoad %30 
                                          f32 %32 = OpFMul %16 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Uniform f32* %37 = OpAccessChain %25 %27 %36 %13 
                                          f32 %38 = OpLoad %37 
                                   Input f32* %39 = OpAccessChain %11 %33 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %33 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFAdd %41 %43 
                                 Private f32* %45 = OpAccessChain %9 %33 
                                                      OpStore %45 %44 
                                 Uniform f32* %47 = OpAccessChain %25 %27 %46 %13 
                                          f32 %48 = OpLoad %47 
                                   Input f32* %50 = OpAccessChain %11 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFMul %48 %51 
                                 Private f32* %53 = OpAccessChain %9 %33 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %52 %54 
                                 Private f32* %56 = OpAccessChain %9 %33 
                                                      OpStore %56 %55 
                                 Uniform f32* %58 = OpAccessChain %25 %27 %57 %13 
                                          f32 %59 = OpLoad %58 
                                   Input f32* %61 = OpAccessChain %11 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %9 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %9 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %9 %33 
                                          f32 %69 = OpLoad %68 
                                 Uniform f32* %70 = OpAccessChain %25 %27 %57 %13 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                          f32 %73 = OpFAdd %69 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %80 = OpAccessChain %25 %79 
                                          f32 %81 = OpLoad %80 
                                         bool %82 = OpFOrdLessThan %78 %81 
                                                      OpStore %77 %82 
                                         bool %86 = OpLoad %77 
                                                      OpSelectionMerge %88 None 
                                                      OpBranchConditional %86 %87 %90 
                                              %87 = OpLabel 
                                                      OpStore %85 %89 
                                                      OpBranch %88 
                                              %90 = OpLabel 
                                                      OpStore %85 %91 
                                                      OpBranch %88 
                                              %88 = OpLabel 
                                          f32 %92 = OpLoad %85 
                                                      OpStore %83 %92 
                                 Private f32* %93 = OpAccessChain %9 %33 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpLoad %83 
                                          f32 %96 = OpFMul %94 %95 
                                   Input f32* %97 = OpAccessChain %11 %49 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFAdd %96 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_4 %102 = OpLoad %11 
                                       f32_4 %103 = OpVectorShuffle %102 %102 1 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %25 %27 %28 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpFMul %103 %106 
                                                      OpStore %101 %107 
                              Uniform f32_4* %108 = OpAccessChain %25 %27 %36 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %11 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %101 
                                       f32_4 %114 = OpFAdd %112 %113 
                                                      OpStore %101 %114 
                              Uniform f32_4* %115 = OpAccessChain %25 %27 %46 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %117 0 0 0 0 
                                       f32_4 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %101 
                                       f32_4 %121 = OpFAdd %119 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                              Uniform f32_4* %123 = OpAccessChain %25 %27 %57 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpFAdd %122 %124 
                                                      OpStore %101 %125 
                              Uniform f32_4* %126 = OpAccessChain %25 %27 %57 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpLoad %11 
                                       f32_4 %129 = OpVectorShuffle %128 %128 3 3 3 3 
                                       f32_4 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpFAdd %130 %131 
                                                      OpStore %9 %132 
                                       f32_4 %134 = OpLoad %101 
                                       f32_4 %135 = OpVectorShuffle %134 %134 1 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %25 %136 %28 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpFMul %135 %138 
                                                      OpStore %133 %139 
                              Uniform f32_4* %140 = OpAccessChain %25 %136 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpLoad %101 
                                       f32_4 %143 = OpVectorShuffle %142 %142 0 0 0 0 
                                       f32_4 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %133 
                                       f32_4 %146 = OpFAdd %144 %145 
                                                      OpStore %133 %146 
                              Uniform f32_4* %147 = OpAccessChain %25 %136 %46 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpLoad %101 
                                       f32_4 %150 = OpVectorShuffle %149 %149 2 2 2 2 
                                       f32_4 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %133 
                                       f32_4 %153 = OpFAdd %151 %152 
                                                      OpStore %133 %153 
                              Uniform f32_4* %154 = OpAccessChain %25 %136 %57 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %101 
                                       f32_4 %157 = OpVectorShuffle %156 %156 3 3 3 3 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %133 
                                       f32_4 %160 = OpFAdd %158 %159 
                                                      OpStore %101 %160 
                                       f32_4 %165 = OpLoad %101 
                               Output f32_4* %167 = OpAccessChain %164 %36 
                                                      OpStore %167 %165 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                              Uniform f32_4* %175 = OpAccessChain %25 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_2 %177 = OpVectorShuffle %176 %176 0 1 
                                       f32_2 %178 = OpFMul %173 %177 
                              Uniform f32_4* %179 = OpAccessChain %25 %174 
                                       f32_4 %180 = OpLoad %179 
                                       f32_2 %181 = OpVectorShuffle %180 %180 2 3 
                                       f32_2 %182 = OpFAdd %178 %181 
                                                      OpStore %170 %182 
                                Private f32* %184 = OpAccessChain %9 %33 
                                         f32 %185 = OpLoad %184 
                                 Output f32* %187 = OpAccessChain %183 %60 
                                                      OpStore %187 %185 
                                       f32_4 %190 = OpLoad %188 
                                       f32_3 %191 = OpVectorShuffle %190 %190 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %25 %27 %28 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 1 2 0 
                                       f32_3 %195 = OpFMul %191 %194 
                                       f32_4 %196 = OpLoad %133 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %133 %197 
                              Uniform f32_4* %198 = OpAccessChain %25 %27 %36 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 1 2 0 
                                       f32_4 %201 = OpLoad %188 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %133 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFAdd %203 %205 
                                       f32_4 %207 = OpLoad %133 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %133 %208 
                              Uniform f32_4* %209 = OpAccessChain %25 %27 %46 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 1 2 0 
                                       f32_4 %212 = OpLoad %188 
                                       f32_3 %213 = OpVectorShuffle %212 %212 2 2 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %133 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %133 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %133 %219 
                                       f32_4 %221 = OpLoad %133 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_4 %223 = OpLoad %133 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                         f32 %225 = OpDot %222 %224 
                                                      OpStore %220 %225 
                                         f32 %226 = OpLoad %220 
                                         f32 %227 = OpExtInst %1 32 %226 
                                                      OpStore %220 %227 
                                         f32 %228 = OpLoad %220 
                                       f32_3 %229 = OpCompositeConstruct %228 %228 %228 
                                       f32_4 %230 = OpLoad %133 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_4 %233 = OpLoad %133 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %133 %234 
                                Private f32* %235 = OpAccessChain %133 %49 
                                         f32 %236 = OpLoad %235 
                                 Output f32* %237 = OpAccessChain %183 %33 
                                                      OpStore %237 %236 
                                       f32_3 %241 = OpLoad %240 
                              Uniform f32_4* %243 = OpAccessChain %25 %242 %36 
                                       f32_4 %244 = OpLoad %243 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                         f32 %246 = OpDot %241 %245 
                                Private f32* %247 = OpAccessChain %238 %13 
                                                      OpStore %247 %246 
                                       f32_3 %248 = OpLoad %240 
                              Uniform f32_4* %249 = OpAccessChain %25 %242 %28 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpDot %248 %251 
                                Private f32* %253 = OpAccessChain %238 %49 
                                                      OpStore %253 %252 
                                       f32_3 %254 = OpLoad %240 
                              Uniform f32_4* %255 = OpAccessChain %25 %242 %46 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %259 = OpAccessChain %238 %33 
                                                      OpStore %259 %258 
                                       f32_4 %260 = OpLoad %238 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_4 %262 = OpLoad %238 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %261 %263 
                                                      OpStore %220 %264 
                                         f32 %265 = OpLoad %220 
                                         f32 %266 = OpExtInst %1 32 %265 
                                                      OpStore %220 %266 
                                         f32 %267 = OpLoad %220 
                                       f32_3 %268 = OpCompositeConstruct %267 %267 %267 
                                       f32_4 %269 = OpLoad %238 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %238 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %238 %273 
                                       f32_4 %275 = OpLoad %133 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_4 %277 = OpLoad %238 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %274 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %274 %281 
                                       f32_4 %282 = OpLoad %238 
                                       f32_3 %283 = OpVectorShuffle %282 %282 2 0 1 
                                       f32_4 %284 = OpLoad %133 
                                       f32_3 %285 = OpVectorShuffle %284 %284 1 2 0 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_4 %287 = OpLoad %274 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFNegate %288 
                                       f32_3 %290 = OpFAdd %286 %289 
                                       f32_4 %291 = OpLoad %274 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %274 %292 
                                  Input f32* %294 = OpAccessChain %188 %60 
                                         f32 %295 = OpLoad %294 
                                Uniform f32* %297 = OpAccessChain %25 %296 %60 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %295 %298 
                                                      OpStore %293 %299 
                                         f32 %300 = OpLoad %293 
                                       f32_3 %301 = OpCompositeConstruct %300 %300 %300 
                                       f32_4 %302 = OpLoad %274 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFMul %301 %303 
                                       f32_4 %305 = OpLoad %274 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %274 %306 
                                Private f32* %307 = OpAccessChain %274 %33 
                                         f32 %308 = OpLoad %307 
                                 Output f32* %309 = OpAccessChain %183 %13 
                                                      OpStore %309 %308 
                                Private f32* %310 = OpAccessChain %238 %13 
                                         f32 %311 = OpLoad %310 
                                 Output f32* %312 = OpAccessChain %183 %49 
                                                      OpStore %312 %311 
                                Private f32* %314 = OpAccessChain %133 %33 
                                         f32 %315 = OpLoad %314 
                                 Output f32* %316 = OpAccessChain %313 %33 
                                                      OpStore %316 %315 
                                Private f32* %318 = OpAccessChain %133 %13 
                                         f32 %319 = OpLoad %318 
                                 Output f32* %320 = OpAccessChain %317 %33 
                                                      OpStore %320 %319 
                                Private f32* %321 = OpAccessChain %9 %13 
                                         f32 %322 = OpLoad %321 
                                 Output f32* %323 = OpAccessChain %313 %60 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %274 %13 
                                         f32 %325 = OpLoad %324 
                                 Output f32* %326 = OpAccessChain %313 %13 
                                                      OpStore %326 %325 
                                Private f32* %327 = OpAccessChain %274 %49 
                                         f32 %328 = OpLoad %327 
                                 Output f32* %329 = OpAccessChain %317 %13 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %238 %49 
                                         f32 %331 = OpLoad %330 
                                 Output f32* %332 = OpAccessChain %313 %49 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %9 %49 
                                         f32 %334 = OpLoad %333 
                                 Output f32* %335 = OpAccessChain %317 %60 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %238 %33 
                                         f32 %337 = OpLoad %336 
                                 Output f32* %338 = OpAccessChain %317 %49 
                                                      OpStore %338 %337 
                                       f32_4 %340 = OpLoad %9 
                                                      OpStore %339 %340 
                              Uniform f32_4* %342 = OpAccessChain %25 %27 %57 
                                       f32_4 %343 = OpLoad %342 
                                                      OpStore %341 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_4 %345 = OpVectorShuffle %344 %344 1 1 1 1 
                                       f32_4 %346 = OpFNegate %345 
                              Uniform f32_4* %347 = OpAccessChain %25 %46 
                                       f32_4 %348 = OpLoad %347 
                                       f32_4 %349 = OpFAdd %346 %348 
                                                      OpStore %133 %349 
                                       f32_4 %350 = OpLoad %238 
                                       f32_4 %351 = OpVectorShuffle %350 %350 2 2 2 2 
                                       f32_4 %352 = OpLoad %133 
                                       f32_4 %353 = OpFMul %351 %352 
                                                      OpStore %274 %353 
                                       f32_4 %354 = OpLoad %133 
                                       f32_4 %355 = OpLoad %133 
                                       f32_4 %356 = OpFMul %354 %355 
                                                      OpStore %133 %356 
                                       f32_4 %358 = OpLoad %9 
                                       f32_4 %359 = OpVectorShuffle %358 %358 0 0 0 0 
                                       f32_4 %360 = OpFNegate %359 
                              Uniform f32_4* %361 = OpAccessChain %25 %28 
                                       f32_4 %362 = OpLoad %361 
                                       f32_4 %363 = OpFAdd %360 %362 
                                                      OpStore %357 %363 
                                       f32_4 %364 = OpLoad %9 
                                       f32_4 %365 = OpVectorShuffle %364 %364 2 2 2 2 
                                       f32_4 %366 = OpFNegate %365 
                              Uniform f32_4* %367 = OpAccessChain %25 %57 
                                       f32_4 %368 = OpLoad %367 
                                       f32_4 %369 = OpFAdd %366 %368 
                                                      OpStore %9 %369 
                                       f32_4 %370 = OpLoad %357 
                                       f32_4 %371 = OpLoad %238 
                                       f32_4 %372 = OpVectorShuffle %371 %371 1 1 1 1 
                                       f32_4 %373 = OpFMul %370 %372 
                                       f32_4 %374 = OpLoad %274 
                                       f32_4 %375 = OpFAdd %373 %374 
                                                      OpStore %274 %375 
                                       f32_4 %376 = OpLoad %357 
                                       f32_4 %377 = OpLoad %357 
                                       f32_4 %378 = OpFMul %376 %377 
                                       f32_4 %379 = OpLoad %133 
                                       f32_4 %380 = OpFAdd %378 %379 
                                                      OpStore %133 %380 
                                       f32_4 %381 = OpLoad %9 
                                       f32_4 %382 = OpLoad %9 
                                       f32_4 %383 = OpFMul %381 %382 
                                       f32_4 %384 = OpLoad %133 
                                       f32_4 %385 = OpFAdd %383 %384 
                                                      OpStore %133 %385 
                                       f32_4 %386 = OpLoad %9 
                                       f32_4 %387 = OpLoad %238 
                                       f32_4 %388 = OpVectorShuffle %387 %387 0 0 0 0 
                                       f32_4 %389 = OpFMul %386 %388 
                                       f32_4 %390 = OpLoad %274 
                                       f32_4 %391 = OpFAdd %389 %390 
                                                      OpStore %9 %391 
                                       f32_4 %392 = OpLoad %133 
                                       f32_4 %395 = OpExtInst %1 40 %392 %394 
                                                      OpStore %133 %395 
                                       f32_4 %396 = OpLoad %133 
                                       f32_4 %397 = OpExtInst %1 32 %396 
                                                      OpStore %238 %397 
                                       f32_4 %398 = OpLoad %133 
                              Uniform f32_4* %400 = OpAccessChain %25 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_4 %402 = OpFMul %398 %401 
                                       f32_4 %404 = OpFAdd %402 %403 
                                                      OpStore %133 %404 
                                       f32_4 %405 = OpLoad %133 
                                       f32_4 %406 = OpFDiv %403 %405 
                                                      OpStore %133 %406 
                                       f32_4 %407 = OpLoad %9 
                                       f32_4 %408 = OpLoad %238 
                                       f32_4 %409 = OpFMul %407 %408 
                                                      OpStore %9 %409 
                                       f32_4 %410 = OpLoad %9 
                                       f32_4 %412 = OpExtInst %1 40 %410 %411 
                                                      OpStore %9 %412 
                                       f32_4 %413 = OpLoad %133 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpFMul %413 %414 
                                                      OpStore %9 %415 
                                       f32_4 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 1 1 1 
                              Uniform f32_4* %419 = OpAccessChain %25 %418 %28 
                                       f32_4 %420 = OpLoad %419 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_3 %422 = OpFMul %417 %421 
                                       f32_4 %423 = OpLoad %133 
                                       f32_4 %424 = OpVectorShuffle %423 %422 4 5 6 3 
                                                      OpStore %133 %424 
                              Uniform f32_4* %425 = OpAccessChain %25 %418 %36 
                                       f32_4 %426 = OpLoad %425 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_4 %428 = OpLoad %9 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 0 0 
                                       f32_3 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %133 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpFAdd %430 %432 
                                       f32_4 %434 = OpLoad %133 
                                       f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                      OpStore %133 %435 
                              Uniform f32_4* %436 = OpAccessChain %25 %418 %46 
                                       f32_4 %437 = OpLoad %436 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_4 %439 = OpLoad %9 
                                       f32_3 %440 = OpVectorShuffle %439 %439 2 2 2 
                                       f32_3 %441 = OpFMul %438 %440 
                                       f32_4 %442 = OpLoad %133 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %441 %443 
                                       f32_4 %445 = OpLoad %9 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %9 %446 
                              Uniform f32_4* %447 = OpAccessChain %25 %418 %57 
                                       f32_4 %448 = OpLoad %447 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
                                       f32_4 %450 = OpLoad %9 
                                       f32_3 %451 = OpVectorShuffle %450 %450 3 3 3 
                                       f32_3 %452 = OpFMul %449 %451 
                                       f32_4 %453 = OpLoad %9 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                                       f32_3 %455 = OpFAdd %452 %454 
                                       f32_4 %456 = OpLoad %9 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 6 3 
                                                      OpStore %9 %457 
                                       f32_4 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 1 2 
                                                      OpStore %459 %461 
                                Private f32* %462 = OpAccessChain %101 %13 
                                         f32 %463 = OpLoad %462 
                                Uniform f32* %464 = OpAccessChain %25 %36 %33 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                Private f32* %467 = OpAccessChain %9 %33 
                                                      OpStore %467 %466 
                                Private f32* %468 = OpAccessChain %9 %33 
                                         f32 %469 = OpLoad %468 
                                         f32 %471 = OpFMul %469 %470 
                                Private f32* %472 = OpAccessChain %9 %60 
                                                      OpStore %472 %471 
                                       f32_4 %473 = OpLoad %101 
                                       f32_2 %474 = OpVectorShuffle %473 %473 0 3 
                                       f32_2 %476 = OpFMul %474 %475 
                                       f32_4 %477 = OpLoad %9 
                                       f32_4 %478 = OpVectorShuffle %477 %476 4 1 5 3 
                                                      OpStore %9 %478 
                                       f32_4 %480 = OpLoad %101 
                                       f32_2 %481 = OpVectorShuffle %480 %480 2 3 
                                       f32_4 %482 = OpLoad %479 
                                       f32_4 %483 = OpVectorShuffle %482 %481 0 1 4 5 
                                                      OpStore %479 %483 
                                       f32_4 %484 = OpLoad %9 
                                       f32_2 %485 = OpVectorShuffle %484 %484 2 2 
                                       f32_4 %486 = OpLoad %9 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 3 
                                       f32_2 %488 = OpFAdd %485 %487 
                                       f32_4 %489 = OpLoad %479 
                                       f32_4 %490 = OpVectorShuffle %489 %488 4 5 2 3 
                                                      OpStore %479 %490 
                                                      OpStore %491 %411 
                                 Output f32* %492 = OpAccessChain %164 %36 %13 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFNegate %493 
                                 Output f32* %495 = OpAccessChain %164 %36 %13 
                                                      OpStore %495 %494 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 540
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %64 %147 %150 %392 %456 %535 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %26 Location 26 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 RelaxedPrecision 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 RelaxedPrecision 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 RelaxedPrecision 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpMemberDecorate %37 7 Offset 37 
                                                      OpMemberDecorate %37 8 Offset 37 
                                                      OpMemberDecorate %37 9 Offset 37 
                                                      OpMemberDecorate %37 10 Offset 37 
                                                      OpMemberDecorate %37 11 RelaxedPrecision 
                                                      OpMemberDecorate %37 11 Offset 37 
                                                      OpMemberDecorate %37 12 Offset 37 
                                                      OpMemberDecorate %37 13 RelaxedPrecision 
                                                      OpMemberDecorate %37 13 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %64 Location 64 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %285 SpecId 285 
                                                      OpDecorate %374 DescriptorSet 374 
                                                      OpDecorate %374 Binding 374 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 Location 392 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %401 DescriptorSet 401 
                                                      OpDecorate %401 Binding 401 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %535 Location 535 
                                                      OpDecorate %537 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeInt 32 0 
                                          u32 %14 = OpConstant 3 
                                              %15 = OpTypePointer Input %6 
                                          u32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Private %6 
                                 Input f32_4* %21 = OpVariable Input 
                                          u32 %24 = OpConstant 1 
                                 Input f32_4* %26 = OpVariable Input 
                                          u32 %29 = OpConstant 2 
                               Private f32_3* %31 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %10 %34 
                                              %36 = OpTypeArray %10 %34 
                                              %37 = OpTypeStruct %10 %7 %10 %10 %10 %10 %35 %10 %36 %7 %7 %10 %10 %6 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 1 
                                              %42 = OpTypePointer Uniform %7 
                                              %46 = OpTypePointer Private %10 
                               Private f32_4* %47 = OpVariable Private 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                                              %63 = OpTypePointer Input %62 
                                 Input f32_2* %64 = OpVariable Input 
                               Private f32_3* %67 = OpVariable Private 
                                          f32 %70 = OpConstant 3.674022E-40 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %81 = OpConstant 0 
                                          i32 %83 = OpConstant -1 
                                          f32 %91 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_3 %94 = OpConstantComposite %91 %92 %93 
                               Private f32_3* %97 = OpVariable Private 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %78 %78 %100 
                                         f32 %117 = OpConstant 3.674022E-40 
                                       f32_2 %118 = OpConstantComposite %117 %117 
                                Private f32* %122 = OpVariable Private 
                                         f32 %129 = OpConstant 3.674022E-40 
                                Private f32* %137 = OpVariable Private 
                                             %138 = OpTypePointer Uniform %6 
                                Private f32* %142 = OpVariable Private 
                                         f32 %144 = OpConstant 3.674022E-40 
                              Private f32_4* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                Input f32_4* %150 = OpVariable Input 
                                         f32 %171 = OpConstant 3.674022E-40 
                               Private bool* %179 = OpVariable Private 
                                         f32 %186 = OpConstant 3.674022E-40 
                              Private f32_3* %195 = OpVariable Private 
                                             %196 = OpTypePointer Function %7 
                                       f32_3 %201 = OpConstantComposite %129 %129 %129 
                                         i32 %207 = OpConstant 13 
                                         i32 %221 = OpConstant 6 
                                         i32 %228 = OpConstant 2 
                                         i32 %236 = OpConstant 5 
                                             %237 = OpTypePointer Uniform %10 
                                         i32 %265 = OpConstant 4 
                               Private bool* %274 = OpVariable Private 
                                         i32 %275 = OpConstant 7 
                                        bool %279 = OpConstantFalse 
                                        bool %285 = OpSpecConstantFalse 
                               Private bool* %288 = OpVariable Private 
                                         i32 %294 = OpConstant 8 
                                         i32 %325 = OpConstant 3 
                                         i32 %342 = OpConstant 10 
                                         i32 %348 = OpConstant 9 
                                         f32 %356 = OpConstant 3.674022E-40 
                                         f32 %358 = OpConstant 3.674022E-40 
                                Private f32* %361 = OpVariable Private 
                                             %371 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %372 = OpTypeSampledImage %371 
                                             %373 = OpTypePointer UniformConstant %372 
 UniformConstant read_only Texture3DSampled* %374 = OpVariable UniformConstant 
                              Private f32_4* %379 = OpVariable Private 
                                Input f32_4* %392 = OpVariable Input 
                                Private f32* %400 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %401 = OpVariable UniformConstant 
                                Private f32* %407 = OpVariable Private 
                                             %416 = OpTypePointer Function %6 
                              Private f32_4* %452 = OpVariable Private 
                                             %455 = OpTypePointer Input %7 
                                Input f32_3* %456 = OpVariable Input 
                              Private f32_3* %486 = OpVariable Private 
                                         f32 %493 = OpConstant 3.674022E-40 
                                         i32 %502 = OpConstant 11 
                                         i32 %522 = OpConstant 12 
                                             %534 = OpTypePointer Output %10 
                               Output f32_4* %535 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %197 = OpVariable Function 
                             Function f32_3* %332 = OpVariable Function 
                               Function f32* %417 = OpVariable Function 
                                   Input f32* %16 = OpAccessChain %12 %14 
                                          f32 %17 = OpLoad %16 
                                 Private f32* %20 = OpAccessChain %9 %18 
                                                      OpStore %20 %17 
                                   Input f32* %22 = OpAccessChain %21 %14 
                                          f32 %23 = OpLoad %22 
                                 Private f32* %25 = OpAccessChain %9 %24 
                                                      OpStore %25 %23 
                                   Input f32* %27 = OpAccessChain %26 %14 
                                          f32 %28 = OpLoad %27 
                                 Private f32* %30 = OpAccessChain %9 %29 
                                                      OpStore %30 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpFNegate %32 
                               Uniform f32_3* %43 = OpAccessChain %39 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %33 %44 
                                                      OpStore %31 %45 
                                        f32_3 %48 = OpLoad %31 
                                        f32_3 %49 = OpLoad %31 
                                          f32 %50 = OpDot %48 %49 
                                 Private f32* %51 = OpAccessChain %47 %18 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %47 %18 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpExtInst %1 32 %53 
                                 Private f32* %55 = OpAccessChain %47 %18 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_2 %65 = OpLoad %64 
                                        f32_4 %66 = OpImageSampleImplicitLod %61 %65 
                                                      OpStore %56 %66 
                                 Private f32* %68 = OpAccessChain %56 %14 
                                          f32 %69 = OpLoad %68 
                                          f32 %71 = OpFAdd %69 %70 
                                 Private f32* %72 = OpAccessChain %67 %18 
                                                      OpStore %72 %71 
                                 Private f32* %76 = OpAccessChain %67 %18 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                         bool %80 = OpLoad %75 
                                          i32 %82 = OpSelect %80 %41 %81 
                                          i32 %84 = OpIMul %82 %83 
                                         bool %85 = OpINotEqual %84 %81 
                                                      OpSelectionMerge %87 None 
                                                      OpBranchConditional %85 %86 %87 
                                              %86 = OpLabel 
                                                      OpKill
                                              %87 = OpLabel 
                                        f32_4 %89 = OpLoad %56 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                          f32 %95 = OpDot %90 %94 
                                 Private f32* %96 = OpAccessChain %67 %18 
                                                      OpStore %96 %95 
                                        f32_3 %98 = OpLoad %67 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %102 = OpFAdd %99 %101 
                                                      OpStore %97 %102 
                                       f32_3 %103 = OpLoad %97 
                                       f32_2 %104 = OpVectorShuffle %103 %103 1 1 
                                       f32_4 %105 = OpLoad %56 
                                       f32_2 %106 = OpVectorShuffle %105 %105 3 3 
                                         f32 %107 = OpDot %104 %106 
                                Private f32* %108 = OpAccessChain %67 %18 
                                                      OpStore %108 %107 
                                Private f32* %109 = OpAccessChain %97 %24 
                                         f32 %110 = OpLoad %109 
                                Private f32* %111 = OpAccessChain %97 %24 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %110 %112 
                                Private f32* %114 = OpAccessChain %67 %24 
                                                      OpStore %114 %113 
                                       f32_3 %115 = OpLoad %67 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %119 = OpFAdd %116 %118 
                                       f32_3 %120 = OpLoad %67 
                                       f32_3 %121 = OpVectorShuffle %120 %119 3 4 2 
                                                      OpStore %67 %121 
                                       f32_3 %123 = OpLoad %67 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_3 %125 = OpLoad %67 
                                       f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                         f32 %127 = OpDot %124 %126 
                                                      OpStore %122 %127 
                                         f32 %128 = OpLoad %122 
                                         f32 %130 = OpExtInst %1 37 %128 %129 
                                                      OpStore %122 %130 
                                         f32 %131 = OpLoad %122 
                                         f32 %132 = OpFNegate %131 
                                         f32 %133 = OpFAdd %132 %129 
                                                      OpStore %122 %133 
                                         f32 %134 = OpLoad %122 
                                         f32 %135 = OpExtInst %1 31 %134 
                                Private f32* %136 = OpAccessChain %67 %29 
                                                      OpStore %136 %135 
                                Uniform f32* %139 = OpAccessChain %39 %81 %24 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpExtInst %1 10 %140 
                                                      OpStore %137 %141 
                                         f32 %143 = OpLoad %137 
                                         f32 %145 = OpFMul %143 %144 
                                                      OpStore %142 %145 
                                  Input f32* %148 = OpAccessChain %147 %18 
                                         f32 %149 = OpLoad %148 
                                  Input f32* %151 = OpAccessChain %150 %18 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                         f32 %154 = OpFAdd %149 %153 
                                Private f32* %155 = OpAccessChain %146 %18 
                                                      OpStore %155 %154 
                                Private f32* %156 = OpAccessChain %146 %18 
                                         f32 %157 = OpLoad %156 
                                  Input f32* %158 = OpAccessChain %147 %24 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %146 %18 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %146 %18 
                                         f32 %163 = OpLoad %162 
                                  Input f32* %164 = OpAccessChain %150 %24 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFNegate %165 
                                         f32 %167 = OpFAdd %163 %166 
                                Private f32* %168 = OpAccessChain %146 %18 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %146 %18 
                                         f32 %170 = OpLoad %169 
                                         f32 %172 = OpFMul %170 %171 
                                         f32 %173 = OpFAdd %172 %70 
                                Private f32* %174 = OpAccessChain %146 %18 
                                                      OpStore %174 %173 
                                Private f32* %175 = OpAccessChain %146 %18 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpExtInst %1 10 %176 
                                Private f32* %178 = OpAccessChain %146 %18 
                                                      OpStore %178 %177 
                                         f32 %180 = OpLoad %142 
                                Private f32* %181 = OpAccessChain %146 %18 
                                         f32 %182 = OpLoad %181 
                                        bool %183 = OpFOrdLessThan %180 %182 
                                                      OpStore %179 %183 
                                         f32 %184 = OpLoad %137 
                                         f32 %185 = OpFMul %184 %144 
                                         f32 %187 = OpFAdd %185 %186 
                                                      OpStore %137 %187 
                                Private f32* %188 = OpAccessChain %146 %18 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpLoad %137 
                                        bool %191 = OpFOrdLessThan %189 %190 
                                                      OpStore %75 %191 
                                        bool %192 = OpLoad %75 
                                        bool %193 = OpLoad %179 
                                        bool %194 = OpLogicalAnd %192 %193 
                                                      OpStore %75 %194 
                                        bool %198 = OpLoad %75 
                                                      OpSelectionMerge %200 None 
                                                      OpBranchConditional %198 %199 %202 
                                             %199 = OpLabel 
                                                      OpStore %197 %201 
                                                      OpBranch %200 
                                             %202 = OpLabel 
                                       f32_3 %203 = OpLoad %97 
                                                      OpStore %197 %203 
                                                      OpBranch %200 
                                             %200 = OpLabel 
                                       f32_3 %204 = OpLoad %197 
                                                      OpStore %195 %204 
                                Private f32* %205 = OpAccessChain %56 %14 
                                         f32 %206 = OpLoad %205 
                                Uniform f32* %208 = OpAccessChain %39 %207 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %206 %210 
                                                      OpStore %122 %211 
                                         f32 %212 = OpLoad %122 
                                        bool %213 = OpFOrdLessThan %212 %78 
                                                      OpStore %75 %213 
                                        bool %214 = OpLoad %75 
                                         i32 %215 = OpSelect %214 %41 %81 
                                         i32 %216 = OpIMul %215 %83 
                                        bool %217 = OpINotEqual %216 %81 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %217 %218 %219 
                                             %218 = OpLabel 
                                                      OpKill
                                             %219 = OpLabel 
                                Uniform f32* %222 = OpAccessChain %39 %221 %81 %29 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %97 %18 
                                                      OpStore %224 %223 
                                Uniform f32* %225 = OpAccessChain %39 %221 %41 %29 
                                         f32 %226 = OpLoad %225 
                                Private f32* %227 = OpAccessChain %97 %24 
                                                      OpStore %227 %226 
                                Uniform f32* %229 = OpAccessChain %39 %221 %228 %29 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %97 %29 
                                                      OpStore %231 %230 
                                       f32_3 %232 = OpLoad %31 
                                       f32_3 %233 = OpLoad %97 
                                         f32 %234 = OpDot %232 %233 
                                                      OpStore %137 %234 
                                       f32_3 %235 = OpLoad %9 
                              Uniform f32_4* %238 = OpAccessChain %39 %236 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFNegate %240 
                                       f32_3 %242 = OpFAdd %235 %241 
                                                      OpStore %97 %242 
                                       f32_3 %243 = OpLoad %97 
                                       f32_3 %244 = OpLoad %97 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %97 %18 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %97 %18 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpExtInst %1 31 %248 
                                Private f32* %250 = OpAccessChain %97 %18 
                                                      OpStore %250 %249 
                                         f32 %251 = OpLoad %137 
                                         f32 %252 = OpFNegate %251 
                                Private f32* %253 = OpAccessChain %97 %18 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFAdd %252 %254 
                                Private f32* %256 = OpAccessChain %97 %18 
                                                      OpStore %256 %255 
                                Uniform f32* %257 = OpAccessChain %39 %236 %14 
                                         f32 %258 = OpLoad %257 
                                Private f32* %259 = OpAccessChain %97 %18 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFMul %258 %260 
                                         f32 %262 = OpLoad %137 
                                         f32 %263 = OpFAdd %261 %262 
                                                      OpStore %137 %263 
                                         f32 %264 = OpLoad %137 
                                Uniform f32* %266 = OpAccessChain %39 %265 %29 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFMul %264 %267 
                                Uniform f32* %269 = OpAccessChain %39 %265 %14 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFAdd %268 %270 
                                                      OpStore %137 %271 
                                         f32 %272 = OpLoad %137 
                                         f32 %273 = OpExtInst %1 43 %272 %78 %129 
                                                      OpStore %137 %273 
                                Uniform f32* %276 = OpAccessChain %39 %275 %18 
                                         f32 %277 = OpLoad %276 
                                        bool %278 = OpFOrdEqual %277 %129 
                                                      OpStore %274 %278 
                                                      OpSelectionMerge %281 None 
                                                      OpBranchConditional %279 %280 %281 
                                             %280 = OpLabel 
                                        bool %282 = OpLoad %274 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %284 
                                             %283 = OpLabel 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                                      OpBranch %281 
                                             %281 = OpLabel 
                                                      OpSelectionMerge %287 None 
                                                      OpBranchConditional %285 %286 %381 
                                             %286 = OpLabel 
                                Uniform f32* %289 = OpAccessChain %39 %275 %24 
                                         f32 %290 = OpLoad %289 
                                        bool %291 = OpFOrdEqual %290 %129 
                                                      OpStore %288 %291 
                                       f32_4 %292 = OpLoad %21 
                                       f32_3 %293 = OpVectorShuffle %292 %292 3 3 3 
                              Uniform f32_4* %295 = OpAccessChain %39 %294 %41 
                                       f32_4 %296 = OpLoad %295 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpFMul %293 %297 
                                       f32_4 %299 = OpLoad %146 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %146 %300 
                              Uniform f32_4* %301 = OpAccessChain %39 %294 %81 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %12 
                                       f32_3 %305 = OpVectorShuffle %304 %304 3 3 3 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_4 %307 = OpLoad %146 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFAdd %306 %308 
                                       f32_4 %310 = OpLoad %146 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %146 %311 
                              Uniform f32_4* %312 = OpAccessChain %39 %294 %228 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %26 
                                       f32_3 %316 = OpVectorShuffle %315 %315 3 3 3 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %146 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %146 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %146 %322 
                                       f32_4 %323 = OpLoad %146 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %39 %294 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %324 %328 
                                       f32_4 %330 = OpLoad %146 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %146 %331 
                                        bool %333 = OpLoad %288 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %338 
                                             %334 = OpLabel 
                                       f32_4 %336 = OpLoad %146 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                                      OpStore %332 %337 
                                                      OpBranch %335 
                                             %338 = OpLabel 
                                       f32_3 %339 = OpLoad %9 
                                                      OpStore %332 %339 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_3 %340 = OpLoad %332 
                                                      OpStore %9 %340 
                                       f32_3 %341 = OpLoad %9 
                              Uniform f32_3* %343 = OpAccessChain %39 %342 
                                       f32_3 %344 = OpLoad %343 
                                       f32_3 %345 = OpFNegate %344 
                                       f32_3 %346 = OpFAdd %341 %345 
                                                      OpStore %9 %346 
                                       f32_3 %347 = OpLoad %9 
                              Uniform f32_3* %349 = OpAccessChain %39 %348 
                                       f32_3 %350 = OpLoad %349 
                                       f32_3 %351 = OpFMul %347 %350 
                                       f32_4 %352 = OpLoad %146 
                                       f32_4 %353 = OpVectorShuffle %352 %351 0 4 5 6 
                                                      OpStore %146 %353 
                                Private f32* %354 = OpAccessChain %146 %24 
                                         f32 %355 = OpLoad %354 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %359 = OpFAdd %357 %358 
                                Private f32* %360 = OpAccessChain %9 %18 
                                                      OpStore %360 %359 
                                Uniform f32* %362 = OpAccessChain %39 %275 %29 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %363 %171 
                                         f32 %365 = OpFAdd %364 %358 
                                                      OpStore %361 %365 
                                         f32 %366 = OpLoad %361 
                                Private f32* %367 = OpAccessChain %9 %18 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 40 %366 %368 
                                Private f32* %370 = OpAccessChain %146 %18 
                                                      OpStore %370 %369 
                  read_only Texture3DSampled %375 = OpLoad %374 
                                       f32_4 %376 = OpLoad %146 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 2 3 
                                       f32_4 %378 = OpImageSampleImplicitLod %375 %377 
                                                      OpStore %146 %378 
                                       f32_4 %380 = OpLoad %146 
                                                      OpStore %379 %380 
                                                      OpBranch %287 
                                             %381 = OpLabel 
                                Private f32* %382 = OpAccessChain %379 %18 
                                                      OpStore %382 %129 
                                Private f32* %383 = OpAccessChain %379 %24 
                                                      OpStore %383 %129 
                                Private f32* %384 = OpAccessChain %379 %29 
                                                      OpStore %384 %129 
                                Private f32* %385 = OpAccessChain %379 %14 
                                                      OpStore %385 %129 
                                                      OpBranch %287 
                                             %287 = OpLabel 
                                       f32_4 %386 = OpLoad %379 
                              Uniform f32_4* %387 = OpAccessChain %39 %325 
                                       f32_4 %388 = OpLoad %387 
                                         f32 %389 = OpDot %386 %388 
                                                      OpStore %122 %389 
                                         f32 %390 = OpLoad %122 
                                         f32 %391 = OpExtInst %1 43 %390 %78 %129 
                                                      OpStore %122 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_4 %395 = OpLoad %392 
                                       f32_2 %396 = OpVectorShuffle %395 %395 3 3 
                                       f32_2 %397 = OpFDiv %394 %396 
                                       f32_3 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %397 3 4 2 
                                                      OpStore %9 %399 
                  read_only Texture2DSampled %402 = OpLoad %401 
                                       f32_3 %403 = OpLoad %9 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
                                       f32_4 %405 = OpImageSampleImplicitLod %402 %404 
                                         f32 %406 = OpCompositeExtract %405 0 
                                                      OpStore %400 %406 
                                         f32 %408 = OpLoad %137 
                                         f32 %409 = OpLoad %400 
                                         f32 %410 = OpFAdd %408 %409 
                                                      OpStore %407 %410 
                                         f32 %411 = OpLoad %407 
                                         f32 %412 = OpExtInst %1 43 %411 %78 %129 
                                                      OpStore %407 %412 
                                         f32 %413 = OpLoad %122 
                                         f32 %414 = OpLoad %407 
                                         f32 %415 = OpExtInst %1 37 %413 %414 
                                                      OpStore %122 %415 
                                        bool %418 = OpLoad %274 
                                                      OpSelectionMerge %420 None 
                                                      OpBranchConditional %418 %419 %422 
                                             %419 = OpLabel 
                                         f32 %421 = OpLoad %122 
                                                      OpStore %417 %421 
                                                      OpBranch %420 
                                             %422 = OpLabel 
                                         f32 %423 = OpLoad %407 
                                                      OpStore %417 %423 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         f32 %424 = OpLoad %417 
                                                      OpStore %122 %424 
                                       f32_4 %425 = OpLoad %12 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpLoad %67 
                                         f32 %428 = OpDot %426 %427 
                                Private f32* %429 = OpAccessChain %97 %18 
                                                      OpStore %429 %428 
                                       f32_4 %430 = OpLoad %21 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_3 %432 = OpLoad %67 
                                         f32 %433 = OpDot %431 %432 
                                Private f32* %434 = OpAccessChain %97 %24 
                                                      OpStore %434 %433 
                                       f32_4 %435 = OpLoad %26 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpLoad %67 
                                         f32 %438 = OpDot %436 %437 
                                Private f32* %439 = OpAccessChain %97 %29 
                                                      OpStore %439 %438 
                                       f32_3 %440 = OpLoad %97 
                                       f32_3 %441 = OpLoad %97 
                                         f32 %442 = OpDot %440 %441 
                                Private f32* %443 = OpAccessChain %9 %18 
                                                      OpStore %443 %442 
                                Private f32* %444 = OpAccessChain %9 %18 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpExtInst %1 32 %445 
                                Private f32* %447 = OpAccessChain %9 %18 
                                                      OpStore %447 %446 
                                       f32_3 %448 = OpLoad %9 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 0 0 
                                       f32_3 %450 = OpLoad %97 
                                       f32_3 %451 = OpFMul %449 %450 
                                                      OpStore %9 %451 
                                       f32_3 %453 = OpLoad %195 
                                       f32_3 %454 = OpVectorShuffle %453 %453 1 1 2 
                                       f32_3 %457 = OpLoad %456 
                                       f32_3 %458 = OpFMul %454 %457 
                                       f32_4 %459 = OpLoad %452 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                      OpStore %452 %460 
                                       f32_3 %461 = OpLoad %31 
                                       f32_4 %462 = OpLoad %47 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 0 0 
                                       f32_3 %464 = OpFMul %461 %463 
                              Uniform f32_4* %465 = OpAccessChain %39 %228 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFAdd %464 %467 
                                                      OpStore %67 %468 
                                       f32_3 %469 = OpLoad %67 
                                       f32_3 %470 = OpLoad %67 
                                         f32 %471 = OpDot %469 %470 
                                                      OpStore %407 %471 
                                         f32 %472 = OpLoad %407 
                                         f32 %473 = OpExtInst %1 32 %472 
                                                      OpStore %407 %473 
                                       f32_3 %474 = OpLoad %67 
                                         f32 %475 = OpLoad %407 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %67 %477 
                                       f32_3 %478 = OpLoad %9 
                                       f32_3 %479 = OpLoad %67 
                                         f32 %480 = OpDot %478 %479 
                                Private f32* %481 = OpAccessChain %67 %18 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %67 %18 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpExtInst %1 40 %483 %78 
                                Private f32* %485 = OpAccessChain %67 %18 
                                                      OpStore %485 %484 
                                Private f32* %487 = OpAccessChain %67 %18 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpExtInst %1 30 %488 
                                Private f32* %490 = OpAccessChain %486 %18 
                                                      OpStore %490 %489 
                                Private f32* %491 = OpAccessChain %486 %18 
                                         f32 %492 = OpLoad %491 
                                         f32 %494 = OpFMul %492 %493 
                                Private f32* %495 = OpAccessChain %486 %18 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %486 %18 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpExtInst %1 29 %497 
                                Private f32* %499 = OpAccessChain %486 %18 
                                                      OpStore %499 %498 
                                       f32_3 %500 = OpLoad %486 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 0 0 
                              Uniform f32_4* %503 = OpAccessChain %39 %502 
                                       f32_4 %504 = OpLoad %503 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                                       f32_3 %506 = OpFMul %501 %505 
                                                      OpStore %486 %506 
                                       f32_3 %507 = OpLoad %195 
                              Uniform f32_4* %508 = OpAccessChain %39 %502 
                                       f32_4 %509 = OpLoad %508 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFMul %507 %510 
                                       f32_3 %512 = OpLoad %486 
                                       f32_3 %513 = OpFAdd %511 %512 
                                                      OpStore %486 %513 
                                         f32 %514 = OpLoad %122 
                                       f32_3 %515 = OpCompositeConstruct %514 %514 %514 
                                       f32_3 %516 = OpLoad %486 
                                       f32_3 %517 = OpFMul %515 %516 
                                       f32_4 %518 = OpLoad %56 
                                       f32_4 %519 = OpVectorShuffle %518 %517 4 5 6 3 
                                                      OpStore %56 %519 
                                       f32_4 %520 = OpLoad %56 
                                       f32_4 %521 = OpFNegate %520 
                              Uniform f32_4* %523 = OpAccessChain %39 %522 
                                       f32_4 %524 = OpLoad %523 
                                       f32_4 %525 = OpFAdd %521 %524 
                                                      OpStore %47 %525 
                              Uniform f32_4* %526 = OpAccessChain %39 %522 
                                       f32_4 %527 = OpLoad %526 
                                       f32_4 %528 = OpVectorShuffle %527 %527 3 3 3 3 
                                       f32_4 %529 = OpLoad %47 
                                       f32_4 %530 = OpFMul %528 %529 
                                       f32_4 %531 = OpLoad %56 
                                       f32_4 %532 = OpFAdd %530 %531 
                                                      OpStore %47 %532 
                                Private f32* %533 = OpAccessChain %452 %14 
                                                      OpStore %533 %78 
                                       f32_4 %536 = OpLoad %47 
                                       f32_4 %537 = OpLoad %452 
                                       f32_4 %538 = OpFAdd %536 %537 
                                                      OpStore %535 %538 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
out vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
bool u_xlatb7;
float u_xlat21;
float u_xlat23;
float u_xlat24;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb7 = 0.0<_Perpendicular;
    u_xlat7 = (u_xlatb7) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat7 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat2.xyz = vec3(u_xlat23) * u_xlat2.xyz;
    vs_TEXCOORD1.x = u_xlat2.z;
    u_xlat23 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.zxy;
    u_xlat4.xyz = u_xlat3.yzx * u_xlat2.yzx + (-u_xlat4.xyz);
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat4.xyz;
    vs_TEXCOORD1.y = u_xlat4.x;
    vs_TEXCOORD1.z = u_xlat3.x;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD2.y = u_xlat4.y;
    vs_TEXCOORD3.y = u_xlat4.z;
    vs_TEXCOORD2.z = u_xlat3.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat3.z;
    vs_TEXCOORD4 = u_xlat0;
    vs_TEXCOORD5 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat21 = u_xlat3.y * u_xlat3.y;
    u_xlat21 = u_xlat3.x * u_xlat3.x + (-u_xlat21);
    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat2);
    u_xlat4.y = dot(unity_SHBg, u_xlat2);
    u_xlat4.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
    u_xlat3.w = 1.0;
    u_xlat4.x = dot(unity_SHAr, u_xlat3);
    u_xlat4.y = dot(unity_SHAg, u_xlat3);
    u_xlat4.z = dot(unity_SHAb, u_xlat3);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat3.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat3.xxxx + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat4 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = u_xlat0 * u_xlat3.zzzz + u_xlat5;
    u_xlat3 = max(u_xlat4, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat3);
    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat3 * u_xlat0;
    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec3 vs_TEXCOORD6;
in  vec4 vs_TEXCOORD7;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec3 u_xlat6;
vec2 u_xlat12;
float u_xlat19;
bool u_xlatb19;
float u_xlat21;
bool u_xlatb21;
bool u_xlatb22;
void main()
{
    u_xlat6.x = vs_TEXCOORD1.w;
    u_xlat6.y = vs_TEXCOORD2.w;
    u_xlat6.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat19 = u_xlat2.w + -0.100000001;
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat19 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat19) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat19 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat19 = min(u_xlat19, 1.0);
    u_xlat19 = (-u_xlat19) + 1.0;
    u_xlat4.z = sqrt(u_xlat19);
    u_xlat19 = fract(_Time.y);
    u_xlat3.x = u_xlat19 * 4.0;
    u_xlat21 = vs_TEXCOORD4.x + (-vs_TEXCOORD5.x);
    u_xlat21 = u_xlat21 + vs_TEXCOORD4.y;
    u_xlat21 = u_xlat21 + (-vs_TEXCOORD5.y);
    u_xlat21 = u_xlat21 * 0.5 + -0.100000001;
    u_xlat21 = fract(u_xlat21);
    u_xlatb3 = u_xlat3.x<u_xlat21;
    u_xlat19 = u_xlat19 * 4.0 + 0.100000001;
    u_xlatb19 = u_xlat21<u_xlat19;
    u_xlatb19 = u_xlatb19 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb19)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat19 = u_xlat2.w + (-_Cutoff);
    u_xlatb19 = u_xlat19<0.0;
    if((int(u_xlatb19) * int(0xffffffffu))!=0){discard;}
    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat19 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat5.xyz = u_xlat6.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = (-u_xlat19) + u_xlat21;
    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat21 + u_xlat19;
    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlatb21 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat5.xyz : u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat5.y * 0.25 + 0.75;
        u_xlat12.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat12.x, u_xlat6.x);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat6.x = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat12.xy);
    u_xlat12.x = u_xlat19 + u_xlat10_5.x;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat6.x = min(u_xlat12.x, u_xlat6.x);
    u_xlat6.x = (u_xlatb21) ? u_xlat6.x : u_xlat12.x;
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat12.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat3.yyz * vs_TEXCOORD6.xyz;
    u_xlat0.xzw = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xxx;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xzw);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xzw = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xzw;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat0.xzw;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    u_xlat0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    u_xlat5.w = 0.0;
    SV_Target0 = u_xlat0 + u_xlat5;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 590
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %164 %170 %171 %183 %188 %246 %306 %310 %332 %334 %552 %572 %584 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 RelaxedPrecision 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 RelaxedPrecision 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 RelaxedPrecision 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 RelaxedPrecision 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 RelaxedPrecision 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 RelaxedPrecision 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 RelaxedPrecision 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 RelaxedPrecision 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpMemberDecorate %23 12 RelaxedPrecision 
                                                      OpMemberDecorate %23 12 Offset 23 
                                                      OpMemberDecorate %23 13 Offset 23 
                                                      OpMemberDecorate %23 14 Offset 23 
                                                      OpMemberDecorate %23 15 Offset 23 
                                                      OpMemberDecorate %23 16 Offset 23 
                                                      OpMemberDecorate %23 17 Offset 23 
                                                      OpMemberDecorate %23 18 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpMemberDecorate %162 0 BuiltIn 162 
                                                      OpMemberDecorate %162 1 BuiltIn 162 
                                                      OpMemberDecorate %162 2 BuiltIn 162 
                                                      OpDecorate %162 Block 
                                                      OpDecorate %170 Location 170 
                                                      OpDecorate %171 Location 171 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate %246 Location 246 
                                                      OpDecorate %306 Location 306 
                                                      OpDecorate %310 Location 310 
                                                      OpDecorate %332 Location 332 
                                                      OpDecorate %334 Location 334 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %381 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %552 Location 552 
                                                      OpDecorate %572 Location 572 
                                                      OpDecorate %584 Location 584 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 8 
                                              %18 = OpTypeArray %7 %17 
                                          u32 %19 = OpConstant 4 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeArray %7 %19 
                                              %22 = OpTypeArray %7 %19 
                                              %23 = OpTypeStruct %7 %7 %7 %7 %7 %18 %7 %7 %7 %7 %7 %7 %7 %20 %21 %7 %22 %6 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %25 = OpVariable Uniform 
                                              %26 = OpTypeInt 32 1 
                                          i32 %27 = OpConstant 13 
                                          i32 %28 = OpConstant 1 
                                              %29 = OpTypePointer Uniform %6 
                                          u32 %33 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                                          i32 %36 = OpConstant 0 
                                          i32 %46 = OpConstant 2 
                                          u32 %49 = OpConstant 2 
                                          i32 %57 = OpConstant 3 
                                          u32 %60 = OpConstant 3 
                                              %75 = OpTypeBool 
                                              %76 = OpTypePointer Private %75 
                                Private bool* %77 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %79 = OpConstant 17 
                                 Private f32* %83 = OpVariable Private 
                                              %84 = OpTypePointer Function %6 
                                          f32 %89 = OpConstant 3.674022E-40 
                                          f32 %91 = OpConstant 3.674022E-40 
                              Private f32_4* %101 = OpVariable Private 
                                             %104 = OpTypePointer Uniform %7 
                              Private f32_4* %133 = OpVariable Private 
                                         i32 %136 = OpConstant 16 
                                             %161 = OpTypeArray %6 %13 
                                             %162 = OpTypeStruct %7 %6 %161 
                                             %163 = OpTypePointer Output %162 
        Output struct {f32_4; f32; f32[1];}* %164 = OpVariable Output 
                                             %166 = OpTypePointer Output %7 
                                             %168 = OpTypeVector %6 2 
                                             %169 = OpTypePointer Output %168 
                               Output f32_2* %170 = OpVariable Output 
                                Input f32_4* %171 = OpVariable Input 
                                         i32 %174 = OpConstant 18 
                               Output f32_4* %183 = OpVariable Output 
                                             %186 = OpTypePointer Output %6 
                                Input f32_4* %188 = OpVariable Input 
                                             %189 = OpTypeVector %6 3 
                                Private f32* %220 = OpVariable Private 
                                         i32 %240 = OpConstant 15 
                              Private f32_4* %244 = OpVariable Private 
                                             %245 = OpTypePointer Input %189 
                                Input f32_3* %246 = OpVariable Input 
                                         i32 %248 = OpConstant 14 
                                Private f32* %266 = OpVariable Private 
                                             %281 = OpTypePointer Private %189 
                              Private f32_3* %282 = OpVariable Private 
                               Output f32_4* %306 = OpVariable Output 
                               Output f32_4* %310 = OpVariable Output 
                               Output f32_4* %332 = OpVariable Output 
                               Output f32_4* %334 = OpVariable Output 
                              Private f32_3* %337 = OpVariable Private 
                              Private f32_4* %354 = OpVariable Private 
                              Private f32_3* %360 = OpVariable Private 
                                         i32 %361 = OpConstant 9 
                                         i32 %367 = OpConstant 10 
                                         i32 %373 = OpConstant 11 
                                         i32 %379 = OpConstant 12 
                                         i32 %389 = OpConstant 6 
                                         i32 %395 = OpConstant 7 
                                         i32 %401 = OpConstant 8 
                                       f32_3 %411 = OpConstantComposite %78 %78 %78 
                                         f32 %416 = OpConstant 3.674022E-40 
                                       f32_3 %417 = OpConstantComposite %416 %416 %416 
                                         f32 %422 = OpConstant 3.674022E-40 
                                       f32_3 %423 = OpConstantComposite %422 %422 %422 
                                         f32 %425 = OpConstant 3.674022E-40 
                                       f32_3 %426 = OpConstantComposite %425 %425 %425 
                              Private f32_4* %436 = OpVariable Private 
                              Private f32_4* %444 = OpVariable Private 
                                         f32 %480 = OpConstant 3.674022E-40 
                                       f32_4 %481 = OpConstantComposite %480 %480 %480 %480 
                                         i32 %486 = OpConstant 4 
                                       f32_4 %490 = OpConstantComposite %91 %91 %91 %91 
                                       f32_4 %498 = OpConstantComposite %78 %78 %78 %78 
                                         i32 %505 = OpConstant 5 
                                             %551 = OpTypePointer Output %189 
                               Output f32_3* %552 = OpVariable Output 
                                         f32 %563 = OpConstant 3.674022E-40 
                                       f32_2 %568 = OpConstantComposite %563 %563 
                               Output f32_4* %572 = OpVariable Output 
                               Output f32_4* %584 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %85 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %30 = OpAccessChain %25 %27 %28 %13 
                                          f32 %31 = OpLoad %30 
                                          f32 %32 = OpFMul %16 %31 
                                 Private f32* %35 = OpAccessChain %9 %33 
                                                      OpStore %35 %32 
                                 Uniform f32* %37 = OpAccessChain %25 %27 %36 %13 
                                          f32 %38 = OpLoad %37 
                                   Input f32* %39 = OpAccessChain %11 %33 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFMul %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %33 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFAdd %41 %43 
                                 Private f32* %45 = OpAccessChain %9 %33 
                                                      OpStore %45 %44 
                                 Uniform f32* %47 = OpAccessChain %25 %27 %46 %13 
                                          f32 %48 = OpLoad %47 
                                   Input f32* %50 = OpAccessChain %11 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFMul %48 %51 
                                 Private f32* %53 = OpAccessChain %9 %33 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFAdd %52 %54 
                                 Private f32* %56 = OpAccessChain %9 %33 
                                                      OpStore %56 %55 
                                 Uniform f32* %58 = OpAccessChain %25 %27 %57 %13 
                                          f32 %59 = OpLoad %58 
                                   Input f32* %61 = OpAccessChain %11 %60 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFMul %59 %62 
                                 Private f32* %64 = OpAccessChain %9 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                 Private f32* %67 = OpAccessChain %9 %33 
                                                      OpStore %67 %66 
                                 Private f32* %68 = OpAccessChain %9 %33 
                                          f32 %69 = OpLoad %68 
                                 Uniform f32* %70 = OpAccessChain %25 %27 %57 %13 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFNegate %71 
                                          f32 %73 = OpFAdd %69 %72 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                                      OpStore %74 %73 
                                 Uniform f32* %80 = OpAccessChain %25 %79 
                                          f32 %81 = OpLoad %80 
                                         bool %82 = OpFOrdLessThan %78 %81 
                                                      OpStore %77 %82 
                                         bool %86 = OpLoad %77 
                                                      OpSelectionMerge %88 None 
                                                      OpBranchConditional %86 %87 %90 
                                              %87 = OpLabel 
                                                      OpStore %85 %89 
                                                      OpBranch %88 
                                              %90 = OpLabel 
                                                      OpStore %85 %91 
                                                      OpBranch %88 
                                              %88 = OpLabel 
                                          f32 %92 = OpLoad %85 
                                                      OpStore %83 %92 
                                 Private f32* %93 = OpAccessChain %9 %33 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpLoad %83 
                                          f32 %96 = OpFMul %94 %95 
                                   Input f32* %97 = OpAccessChain %11 %49 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFAdd %96 %98 
                                Private f32* %100 = OpAccessChain %9 %33 
                                                      OpStore %100 %99 
                                       f32_4 %102 = OpLoad %11 
                                       f32_4 %103 = OpVectorShuffle %102 %102 1 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %25 %27 %28 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpFMul %103 %106 
                                                      OpStore %101 %107 
                              Uniform f32_4* %108 = OpAccessChain %25 %27 %36 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpLoad %11 
                                       f32_4 %111 = OpVectorShuffle %110 %110 0 0 0 0 
                                       f32_4 %112 = OpFMul %109 %111 
                                       f32_4 %113 = OpLoad %101 
                                       f32_4 %114 = OpFAdd %112 %113 
                                                      OpStore %101 %114 
                              Uniform f32_4* %115 = OpAccessChain %25 %27 %46 
                                       f32_4 %116 = OpLoad %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %117 0 0 0 0 
                                       f32_4 %119 = OpFMul %116 %118 
                                       f32_4 %120 = OpLoad %101 
                                       f32_4 %121 = OpFAdd %119 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                              Uniform f32_4* %123 = OpAccessChain %25 %27 %57 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpFAdd %122 %124 
                                                      OpStore %101 %125 
                              Uniform f32_4* %126 = OpAccessChain %25 %27 %57 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpLoad %11 
                                       f32_4 %129 = OpVectorShuffle %128 %128 3 3 3 3 
                                       f32_4 %130 = OpFMul %127 %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpFAdd %130 %131 
                                                      OpStore %9 %132 
                                       f32_4 %134 = OpLoad %101 
                                       f32_4 %135 = OpVectorShuffle %134 %134 1 1 1 1 
                              Uniform f32_4* %137 = OpAccessChain %25 %136 %28 
                                       f32_4 %138 = OpLoad %137 
                                       f32_4 %139 = OpFMul %135 %138 
                                                      OpStore %133 %139 
                              Uniform f32_4* %140 = OpAccessChain %25 %136 %36 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpLoad %101 
                                       f32_4 %143 = OpVectorShuffle %142 %142 0 0 0 0 
                                       f32_4 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %133 
                                       f32_4 %146 = OpFAdd %144 %145 
                                                      OpStore %133 %146 
                              Uniform f32_4* %147 = OpAccessChain %25 %136 %46 
                                       f32_4 %148 = OpLoad %147 
                                       f32_4 %149 = OpLoad %101 
                                       f32_4 %150 = OpVectorShuffle %149 %149 2 2 2 2 
                                       f32_4 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %133 
                                       f32_4 %153 = OpFAdd %151 %152 
                                                      OpStore %133 %153 
                              Uniform f32_4* %154 = OpAccessChain %25 %136 %57 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %101 
                                       f32_4 %157 = OpVectorShuffle %156 %156 3 3 3 3 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %133 
                                       f32_4 %160 = OpFAdd %158 %159 
                                                      OpStore %101 %160 
                                       f32_4 %165 = OpLoad %101 
                               Output f32_4* %167 = OpAccessChain %164 %36 
                                                      OpStore %167 %165 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                              Uniform f32_4* %175 = OpAccessChain %25 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_2 %177 = OpVectorShuffle %176 %176 0 1 
                                       f32_2 %178 = OpFMul %173 %177 
                              Uniform f32_4* %179 = OpAccessChain %25 %174 
                                       f32_4 %180 = OpLoad %179 
                                       f32_2 %181 = OpVectorShuffle %180 %180 2 3 
                                       f32_2 %182 = OpFAdd %178 %181 
                                                      OpStore %170 %182 
                                Private f32* %184 = OpAccessChain %9 %33 
                                         f32 %185 = OpLoad %184 
                                 Output f32* %187 = OpAccessChain %183 %60 
                                                      OpStore %187 %185 
                                       f32_4 %190 = OpLoad %188 
                                       f32_3 %191 = OpVectorShuffle %190 %190 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %25 %27 %28 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 1 2 0 
                                       f32_3 %195 = OpFMul %191 %194 
                                       f32_4 %196 = OpLoad %133 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %133 %197 
                              Uniform f32_4* %198 = OpAccessChain %25 %27 %36 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 1 2 0 
                                       f32_4 %201 = OpLoad %188 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %133 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFAdd %203 %205 
                                       f32_4 %207 = OpLoad %133 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %133 %208 
                              Uniform f32_4* %209 = OpAccessChain %25 %27 %46 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 1 2 0 
                                       f32_4 %212 = OpLoad %188 
                                       f32_3 %213 = OpVectorShuffle %212 %212 2 2 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %133 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %133 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %133 %219 
                                       f32_4 %221 = OpLoad %133 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_4 %223 = OpLoad %133 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                         f32 %225 = OpDot %222 %224 
                                                      OpStore %220 %225 
                                         f32 %226 = OpLoad %220 
                                         f32 %227 = OpExtInst %1 32 %226 
                                                      OpStore %220 %227 
                                         f32 %228 = OpLoad %220 
                                       f32_3 %229 = OpCompositeConstruct %228 %228 %228 
                                       f32_4 %230 = OpLoad %133 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_4 %233 = OpLoad %133 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %133 %234 
                                Private f32* %235 = OpAccessChain %133 %49 
                                         f32 %236 = OpLoad %235 
                                 Output f32* %237 = OpAccessChain %183 %33 
                                                      OpStore %237 %236 
                                  Input f32* %238 = OpAccessChain %188 %60 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %241 = OpAccessChain %25 %240 %60 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %239 %242 
                                                      OpStore %220 %243 
                                       f32_3 %247 = OpLoad %246 
                              Uniform f32_4* %249 = OpAccessChain %25 %248 %36 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpDot %247 %251 
                                Private f32* %253 = OpAccessChain %244 %33 
                                                      OpStore %253 %252 
                                       f32_3 %254 = OpLoad %246 
                              Uniform f32_4* %255 = OpAccessChain %25 %248 %28 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %254 %257 
                                Private f32* %259 = OpAccessChain %244 %13 
                                                      OpStore %259 %258 
                                       f32_3 %260 = OpLoad %246 
                              Uniform f32_4* %261 = OpAccessChain %25 %248 %46 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %260 %263 
                                Private f32* %265 = OpAccessChain %244 %49 
                                                      OpStore %265 %264 
                                       f32_4 %267 = OpLoad %244 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %244 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                         f32 %271 = OpDot %268 %270 
                                                      OpStore %266 %271 
                                         f32 %272 = OpLoad %266 
                                         f32 %273 = OpExtInst %1 32 %272 
                                                      OpStore %266 %273 
                                         f32 %274 = OpLoad %266 
                                       f32_3 %275 = OpCompositeConstruct %274 %274 %274 
                                       f32_4 %276 = OpLoad %244 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFMul %275 %277 
                                       f32_4 %279 = OpLoad %244 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %244 %280 
                                       f32_4 %283 = OpLoad %133 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_4 %285 = OpLoad %244 
                                       f32_3 %286 = OpVectorShuffle %285 %285 2 0 1 
                                       f32_3 %287 = OpFMul %284 %286 
                                                      OpStore %282 %287 
                                       f32_4 %288 = OpLoad %244 
                                       f32_3 %289 = OpVectorShuffle %288 %288 1 2 0 
                                       f32_4 %290 = OpLoad %133 
                                       f32_3 %291 = OpVectorShuffle %290 %290 1 2 0 
                                       f32_3 %292 = OpFMul %289 %291 
                                       f32_3 %293 = OpLoad %282 
                                       f32_3 %294 = OpFNegate %293 
                                       f32_3 %295 = OpFAdd %292 %294 
                                                      OpStore %282 %295 
                                         f32 %296 = OpLoad %220 
                                       f32_3 %297 = OpCompositeConstruct %296 %296 %296 
                                       f32_3 %298 = OpLoad %282 
                                       f32_3 %299 = OpFMul %297 %298 
                                                      OpStore %282 %299 
                                Private f32* %300 = OpAccessChain %282 %33 
                                         f32 %301 = OpLoad %300 
                                 Output f32* %302 = OpAccessChain %183 %13 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %244 %33 
                                         f32 %304 = OpLoad %303 
                                 Output f32* %305 = OpAccessChain %183 %49 
                                                      OpStore %305 %304 
                                Private f32* %307 = OpAccessChain %133 %33 
                                         f32 %308 = OpLoad %307 
                                 Output f32* %309 = OpAccessChain %306 %33 
                                                      OpStore %309 %308 
                                Private f32* %311 = OpAccessChain %133 %13 
                                         f32 %312 = OpLoad %311 
                                 Output f32* %313 = OpAccessChain %310 %33 
                                                      OpStore %313 %312 
                                Private f32* %314 = OpAccessChain %9 %13 
                                         f32 %315 = OpLoad %314 
                                 Output f32* %316 = OpAccessChain %306 %60 
                                                      OpStore %316 %315 
                                Private f32* %317 = OpAccessChain %282 %13 
                                         f32 %318 = OpLoad %317 
                                 Output f32* %319 = OpAccessChain %306 %13 
                                                      OpStore %319 %318 
                                Private f32* %320 = OpAccessChain %282 %49 
                                         f32 %321 = OpLoad %320 
                                 Output f32* %322 = OpAccessChain %310 %13 
                                                      OpStore %322 %321 
                                Private f32* %323 = OpAccessChain %244 %13 
                                         f32 %324 = OpLoad %323 
                                 Output f32* %325 = OpAccessChain %306 %49 
                                                      OpStore %325 %324 
                                Private f32* %326 = OpAccessChain %9 %49 
                                         f32 %327 = OpLoad %326 
                                 Output f32* %328 = OpAccessChain %310 %60 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %244 %49 
                                         f32 %330 = OpLoad %329 
                                 Output f32* %331 = OpAccessChain %310 %49 
                                                      OpStore %331 %330 
                                       f32_4 %333 = OpLoad %9 
                                                      OpStore %332 %333 
                              Uniform f32_4* %335 = OpAccessChain %25 %27 %57 
                                       f32_4 %336 = OpLoad %335 
                                                      OpStore %334 %336 
                                Private f32* %338 = OpAccessChain %244 %13 
                                         f32 %339 = OpLoad %338 
                                Private f32* %340 = OpAccessChain %244 %13 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %339 %341 
                                Private f32* %343 = OpAccessChain %337 %33 
                                                      OpStore %343 %342 
                                Private f32* %344 = OpAccessChain %244 %33 
                                         f32 %345 = OpLoad %344 
                                Private f32* %346 = OpAccessChain %244 %33 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpFMul %345 %347 
                                Private f32* %349 = OpAccessChain %337 %33 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFAdd %348 %351 
                                Private f32* %353 = OpAccessChain %337 %33 
                                                      OpStore %353 %352 
                                       f32_4 %355 = OpLoad %244 
                                       f32_4 %356 = OpVectorShuffle %355 %355 1 2 2 0 
                                       f32_4 %357 = OpLoad %244 
                                       f32_4 %358 = OpVectorShuffle %357 %357 0 1 2 2 
                                       f32_4 %359 = OpFMul %356 %358 
                                                      OpStore %354 %359 
                              Uniform f32_4* %362 = OpAccessChain %25 %361 
                                       f32_4 %363 = OpLoad %362 
                                       f32_4 %364 = OpLoad %354 
                                         f32 %365 = OpDot %363 %364 
                                Private f32* %366 = OpAccessChain %360 %33 
                                                      OpStore %366 %365 
                              Uniform f32_4* %368 = OpAccessChain %25 %367 
                                       f32_4 %369 = OpLoad %368 
                                       f32_4 %370 = OpLoad %354 
                                         f32 %371 = OpDot %369 %370 
                                Private f32* %372 = OpAccessChain %360 %13 
                                                      OpStore %372 %371 
                              Uniform f32_4* %374 = OpAccessChain %25 %373 
                                       f32_4 %375 = OpLoad %374 
                                       f32_4 %376 = OpLoad %354 
                                         f32 %377 = OpDot %375 %376 
                                Private f32* %378 = OpAccessChain %360 %49 
                                                      OpStore %378 %377 
                              Uniform f32_4* %380 = OpAccessChain %25 %379 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpLoad %337 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 0 0 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_3 %386 = OpLoad %360 
                                       f32_3 %387 = OpFAdd %385 %386 
                                                      OpStore %337 %387 
                                Private f32* %388 = OpAccessChain %244 %60 
                                                      OpStore %388 %91 
                              Uniform f32_4* %390 = OpAccessChain %25 %389 
                                       f32_4 %391 = OpLoad %390 
                                       f32_4 %392 = OpLoad %244 
                                         f32 %393 = OpDot %391 %392 
                                Private f32* %394 = OpAccessChain %360 %33 
                                                      OpStore %394 %393 
                              Uniform f32_4* %396 = OpAccessChain %25 %395 
                                       f32_4 %397 = OpLoad %396 
                                       f32_4 %398 = OpLoad %244 
                                         f32 %399 = OpDot %397 %398 
                                Private f32* %400 = OpAccessChain %360 %13 
                                                      OpStore %400 %399 
                              Uniform f32_4* %402 = OpAccessChain %25 %401 
                                       f32_4 %403 = OpLoad %402 
                                       f32_4 %404 = OpLoad %244 
                                         f32 %405 = OpDot %403 %404 
                                Private f32* %406 = OpAccessChain %360 %49 
                                                      OpStore %406 %405 
                                       f32_3 %407 = OpLoad %337 
                                       f32_3 %408 = OpLoad %360 
                                       f32_3 %409 = OpFAdd %407 %408 
                                                      OpStore %337 %409 
                                       f32_3 %410 = OpLoad %337 
                                       f32_3 %412 = OpExtInst %1 40 %410 %411 
                                                      OpStore %337 %412 
                                       f32_3 %413 = OpLoad %337 
                                       f32_3 %414 = OpExtInst %1 30 %413 
                                                      OpStore %282 %414 
                                       f32_3 %415 = OpLoad %282 
                                       f32_3 %418 = OpFMul %415 %417 
                                                      OpStore %282 %418 
                                       f32_3 %419 = OpLoad %282 
                                       f32_3 %420 = OpExtInst %1 29 %419 
                                                      OpStore %282 %420 
                                       f32_3 %421 = OpLoad %282 
                                       f32_3 %424 = OpFMul %421 %423 
                                       f32_3 %427 = OpFAdd %424 %426 
                                                      OpStore %282 %427 
                                       f32_3 %428 = OpLoad %282 
                                       f32_3 %429 = OpExtInst %1 40 %428 %411 
                                                      OpStore %282 %429 
                                       f32_4 %430 = OpLoad %9 
                                       f32_4 %431 = OpVectorShuffle %430 %430 1 1 1 1 
                                       f32_4 %432 = OpFNegate %431 
                              Uniform f32_4* %433 = OpAccessChain %25 %46 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %435 = OpFAdd %432 %434 
                                                      OpStore %133 %435 
                                       f32_4 %437 = OpLoad %244 
                                       f32_4 %438 = OpVectorShuffle %437 %437 1 1 1 1 
                                       f32_4 %439 = OpLoad %133 
                                       f32_4 %440 = OpFMul %438 %439 
                                                      OpStore %436 %440 
                                       f32_4 %441 = OpLoad %133 
                                       f32_4 %442 = OpLoad %133 
                                       f32_4 %443 = OpFMul %441 %442 
                                                      OpStore %133 %443 
                                       f32_4 %445 = OpLoad %9 
                                       f32_4 %446 = OpVectorShuffle %445 %445 0 0 0 0 
                                       f32_4 %447 = OpFNegate %446 
                              Uniform f32_4* %448 = OpAccessChain %25 %28 
                                       f32_4 %449 = OpLoad %448 
                                       f32_4 %450 = OpFAdd %447 %449 
                                                      OpStore %444 %450 
                                       f32_4 %451 = OpLoad %9 
                                       f32_4 %452 = OpVectorShuffle %451 %451 2 2 2 2 
                                       f32_4 %453 = OpFNegate %452 
                              Uniform f32_4* %454 = OpAccessChain %25 %57 
                                       f32_4 %455 = OpLoad %454 
                                       f32_4 %456 = OpFAdd %453 %455 
                                                      OpStore %9 %456 
                                       f32_4 %457 = OpLoad %444 
                                       f32_4 %458 = OpLoad %244 
                                       f32_4 %459 = OpVectorShuffle %458 %458 0 0 0 0 
                                       f32_4 %460 = OpFMul %457 %459 
                                       f32_4 %461 = OpLoad %436 
                                       f32_4 %462 = OpFAdd %460 %461 
                                                      OpStore %436 %462 
                                       f32_4 %463 = OpLoad %444 
                                       f32_4 %464 = OpLoad %444 
                                       f32_4 %465 = OpFMul %463 %464 
                                       f32_4 %466 = OpLoad %133 
                                       f32_4 %467 = OpFAdd %465 %466 
                                                      OpStore %133 %467 
                                       f32_4 %468 = OpLoad %9 
                                       f32_4 %469 = OpLoad %9 
                                       f32_4 %470 = OpFMul %468 %469 
                                       f32_4 %471 = OpLoad %133 
                                       f32_4 %472 = OpFAdd %470 %471 
                                                      OpStore %133 %472 
                                       f32_4 %473 = OpLoad %9 
                                       f32_4 %474 = OpLoad %244 
                                       f32_4 %475 = OpVectorShuffle %474 %474 2 2 2 2 
                                       f32_4 %476 = OpFMul %473 %475 
                                       f32_4 %477 = OpLoad %436 
                                       f32_4 %478 = OpFAdd %476 %477 
                                                      OpStore %9 %478 
                                       f32_4 %479 = OpLoad %133 
                                       f32_4 %482 = OpExtInst %1 40 %479 %481 
                                                      OpStore %133 %482 
                                       f32_4 %483 = OpLoad %133 
                                       f32_4 %484 = OpExtInst %1 32 %483 
                                                      OpStore %244 %484 
                                       f32_4 %485 = OpLoad %133 
                              Uniform f32_4* %487 = OpAccessChain %25 %486 
                                       f32_4 %488 = OpLoad %487 
                                       f32_4 %489 = OpFMul %485 %488 
                                       f32_4 %491 = OpFAdd %489 %490 
                                                      OpStore %133 %491 
                                       f32_4 %492 = OpLoad %133 
                                       f32_4 %493 = OpFDiv %490 %492 
                                                      OpStore %133 %493 
                                       f32_4 %494 = OpLoad %9 
                                       f32_4 %495 = OpLoad %244 
                                       f32_4 %496 = OpFMul %494 %495 
                                                      OpStore %9 %496 
                                       f32_4 %497 = OpLoad %9 
                                       f32_4 %499 = OpExtInst %1 40 %497 %498 
                                                      OpStore %9 %499 
                                       f32_4 %500 = OpLoad %133 
                                       f32_4 %501 = OpLoad %9 
                                       f32_4 %502 = OpFMul %500 %501 
                                                      OpStore %9 %502 
                                       f32_4 %503 = OpLoad %9 
                                       f32_3 %504 = OpVectorShuffle %503 %503 1 1 1 
                              Uniform f32_4* %506 = OpAccessChain %25 %505 %28 
                                       f32_4 %507 = OpLoad %506 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFMul %504 %508 
                                       f32_4 %510 = OpLoad %244 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 6 3 
                                                      OpStore %244 %511 
                              Uniform f32_4* %512 = OpAccessChain %25 %505 %36 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_4 %515 = OpLoad %9 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 0 0 
                                       f32_3 %517 = OpFMul %514 %516 
                                       f32_4 %518 = OpLoad %244 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 1 2 
                                       f32_3 %520 = OpFAdd %517 %519 
                                       f32_4 %521 = OpLoad %244 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %244 %522 
                              Uniform f32_4* %523 = OpAccessChain %25 %505 %46 
                                       f32_4 %524 = OpLoad %523 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_4 %526 = OpLoad %9 
                                       f32_3 %527 = OpVectorShuffle %526 %526 2 2 2 
                                       f32_3 %528 = OpFMul %525 %527 
                                       f32_4 %529 = OpLoad %244 
                                       f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
                                       f32_3 %531 = OpFAdd %528 %530 
                                       f32_4 %532 = OpLoad %9 
                                       f32_4 %533 = OpVectorShuffle %532 %531 4 5 6 3 
                                                      OpStore %9 %533 
                              Uniform f32_4* %534 = OpAccessChain %25 %505 %57 
                                       f32_4 %535 = OpLoad %534 
                                       f32_3 %536 = OpVectorShuffle %535 %535 0 1 2 
                                       f32_4 %537 = OpLoad %9 
                                       f32_3 %538 = OpVectorShuffle %537 %537 3 3 3 
                                       f32_3 %539 = OpFMul %536 %538 
                                       f32_4 %540 = OpLoad %9 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                       f32_3 %542 = OpFAdd %539 %541 
                                       f32_4 %543 = OpLoad %9 
                                       f32_4 %544 = OpVectorShuffle %543 %542 4 5 6 3 
                                                      OpStore %9 %544 
                                       f32_4 %545 = OpLoad %9 
                                       f32_3 %546 = OpVectorShuffle %545 %545 0 1 2 
                                       f32_3 %547 = OpLoad %282 
                                       f32_3 %548 = OpFAdd %546 %547 
                                       f32_4 %549 = OpLoad %9 
                                       f32_4 %550 = OpVectorShuffle %549 %548 4 5 6 3 
                                                      OpStore %9 %550 
                                       f32_4 %553 = OpLoad %9 
                                       f32_3 %554 = OpVectorShuffle %553 %553 0 1 2 
                                                      OpStore %552 %554 
                                Private f32* %555 = OpAccessChain %101 %13 
                                         f32 %556 = OpLoad %555 
                                Uniform f32* %557 = OpAccessChain %25 %36 %33 
                                         f32 %558 = OpLoad %557 
                                         f32 %559 = OpFMul %556 %558 
                                Private f32* %560 = OpAccessChain %9 %33 
                                                      OpStore %560 %559 
                                Private f32* %561 = OpAccessChain %9 %33 
                                         f32 %562 = OpLoad %561 
                                         f32 %564 = OpFMul %562 %563 
                                Private f32* %565 = OpAccessChain %9 %60 
                                                      OpStore %565 %564 
                                       f32_4 %566 = OpLoad %101 
                                       f32_2 %567 = OpVectorShuffle %566 %566 0 3 
                                       f32_2 %569 = OpFMul %567 %568 
                                       f32_4 %570 = OpLoad %9 
                                       f32_4 %571 = OpVectorShuffle %570 %569 4 1 5 3 
                                                      OpStore %9 %571 
                                       f32_4 %573 = OpLoad %101 
                                       f32_2 %574 = OpVectorShuffle %573 %573 2 3 
                                       f32_4 %575 = OpLoad %572 
                                       f32_4 %576 = OpVectorShuffle %575 %574 0 1 4 5 
                                                      OpStore %572 %576 
                                       f32_4 %577 = OpLoad %9 
                                       f32_2 %578 = OpVectorShuffle %577 %577 2 2 
                                       f32_4 %579 = OpLoad %9 
                                       f32_2 %580 = OpVectorShuffle %579 %579 0 3 
                                       f32_2 %581 = OpFAdd %578 %580 
                                       f32_4 %582 = OpLoad %572 
                                       f32_4 %583 = OpVectorShuffle %582 %581 4 5 2 3 
                                                      OpStore %572 %583 
                                                      OpStore %584 %498 
                                 Output f32* %585 = OpAccessChain %164 %36 %13 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFNegate %586 
                                 Output f32* %588 = OpAccessChain %164 %36 %13 
                                                      OpStore %588 %587 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 540
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %21 %26 %64 %147 %150 %392 %456 %535 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %21 Location 21 
                                                      OpDecorate %26 Location 26 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 RelaxedPrecision 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 RelaxedPrecision 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 RelaxedPrecision 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpMemberDecorate %37 7 Offset 37 
                                                      OpMemberDecorate %37 8 Offset 37 
                                                      OpMemberDecorate %37 9 Offset 37 
                                                      OpMemberDecorate %37 10 Offset 37 
                                                      OpMemberDecorate %37 11 RelaxedPrecision 
                                                      OpMemberDecorate %37 11 Offset 37 
                                                      OpMemberDecorate %37 12 Offset 37 
                                                      OpMemberDecorate %37 13 RelaxedPrecision 
                                                      OpMemberDecorate %37 13 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %64 Location 64 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %285 SpecId 285 
                                                      OpDecorate %374 DescriptorSet 374 
                                                      OpDecorate %374 Binding 374 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 Location 392 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %401 DescriptorSet 401 
                                                      OpDecorate %401 Binding 401 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %409 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %456 Location 456 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %492 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %535 RelaxedPrecision 
                                                      OpDecorate %535 Location 535 
                                                      OpDecorate %537 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %13 = OpTypeInt 32 0 
                                          u32 %14 = OpConstant 3 
                                              %15 = OpTypePointer Input %6 
                                          u32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Private %6 
                                 Input f32_4* %21 = OpVariable Input 
                                          u32 %24 = OpConstant 1 
                                 Input f32_4* %26 = OpVariable Input 
                                          u32 %29 = OpConstant 2 
                               Private f32_3* %31 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %10 %34 
                                              %36 = OpTypeArray %10 %34 
                                              %37 = OpTypeStruct %10 %7 %10 %10 %10 %10 %35 %10 %36 %7 %7 %10 %10 %6 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 1 
                                              %42 = OpTypePointer Uniform %7 
                                              %46 = OpTypePointer Private %10 
                               Private f32_4* %47 = OpVariable Private 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypeSampledImage %57 
                                              %59 = OpTypePointer UniformConstant %58 
  UniformConstant read_only Texture2DSampled* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeVector %6 2 
                                              %63 = OpTypePointer Input %62 
                                 Input f32_2* %64 = OpVariable Input 
                               Private f32_3* %67 = OpVariable Private 
                                          f32 %70 = OpConstant 3.674022E-40 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %81 = OpConstant 0 
                                          i32 %83 = OpConstant -1 
                                          f32 %91 = OpConstant 3.674022E-40 
                                          f32 %92 = OpConstant 3.674022E-40 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_3 %94 = OpConstantComposite %91 %92 %93 
                               Private f32_3* %97 = OpVariable Private 
                                         f32 %100 = OpConstant 3.674022E-40 
                                       f32_3 %101 = OpConstantComposite %78 %78 %100 
                                         f32 %117 = OpConstant 3.674022E-40 
                                       f32_2 %118 = OpConstantComposite %117 %117 
                                Private f32* %122 = OpVariable Private 
                                         f32 %129 = OpConstant 3.674022E-40 
                                Private f32* %137 = OpVariable Private 
                                             %138 = OpTypePointer Uniform %6 
                                Private f32* %142 = OpVariable Private 
                                         f32 %144 = OpConstant 3.674022E-40 
                              Private f32_4* %146 = OpVariable Private 
                                Input f32_4* %147 = OpVariable Input 
                                Input f32_4* %150 = OpVariable Input 
                                         f32 %171 = OpConstant 3.674022E-40 
                               Private bool* %179 = OpVariable Private 
                                         f32 %186 = OpConstant 3.674022E-40 
                              Private f32_3* %195 = OpVariable Private 
                                             %196 = OpTypePointer Function %7 
                                       f32_3 %201 = OpConstantComposite %129 %129 %129 
                                         i32 %207 = OpConstant 13 
                                         i32 %221 = OpConstant 6 
                                         i32 %228 = OpConstant 2 
                                         i32 %236 = OpConstant 5 
                                             %237 = OpTypePointer Uniform %10 
                                         i32 %265 = OpConstant 4 
                               Private bool* %274 = OpVariable Private 
                                         i32 %275 = OpConstant 7 
                                        bool %279 = OpConstantFalse 
                                        bool %285 = OpSpecConstantFalse 
                               Private bool* %288 = OpVariable Private 
                                         i32 %294 = OpConstant 8 
                                         i32 %325 = OpConstant 3 
                                         i32 %342 = OpConstant 10 
                                         i32 %348 = OpConstant 9 
                                         f32 %356 = OpConstant 3.674022E-40 
                                         f32 %358 = OpConstant 3.674022E-40 
                                Private f32* %361 = OpVariable Private 
                                             %371 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %372 = OpTypeSampledImage %371 
                                             %373 = OpTypePointer UniformConstant %372 
 UniformConstant read_only Texture3DSampled* %374 = OpVariable UniformConstant 
                              Private f32_4* %379 = OpVariable Private 
                                Input f32_4* %392 = OpVariable Input 
                                Private f32* %400 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %401 = OpVariable UniformConstant 
                                Private f32* %407 = OpVariable Private 
                                             %416 = OpTypePointer Function %6 
                              Private f32_4* %452 = OpVariable Private 
                                             %455 = OpTypePointer Input %7 
                                Input f32_3* %456 = OpVariable Input 
                              Private f32_3* %486 = OpVariable Private 
                                         f32 %493 = OpConstant 3.674022E-40 
                                         i32 %502 = OpConstant 11 
                                         i32 %522 = OpConstant 12 
                                             %534 = OpTypePointer Output %10 
                               Output f32_4* %535 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %197 = OpVariable Function 
                             Function f32_3* %332 = OpVariable Function 
                               Function f32* %417 = OpVariable Function 
                                   Input f32* %16 = OpAccessChain %12 %14 
                                          f32 %17 = OpLoad %16 
                                 Private f32* %20 = OpAccessChain %9 %18 
                                                      OpStore %20 %17 
                                   Input f32* %22 = OpAccessChain %21 %14 
                                          f32 %23 = OpLoad %22 
                                 Private f32* %25 = OpAccessChain %9 %24 
                                                      OpStore %25 %23 
                                   Input f32* %27 = OpAccessChain %26 %14 
                                          f32 %28 = OpLoad %27 
                                 Private f32* %30 = OpAccessChain %9 %29 
                                                      OpStore %30 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpFNegate %32 
                               Uniform f32_3* %43 = OpAccessChain %39 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %33 %44 
                                                      OpStore %31 %45 
                                        f32_3 %48 = OpLoad %31 
                                        f32_3 %49 = OpLoad %31 
                                          f32 %50 = OpDot %48 %49 
                                 Private f32* %51 = OpAccessChain %47 %18 
                                                      OpStore %51 %50 
                                 Private f32* %52 = OpAccessChain %47 %18 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpExtInst %1 32 %53 
                                 Private f32* %55 = OpAccessChain %47 %18 
                                                      OpStore %55 %54 
                   read_only Texture2DSampled %61 = OpLoad %60 
                                        f32_2 %65 = OpLoad %64 
                                        f32_4 %66 = OpImageSampleImplicitLod %61 %65 
                                                      OpStore %56 %66 
                                 Private f32* %68 = OpAccessChain %56 %14 
                                          f32 %69 = OpLoad %68 
                                          f32 %71 = OpFAdd %69 %70 
                                 Private f32* %72 = OpAccessChain %67 %18 
                                                      OpStore %72 %71 
                                 Private f32* %76 = OpAccessChain %67 %18 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                         bool %80 = OpLoad %75 
                                          i32 %82 = OpSelect %80 %41 %81 
                                          i32 %84 = OpIMul %82 %83 
                                         bool %85 = OpINotEqual %84 %81 
                                                      OpSelectionMerge %87 None 
                                                      OpBranchConditional %85 %86 %87 
                                              %86 = OpLabel 
                                                      OpKill
                                              %87 = OpLabel 
                                        f32_4 %89 = OpLoad %56 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                          f32 %95 = OpDot %90 %94 
                                 Private f32* %96 = OpAccessChain %67 %18 
                                                      OpStore %96 %95 
                                        f32_3 %98 = OpLoad %67 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %102 = OpFAdd %99 %101 
                                                      OpStore %97 %102 
                                       f32_3 %103 = OpLoad %97 
                                       f32_2 %104 = OpVectorShuffle %103 %103 1 1 
                                       f32_4 %105 = OpLoad %56 
                                       f32_2 %106 = OpVectorShuffle %105 %105 3 3 
                                         f32 %107 = OpDot %104 %106 
                                Private f32* %108 = OpAccessChain %67 %18 
                                                      OpStore %108 %107 
                                Private f32* %109 = OpAccessChain %97 %24 
                                         f32 %110 = OpLoad %109 
                                Private f32* %111 = OpAccessChain %97 %24 
                                         f32 %112 = OpLoad %111 
                                         f32 %113 = OpFAdd %110 %112 
                                Private f32* %114 = OpAccessChain %67 %24 
                                                      OpStore %114 %113 
                                       f32_3 %115 = OpLoad %67 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %119 = OpFAdd %116 %118 
                                       f32_3 %120 = OpLoad %67 
                                       f32_3 %121 = OpVectorShuffle %120 %119 3 4 2 
                                                      OpStore %67 %121 
                                       f32_3 %123 = OpLoad %67 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_3 %125 = OpLoad %67 
                                       f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                         f32 %127 = OpDot %124 %126 
                                                      OpStore %122 %127 
                                         f32 %128 = OpLoad %122 
                                         f32 %130 = OpExtInst %1 37 %128 %129 
                                                      OpStore %122 %130 
                                         f32 %131 = OpLoad %122 
                                         f32 %132 = OpFNegate %131 
                                         f32 %133 = OpFAdd %132 %129 
                                                      OpStore %122 %133 
                                         f32 %134 = OpLoad %122 
                                         f32 %135 = OpExtInst %1 31 %134 
                                Private f32* %136 = OpAccessChain %67 %29 
                                                      OpStore %136 %135 
                                Uniform f32* %139 = OpAccessChain %39 %81 %24 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpExtInst %1 10 %140 
                                                      OpStore %137 %141 
                                         f32 %143 = OpLoad %137 
                                         f32 %145 = OpFMul %143 %144 
                                                      OpStore %142 %145 
                                  Input f32* %148 = OpAccessChain %147 %18 
                                         f32 %149 = OpLoad %148 
                                  Input f32* %151 = OpAccessChain %150 %18 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                         f32 %154 = OpFAdd %149 %153 
                                Private f32* %155 = OpAccessChain %146 %18 
                                                      OpStore %155 %154 
                                Private f32* %156 = OpAccessChain %146 %18 
                                         f32 %157 = OpLoad %156 
                                  Input f32* %158 = OpAccessChain %147 %24 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %146 %18 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %146 %18 
                                         f32 %163 = OpLoad %162 
                                  Input f32* %164 = OpAccessChain %150 %24 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFNegate %165 
                                         f32 %167 = OpFAdd %163 %166 
                                Private f32* %168 = OpAccessChain %146 %18 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %146 %18 
                                         f32 %170 = OpLoad %169 
                                         f32 %172 = OpFMul %170 %171 
                                         f32 %173 = OpFAdd %172 %70 
                                Private f32* %174 = OpAccessChain %146 %18 
                                                      OpStore %174 %173 
                                Private f32* %175 = OpAccessChain %146 %18 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpExtInst %1 10 %176 
                                Private f32* %178 = OpAccessChain %146 %18 
                                                      OpStore %178 %177 
                                         f32 %180 = OpLoad %142 
                                Private f32* %181 = OpAccessChain %146 %18 
                                         f32 %182 = OpLoad %181 
                                        bool %183 = OpFOrdLessThan %180 %182 
                                                      OpStore %179 %183 
                                         f32 %184 = OpLoad %137 
                                         f32 %185 = OpFMul %184 %144 
                                         f32 %187 = OpFAdd %185 %186 
                                                      OpStore %137 %187 
                                Private f32* %188 = OpAccessChain %146 %18 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpLoad %137 
                                        bool %191 = OpFOrdLessThan %189 %190 
                                                      OpStore %75 %191 
                                        bool %192 = OpLoad %75 
                                        bool %193 = OpLoad %179 
                                        bool %194 = OpLogicalAnd %192 %193 
                                                      OpStore %75 %194 
                                        bool %198 = OpLoad %75 
                                                      OpSelectionMerge %200 None 
                                                      OpBranchConditional %198 %199 %202 
                                             %199 = OpLabel 
                                                      OpStore %197 %201 
                                                      OpBranch %200 
                                             %202 = OpLabel 
                                       f32_3 %203 = OpLoad %97 
                                                      OpStore %197 %203 
                                                      OpBranch %200 
                                             %200 = OpLabel 
                                       f32_3 %204 = OpLoad %197 
                                                      OpStore %195 %204 
                                Private f32* %205 = OpAccessChain %56 %14 
                                         f32 %206 = OpLoad %205 
                                Uniform f32* %208 = OpAccessChain %39 %207 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %206 %210 
                                                      OpStore %122 %211 
                                         f32 %212 = OpLoad %122 
                                        bool %213 = OpFOrdLessThan %212 %78 
                                                      OpStore %75 %213 
                                        bool %214 = OpLoad %75 
                                         i32 %215 = OpSelect %214 %41 %81 
                                         i32 %216 = OpIMul %215 %83 
                                        bool %217 = OpINotEqual %216 %81 
                                                      OpSelectionMerge %219 None 
                                                      OpBranchConditional %217 %218 %219 
                                             %218 = OpLabel 
                                                      OpKill
                                             %219 = OpLabel 
                                Uniform f32* %222 = OpAccessChain %39 %221 %81 %29 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %97 %18 
                                                      OpStore %224 %223 
                                Uniform f32* %225 = OpAccessChain %39 %221 %41 %29 
                                         f32 %226 = OpLoad %225 
                                Private f32* %227 = OpAccessChain %97 %24 
                                                      OpStore %227 %226 
                                Uniform f32* %229 = OpAccessChain %39 %221 %228 %29 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %97 %29 
                                                      OpStore %231 %230 
                                       f32_3 %232 = OpLoad %31 
                                       f32_3 %233 = OpLoad %97 
                                         f32 %234 = OpDot %232 %233 
                                                      OpStore %137 %234 
                                       f32_3 %235 = OpLoad %9 
                              Uniform f32_4* %238 = OpAccessChain %39 %236 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFNegate %240 
                                       f32_3 %242 = OpFAdd %235 %241 
                                                      OpStore %97 %242 
                                       f32_3 %243 = OpLoad %97 
                                       f32_3 %244 = OpLoad %97 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %97 %18 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %97 %18 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpExtInst %1 31 %248 
                                Private f32* %250 = OpAccessChain %97 %18 
                                                      OpStore %250 %249 
                                         f32 %251 = OpLoad %137 
                                         f32 %252 = OpFNegate %251 
                                Private f32* %253 = OpAccessChain %97 %18 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFAdd %252 %254 
                                Private f32* %256 = OpAccessChain %97 %18 
                                                      OpStore %256 %255 
                                Uniform f32* %257 = OpAccessChain %39 %236 %14 
                                         f32 %258 = OpLoad %257 
                                Private f32* %259 = OpAccessChain %97 %18 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFMul %258 %260 
                                         f32 %262 = OpLoad %137 
                                         f32 %263 = OpFAdd %261 %262 
                                                      OpStore %137 %263 
                                         f32 %264 = OpLoad %137 
                                Uniform f32* %266 = OpAccessChain %39 %265 %29 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFMul %264 %267 
                                Uniform f32* %269 = OpAccessChain %39 %265 %14 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFAdd %268 %270 
                                                      OpStore %137 %271 
                                         f32 %272 = OpLoad %137 
                                         f32 %273 = OpExtInst %1 43 %272 %78 %129 
                                                      OpStore %137 %273 
                                Uniform f32* %276 = OpAccessChain %39 %275 %18 
                                         f32 %277 = OpLoad %276 
                                        bool %278 = OpFOrdEqual %277 %129 
                                                      OpStore %274 %278 
                                                      OpSelectionMerge %281 None 
                                                      OpBranchConditional %279 %280 %281 
                                             %280 = OpLabel 
                                        bool %282 = OpLoad %274 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %284 
                                             %283 = OpLabel 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                                      OpBranch %281 
                                             %281 = OpLabel 
                                                      OpSelectionMerge %287 None 
                                                      OpBranchConditional %285 %286 %381 
                                             %286 = OpLabel 
                                Uniform f32* %289 = OpAccessChain %39 %275 %24 
                                         f32 %290 = OpLoad %289 
                                        bool %291 = OpFOrdEqual %290 %129 
                                                      OpStore %288 %291 
                                       f32_4 %292 = OpLoad %21 
                                       f32_3 %293 = OpVectorShuffle %292 %292 3 3 3 
                              Uniform f32_4* %295 = OpAccessChain %39 %294 %41 
                                       f32_4 %296 = OpLoad %295 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpFMul %293 %297 
                                       f32_4 %299 = OpLoad %146 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %146 %300 
                              Uniform f32_4* %301 = OpAccessChain %39 %294 %81 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %12 
                                       f32_3 %305 = OpVectorShuffle %304 %304 3 3 3 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_4 %307 = OpLoad %146 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFAdd %306 %308 
                                       f32_4 %310 = OpLoad %146 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %146 %311 
                              Uniform f32_4* %312 = OpAccessChain %39 %294 %228 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %26 
                                       f32_3 %316 = OpVectorShuffle %315 %315 3 3 3 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %146 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_3 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %146 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %146 %322 
                                       f32_4 %323 = OpLoad %146 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                              Uniform f32_4* %326 = OpAccessChain %39 %294 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %324 %328 
                                       f32_4 %330 = OpLoad %146 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %146 %331 
                                        bool %333 = OpLoad %288 
                                                      OpSelectionMerge %335 None 
                                                      OpBranchConditional %333 %334 %338 
                                             %334 = OpLabel 
                                       f32_4 %336 = OpLoad %146 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                                      OpStore %332 %337 
                                                      OpBranch %335 
                                             %338 = OpLabel 
                                       f32_3 %339 = OpLoad %9 
                                                      OpStore %332 %339 
                                                      OpBranch %335 
                                             %335 = OpLabel 
                                       f32_3 %340 = OpLoad %332 
                                                      OpStore %9 %340 
                                       f32_3 %341 = OpLoad %9 
                              Uniform f32_3* %343 = OpAccessChain %39 %342 
                                       f32_3 %344 = OpLoad %343 
                                       f32_3 %345 = OpFNegate %344 
                                       f32_3 %346 = OpFAdd %341 %345 
                                                      OpStore %9 %346 
                                       f32_3 %347 = OpLoad %9 
                              Uniform f32_3* %349 = OpAccessChain %39 %348 
                                       f32_3 %350 = OpLoad %349 
                                       f32_3 %351 = OpFMul %347 %350 
                                       f32_4 %352 = OpLoad %146 
                                       f32_4 %353 = OpVectorShuffle %352 %351 0 4 5 6 
                                                      OpStore %146 %353 
                                Private f32* %354 = OpAccessChain %146 %24 
                                         f32 %355 = OpLoad %354 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %359 = OpFAdd %357 %358 
                                Private f32* %360 = OpAccessChain %9 %18 
                                                      OpStore %360 %359 
                                Uniform f32* %362 = OpAccessChain %39 %275 %29 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %363 %171 
                                         f32 %365 = OpFAdd %364 %358 
                                                      OpStore %361 %365 
                                         f32 %366 = OpLoad %361 
                                Private f32* %367 = OpAccessChain %9 %18 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 40 %366 %368 
                                Private f32* %370 = OpAccessChain %146 %18 
                                                      OpStore %370 %369 
                  read_only Texture3DSampled %375 = OpLoad %374 
                                       f32_4 %376 = OpLoad %146 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 2 3 
                                       f32_4 %378 = OpImageSampleImplicitLod %375 %377 
                                                      OpStore %146 %378 
                                       f32_4 %380 = OpLoad %146 
                                                      OpStore %379 %380 
                                                      OpBranch %287 
                                             %381 = OpLabel 
                                Private f32* %382 = OpAccessChain %379 %18 
                                                      OpStore %382 %129 
                                Private f32* %383 = OpAccessChain %379 %24 
                                                      OpStore %383 %129 
                                Private f32* %384 = OpAccessChain %379 %29 
                                                      OpStore %384 %129 
                                Private f32* %385 = OpAccessChain %379 %14 
                                                      OpStore %385 %129 
                                                      OpBranch %287 
                                             %287 = OpLabel 
                                       f32_4 %386 = OpLoad %379 
                              Uniform f32_4* %387 = OpAccessChain %39 %325 
                                       f32_4 %388 = OpLoad %387 
                                         f32 %389 = OpDot %386 %388 
                                                      OpStore %122 %389 
                                         f32 %390 = OpLoad %122 
                                         f32 %391 = OpExtInst %1 43 %390 %78 %129 
                                                      OpStore %122 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_4 %395 = OpLoad %392 
                                       f32_2 %396 = OpVectorShuffle %395 %395 3 3 
                                       f32_2 %397 = OpFDiv %394 %396 
                                       f32_3 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %397 3 4 2 
                                                      OpStore %9 %399 
                  read_only Texture2DSampled %402 = OpLoad %401 
                                       f32_3 %403 = OpLoad %9 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
                                       f32_4 %405 = OpImageSampleImplicitLod %402 %404 
                                         f32 %406 = OpCompositeExtract %405 0 
                                                      OpStore %400 %406 
                                         f32 %408 = OpLoad %137 
                                         f32 %409 = OpLoad %400 
                                         f32 %410 = OpFAdd %408 %409 
                                                      OpStore %407 %410 
                                         f32 %411 = OpLoad %407 
                                         f32 %412 = OpExtInst %1 43 %411 %78 %129 
                                                      OpStore %407 %412 
                                         f32 %413 = OpLoad %122 
                                         f32 %414 = OpLoad %407 
                                         f32 %415 = OpExtInst %1 37 %413 %414 
                                                      OpStore %122 %415 
                                        bool %418 = OpLoad %274 
                                                      OpSelectionMerge %420 None 
                                                      OpBranchConditional %418 %419 %422 
                                             %419 = OpLabel 
                                         f32 %421 = OpLoad %122 
                                                      OpStore %417 %421 
                                                      OpBranch %420 
                                             %422 = OpLabel 
                                         f32 %423 = OpLoad %407 
                                                      OpStore %417 %423 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         f32 %424 = OpLoad %417 
                                                      OpStore %122 %424 
                                       f32_4 %425 = OpLoad %12 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpLoad %67 
                                         f32 %428 = OpDot %426 %427 
                                Private f32* %429 = OpAccessChain %97 %18 
                                                      OpStore %429 %428 
                                       f32_4 %430 = OpLoad %21 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                       f32_3 %432 = OpLoad %67 
                                         f32 %433 = OpDot %431 %432 
                                Private f32* %434 = OpAccessChain %97 %24 
                                                      OpStore %434 %433 
                                       f32_4 %435 = OpLoad %26 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
                                       f32_3 %437 = OpLoad %67 
                                         f32 %438 = OpDot %436 %437 
                                Private f32* %439 = OpAccessChain %97 %29 
                                                      OpStore %439 %438 
                                       f32_3 %440 = OpLoad %97 
                                       f32_3 %441 = OpLoad %97 
                                         f32 %442 = OpDot %440 %441 
                                Private f32* %443 = OpAccessChain %9 %18 
                                                      OpStore %443 %442 
                                Private f32* %444 = OpAccessChain %9 %18 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpExtInst %1 32 %445 
                                Private f32* %447 = OpAccessChain %9 %18 
                                                      OpStore %447 %446 
                                       f32_3 %448 = OpLoad %9 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 0 0 
                                       f32_3 %450 = OpLoad %97 
                                       f32_3 %451 = OpFMul %449 %450 
                                                      OpStore %9 %451 
                                       f32_3 %453 = OpLoad %195 
                                       f32_3 %454 = OpVectorShuffle %453 %453 1 1 2 
                                       f32_3 %457 = OpLoad %456 
                                       f32_3 %458 = OpFMul %454 %457 
                                       f32_4 %459 = OpLoad %452 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                      OpStore %452 %460 
                                       f32_3 %461 = OpLoad %31 
                                       f32_4 %462 = OpLoad %47 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 0 0 
                                       f32_3 %464 = OpFMul %461 %463 
                              Uniform f32_4* %465 = OpAccessChain %39 %228 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFAdd %464 %467 
                                                      OpStore %67 %468 
                                       f32_3 %469 = OpLoad %67 
                                       f32_3 %470 = OpLoad %67 
                                         f32 %471 = OpDot %469 %470 
                                                      OpStore %407 %471 
                                         f32 %472 = OpLoad %407 
                                         f32 %473 = OpExtInst %1 32 %472 
                                                      OpStore %407 %473 
                                       f32_3 %474 = OpLoad %67 
                                         f32 %475 = OpLoad %407 
                                       f32_3 %476 = OpCompositeConstruct %475 %475 %475 
                                       f32_3 %477 = OpFMul %474 %476 
                                                      OpStore %67 %477 
                                       f32_3 %478 = OpLoad %9 
                                       f32_3 %479 = OpLoad %67 
                                         f32 %480 = OpDot %478 %479 
                                Private f32* %481 = OpAccessChain %67 %18 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %67 %18 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpExtInst %1 40 %483 %78 
                                Private f32* %485 = OpAccessChain %67 %18 
                                                      OpStore %485 %484 
                                Private f32* %487 = OpAccessChain %67 %18 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpExtInst %1 30 %488 
                                Private f32* %490 = OpAccessChain %486 %18 
                                                      OpStore %490 %489 
                                Private f32* %491 = OpAccessChain %486 %18 
                                         f32 %492 = OpLoad %491 
                                         f32 %494 = OpFMul %492 %493 
                                Private f32* %495 = OpAccessChain %486 %18 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %486 %18 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpExtInst %1 29 %497 
                                Private f32* %499 = OpAccessChain %486 %18 
                                                      OpStore %499 %498 
                                       f32_3 %500 = OpLoad %486 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 0 0 
                              Uniform f32_4* %503 = OpAccessChain %39 %502 
                                       f32_4 %504 = OpLoad %503 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                                       f32_3 %506 = OpFMul %501 %505 
                                                      OpStore %486 %506 
                                       f32_3 %507 = OpLoad %195 
                              Uniform f32_4* %508 = OpAccessChain %39 %502 
                                       f32_4 %509 = OpLoad %508 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                       f32_3 %511 = OpFMul %507 %510 
                                       f32_3 %512 = OpLoad %486 
                                       f32_3 %513 = OpFAdd %511 %512 
                                                      OpStore %486 %513 
                                         f32 %514 = OpLoad %122 
                                       f32_3 %515 = OpCompositeConstruct %514 %514 %514 
                                       f32_3 %516 = OpLoad %486 
                                       f32_3 %517 = OpFMul %515 %516 
                                       f32_4 %518 = OpLoad %56 
                                       f32_4 %519 = OpVectorShuffle %518 %517 4 5 6 3 
                                                      OpStore %56 %519 
                                       f32_4 %520 = OpLoad %56 
                                       f32_4 %521 = OpFNegate %520 
                              Uniform f32_4* %523 = OpAccessChain %39 %522 
                                       f32_4 %524 = OpLoad %523 
                                       f32_4 %525 = OpFAdd %521 %524 
                                                      OpStore %47 %525 
                              Uniform f32_4* %526 = OpAccessChain %39 %522 
                                       f32_4 %527 = OpLoad %526 
                                       f32_4 %528 = OpVectorShuffle %527 %527 3 3 3 3 
                                       f32_4 %529 = OpLoad %47 
                                       f32_4 %530 = OpFMul %528 %529 
                                       f32_4 %531 = OpLoad %56 
                                       f32_4 %532 = OpFAdd %530 %531 
                                                      OpStore %47 %532 
                                Private f32* %533 = OpAccessChain %452 %14 
                                                      OpStore %533 %78 
                                       f32_4 %536 = OpLoad %47 
                                       f32_4 %537 = OpLoad %452 
                                       f32_4 %538 = OpFAdd %536 %537 
                                                      OpStore %535 %538 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 105220
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat13;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb4 = 0.0<_Perpendicular;
    u_xlat4 = (u_xlatb4) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD5 = u_xlat0;
    vs_TEXCOORD6 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat22 = u_xlat2.w + -0.100000001;
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat22) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat4.z = sqrt(u_xlat22);
    u_xlat22 = fract(_Time.y);
    u_xlat3.x = u_xlat22 * 4.0;
    u_xlat24 = vs_TEXCOORD5.x + (-vs_TEXCOORD6.x);
    u_xlat24 = u_xlat24 + vs_TEXCOORD5.y;
    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.y);
    u_xlat24 = u_xlat24 * 0.5 + -0.100000001;
    u_xlat24 = fract(u_xlat24);
    u_xlatb3 = u_xlat3.x<u_xlat24;
    u_xlat22 = u_xlat22 * 4.0 + 0.100000001;
    u_xlatb22 = u_xlat24<u_xlat22;
    u_xlatb22 = u_xlatb22 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb22)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat22 = u_xlat2.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat5.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb22){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
        u_xlat24 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat22, u_xlat24);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat10_5 = texture(_LightTexture0, vec2(u_xlat24));
    u_xlat22 = u_xlat22 * u_xlat10_5.w;
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xyz = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat0.xyz;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    SV_Target0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %153 %165 %166 %180 %214 %284 %295 %299 %315 %318 %320 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %151 0 BuiltIn 151 
                                                      OpMemberDecorate %151 1 BuiltIn 151 
                                                      OpMemberDecorate %151 2 BuiltIn 151 
                                                      OpDecorate %151 Block 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %284 Location 284 
                                                      OpDecorate %295 Location 295 
                                                      OpDecorate %299 Location 299 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %318 Location 318 
                                                      OpDecorate %320 Location 320 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %7 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          i32 %76 = OpConstant 4 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Function %6 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                               Private f32_4* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                              Private f32_4* %130 = OpVariable Private 
                                             %150 = OpTypeArray %6 %13 
                                             %151 = OpTypeStruct %7 %6 %150 
                                             %152 = OpTypePointer Output %151 
        Output struct {f32_4; f32; f32[1];}* %153 = OpVariable Output 
                                             %161 = OpTypePointer Output %7 
                                             %163 = OpTypeVector %6 2 
                                             %164 = OpTypePointer Output %163 
                               Output f32_2* %165 = OpVariable Output 
                                Input f32_4* %166 = OpVariable Input 
                                         i32 %169 = OpConstant 5 
                                             %178 = OpTypeVector %6 3 
                                             %179 = OpTypePointer Input %178 
                                Input f32_3* %180 = OpVariable Input 
                                Private f32* %199 = OpVariable Private 
                                Input f32_4* %214 = OpVariable Input 
                                             %259 = OpTypePointer Private %178 
                              Private f32_3* %260 = OpVariable Private 
                                             %283 = OpTypePointer Output %178 
                               Output f32_3* %284 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                               Output f32_3* %295 = OpVariable Output 
                               Output f32_3* %299 = OpVariable Output 
                               Output f32_3* %315 = OpVariable Output 
                               Output f32_4* %318 = OpVariable Output 
                               Output f32_4* %320 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %82 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %77 = OpAccessChain %23 %76 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %75 %78 
                                                      OpStore %74 %79 
                                         bool %83 = OpLoad %74 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %87 
                                              %84 = OpLabel 
                                                      OpStore %82 %86 
                                                      OpBranch %85 
                                              %87 = OpLabel 
                                                      OpStore %82 %88 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %89 = OpLoad %82 
                                                      OpStore %80 %89 
                                 Private f32* %90 = OpAccessChain %9 %31 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpLoad %80 
                                          f32 %93 = OpFMul %91 %92 
                                   Input f32* %94 = OpAccessChain %11 %46 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                        f32_4 %99 = OpLoad %11 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %26 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpFMul %100 %103 
                                                      OpStore %98 %104 
                              Uniform f32_4* %105 = OpAccessChain %23 %25 %25 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %11 
                                       f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %98 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %98 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %43 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %114 0 0 0 0 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %98 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %23 %25 %54 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %98 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %54 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %11 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %9 %129 
                                       f32_4 %131 = OpLoad %98 
                                       f32_4 %132 = OpVectorShuffle %131 %131 1 1 1 1 
                              Uniform f32_4* %133 = OpAccessChain %23 %54 %26 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpFMul %132 %134 
                                                      OpStore %130 %135 
                              Uniform f32_4* %136 = OpAccessChain %23 %54 %25 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %98 
                                       f32_4 %139 = OpVectorShuffle %138 %138 0 0 0 0 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %130 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %130 %142 
                              Uniform f32_4* %143 = OpAccessChain %23 %54 %43 
                                       f32_4 %144 = OpLoad %143 
                                       f32_4 %145 = OpLoad %98 
                                       f32_4 %146 = OpVectorShuffle %145 %145 2 2 2 2 
                                       f32_4 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %130 
                                       f32_4 %149 = OpFAdd %147 %148 
                                                      OpStore %130 %149 
                              Uniform f32_4* %154 = OpAccessChain %23 %54 %54 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %98 
                                       f32_4 %157 = OpVectorShuffle %156 %156 3 3 3 3 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %130 
                                       f32_4 %160 = OpFAdd %158 %159 
                               Output f32_4* %162 = OpAccessChain %153 %25 
                                                      OpStore %162 %160 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                              Uniform f32_4* %170 = OpAccessChain %23 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_2 %173 = OpFMul %168 %172 
                              Uniform f32_4* %174 = OpAccessChain %23 %169 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 3 
                                       f32_2 %177 = OpFAdd %173 %176 
                                                      OpStore %165 %177 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %182 = OpAccessChain %23 %26 %25 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %186 = OpAccessChain %98 %13 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %180 
                              Uniform f32_4* %188 = OpAccessChain %23 %26 %26 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %187 %190 
                                Private f32* %192 = OpAccessChain %98 %46 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %180 
                              Uniform f32_4* %194 = OpAccessChain %23 %26 %43 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpDot %193 %196 
                                Private f32* %198 = OpAccessChain %98 %31 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %98 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_4 %202 = OpLoad %98 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %201 %203 
                                                      OpStore %199 %204 
                                         f32 %205 = OpLoad %199 
                                         f32 %206 = OpExtInst %1 32 %205 
                                                      OpStore %199 %206 
                                         f32 %207 = OpLoad %199 
                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
                                       f32_4 %209 = OpLoad %98 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %98 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                                      OpStore %98 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %23 %25 %26 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 1 2 0 
                                       f32_3 %220 = OpFMul %216 %219 
                                       f32_4 %221 = OpLoad %130 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %130 %222 
                              Uniform f32_4* %223 = OpAccessChain %23 %25 %25 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 1 2 0 
                                       f32_4 %226 = OpLoad %214 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 0 0 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %130 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %130 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %130 %233 
                              Uniform f32_4* %234 = OpAccessChain %23 %25 %43 
                                       f32_4 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 2 0 
                                       f32_4 %237 = OpLoad %214 
                                       f32_3 %238 = OpVectorShuffle %237 %237 2 2 2 
                                       f32_3 %239 = OpFMul %236 %238 
                                       f32_4 %240 = OpLoad %130 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFAdd %239 %241 
                                       f32_4 %243 = OpLoad %130 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %130 %244 
                                       f32_4 %245 = OpLoad %130 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %130 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %246 %248 
                                                      OpStore %199 %249 
                                         f32 %250 = OpLoad %199 
                                         f32 %251 = OpExtInst %1 32 %250 
                                                      OpStore %199 %251 
                                         f32 %252 = OpLoad %199 
                                       f32_3 %253 = OpCompositeConstruct %252 %252 %252 
                                       f32_4 %254 = OpLoad %130 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %130 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %130 %258 
                                       f32_4 %261 = OpLoad %98 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_4 %263 = OpLoad %130 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                                      OpStore %260 %265 
                                       f32_4 %266 = OpLoad %98 
                                       f32_3 %267 = OpVectorShuffle %266 %266 2 0 1 
                                       f32_4 %268 = OpLoad %130 
                                       f32_3 %269 = OpVectorShuffle %268 %268 1 2 0 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %260 
                                       f32_3 %272 = OpFNegate %271 
                                       f32_3 %273 = OpFAdd %270 %272 
                                                      OpStore %260 %273 
                                  Input f32* %274 = OpAccessChain %214 %57 
                                         f32 %275 = OpLoad %274 
                                Uniform f32* %276 = OpAccessChain %23 %43 %57 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFMul %275 %277 
                                                      OpStore %199 %278 
                                         f32 %279 = OpLoad %199 
                                       f32_3 %280 = OpCompositeConstruct %279 %279 %279 
                                       f32_3 %281 = OpLoad %260 
                                       f32_3 %282 = OpFMul %280 %281 
                                                      OpStore %260 %282 
                                Private f32* %285 = OpAccessChain %260 %31 
                                         f32 %286 = OpLoad %285 
                                 Output f32* %288 = OpAccessChain %284 %13 
                                                      OpStore %288 %286 
                                Private f32* %289 = OpAccessChain %130 %46 
                                         f32 %290 = OpLoad %289 
                                 Output f32* %291 = OpAccessChain %284 %31 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %98 %13 
                                         f32 %293 = OpLoad %292 
                                 Output f32* %294 = OpAccessChain %284 %46 
                                                      OpStore %294 %293 
                                Private f32* %296 = OpAccessChain %130 %31 
                                         f32 %297 = OpLoad %296 
                                 Output f32* %298 = OpAccessChain %295 %31 
                                                      OpStore %298 %297 
                                Private f32* %300 = OpAccessChain %130 %13 
                                         f32 %301 = OpLoad %300 
                                 Output f32* %302 = OpAccessChain %299 %31 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %98 %46 
                                         f32 %304 = OpLoad %303 
                                 Output f32* %305 = OpAccessChain %295 %46 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %98 %31 
                                         f32 %307 = OpLoad %306 
                                 Output f32* %308 = OpAccessChain %299 %46 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %260 %13 
                                         f32 %310 = OpLoad %309 
                                 Output f32* %311 = OpAccessChain %295 %13 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %260 %46 
                                         f32 %313 = OpLoad %312 
                                 Output f32* %314 = OpAccessChain %299 %13 
                                                      OpStore %314 %313 
                                       f32_4 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                                      OpStore %315 %317 
                                       f32_4 %319 = OpLoad %9 
                                                      OpStore %318 %319 
                              Uniform f32_4* %321 = OpAccessChain %23 %25 %54 
                                       f32_4 %322 = OpLoad %321 
                                                      OpStore %320 %322 
                                 Output f32* %323 = OpAccessChain %153 %25 %13 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                 Output f32* %326 = OpAccessChain %153 %25 %13 
                                                      OpStore %326 %325 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 487
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %67 %154 %158 %388 %393 %398 %484 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 RelaxedPrecision 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 RelaxedPrecision 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %268 SpecId 268 
                                                      OpDecorate %358 DescriptorSet 358 
                                                      OpDecorate %358 Binding 358 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 DescriptorSet 379 
                                                      OpDecorate %379 Binding 379 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 Location 388 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %393 Location 393 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %398 Location 398 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %484 Location 484 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeStruct %7 %10 %7 %7 %7 %17 %10 %10 %7 %18 %7 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                              %24 = OpTypePointer Uniform %7 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %32 = OpVariable Private 
                                              %40 = OpTypePointer Private %10 
                               Private f32_3* %41 = OpVariable Private 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %10 
                                 Private f32* %49 = OpVariable Private 
                               Private f32_4* %59 = OpVariable Private 
                                              %60 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %61 = OpTypeSampledImage %60 
                                              %62 = OpTypePointer UniformConstant %61 
  UniformConstant read_only Texture2DSampled* %63 = OpVariable UniformConstant 
                                              %65 = OpTypeVector %6 2 
                                              %66 = OpTypePointer Input %65 
                                 Input f32_2* %67 = OpVariable Input 
                               Private f32_3* %70 = OpVariable Private 
                                          u32 %71 = OpConstant 3 
                                          f32 %74 = OpConstant 3.674022E-40 
                                          u32 %76 = OpConstant 0 
                                              %78 = OpTypeBool 
                                              %79 = OpTypePointer Private %78 
                                Private bool* %80 = OpVariable Private 
                                          f32 %83 = OpConstant 3.674022E-40 
                                          i32 %86 = OpConstant 0 
                                          i32 %88 = OpConstant -1 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %97 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                        f32_3 %99 = OpConstantComposite %96 %97 %98 
                              Private f32_3* %102 = OpVariable Private 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_3 %106 = OpConstantComposite %83 %83 %105 
                                         u32 %114 = OpConstant 1 
                                         f32 %123 = OpConstant 3.674022E-40 
                                       f32_2 %124 = OpConstantComposite %123 %123 
                                Private f32* %128 = OpVariable Private 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         u32 %142 = OpConstant 2 
                                             %144 = OpTypePointer Uniform %6 
                                Private f32* %148 = OpVariable Private 
                                         f32 %150 = OpConstant 3.674022E-40 
                              Private f32_4* %152 = OpVariable Private 
                                             %153 = OpTypePointer Input %7 
                                Input f32_4* %154 = OpVariable Input 
                                             %155 = OpTypePointer Input %6 
                                Input f32_4* %158 = OpVariable Input 
                                         f32 %179 = OpConstant 3.674022E-40 
                               Private bool* %187 = OpVariable Private 
                                         f32 %194 = OpConstant 3.674022E-40 
                              Private f32_3* %203 = OpVariable Private 
                                             %204 = OpTypePointer Function %10 
                                       f32_3 %209 = OpConstantComposite %135 %135 %135 
                                         i32 %215 = OpConstant 11 
                                         i32 %231 = OpConstant 9 
                                         i32 %253 = OpConstant 3 
                                         i32 %258 = OpConstant 4 
                                        bool %262 = OpConstantFalse 
                                        bool %268 = OpSpecConstantFalse 
                                         i32 %276 = OpConstant 5 
                                         i32 %326 = OpConstant 7 
                                         i32 %335 = OpConstant 6 
                                         f32 %343 = OpConstant 3.674022E-40 
                                         f32 %345 = OpConstant 3.674022E-40 
                                             %355 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %356 = OpTypeSampledImage %355 
                                             %357 = OpTypePointer UniformConstant %356 
 UniformConstant read_only Texture3DSampled* %358 = OpVariable UniformConstant 
                              Private f32_4* %363 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %379 = OpVariable UniformConstant 
                                Input f32_3* %388 = OpVariable Input 
                                Input f32_3* %393 = OpVariable Input 
                                Input f32_3* %398 = OpVariable Input 
                              Private f32_3* %436 = OpVariable Private 
                                         f32 %443 = OpConstant 3.674022E-40 
                                         i32 %452 = OpConstant 8 
                                         i32 %472 = OpConstant 10 
                                             %483 = OpTypePointer Output %7 
                               Output f32_4* %484 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %205 = OpVariable Function 
                             Function f32_3* %313 = OpVariable Function 
                                        f32_3 %13 = OpLoad %12 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFAdd %14 %27 
                                        f32_4 %29 = OpLoad %9 
                                        f32_4 %30 = OpVectorShuffle %29 %28 4 5 6 3 
                                                      OpStore %9 %30 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                          f32 %37 = OpDot %34 %36 
                                                      OpStore %32 %37 
                                          f32 %38 = OpLoad %32 
                                          f32 %39 = OpExtInst %1 32 %38 
                                                      OpStore %32 %39 
                                        f32_3 %42 = OpLoad %12 
                                        f32_3 %43 = OpFNegate %42 
                               Uniform f32_3* %46 = OpAccessChain %21 %44 
                                        f32_3 %47 = OpLoad %46 
                                        f32_3 %48 = OpFAdd %43 %47 
                                                      OpStore %41 %48 
                                        f32_3 %50 = OpLoad %41 
                                        f32_3 %51 = OpLoad %41 
                                          f32 %52 = OpDot %50 %51 
                                                      OpStore %49 %52 
                                          f32 %53 = OpLoad %49 
                                          f32 %54 = OpExtInst %1 32 %53 
                                                      OpStore %49 %54 
                                          f32 %55 = OpLoad %49 
                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
                                        f32_3 %57 = OpLoad %41 
                                        f32_3 %58 = OpFMul %56 %57 
                                                      OpStore %41 %58 
                   read_only Texture2DSampled %64 = OpLoad %63 
                                        f32_2 %68 = OpLoad %67 
                                        f32_4 %69 = OpImageSampleImplicitLod %64 %68 
                                                      OpStore %59 %69 
                                 Private f32* %72 = OpAccessChain %59 %71 
                                          f32 %73 = OpLoad %72 
                                          f32 %75 = OpFAdd %73 %74 
                                 Private f32* %77 = OpAccessChain %70 %76 
                                                      OpStore %77 %75 
                                 Private f32* %81 = OpAccessChain %70 %76 
                                          f32 %82 = OpLoad %81 
                                         bool %84 = OpFOrdLessThan %82 %83 
                                                      OpStore %80 %84 
                                         bool %85 = OpLoad %80 
                                          i32 %87 = OpSelect %85 %44 %86 
                                          i32 %89 = OpIMul %87 %88 
                                         bool %90 = OpINotEqual %89 %86 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %92 
                                              %91 = OpLabel 
                                                      OpKill
                                              %92 = OpLabel 
                                        f32_4 %94 = OpLoad %59 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                         f32 %100 = OpDot %95 %99 
                                Private f32* %101 = OpAccessChain %70 %76 
                                                      OpStore %101 %100 
                                       f32_3 %103 = OpLoad %70 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 0 0 
                                       f32_3 %107 = OpFAdd %104 %106 
                                                      OpStore %102 %107 
                                       f32_3 %108 = OpLoad %102 
                                       f32_2 %109 = OpVectorShuffle %108 %108 1 1 
                                       f32_4 %110 = OpLoad %59 
                                       f32_2 %111 = OpVectorShuffle %110 %110 3 3 
                                         f32 %112 = OpDot %109 %111 
                                Private f32* %113 = OpAccessChain %70 %76 
                                                      OpStore %113 %112 
                                Private f32* %115 = OpAccessChain %102 %114 
                                         f32 %116 = OpLoad %115 
                                Private f32* %117 = OpAccessChain %102 %114 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFAdd %116 %118 
                                Private f32* %120 = OpAccessChain %70 %114 
                                                      OpStore %120 %119 
                                       f32_3 %121 = OpLoad %70 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_3 %126 = OpLoad %70 
                                       f32_3 %127 = OpVectorShuffle %126 %125 3 4 2 
                                                      OpStore %70 %127 
                                       f32_3 %129 = OpLoad %70 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_3 %131 = OpLoad %70 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                         f32 %133 = OpDot %130 %132 
                                                      OpStore %128 %133 
                                         f32 %134 = OpLoad %128 
                                         f32 %136 = OpExtInst %1 37 %134 %135 
                                                      OpStore %128 %136 
                                         f32 %137 = OpLoad %128 
                                         f32 %138 = OpFNegate %137 
                                         f32 %139 = OpFAdd %138 %135 
                                                      OpStore %128 %139 
                                         f32 %140 = OpLoad %128 
                                         f32 %141 = OpExtInst %1 31 %140 
                                Private f32* %143 = OpAccessChain %70 %142 
                                                      OpStore %143 %141 
                                Uniform f32* %145 = OpAccessChain %21 %86 %114 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpExtInst %1 10 %146 
                                                      OpStore %49 %147 
                                         f32 %149 = OpLoad %49 
                                         f32 %151 = OpFMul %149 %150 
                                                      OpStore %148 %151 
                                  Input f32* %156 = OpAccessChain %154 %76 
                                         f32 %157 = OpLoad %156 
                                  Input f32* %159 = OpAccessChain %158 %76 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                         f32 %162 = OpFAdd %157 %161 
                                Private f32* %163 = OpAccessChain %152 %76 
                                                      OpStore %163 %162 
                                Private f32* %164 = OpAccessChain %152 %76 
                                         f32 %165 = OpLoad %164 
                                  Input f32* %166 = OpAccessChain %154 %114 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFAdd %165 %167 
                                Private f32* %169 = OpAccessChain %152 %76 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %152 %76 
                                         f32 %171 = OpLoad %170 
                                  Input f32* %172 = OpAccessChain %158 %114 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %171 %174 
                                Private f32* %176 = OpAccessChain %152 %76 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %152 %76 
                                         f32 %178 = OpLoad %177 
                                         f32 %180 = OpFMul %178 %179 
                                         f32 %181 = OpFAdd %180 %74 
                                Private f32* %182 = OpAccessChain %152 %76 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %152 %76 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpExtInst %1 10 %184 
                                Private f32* %186 = OpAccessChain %152 %76 
                                                      OpStore %186 %185 
                                         f32 %188 = OpLoad %148 
                                Private f32* %189 = OpAccessChain %152 %76 
                                         f32 %190 = OpLoad %189 
                                        bool %191 = OpFOrdLessThan %188 %190 
                                                      OpStore %187 %191 
                                         f32 %192 = OpLoad %49 
                                         f32 %193 = OpFMul %192 %150 
                                         f32 %195 = OpFAdd %193 %194 
                                                      OpStore %49 %195 
                                Private f32* %196 = OpAccessChain %152 %76 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpLoad %49 
                                        bool %199 = OpFOrdLessThan %197 %198 
                                                      OpStore %80 %199 
                                        bool %200 = OpLoad %80 
                                        bool %201 = OpLoad %187 
                                        bool %202 = OpLogicalAnd %200 %201 
                                                      OpStore %80 %202 
                                        bool %206 = OpLoad %80 
                                                      OpSelectionMerge %208 None 
                                                      OpBranchConditional %206 %207 %210 
                                             %207 = OpLabel 
                                                      OpStore %205 %209 
                                                      OpBranch %208 
                                             %210 = OpLabel 
                                       f32_3 %211 = OpLoad %102 
                                                      OpStore %205 %211 
                                                      OpBranch %208 
                                             %208 = OpLabel 
                                       f32_3 %212 = OpLoad %205 
                                                      OpStore %203 %212 
                                Private f32* %213 = OpAccessChain %59 %71 
                                         f32 %214 = OpLoad %213 
                                Uniform f32* %216 = OpAccessChain %21 %215 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %214 %218 
                                                      OpStore %128 %219 
                                         f32 %220 = OpLoad %128 
                                        bool %221 = OpFOrdLessThan %220 %83 
                                                      OpStore %80 %221 
                                        bool %222 = OpLoad %80 
                                         i32 %223 = OpSelect %222 %44 %86 
                                         i32 %224 = OpIMul %223 %88 
                                        bool %225 = OpINotEqual %224 %86 
                                                      OpSelectionMerge %227 None 
                                                      OpBranchConditional %225 %226 %227 
                                             %226 = OpLabel 
                                                      OpKill
                                             %227 = OpLabel 
                                       f32_3 %229 = OpLoad %12 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                              Uniform f32_4* %232 = OpAccessChain %21 %231 %44 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpFMul %230 %234 
                                                      OpStore %102 %235 
                              Uniform f32_4* %236 = OpAccessChain %21 %231 %86 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpLoad %12 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 0 0 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_3 %242 = OpLoad %102 
                                       f32_3 %243 = OpFAdd %241 %242 
                                                      OpStore %102 %243 
                              Uniform f32_4* %244 = OpAccessChain %21 %231 %23 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpLoad %12 
                                       f32_3 %248 = OpVectorShuffle %247 %247 2 2 2 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_3 %250 = OpLoad %102 
                                       f32_3 %251 = OpFAdd %249 %250 
                                                      OpStore %102 %251 
                                       f32_3 %252 = OpLoad %102 
                              Uniform f32_4* %254 = OpAccessChain %21 %231 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %252 %256 
                                                      OpStore %102 %257 
                                Uniform f32* %259 = OpAccessChain %21 %258 %76 
                                         f32 %260 = OpLoad %259 
                                        bool %261 = OpFOrdEqual %260 %135 
                                                      OpStore %80 %261 
                                                      OpSelectionMerge %264 None 
                                                      OpBranchConditional %262 %263 %264 
                                             %263 = OpLabel 
                                        bool %265 = OpLoad %80 
                                                      OpSelectionMerge %267 None 
                                                      OpBranchConditional %265 %266 %267 
                                             %266 = OpLabel 
                                                      OpBranch %267 
                                             %267 = OpLabel 
                                                      OpBranch %264 
                                             %264 = OpLabel 
                                                      OpSelectionMerge %270 None 
                                                      OpBranchConditional %268 %269 %365 
                                             %269 = OpLabel 
                                Uniform f32* %271 = OpAccessChain %21 %258 %114 
                                         f32 %272 = OpLoad %271 
                                        bool %273 = OpFOrdEqual %272 %135 
                                                      OpStore %80 %273 
                                       f32_3 %274 = OpLoad %12 
                                       f32_3 %275 = OpVectorShuffle %274 %274 1 1 1 
                              Uniform f32_4* %277 = OpAccessChain %21 %276 %44 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %275 %279 
                                       f32_4 %281 = OpLoad %152 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %152 %282 
                              Uniform f32_4* %283 = OpAccessChain %21 %276 %86 
                                       f32_4 %284 = OpLoad %283 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpLoad %12 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 0 0 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_4 %289 = OpLoad %152 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFAdd %288 %290 
                                       f32_4 %292 = OpLoad %152 
                                       f32_4 %293 = OpVectorShuffle %292 %291 4 5 6 3 
                                                      OpStore %152 %293 
                              Uniform f32_4* %294 = OpAccessChain %21 %276 %23 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpLoad %12 
                                       f32_3 %298 = OpVectorShuffle %297 %297 2 2 2 
                                       f32_3 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %152 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %299 %301 
                                       f32_4 %303 = OpLoad %152 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %152 %304 
                                       f32_4 %305 = OpLoad %152 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                              Uniform f32_4* %307 = OpAccessChain %21 %276 %253 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %306 %309 
                                       f32_4 %311 = OpLoad %152 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                                      OpStore %152 %312 
                                        bool %314 = OpLoad %80 
                                                      OpSelectionMerge %316 None 
                                                      OpBranchConditional %314 %315 %319 
                                             %315 = OpLabel 
                                       f32_4 %317 = OpLoad %152 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                                      OpStore %313 %318 
                                                      OpBranch %316 
                                             %319 = OpLabel 
                                       f32_3 %320 = OpLoad %12 
                                                      OpStore %313 %320 
                                                      OpBranch %316 
                                             %316 = OpLabel 
                                       f32_3 %321 = OpLoad %313 
                                       f32_4 %322 = OpLoad %152 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %152 %323 
                                       f32_4 %324 = OpLoad %152 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_3* %327 = OpAccessChain %21 %326 
                                       f32_3 %328 = OpLoad %327 
                                       f32_3 %329 = OpFNegate %328 
                                       f32_3 %330 = OpFAdd %325 %329 
                                       f32_4 %331 = OpLoad %152 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
                                                      OpStore %152 %332 
                                       f32_4 %333 = OpLoad %152 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                              Uniform f32_3* %336 = OpAccessChain %21 %335 
                                       f32_3 %337 = OpLoad %336 
                                       f32_3 %338 = OpFMul %334 %337 
                                       f32_4 %339 = OpLoad %152 
                                       f32_4 %340 = OpVectorShuffle %339 %338 0 4 5 6 
                                                      OpStore %152 %340 
                                Private f32* %341 = OpAccessChain %152 %114 
                                         f32 %342 = OpLoad %341 
                                         f32 %344 = OpFMul %342 %343 
                                         f32 %346 = OpFAdd %344 %345 
                                                      OpStore %49 %346 
                                Uniform f32* %347 = OpAccessChain %21 %258 %142 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %348 %179 
                                         f32 %350 = OpFAdd %349 %345 
                                                      OpStore %148 %350 
                                         f32 %351 = OpLoad %49 
                                         f32 %352 = OpLoad %148 
                                         f32 %353 = OpExtInst %1 40 %351 %352 
                                Private f32* %354 = OpAccessChain %152 %76 
                                                      OpStore %354 %353 
                  read_only Texture3DSampled %359 = OpLoad %358 
                                       f32_4 %360 = OpLoad %152 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 2 3 
                                       f32_4 %362 = OpImageSampleImplicitLod %359 %361 
                                                      OpStore %152 %362 
                                       f32_4 %364 = OpLoad %152 
                                                      OpStore %363 %364 
                                                      OpBranch %270 
                                             %365 = OpLabel 
                                Private f32* %366 = OpAccessChain %363 %76 
                                                      OpStore %366 %135 
                                Private f32* %367 = OpAccessChain %363 %114 
                                                      OpStore %367 %135 
                                Private f32* %368 = OpAccessChain %363 %142 
                                                      OpStore %368 %135 
                                Private f32* %369 = OpAccessChain %363 %71 
                                                      OpStore %369 %135 
                                                      OpBranch %270 
                                             %270 = OpLabel 
                                       f32_4 %370 = OpLoad %363 
                              Uniform f32_4* %371 = OpAccessChain %21 %253 
                                       f32_4 %372 = OpLoad %371 
                                         f32 %373 = OpDot %370 %372 
                                                      OpStore %128 %373 
                                         f32 %374 = OpLoad %128 
                                         f32 %375 = OpExtInst %1 43 %374 %83 %135 
                                                      OpStore %128 %375 
                                       f32_3 %376 = OpLoad %102 
                                       f32_3 %377 = OpLoad %102 
                                         f32 %378 = OpDot %376 %377 
                                                      OpStore %49 %378 
                  read_only Texture2DSampled %380 = OpLoad %379 
                                         f32 %381 = OpLoad %49 
                                       f32_2 %382 = OpCompositeConstruct %381 %381 
                                       f32_4 %383 = OpImageSampleImplicitLod %380 %382 
                                         f32 %384 = OpCompositeExtract %383 3 
                                                      OpStore %49 %384 
                                         f32 %385 = OpLoad %128 
                                         f32 %386 = OpLoad %49 
                                         f32 %387 = OpFMul %385 %386 
                                                      OpStore %49 %387 
                                       f32_3 %389 = OpLoad %388 
                                       f32_3 %390 = OpLoad %70 
                                         f32 %391 = OpDot %389 %390 
                                Private f32* %392 = OpAccessChain %102 %76 
                                                      OpStore %392 %391 
                                       f32_3 %394 = OpLoad %393 
                                       f32_3 %395 = OpLoad %70 
                                         f32 %396 = OpDot %394 %395 
                                Private f32* %397 = OpAccessChain %102 %114 
                                                      OpStore %397 %396 
                                       f32_3 %399 = OpLoad %398 
                                       f32_3 %400 = OpLoad %70 
                                         f32 %401 = OpDot %399 %400 
                                Private f32* %402 = OpAccessChain %102 %142 
                                                      OpStore %402 %401 
                                       f32_3 %403 = OpLoad %102 
                                       f32_3 %404 = OpLoad %102 
                                         f32 %405 = OpDot %403 %404 
                                                      OpStore %148 %405 
                                         f32 %406 = OpLoad %148 
                                         f32 %407 = OpExtInst %1 32 %406 
                                                      OpStore %148 %407 
                                         f32 %408 = OpLoad %148 
                                       f32_3 %409 = OpCompositeConstruct %408 %408 %408 
                                       f32_3 %410 = OpLoad %102 
                                       f32_3 %411 = OpFMul %409 %410 
                                                      OpStore %102 %411 
                                       f32_4 %412 = OpLoad %9 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                         f32 %414 = OpLoad %32 
                                       f32_3 %415 = OpCompositeConstruct %414 %414 %414 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_3 %417 = OpLoad %41 
                                       f32_3 %418 = OpFAdd %416 %417 
                                                      OpStore %70 %418 
                                       f32_3 %419 = OpLoad %70 
                                       f32_3 %420 = OpLoad %70 
                                         f32 %421 = OpDot %419 %420 
                                                      OpStore %128 %421 
                                         f32 %422 = OpLoad %128 
                                         f32 %423 = OpExtInst %1 32 %422 
                                                      OpStore %128 %423 
                                         f32 %424 = OpLoad %128 
                                       f32_3 %425 = OpCompositeConstruct %424 %424 %424 
                                       f32_3 %426 = OpLoad %70 
                                       f32_3 %427 = OpFMul %425 %426 
                                                      OpStore %70 %427 
                                       f32_3 %428 = OpLoad %102 
                                       f32_3 %429 = OpLoad %70 
                                         f32 %430 = OpDot %428 %429 
                                Private f32* %431 = OpAccessChain %70 %76 
                                                      OpStore %431 %430 
                                Private f32* %432 = OpAccessChain %70 %76 
                                         f32 %433 = OpLoad %432 
                                         f32 %434 = OpExtInst %1 40 %433 %83 
                                Private f32* %435 = OpAccessChain %70 %76 
                                                      OpStore %435 %434 
                                Private f32* %437 = OpAccessChain %70 %76 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpExtInst %1 30 %438 
                                Private f32* %440 = OpAccessChain %436 %76 
                                                      OpStore %440 %439 
                                Private f32* %441 = OpAccessChain %436 %76 
                                         f32 %442 = OpLoad %441 
                                         f32 %444 = OpFMul %442 %443 
                                Private f32* %445 = OpAccessChain %436 %76 
                                                      OpStore %445 %444 
                                Private f32* %446 = OpAccessChain %436 %76 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpExtInst %1 29 %447 
                                Private f32* %449 = OpAccessChain %436 %76 
                                                      OpStore %449 %448 
                                       f32_3 %450 = OpLoad %436 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 0 0 
                              Uniform f32_4* %453 = OpAccessChain %21 %452 
                                       f32_4 %454 = OpLoad %453 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                       f32_3 %456 = OpFMul %451 %455 
                                                      OpStore %436 %456 
                                       f32_3 %457 = OpLoad %203 
                              Uniform f32_4* %458 = OpAccessChain %21 %452 
                                       f32_4 %459 = OpLoad %458 
                                       f32_3 %460 = OpVectorShuffle %459 %459 0 1 2 
                                       f32_3 %461 = OpFMul %457 %460 
                                       f32_3 %462 = OpLoad %436 
                                       f32_3 %463 = OpFAdd %461 %462 
                                                      OpStore %436 %463 
                                         f32 %464 = OpLoad %49 
                                       f32_3 %465 = OpCompositeConstruct %464 %464 %464 
                                       f32_3 %466 = OpLoad %436 
                                       f32_3 %467 = OpFMul %465 %466 
                                       f32_4 %468 = OpLoad %59 
                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 6 3 
                                                      OpStore %59 %469 
                                       f32_4 %470 = OpLoad %59 
                                       f32_4 %471 = OpFNegate %470 
                              Uniform f32_4* %473 = OpAccessChain %21 %472 
                                       f32_4 %474 = OpLoad %473 
                                       f32_4 %475 = OpFAdd %471 %474 
                                                      OpStore %9 %475 
                              Uniform f32_4* %476 = OpAccessChain %21 %472 
                                       f32_4 %477 = OpLoad %476 
                                       f32_4 %478 = OpVectorShuffle %477 %477 3 3 3 3 
                                       f32_4 %479 = OpLoad %9 
                                       f32_4 %480 = OpFMul %478 %479 
                                       f32_4 %481 = OpLoad %59 
                                       f32_4 %482 = OpFAdd %480 %481 
                                                      OpStore %9 %482 
                                       f32_4 %485 = OpLoad %9 
                                                      OpStore %484 %485 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat13;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb4 = 0.0<_Perpendicular;
    u_xlat4 = (u_xlatb4) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD5 = u_xlat0;
    vs_TEXCOORD6 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
float u_xlat17;
bool u_xlatb17;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.x = u_xlat1.w + -0.100000001;
    u_xlatb2 = u_xlat2.x<0.0;
    if((int(u_xlatb2) * int(0xffffffffu))!=0){discard;}
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.yz = u_xlat2.xx + vec2(0.0, 0.200000003);
    u_xlat2.x = u_xlat1.w * u_xlat2.y;
    u_xlat3.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat2.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat2.x = min(u_xlat2.x, 1.0);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat3.z = sqrt(u_xlat2.x);
    u_xlat2.x = fract(_Time.y);
    u_xlat17 = u_xlat2.x * 4.0;
    u_xlat18 = vs_TEXCOORD5.x + (-vs_TEXCOORD6.x);
    u_xlat18 = u_xlat18 + vs_TEXCOORD5.y;
    u_xlat18 = u_xlat18 + (-vs_TEXCOORD6.y);
    u_xlat18 = u_xlat18 * 0.5 + -0.100000001;
    u_xlat18 = fract(u_xlat18);
    u_xlatb17 = u_xlat17<u_xlat18;
    u_xlat2.x = u_xlat2.x * 4.0 + 0.100000001;
    u_xlatb2 = u_xlat18<u_xlat2.x;
    u_xlatb2 = u_xlatb2 && u_xlatb17;
    u_xlat2.xyz = (bool(u_xlatb2)) ? vec3(1.0, 1.0, 1.0) : u_xlat2.yyz;
    u_xlat17 = u_xlat1.w + (-_Cutoff);
    u_xlatb17 = u_xlat17<0.0;
    if((int(u_xlatb17) * int(0xffffffffu))!=0){discard;}
    u_xlatb17 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb17){
        u_xlatb17 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb17)) ? u_xlat4.xyz : vs_TEXCOORD4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat17 = u_xlat4.y * 0.25 + 0.75;
        u_xlat18 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat4.x = max(u_xlat17, u_xlat18);
        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    //ENDIF
    }
    u_xlat17 = dot(u_xlat4, unity_OcclusionMaskSelector);
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _LightColor0.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat17) * u_xlat0.xyz;
    u_xlat0 = (-u_xlat1) + _OverrideColor;
    SV_Target0 = _OverrideColor.wwww * u_xlat0 + u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %153 %165 %166 %180 %214 %284 %295 %299 %315 %318 %320 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %151 0 BuiltIn 151 
                                                      OpMemberDecorate %151 1 BuiltIn 151 
                                                      OpMemberDecorate %151 2 BuiltIn 151 
                                                      OpDecorate %151 Block 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %284 Location 284 
                                                      OpDecorate %295 Location 295 
                                                      OpDecorate %299 Location 299 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %318 Location 318 
                                                      OpDecorate %320 Location 320 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %7 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          i32 %76 = OpConstant 4 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Function %6 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                               Private f32_4* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                              Private f32_4* %130 = OpVariable Private 
                                             %150 = OpTypeArray %6 %13 
                                             %151 = OpTypeStruct %7 %6 %150 
                                             %152 = OpTypePointer Output %151 
        Output struct {f32_4; f32; f32[1];}* %153 = OpVariable Output 
                                             %161 = OpTypePointer Output %7 
                                             %163 = OpTypeVector %6 2 
                                             %164 = OpTypePointer Output %163 
                               Output f32_2* %165 = OpVariable Output 
                                Input f32_4* %166 = OpVariable Input 
                                         i32 %169 = OpConstant 5 
                                             %178 = OpTypeVector %6 3 
                                             %179 = OpTypePointer Input %178 
                                Input f32_3* %180 = OpVariable Input 
                                Private f32* %199 = OpVariable Private 
                                Input f32_4* %214 = OpVariable Input 
                                             %259 = OpTypePointer Private %178 
                              Private f32_3* %260 = OpVariable Private 
                                             %283 = OpTypePointer Output %178 
                               Output f32_3* %284 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                               Output f32_3* %295 = OpVariable Output 
                               Output f32_3* %299 = OpVariable Output 
                               Output f32_3* %315 = OpVariable Output 
                               Output f32_4* %318 = OpVariable Output 
                               Output f32_4* %320 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %82 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %77 = OpAccessChain %23 %76 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %75 %78 
                                                      OpStore %74 %79 
                                         bool %83 = OpLoad %74 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %87 
                                              %84 = OpLabel 
                                                      OpStore %82 %86 
                                                      OpBranch %85 
                                              %87 = OpLabel 
                                                      OpStore %82 %88 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %89 = OpLoad %82 
                                                      OpStore %80 %89 
                                 Private f32* %90 = OpAccessChain %9 %31 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpLoad %80 
                                          f32 %93 = OpFMul %91 %92 
                                   Input f32* %94 = OpAccessChain %11 %46 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                        f32_4 %99 = OpLoad %11 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %26 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpFMul %100 %103 
                                                      OpStore %98 %104 
                              Uniform f32_4* %105 = OpAccessChain %23 %25 %25 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %11 
                                       f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %98 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %98 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %43 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %114 0 0 0 0 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %98 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %23 %25 %54 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %98 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %54 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %11 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %9 %129 
                                       f32_4 %131 = OpLoad %98 
                                       f32_4 %132 = OpVectorShuffle %131 %131 1 1 1 1 
                              Uniform f32_4* %133 = OpAccessChain %23 %54 %26 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpFMul %132 %134 
                                                      OpStore %130 %135 
                              Uniform f32_4* %136 = OpAccessChain %23 %54 %25 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %98 
                                       f32_4 %139 = OpVectorShuffle %138 %138 0 0 0 0 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %130 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %130 %142 
                              Uniform f32_4* %143 = OpAccessChain %23 %54 %43 
                                       f32_4 %144 = OpLoad %143 
                                       f32_4 %145 = OpLoad %98 
                                       f32_4 %146 = OpVectorShuffle %145 %145 2 2 2 2 
                                       f32_4 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %130 
                                       f32_4 %149 = OpFAdd %147 %148 
                                                      OpStore %130 %149 
                              Uniform f32_4* %154 = OpAccessChain %23 %54 %54 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %98 
                                       f32_4 %157 = OpVectorShuffle %156 %156 3 3 3 3 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %130 
                                       f32_4 %160 = OpFAdd %158 %159 
                               Output f32_4* %162 = OpAccessChain %153 %25 
                                                      OpStore %162 %160 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                              Uniform f32_4* %170 = OpAccessChain %23 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_2 %173 = OpFMul %168 %172 
                              Uniform f32_4* %174 = OpAccessChain %23 %169 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 3 
                                       f32_2 %177 = OpFAdd %173 %176 
                                                      OpStore %165 %177 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %182 = OpAccessChain %23 %26 %25 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %186 = OpAccessChain %98 %13 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %180 
                              Uniform f32_4* %188 = OpAccessChain %23 %26 %26 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %187 %190 
                                Private f32* %192 = OpAccessChain %98 %46 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %180 
                              Uniform f32_4* %194 = OpAccessChain %23 %26 %43 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpDot %193 %196 
                                Private f32* %198 = OpAccessChain %98 %31 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %98 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_4 %202 = OpLoad %98 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %201 %203 
                                                      OpStore %199 %204 
                                         f32 %205 = OpLoad %199 
                                         f32 %206 = OpExtInst %1 32 %205 
                                                      OpStore %199 %206 
                                         f32 %207 = OpLoad %199 
                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
                                       f32_4 %209 = OpLoad %98 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %98 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                                      OpStore %98 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %23 %25 %26 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 1 2 0 
                                       f32_3 %220 = OpFMul %216 %219 
                                       f32_4 %221 = OpLoad %130 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %130 %222 
                              Uniform f32_4* %223 = OpAccessChain %23 %25 %25 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 1 2 0 
                                       f32_4 %226 = OpLoad %214 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 0 0 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %130 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %130 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %130 %233 
                              Uniform f32_4* %234 = OpAccessChain %23 %25 %43 
                                       f32_4 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 2 0 
                                       f32_4 %237 = OpLoad %214 
                                       f32_3 %238 = OpVectorShuffle %237 %237 2 2 2 
                                       f32_3 %239 = OpFMul %236 %238 
                                       f32_4 %240 = OpLoad %130 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFAdd %239 %241 
                                       f32_4 %243 = OpLoad %130 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %130 %244 
                                       f32_4 %245 = OpLoad %130 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %130 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %246 %248 
                                                      OpStore %199 %249 
                                         f32 %250 = OpLoad %199 
                                         f32 %251 = OpExtInst %1 32 %250 
                                                      OpStore %199 %251 
                                         f32 %252 = OpLoad %199 
                                       f32_3 %253 = OpCompositeConstruct %252 %252 %252 
                                       f32_4 %254 = OpLoad %130 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %130 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %130 %258 
                                       f32_4 %261 = OpLoad %98 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_4 %263 = OpLoad %130 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                                      OpStore %260 %265 
                                       f32_4 %266 = OpLoad %98 
                                       f32_3 %267 = OpVectorShuffle %266 %266 2 0 1 
                                       f32_4 %268 = OpLoad %130 
                                       f32_3 %269 = OpVectorShuffle %268 %268 1 2 0 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %260 
                                       f32_3 %272 = OpFNegate %271 
                                       f32_3 %273 = OpFAdd %270 %272 
                                                      OpStore %260 %273 
                                  Input f32* %274 = OpAccessChain %214 %57 
                                         f32 %275 = OpLoad %274 
                                Uniform f32* %276 = OpAccessChain %23 %43 %57 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFMul %275 %277 
                                                      OpStore %199 %278 
                                         f32 %279 = OpLoad %199 
                                       f32_3 %280 = OpCompositeConstruct %279 %279 %279 
                                       f32_3 %281 = OpLoad %260 
                                       f32_3 %282 = OpFMul %280 %281 
                                                      OpStore %260 %282 
                                Private f32* %285 = OpAccessChain %260 %31 
                                         f32 %286 = OpLoad %285 
                                 Output f32* %288 = OpAccessChain %284 %13 
                                                      OpStore %288 %286 
                                Private f32* %289 = OpAccessChain %130 %46 
                                         f32 %290 = OpLoad %289 
                                 Output f32* %291 = OpAccessChain %284 %31 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %98 %13 
                                         f32 %293 = OpLoad %292 
                                 Output f32* %294 = OpAccessChain %284 %46 
                                                      OpStore %294 %293 
                                Private f32* %296 = OpAccessChain %130 %31 
                                         f32 %297 = OpLoad %296 
                                 Output f32* %298 = OpAccessChain %295 %31 
                                                      OpStore %298 %297 
                                Private f32* %300 = OpAccessChain %130 %13 
                                         f32 %301 = OpLoad %300 
                                 Output f32* %302 = OpAccessChain %299 %31 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %98 %46 
                                         f32 %304 = OpLoad %303 
                                 Output f32* %305 = OpAccessChain %295 %46 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %98 %31 
                                         f32 %307 = OpLoad %306 
                                 Output f32* %308 = OpAccessChain %299 %46 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %260 %13 
                                         f32 %310 = OpLoad %309 
                                 Output f32* %311 = OpAccessChain %295 %13 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %260 %46 
                                         f32 %313 = OpLoad %312 
                                 Output f32* %314 = OpAccessChain %299 %13 
                                                      OpStore %314 %313 
                                       f32_4 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                                      OpStore %315 %317 
                                       f32_4 %319 = OpLoad %9 
                                                      OpStore %318 %319 
                              Uniform f32_4* %321 = OpAccessChain %23 %25 %54 
                                       f32_4 %322 = OpLoad %321 
                                                      OpStore %320 %322 
                                 Output f32* %323 = OpAccessChain %153 %25 %13 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                 Output f32* %326 = OpAccessChain %153 %25 %13 
                                                      OpStore %326 %325 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 422
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %46 %138 %142 %319 %324 %329 %419 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 RelaxedPrecision 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 RelaxedPrecision 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpMemberDecorate %18 4 Offset 18 
                                                      OpMemberDecorate %18 5 Offset 18 
                                                      OpMemberDecorate %18 6 Offset 18 
                                                      OpMemberDecorate %18 7 Offset 18 
                                                      OpMemberDecorate %18 8 RelaxedPrecision 
                                                      OpMemberDecorate %18 8 Offset 18 
                                                      OpMemberDecorate %18 9 Offset 18 
                                                      OpMemberDecorate %18 10 RelaxedPrecision 
                                                      OpMemberDecorate %18 10 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %46 Location 46 
                                                      OpDecorate %50 RelaxedPrecision 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %83 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %215 SpecId 215 
                                                      OpDecorate %301 DescriptorSet 301 
                                                      OpDecorate %301 Binding 301 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 Location 319 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %324 Location 324 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %329 Location 329 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %419 Location 419 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %7 %10 %7 %7 %7 %17 %10 %10 %7 %7 %6 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 1 
                                              %23 = OpTypePointer Uniform %10 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %40 = OpTypeSampledImage %39 
                                              %41 = OpTypePointer UniformConstant %40 
  UniformConstant read_only Texture2DSampled* %42 = OpVariable UniformConstant 
                                              %44 = OpTypeVector %6 2 
                                              %45 = OpTypePointer Input %44 
                                 Input f32_2* %46 = OpVariable Input 
                                              %49 = OpTypePointer Private %10 
                               Private f32_3* %50 = OpVariable Private 
                                          u32 %51 = OpConstant 3 
                                          f32 %54 = OpConstant 3.674022E-40 
                                          u32 %56 = OpConstant 0 
                                              %58 = OpTypeBool 
                                              %59 = OpTypePointer Private %58 
                                Private bool* %60 = OpVariable Private 
                                          f32 %63 = OpConstant 3.674022E-40 
                                          i32 %66 = OpConstant 0 
                                          i32 %68 = OpConstant -1 
                                          f32 %76 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                                          f32 %78 = OpConstant 3.674022E-40 
                                        f32_3 %79 = OpConstantComposite %76 %77 %78 
                               Private f32_4* %82 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                        f32_3 %86 = OpConstantComposite %63 %63 %85 
                                          u32 %96 = OpConstant 1 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_2 %106 = OpConstantComposite %105 %105 
                                Private f32* %110 = OpVariable Private 
                                         f32 %117 = OpConstant 3.674022E-40 
                                         u32 %124 = OpConstant 2 
                                Private f32* %126 = OpVariable Private 
                                             %127 = OpTypePointer Uniform %6 
                              Private f32_3* %131 = OpVariable Private 
                                         f32 %133 = OpConstant 3.674022E-40 
                                Private f32* %136 = OpVariable Private 
                                             %137 = OpTypePointer Input %7 
                                Input f32_4* %138 = OpVariable Input 
                                             %139 = OpTypePointer Input %6 
                                Input f32_4* %142 = OpVariable Input 
                                         f32 %157 = OpConstant 3.674022E-40 
                               Private bool* %162 = OpVariable Private 
                                         f32 %169 = OpConstant 3.674022E-40 
                               Private bool* %171 = OpVariable Private 
                              Private f32_3* %178 = OpVariable Private 
                                             %179 = OpTypePointer Function %10 
                                       f32_3 %184 = OpConstantComposite %117 %117 %117 
                                         i32 %191 = OpConstant 10 
                                         i32 %205 = OpConstant 4 
                                        bool %209 = OpConstantFalse 
                                        bool %215 = OpSpecConstantFalse 
                              Private f32_3* %221 = OpVariable Private 
                                         i32 %224 = OpConstant 5 
                                             %225 = OpTypePointer Uniform %7 
                                         i32 %238 = OpConstant 2 
                                         i32 %248 = OpConstant 3 
                                         i32 %265 = OpConstant 7 
                                         i32 %274 = OpConstant 6 
                                         f32 %282 = OpConstant 3.674022E-40 
                                         f32 %284 = OpConstant 3.674022E-40 
                                             %298 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %299 = OpTypeSampledImage %298 
                                             %300 = OpTypePointer UniformConstant %299 
 UniformConstant read_only Texture3DSampled* %301 = OpVariable UniformConstant 
                              Private f32_4* %306 = OpVariable Private 
                                Input f32_3* %319 = OpVariable Input 
                                Input f32_3* %324 = OpVariable Input 
                                Input f32_3* %329 = OpVariable Input 
                                Private f32* %334 = OpVariable Private 
                                Private f32* %353 = OpVariable Private 
                              Private f32_3* %371 = OpVariable Private 
                                         f32 %378 = OpConstant 3.674022E-40 
                                         i32 %387 = OpConstant 8 
                                         i32 %407 = OpConstant 9 
                                             %418 = OpTypePointer Output %7 
                               Output f32_4* %419 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %180 = OpVariable Function 
                             Function f32_3* %253 = OpVariable Function 
                                        f32_3 %13 = OpLoad %12 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %24 = OpAccessChain %20 %22 
                                        f32_3 %25 = OpLoad %24 
                                        f32_3 %26 = OpFAdd %14 %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_4 %28 = OpVectorShuffle %27 %26 4 5 6 3 
                                                      OpStore %9 %28 
                                        f32_4 %31 = OpLoad %9 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                          f32 %35 = OpDot %32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                          f32 %37 = OpExtInst %1 32 %36 
                                                      OpStore %30 %37 
                   read_only Texture2DSampled %43 = OpLoad %42 
                                        f32_2 %47 = OpLoad %46 
                                        f32_4 %48 = OpImageSampleImplicitLod %43 %47 
                                                      OpStore %38 %48 
                                 Private f32* %52 = OpAccessChain %38 %51 
                                          f32 %53 = OpLoad %52 
                                          f32 %55 = OpFAdd %53 %54 
                                 Private f32* %57 = OpAccessChain %50 %56 
                                                      OpStore %57 %55 
                                 Private f32* %61 = OpAccessChain %50 %56 
                                          f32 %62 = OpLoad %61 
                                         bool %64 = OpFOrdLessThan %62 %63 
                                                      OpStore %60 %64 
                                         bool %65 = OpLoad %60 
                                          i32 %67 = OpSelect %65 %22 %66 
                                          i32 %69 = OpIMul %67 %68 
                                         bool %70 = OpINotEqual %69 %66 
                                                      OpSelectionMerge %72 None 
                                                      OpBranchConditional %70 %71 %72 
                                              %71 = OpLabel 
                                                      OpKill
                                              %72 = OpLabel 
                                        f32_4 %74 = OpLoad %38 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
                                          f32 %80 = OpDot %75 %79 
                                 Private f32* %81 = OpAccessChain %50 %56 
                                                      OpStore %81 %80 
                                        f32_3 %83 = OpLoad %50 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 0 0 
                                        f32_3 %87 = OpFAdd %84 %86 
                                        f32_4 %88 = OpLoad %82 
                                        f32_4 %89 = OpVectorShuffle %88 %87 4 5 6 3 
                                                      OpStore %82 %89 
                                        f32_4 %90 = OpLoad %82 
                                        f32_2 %91 = OpVectorShuffle %90 %90 1 1 
                                        f32_4 %92 = OpLoad %38 
                                        f32_2 %93 = OpVectorShuffle %92 %92 3 3 
                                          f32 %94 = OpDot %91 %93 
                                 Private f32* %95 = OpAccessChain %50 %56 
                                                      OpStore %95 %94 
                                 Private f32* %97 = OpAccessChain %82 %96 
                                          f32 %98 = OpLoad %97 
                                 Private f32* %99 = OpAccessChain %82 %96 
                                         f32 %100 = OpLoad %99 
                                         f32 %101 = OpFAdd %98 %100 
                                Private f32* %102 = OpAccessChain %50 %96 
                                                      OpStore %102 %101 
                                       f32_3 %103 = OpLoad %50 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_2 %107 = OpFAdd %104 %106 
                                       f32_3 %108 = OpLoad %50 
                                       f32_3 %109 = OpVectorShuffle %108 %107 3 4 2 
                                                      OpStore %50 %109 
                                       f32_3 %111 = OpLoad %50 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                                       f32_3 %113 = OpLoad %50 
                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                                         f32 %115 = OpDot %112 %114 
                                                      OpStore %110 %115 
                                         f32 %116 = OpLoad %110 
                                         f32 %118 = OpExtInst %1 37 %116 %117 
                                                      OpStore %110 %118 
                                         f32 %119 = OpLoad %110 
                                         f32 %120 = OpFNegate %119 
                                         f32 %121 = OpFAdd %120 %117 
                                                      OpStore %110 %121 
                                         f32 %122 = OpLoad %110 
                                         f32 %123 = OpExtInst %1 31 %122 
                                Private f32* %125 = OpAccessChain %50 %124 
                                                      OpStore %125 %123 
                                Uniform f32* %128 = OpAccessChain %20 %66 %96 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpExtInst %1 10 %129 
                                                      OpStore %126 %130 
                                         f32 %132 = OpLoad %126 
                                         f32 %134 = OpFMul %132 %133 
                                Private f32* %135 = OpAccessChain %131 %56 
                                                      OpStore %135 %134 
                                  Input f32* %140 = OpAccessChain %138 %56 
                                         f32 %141 = OpLoad %140 
                                  Input f32* %143 = OpAccessChain %142 %56 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFNegate %144 
                                         f32 %146 = OpFAdd %141 %145 
                                                      OpStore %136 %146 
                                         f32 %147 = OpLoad %136 
                                  Input f32* %148 = OpAccessChain %138 %96 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFAdd %147 %149 
                                                      OpStore %136 %150 
                                         f32 %151 = OpLoad %136 
                                  Input f32* %152 = OpAccessChain %142 %96 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFNegate %153 
                                         f32 %155 = OpFAdd %151 %154 
                                                      OpStore %136 %155 
                                         f32 %156 = OpLoad %136 
                                         f32 %158 = OpFMul %156 %157 
                                         f32 %159 = OpFAdd %158 %54 
                                                      OpStore %136 %159 
                                         f32 %160 = OpLoad %136 
                                         f32 %161 = OpExtInst %1 10 %160 
                                                      OpStore %136 %161 
                                Private f32* %163 = OpAccessChain %131 %56 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpLoad %136 
                                        bool %166 = OpFOrdLessThan %164 %165 
                                                      OpStore %162 %166 
                                         f32 %167 = OpLoad %126 
                                         f32 %168 = OpFMul %167 %133 
                                         f32 %170 = OpFAdd %168 %169 
                                                      OpStore %126 %170 
                                         f32 %172 = OpLoad %136 
                                         f32 %173 = OpLoad %126 
                                        bool %174 = OpFOrdLessThan %172 %173 
                                                      OpStore %171 %174 
                                        bool %175 = OpLoad %171 
                                        bool %176 = OpLoad %162 
                                        bool %177 = OpLogicalAnd %175 %176 
                                                      OpStore %171 %177 
                                        bool %181 = OpLoad %171 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %185 
                                             %182 = OpLabel 
                                                      OpStore %180 %184 
                                                      OpBranch %183 
                                             %185 = OpLabel 
                                       f32_4 %186 = OpLoad %82 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                                      OpStore %180 %187 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %188 = OpLoad %180 
                                                      OpStore %178 %188 
                                Private f32* %189 = OpAccessChain %38 %51 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %192 = OpAccessChain %20 %191 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFNegate %193 
                                         f32 %195 = OpFAdd %190 %194 
                                                      OpStore %110 %195 
                                         f32 %196 = OpLoad %110 
                                        bool %197 = OpFOrdLessThan %196 %63 
                                                      OpStore %60 %197 
                                        bool %198 = OpLoad %60 
                                         i32 %199 = OpSelect %198 %22 %66 
                                         i32 %200 = OpIMul %199 %68 
                                        bool %201 = OpINotEqual %200 %66 
                                                      OpSelectionMerge %203 None 
                                                      OpBranchConditional %201 %202 %203 
                                             %202 = OpLabel 
                                                      OpKill
                                             %203 = OpLabel 
                                Uniform f32* %206 = OpAccessChain %20 %205 %56 
                                         f32 %207 = OpLoad %206 
                                        bool %208 = OpFOrdEqual %207 %117 
                                                      OpStore %60 %208 
                                                      OpSelectionMerge %211 None 
                                                      OpBranchConditional %209 %210 %211 
                                             %210 = OpLabel 
                                        bool %212 = OpLoad %60 
                                                      OpSelectionMerge %214 None 
                                                      OpBranchConditional %212 %213 %214 
                                             %213 = OpLabel 
                                                      OpBranch %214 
                                             %214 = OpLabel 
                                                      OpBranch %211 
                                             %211 = OpLabel 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %308 
                                             %216 = OpLabel 
                                Uniform f32* %218 = OpAccessChain %20 %205 %96 
                                         f32 %219 = OpLoad %218 
                                        bool %220 = OpFOrdEqual %219 %117 
                                                      OpStore %60 %220 
                                       f32_3 %222 = OpLoad %12 
                                       f32_3 %223 = OpVectorShuffle %222 %222 1 1 1 
                              Uniform f32_4* %226 = OpAccessChain %20 %224 %22 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %223 %228 
                                                      OpStore %221 %229 
                              Uniform f32_4* %230 = OpAccessChain %20 %224 %66 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpLoad %12 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 0 0 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_3 %236 = OpLoad %221 
                                       f32_3 %237 = OpFAdd %235 %236 
                                                      OpStore %221 %237 
                              Uniform f32_4* %239 = OpAccessChain %20 %224 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpLoad %12 
                                       f32_3 %243 = OpVectorShuffle %242 %242 2 2 2 
                                       f32_3 %244 = OpFMul %241 %243 
                                       f32_3 %245 = OpLoad %221 
                                       f32_3 %246 = OpFAdd %244 %245 
                                                      OpStore %221 %246 
                                       f32_3 %247 = OpLoad %221 
                              Uniform f32_4* %249 = OpAccessChain %20 %224 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %247 %251 
                                                      OpStore %221 %252 
                                        bool %254 = OpLoad %60 
                                                      OpSelectionMerge %256 None 
                                                      OpBranchConditional %254 %255 %258 
                                             %255 = OpLabel 
                                       f32_3 %257 = OpLoad %221 
                                                      OpStore %253 %257 
                                                      OpBranch %256 
                                             %258 = OpLabel 
                                       f32_3 %259 = OpLoad %12 
                                                      OpStore %253 %259 
                                                      OpBranch %256 
                                             %256 = OpLabel 
                                       f32_3 %260 = OpLoad %253 
                                       f32_4 %261 = OpLoad %82 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %82 %262 
                                       f32_4 %263 = OpLoad %82 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                              Uniform f32_3* %266 = OpAccessChain %20 %265 
                                       f32_3 %267 = OpLoad %266 
                                       f32_3 %268 = OpFNegate %267 
                                       f32_3 %269 = OpFAdd %264 %268 
                                       f32_4 %270 = OpLoad %82 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %82 %271 
                                       f32_4 %272 = OpLoad %82 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_3* %275 = OpAccessChain %20 %274 
                                       f32_3 %276 = OpLoad %275 
                                       f32_3 %277 = OpFMul %273 %276 
                                       f32_4 %278 = OpLoad %82 
                                       f32_4 %279 = OpVectorShuffle %278 %277 0 4 5 6 
                                                      OpStore %82 %279 
                                Private f32* %280 = OpAccessChain %82 %96 
                                         f32 %281 = OpLoad %280 
                                         f32 %283 = OpFMul %281 %282 
                                         f32 %285 = OpFAdd %283 %284 
                                Private f32* %286 = OpAccessChain %221 %56 
                                                      OpStore %286 %285 
                                Uniform f32* %287 = OpAccessChain %20 %205 %124 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %288 %157 
                                         f32 %290 = OpFAdd %289 %284 
                                Private f32* %291 = OpAccessChain %131 %56 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %221 %56 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %131 %56 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 40 %293 %295 
                                Private f32* %297 = OpAccessChain %82 %56 
                                                      OpStore %297 %296 
                  read_only Texture3DSampled %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %82 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 2 3 
                                       f32_4 %305 = OpImageSampleImplicitLod %302 %304 
                                                      OpStore %82 %305 
                                       f32_4 %307 = OpLoad %82 
                                                      OpStore %306 %307 
                                                      OpBranch %217 
                                             %308 = OpLabel 
                                Private f32* %309 = OpAccessChain %306 %56 
                                                      OpStore %309 %117 
                                Private f32* %310 = OpAccessChain %306 %96 
                                                      OpStore %310 %117 
                                Private f32* %311 = OpAccessChain %306 %124 
                                                      OpStore %311 %117 
                                Private f32* %312 = OpAccessChain %306 %51 
                                                      OpStore %312 %117 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                       f32_4 %313 = OpLoad %306 
                              Uniform f32_4* %314 = OpAccessChain %20 %248 
                                       f32_4 %315 = OpLoad %314 
                                         f32 %316 = OpDot %313 %315 
                                                      OpStore %110 %316 
                                         f32 %317 = OpLoad %110 
                                         f32 %318 = OpExtInst %1 43 %317 %63 %117 
                                                      OpStore %110 %318 
                                       f32_3 %320 = OpLoad %319 
                                       f32_3 %321 = OpLoad %50 
                                         f32 %322 = OpDot %320 %321 
                                Private f32* %323 = OpAccessChain %131 %56 
                                                      OpStore %323 %322 
                                       f32_3 %325 = OpLoad %324 
                                       f32_3 %326 = OpLoad %50 
                                         f32 %327 = OpDot %325 %326 
                                Private f32* %328 = OpAccessChain %131 %96 
                                                      OpStore %328 %327 
                                       f32_3 %330 = OpLoad %329 
                                       f32_3 %331 = OpLoad %50 
                                         f32 %332 = OpDot %330 %331 
                                Private f32* %333 = OpAccessChain %131 %124 
                                                      OpStore %333 %332 
                                       f32_3 %335 = OpLoad %131 
                                       f32_3 %336 = OpLoad %131 
                                         f32 %337 = OpDot %335 %336 
                                                      OpStore %334 %337 
                                         f32 %338 = OpLoad %334 
                                         f32 %339 = OpExtInst %1 32 %338 
                                                      OpStore %334 %339 
                                         f32 %340 = OpLoad %334 
                                       f32_3 %341 = OpCompositeConstruct %340 %340 %340 
                                       f32_3 %342 = OpLoad %131 
                                       f32_3 %343 = OpFMul %341 %342 
                                                      OpStore %131 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                         f32 %346 = OpLoad %30 
                                       f32_3 %347 = OpCompositeConstruct %346 %346 %346 
                                       f32_3 %348 = OpFMul %345 %347 
                              Uniform f32_4* %349 = OpAccessChain %20 %238 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFAdd %348 %351 
                                                      OpStore %50 %352 
                                       f32_3 %354 = OpLoad %50 
                                       f32_3 %355 = OpLoad %50 
                                         f32 %356 = OpDot %354 %355 
                                                      OpStore %353 %356 
                                         f32 %357 = OpLoad %353 
                                         f32 %358 = OpExtInst %1 32 %357 
                                                      OpStore %353 %358 
                                       f32_3 %359 = OpLoad %50 
                                         f32 %360 = OpLoad %353 
                                       f32_3 %361 = OpCompositeConstruct %360 %360 %360 
                                       f32_3 %362 = OpFMul %359 %361 
                                                      OpStore %50 %362 
                                       f32_3 %363 = OpLoad %131 
                                       f32_3 %364 = OpLoad %50 
                                         f32 %365 = OpDot %363 %364 
                                Private f32* %366 = OpAccessChain %50 %56 
                                                      OpStore %366 %365 
                                Private f32* %367 = OpAccessChain %50 %56 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 40 %368 %63 
                                Private f32* %370 = OpAccessChain %50 %56 
                                                      OpStore %370 %369 
                                Private f32* %372 = OpAccessChain %50 %56 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpExtInst %1 30 %373 
                                Private f32* %375 = OpAccessChain %371 %56 
                                                      OpStore %375 %374 
                                Private f32* %376 = OpAccessChain %371 %56 
                                         f32 %377 = OpLoad %376 
                                         f32 %379 = OpFMul %377 %378 
                                Private f32* %380 = OpAccessChain %371 %56 
                                                      OpStore %380 %379 
                                Private f32* %381 = OpAccessChain %371 %56 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpExtInst %1 29 %382 
                                Private f32* %384 = OpAccessChain %371 %56 
                                                      OpStore %384 %383 
                                       f32_3 %385 = OpLoad %371 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 0 0 
                              Uniform f32_4* %388 = OpAccessChain %20 %387 
                                       f32_4 %389 = OpLoad %388 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFMul %386 %390 
                                                      OpStore %371 %391 
                                       f32_3 %392 = OpLoad %178 
                              Uniform f32_4* %393 = OpAccessChain %20 %387 
                                       f32_4 %394 = OpLoad %393 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFMul %392 %395 
                                       f32_3 %397 = OpLoad %371 
                                       f32_3 %398 = OpFAdd %396 %397 
                                                      OpStore %371 %398 
                                         f32 %399 = OpLoad %110 
                                       f32_3 %400 = OpCompositeConstruct %399 %399 %399 
                                       f32_3 %401 = OpLoad %371 
                                       f32_3 %402 = OpFMul %400 %401 
                                       f32_4 %403 = OpLoad %38 
                                       f32_4 %404 = OpVectorShuffle %403 %402 4 5 6 3 
                                                      OpStore %38 %404 
                                       f32_4 %405 = OpLoad %38 
                                       f32_4 %406 = OpFNegate %405 
                              Uniform f32_4* %408 = OpAccessChain %20 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %410 = OpFAdd %406 %409 
                                                      OpStore %9 %410 
                              Uniform f32_4* %411 = OpAccessChain %20 %407 
                                       f32_4 %412 = OpLoad %411 
                                       f32_4 %413 = OpVectorShuffle %412 %412 3 3 3 3 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpFMul %413 %414 
                                       f32_4 %416 = OpLoad %38 
                                       f32_4 %417 = OpFAdd %415 %416 
                                                      OpStore %9 %417 
                                       f32_4 %420 = OpLoad %9 
                                                      OpStore %419 %420 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat13;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb4 = 0.0<_Perpendicular;
    u_xlat4 = (u_xlatb4) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD5 = u_xlat0;
    vs_TEXCOORD6 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat22 = u_xlat2.w + -0.100000001;
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat22) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat4.z = sqrt(u_xlat22);
    u_xlat22 = fract(_Time.y);
    u_xlat3.x = u_xlat22 * 4.0;
    u_xlat24 = vs_TEXCOORD5.x + (-vs_TEXCOORD6.x);
    u_xlat24 = u_xlat24 + vs_TEXCOORD5.y;
    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.y);
    u_xlat24 = u_xlat24 * 0.5 + -0.100000001;
    u_xlat24 = fract(u_xlat24);
    u_xlatb3 = u_xlat3.x<u_xlat24;
    u_xlat22 = u_xlat22 * 4.0 + 0.100000001;
    u_xlatb22 = u_xlat24<u_xlat22;
    u_xlatb22 = u_xlatb22 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb22)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat22 = u_xlat2.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat5 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat5 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat5;
    u_xlat5 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat5;
    u_xlat5 = u_xlat5 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb22){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
        u_xlat24 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat22, u_xlat24);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlatb24 = 0.0<u_xlat5.z;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat5.xy / u_xlat5.ww;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat10_6 = texture(_LightTexture0, u_xlat6.xy);
    u_xlat24 = u_xlat24 * u_xlat10_6.w;
    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat10_5 = texture(_LightTextureB0, vec2(u_xlat25));
    u_xlat24 = u_xlat24 * u_xlat10_5.w;
    u_xlat22 = u_xlat22 * u_xlat24;
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xyz = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat0.xyz;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    SV_Target0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %153 %165 %166 %180 %214 %284 %295 %299 %315 %318 %320 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %151 0 BuiltIn 151 
                                                      OpMemberDecorate %151 1 BuiltIn 151 
                                                      OpMemberDecorate %151 2 BuiltIn 151 
                                                      OpDecorate %151 Block 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %284 Location 284 
                                                      OpDecorate %295 Location 295 
                                                      OpDecorate %299 Location 299 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %318 Location 318 
                                                      OpDecorate %320 Location 320 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %7 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          i32 %76 = OpConstant 4 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Function %6 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                               Private f32_4* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                              Private f32_4* %130 = OpVariable Private 
                                             %150 = OpTypeArray %6 %13 
                                             %151 = OpTypeStruct %7 %6 %150 
                                             %152 = OpTypePointer Output %151 
        Output struct {f32_4; f32; f32[1];}* %153 = OpVariable Output 
                                             %161 = OpTypePointer Output %7 
                                             %163 = OpTypeVector %6 2 
                                             %164 = OpTypePointer Output %163 
                               Output f32_2* %165 = OpVariable Output 
                                Input f32_4* %166 = OpVariable Input 
                                         i32 %169 = OpConstant 5 
                                             %178 = OpTypeVector %6 3 
                                             %179 = OpTypePointer Input %178 
                                Input f32_3* %180 = OpVariable Input 
                                Private f32* %199 = OpVariable Private 
                                Input f32_4* %214 = OpVariable Input 
                                             %259 = OpTypePointer Private %178 
                              Private f32_3* %260 = OpVariable Private 
                                             %283 = OpTypePointer Output %178 
                               Output f32_3* %284 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                               Output f32_3* %295 = OpVariable Output 
                               Output f32_3* %299 = OpVariable Output 
                               Output f32_3* %315 = OpVariable Output 
                               Output f32_4* %318 = OpVariable Output 
                               Output f32_4* %320 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %82 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %77 = OpAccessChain %23 %76 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %75 %78 
                                                      OpStore %74 %79 
                                         bool %83 = OpLoad %74 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %87 
                                              %84 = OpLabel 
                                                      OpStore %82 %86 
                                                      OpBranch %85 
                                              %87 = OpLabel 
                                                      OpStore %82 %88 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %89 = OpLoad %82 
                                                      OpStore %80 %89 
                                 Private f32* %90 = OpAccessChain %9 %31 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpLoad %80 
                                          f32 %93 = OpFMul %91 %92 
                                   Input f32* %94 = OpAccessChain %11 %46 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                        f32_4 %99 = OpLoad %11 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %26 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpFMul %100 %103 
                                                      OpStore %98 %104 
                              Uniform f32_4* %105 = OpAccessChain %23 %25 %25 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %11 
                                       f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %98 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %98 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %43 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %114 0 0 0 0 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %98 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %23 %25 %54 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %98 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %54 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %11 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %9 %129 
                                       f32_4 %131 = OpLoad %98 
                                       f32_4 %132 = OpVectorShuffle %131 %131 1 1 1 1 
                              Uniform f32_4* %133 = OpAccessChain %23 %54 %26 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpFMul %132 %134 
                                                      OpStore %130 %135 
                              Uniform f32_4* %136 = OpAccessChain %23 %54 %25 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %98 
                                       f32_4 %139 = OpVectorShuffle %138 %138 0 0 0 0 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %130 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %130 %142 
                              Uniform f32_4* %143 = OpAccessChain %23 %54 %43 
                                       f32_4 %144 = OpLoad %143 
                                       f32_4 %145 = OpLoad %98 
                                       f32_4 %146 = OpVectorShuffle %145 %145 2 2 2 2 
                                       f32_4 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %130 
                                       f32_4 %149 = OpFAdd %147 %148 
                                                      OpStore %130 %149 
                              Uniform f32_4* %154 = OpAccessChain %23 %54 %54 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %98 
                                       f32_4 %157 = OpVectorShuffle %156 %156 3 3 3 3 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %130 
                                       f32_4 %160 = OpFAdd %158 %159 
                               Output f32_4* %162 = OpAccessChain %153 %25 
                                                      OpStore %162 %160 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                              Uniform f32_4* %170 = OpAccessChain %23 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_2 %173 = OpFMul %168 %172 
                              Uniform f32_4* %174 = OpAccessChain %23 %169 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 3 
                                       f32_2 %177 = OpFAdd %173 %176 
                                                      OpStore %165 %177 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %182 = OpAccessChain %23 %26 %25 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %186 = OpAccessChain %98 %13 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %180 
                              Uniform f32_4* %188 = OpAccessChain %23 %26 %26 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %187 %190 
                                Private f32* %192 = OpAccessChain %98 %46 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %180 
                              Uniform f32_4* %194 = OpAccessChain %23 %26 %43 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpDot %193 %196 
                                Private f32* %198 = OpAccessChain %98 %31 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %98 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_4 %202 = OpLoad %98 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %201 %203 
                                                      OpStore %199 %204 
                                         f32 %205 = OpLoad %199 
                                         f32 %206 = OpExtInst %1 32 %205 
                                                      OpStore %199 %206 
                                         f32 %207 = OpLoad %199 
                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
                                       f32_4 %209 = OpLoad %98 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %98 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                                      OpStore %98 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %23 %25 %26 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 1 2 0 
                                       f32_3 %220 = OpFMul %216 %219 
                                       f32_4 %221 = OpLoad %130 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %130 %222 
                              Uniform f32_4* %223 = OpAccessChain %23 %25 %25 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 1 2 0 
                                       f32_4 %226 = OpLoad %214 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 0 0 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %130 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %130 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %130 %233 
                              Uniform f32_4* %234 = OpAccessChain %23 %25 %43 
                                       f32_4 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 2 0 
                                       f32_4 %237 = OpLoad %214 
                                       f32_3 %238 = OpVectorShuffle %237 %237 2 2 2 
                                       f32_3 %239 = OpFMul %236 %238 
                                       f32_4 %240 = OpLoad %130 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFAdd %239 %241 
                                       f32_4 %243 = OpLoad %130 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %130 %244 
                                       f32_4 %245 = OpLoad %130 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %130 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %246 %248 
                                                      OpStore %199 %249 
                                         f32 %250 = OpLoad %199 
                                         f32 %251 = OpExtInst %1 32 %250 
                                                      OpStore %199 %251 
                                         f32 %252 = OpLoad %199 
                                       f32_3 %253 = OpCompositeConstruct %252 %252 %252 
                                       f32_4 %254 = OpLoad %130 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %130 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %130 %258 
                                       f32_4 %261 = OpLoad %98 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_4 %263 = OpLoad %130 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                                      OpStore %260 %265 
                                       f32_4 %266 = OpLoad %98 
                                       f32_3 %267 = OpVectorShuffle %266 %266 2 0 1 
                                       f32_4 %268 = OpLoad %130 
                                       f32_3 %269 = OpVectorShuffle %268 %268 1 2 0 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %260 
                                       f32_3 %272 = OpFNegate %271 
                                       f32_3 %273 = OpFAdd %270 %272 
                                                      OpStore %260 %273 
                                  Input f32* %274 = OpAccessChain %214 %57 
                                         f32 %275 = OpLoad %274 
                                Uniform f32* %276 = OpAccessChain %23 %43 %57 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFMul %275 %277 
                                                      OpStore %199 %278 
                                         f32 %279 = OpLoad %199 
                                       f32_3 %280 = OpCompositeConstruct %279 %279 %279 
                                       f32_3 %281 = OpLoad %260 
                                       f32_3 %282 = OpFMul %280 %281 
                                                      OpStore %260 %282 
                                Private f32* %285 = OpAccessChain %260 %31 
                                         f32 %286 = OpLoad %285 
                                 Output f32* %288 = OpAccessChain %284 %13 
                                                      OpStore %288 %286 
                                Private f32* %289 = OpAccessChain %130 %46 
                                         f32 %290 = OpLoad %289 
                                 Output f32* %291 = OpAccessChain %284 %31 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %98 %13 
                                         f32 %293 = OpLoad %292 
                                 Output f32* %294 = OpAccessChain %284 %46 
                                                      OpStore %294 %293 
                                Private f32* %296 = OpAccessChain %130 %31 
                                         f32 %297 = OpLoad %296 
                                 Output f32* %298 = OpAccessChain %295 %31 
                                                      OpStore %298 %297 
                                Private f32* %300 = OpAccessChain %130 %13 
                                         f32 %301 = OpLoad %300 
                                 Output f32* %302 = OpAccessChain %299 %31 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %98 %46 
                                         f32 %304 = OpLoad %303 
                                 Output f32* %305 = OpAccessChain %295 %46 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %98 %31 
                                         f32 %307 = OpLoad %306 
                                 Output f32* %308 = OpAccessChain %299 %46 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %260 %13 
                                         f32 %310 = OpLoad %309 
                                 Output f32* %311 = OpAccessChain %295 %13 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %260 %46 
                                         f32 %313 = OpLoad %312 
                                 Output f32* %314 = OpAccessChain %299 %13 
                                                      OpStore %314 %313 
                                       f32_4 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                                      OpStore %315 %317 
                                       f32_4 %319 = OpLoad %9 
                                                      OpStore %318 %319 
                              Uniform f32_4* %321 = OpAccessChain %23 %25 %54 
                                       f32_4 %322 = OpLoad %321 
                                                      OpStore %320 %322 
                                 Output f32* %323 = OpAccessChain %153 %25 %13 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                 Output f32* %326 = OpAccessChain %153 %25 %13 
                                                      OpStore %326 %325 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 527
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %67 %156 %160 %422 %427 %432 %524 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 RelaxedPrecision 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 RelaxedPrecision 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %123 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %127 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %135 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %160 Location 160 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %267 SpecId 267 
                                                      OpDecorate %358 DescriptorSet 358 
                                                      OpDecorate %358 Binding 358 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %397 DescriptorSet 397 
                                                      OpDecorate %397 Binding 397 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %410 DescriptorSet 410 
                                                      OpDecorate %410 Binding 410 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 Location 422 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %427 Location 427 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %432 Location 432 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %502 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %524 Location 524 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeStruct %7 %10 %7 %7 %7 %17 %10 %10 %7 %18 %7 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                              %24 = OpTypePointer Uniform %7 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %32 = OpVariable Private 
                                              %40 = OpTypePointer Private %10 
                               Private f32_3* %41 = OpVariable Private 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %10 
                                 Private f32* %49 = OpVariable Private 
                               Private f32_4* %59 = OpVariable Private 
                                              %60 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %61 = OpTypeSampledImage %60 
                                              %62 = OpTypePointer UniformConstant %61 
  UniformConstant read_only Texture2DSampled* %63 = OpVariable UniformConstant 
                                              %65 = OpTypeVector %6 2 
                                              %66 = OpTypePointer Input %65 
                                 Input f32_2* %67 = OpVariable Input 
                               Private f32_3* %70 = OpVariable Private 
                                          u32 %71 = OpConstant 3 
                                          f32 %74 = OpConstant 3.674022E-40 
                                          u32 %76 = OpConstant 0 
                                              %78 = OpTypeBool 
                                              %79 = OpTypePointer Private %78 
                                Private bool* %80 = OpVariable Private 
                                          f32 %83 = OpConstant 3.674022E-40 
                                          i32 %86 = OpConstant 0 
                                          i32 %88 = OpConstant -1 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %97 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                        f32_3 %99 = OpConstantComposite %96 %97 %98 
                              Private f32_4* %102 = OpVariable Private 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_3 %106 = OpConstantComposite %83 %83 %105 
                                         u32 %116 = OpConstant 1 
                                         f32 %125 = OpConstant 3.674022E-40 
                                       f32_2 %126 = OpConstantComposite %125 %125 
                                Private f32* %130 = OpVariable Private 
                                         f32 %137 = OpConstant 3.674022E-40 
                                         u32 %144 = OpConstant 2 
                                             %146 = OpTypePointer Uniform %6 
                                Private f32* %150 = OpVariable Private 
                                         f32 %152 = OpConstant 3.674022E-40 
                              Private f32_4* %154 = OpVariable Private 
                                             %155 = OpTypePointer Input %7 
                                Input f32_4* %156 = OpVariable Input 
                                             %157 = OpTypePointer Input %6 
                                Input f32_4* %160 = OpVariable Input 
                                         f32 %181 = OpConstant 3.674022E-40 
                               Private bool* %189 = OpVariable Private 
                                         f32 %196 = OpConstant 3.674022E-40 
                              Private f32_3* %205 = OpVariable Private 
                                             %206 = OpTypePointer Function %10 
                                       f32_3 %211 = OpConstantComposite %137 %137 %137 
                                         i32 %218 = OpConstant 11 
                                         i32 %234 = OpConstant 9 
                                         i32 %253 = OpConstant 3 
                                         i32 %257 = OpConstant 4 
                                        bool %261 = OpConstantFalse 
                                        bool %267 = OpSpecConstantFalse 
                                         i32 %275 = OpConstant 5 
                                         i32 %325 = OpConstant 7 
                                         i32 %334 = OpConstant 6 
                                         f32 %342 = OpConstant 3.674022E-40 
                                         f32 %344 = OpConstant 3.674022E-40 
                                Private f32* %346 = OpVariable Private 
                                             %355 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %356 = OpTypeSampledImage %355 
                                             %357 = OpTypePointer UniformConstant %356 
 UniformConstant read_only Texture3DSampled* %358 = OpVariable UniformConstant 
                              Private f32_4* %363 = OpVariable Private 
                                Private f32* %379 = OpVariable Private 
                                             %380 = OpTypePointer Function %6 
                                             %387 = OpTypePointer Private %65 
                              Private f32_2* %388 = OpVariable Private 
                                       f32_2 %395 = OpConstantComposite %181 %181 
 UniformConstant read_only Texture2DSampled* %397 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %410 = OpVariable UniformConstant 
                                Input f32_3* %422 = OpVariable Input 
                                Input f32_3* %427 = OpVariable Input 
                                Input f32_3* %432 = OpVariable Input 
                              Private f32_3* %476 = OpVariable Private 
                                         f32 %483 = OpConstant 3.674022E-40 
                                         i32 %492 = OpConstant 8 
                                         i32 %512 = OpConstant 10 
                                             %523 = OpTypePointer Output %7 
                               Output f32_4* %524 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %207 = OpVariable Function 
                             Function f32_3* %312 = OpVariable Function 
                               Function f32* %381 = OpVariable Function 
                                        f32_3 %13 = OpLoad %12 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFAdd %14 %27 
                                        f32_4 %29 = OpLoad %9 
                                        f32_4 %30 = OpVectorShuffle %29 %28 4 5 6 3 
                                                      OpStore %9 %30 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                          f32 %37 = OpDot %34 %36 
                                                      OpStore %32 %37 
                                          f32 %38 = OpLoad %32 
                                          f32 %39 = OpExtInst %1 32 %38 
                                                      OpStore %32 %39 
                                        f32_3 %42 = OpLoad %12 
                                        f32_3 %43 = OpFNegate %42 
                               Uniform f32_3* %46 = OpAccessChain %21 %44 
                                        f32_3 %47 = OpLoad %46 
                                        f32_3 %48 = OpFAdd %43 %47 
                                                      OpStore %41 %48 
                                        f32_3 %50 = OpLoad %41 
                                        f32_3 %51 = OpLoad %41 
                                          f32 %52 = OpDot %50 %51 
                                                      OpStore %49 %52 
                                          f32 %53 = OpLoad %49 
                                          f32 %54 = OpExtInst %1 32 %53 
                                                      OpStore %49 %54 
                                          f32 %55 = OpLoad %49 
                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
                                        f32_3 %57 = OpLoad %41 
                                        f32_3 %58 = OpFMul %56 %57 
                                                      OpStore %41 %58 
                   read_only Texture2DSampled %64 = OpLoad %63 
                                        f32_2 %68 = OpLoad %67 
                                        f32_4 %69 = OpImageSampleImplicitLod %64 %68 
                                                      OpStore %59 %69 
                                 Private f32* %72 = OpAccessChain %59 %71 
                                          f32 %73 = OpLoad %72 
                                          f32 %75 = OpFAdd %73 %74 
                                 Private f32* %77 = OpAccessChain %70 %76 
                                                      OpStore %77 %75 
                                 Private f32* %81 = OpAccessChain %70 %76 
                                          f32 %82 = OpLoad %81 
                                         bool %84 = OpFOrdLessThan %82 %83 
                                                      OpStore %80 %84 
                                         bool %85 = OpLoad %80 
                                          i32 %87 = OpSelect %85 %44 %86 
                                          i32 %89 = OpIMul %87 %88 
                                         bool %90 = OpINotEqual %89 %86 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %92 
                                              %91 = OpLabel 
                                                      OpKill
                                              %92 = OpLabel 
                                        f32_4 %94 = OpLoad %59 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                         f32 %100 = OpDot %95 %99 
                                Private f32* %101 = OpAccessChain %70 %76 
                                                      OpStore %101 %100 
                                       f32_3 %103 = OpLoad %70 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 0 0 
                                       f32_3 %107 = OpFAdd %104 %106 
                                       f32_4 %108 = OpLoad %102 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %102 %109 
                                       f32_4 %110 = OpLoad %102 
                                       f32_2 %111 = OpVectorShuffle %110 %110 1 1 
                                       f32_4 %112 = OpLoad %59 
                                       f32_2 %113 = OpVectorShuffle %112 %112 3 3 
                                         f32 %114 = OpDot %111 %113 
                                Private f32* %115 = OpAccessChain %70 %76 
                                                      OpStore %115 %114 
                                Private f32* %117 = OpAccessChain %102 %116 
                                         f32 %118 = OpLoad %117 
                                Private f32* %119 = OpAccessChain %102 %116 
                                         f32 %120 = OpLoad %119 
                                         f32 %121 = OpFAdd %118 %120 
                                Private f32* %122 = OpAccessChain %70 %116 
                                                      OpStore %122 %121 
                                       f32_3 %123 = OpLoad %70 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_2 %127 = OpFAdd %124 %126 
                                       f32_3 %128 = OpLoad %70 
                                       f32_3 %129 = OpVectorShuffle %128 %127 3 4 2 
                                                      OpStore %70 %129 
                                       f32_3 %131 = OpLoad %70 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                       f32_3 %133 = OpLoad %70 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                         f32 %135 = OpDot %132 %134 
                                                      OpStore %130 %135 
                                         f32 %136 = OpLoad %130 
                                         f32 %138 = OpExtInst %1 37 %136 %137 
                                                      OpStore %130 %138 
                                         f32 %139 = OpLoad %130 
                                         f32 %140 = OpFNegate %139 
                                         f32 %141 = OpFAdd %140 %137 
                                                      OpStore %130 %141 
                                         f32 %142 = OpLoad %130 
                                         f32 %143 = OpExtInst %1 31 %142 
                                Private f32* %145 = OpAccessChain %70 %144 
                                                      OpStore %145 %143 
                                Uniform f32* %147 = OpAccessChain %21 %86 %116 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpExtInst %1 10 %148 
                                                      OpStore %49 %149 
                                         f32 %151 = OpLoad %49 
                                         f32 %153 = OpFMul %151 %152 
                                                      OpStore %150 %153 
                                  Input f32* %158 = OpAccessChain %156 %76 
                                         f32 %159 = OpLoad %158 
                                  Input f32* %161 = OpAccessChain %160 %76 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFNegate %162 
                                         f32 %164 = OpFAdd %159 %163 
                                Private f32* %165 = OpAccessChain %154 %76 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %154 %76 
                                         f32 %167 = OpLoad %166 
                                  Input f32* %168 = OpAccessChain %156 %116 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFAdd %167 %169 
                                Private f32* %171 = OpAccessChain %154 %76 
                                                      OpStore %171 %170 
                                Private f32* %172 = OpAccessChain %154 %76 
                                         f32 %173 = OpLoad %172 
                                  Input f32* %174 = OpAccessChain %160 %116 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFNegate %175 
                                         f32 %177 = OpFAdd %173 %176 
                                Private f32* %178 = OpAccessChain %154 %76 
                                                      OpStore %178 %177 
                                Private f32* %179 = OpAccessChain %154 %76 
                                         f32 %180 = OpLoad %179 
                                         f32 %182 = OpFMul %180 %181 
                                         f32 %183 = OpFAdd %182 %74 
                                Private f32* %184 = OpAccessChain %154 %76 
                                                      OpStore %184 %183 
                                Private f32* %185 = OpAccessChain %154 %76 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpExtInst %1 10 %186 
                                Private f32* %188 = OpAccessChain %154 %76 
                                                      OpStore %188 %187 
                                         f32 %190 = OpLoad %150 
                                Private f32* %191 = OpAccessChain %154 %76 
                                         f32 %192 = OpLoad %191 
                                        bool %193 = OpFOrdLessThan %190 %192 
                                                      OpStore %189 %193 
                                         f32 %194 = OpLoad %49 
                                         f32 %195 = OpFMul %194 %152 
                                         f32 %197 = OpFAdd %195 %196 
                                                      OpStore %49 %197 
                                Private f32* %198 = OpAccessChain %154 %76 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpLoad %49 
                                        bool %201 = OpFOrdLessThan %199 %200 
                                                      OpStore %80 %201 
                                        bool %202 = OpLoad %80 
                                        bool %203 = OpLoad %189 
                                        bool %204 = OpLogicalAnd %202 %203 
                                                      OpStore %80 %204 
                                        bool %208 = OpLoad %80 
                                                      OpSelectionMerge %210 None 
                                                      OpBranchConditional %208 %209 %212 
                                             %209 = OpLabel 
                                                      OpStore %207 %211 
                                                      OpBranch %210 
                                             %212 = OpLabel 
                                       f32_4 %213 = OpLoad %102 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                                      OpStore %207 %214 
                                                      OpBranch %210 
                                             %210 = OpLabel 
                                       f32_3 %215 = OpLoad %207 
                                                      OpStore %205 %215 
                                Private f32* %216 = OpAccessChain %59 %71 
                                         f32 %217 = OpLoad %216 
                                Uniform f32* %219 = OpAccessChain %21 %218 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFNegate %220 
                                         f32 %222 = OpFAdd %217 %221 
                                                      OpStore %130 %222 
                                         f32 %223 = OpLoad %130 
                                        bool %224 = OpFOrdLessThan %223 %83 
                                                      OpStore %80 %224 
                                        bool %225 = OpLoad %80 
                                         i32 %226 = OpSelect %225 %44 %86 
                                         i32 %227 = OpIMul %226 %88 
                                        bool %228 = OpINotEqual %227 %86 
                                                      OpSelectionMerge %230 None 
                                                      OpBranchConditional %228 %229 %230 
                                             %229 = OpLabel 
                                                      OpKill
                                             %230 = OpLabel 
                                       f32_3 %232 = OpLoad %12 
                                       f32_4 %233 = OpVectorShuffle %232 %232 1 1 1 1 
                              Uniform f32_4* %235 = OpAccessChain %21 %234 %44 
                                       f32_4 %236 = OpLoad %235 
                                       f32_4 %237 = OpFMul %233 %236 
                                                      OpStore %102 %237 
                              Uniform f32_4* %238 = OpAccessChain %21 %234 %86 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpLoad %12 
                                       f32_4 %241 = OpVectorShuffle %240 %240 0 0 0 0 
                                       f32_4 %242 = OpFMul %239 %241 
                                       f32_4 %243 = OpLoad %102 
                                       f32_4 %244 = OpFAdd %242 %243 
                                                      OpStore %102 %244 
                              Uniform f32_4* %245 = OpAccessChain %21 %234 %23 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpLoad %12 
                                       f32_4 %248 = OpVectorShuffle %247 %247 2 2 2 2 
                                       f32_4 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %102 
                                       f32_4 %251 = OpFAdd %249 %250 
                                                      OpStore %102 %251 
                                       f32_4 %252 = OpLoad %102 
                              Uniform f32_4* %254 = OpAccessChain %21 %234 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_4 %256 = OpFAdd %252 %255 
                                                      OpStore %102 %256 
                                Uniform f32* %258 = OpAccessChain %21 %257 %76 
                                         f32 %259 = OpLoad %258 
                                        bool %260 = OpFOrdEqual %259 %137 
                                                      OpStore %80 %260 
                                                      OpSelectionMerge %263 None 
                                                      OpBranchConditional %261 %262 %263 
                                             %262 = OpLabel 
                                        bool %264 = OpLoad %80 
                                                      OpSelectionMerge %266 None 
                                                      OpBranchConditional %264 %265 %266 
                                             %265 = OpLabel 
                                                      OpBranch %266 
                                             %266 = OpLabel 
                                                      OpBranch %263 
                                             %263 = OpLabel 
                                                      OpSelectionMerge %269 None 
                                                      OpBranchConditional %267 %268 %365 
                                             %268 = OpLabel 
                                Uniform f32* %270 = OpAccessChain %21 %257 %116 
                                         f32 %271 = OpLoad %270 
                                        bool %272 = OpFOrdEqual %271 %137 
                                                      OpStore %80 %272 
                                       f32_3 %273 = OpLoad %12 
                                       f32_3 %274 = OpVectorShuffle %273 %273 1 1 1 
                              Uniform f32_4* %276 = OpAccessChain %21 %275 %44 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %274 %278 
                                       f32_4 %280 = OpLoad %154 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %154 %281 
                              Uniform f32_4* %282 = OpAccessChain %21 %275 %86 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_3 %285 = OpLoad %12 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 0 0 
                                       f32_3 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %154 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFAdd %287 %289 
                                       f32_4 %291 = OpLoad %154 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %154 %292 
                              Uniform f32_4* %293 = OpAccessChain %21 %275 %23 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_3 %296 = OpLoad %12 
                                       f32_3 %297 = OpVectorShuffle %296 %296 2 2 2 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %154 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFAdd %298 %300 
                                       f32_4 %302 = OpLoad %154 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %154 %303 
                                       f32_4 %304 = OpLoad %154 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                              Uniform f32_4* %306 = OpAccessChain %21 %275 %253 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFAdd %305 %308 
                                       f32_4 %310 = OpLoad %154 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %154 %311 
                                        bool %313 = OpLoad %80 
                                                      OpSelectionMerge %315 None 
                                                      OpBranchConditional %313 %314 %318 
                                             %314 = OpLabel 
                                       f32_4 %316 = OpLoad %154 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                                      OpStore %312 %317 
                                                      OpBranch %315 
                                             %318 = OpLabel 
                                       f32_3 %319 = OpLoad %12 
                                                      OpStore %312 %319 
                                                      OpBranch %315 
                                             %315 = OpLabel 
                                       f32_3 %320 = OpLoad %312 
                                       f32_4 %321 = OpLoad %154 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %154 %322 
                                       f32_4 %323 = OpLoad %154 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                              Uniform f32_3* %326 = OpAccessChain %21 %325 
                                       f32_3 %327 = OpLoad %326 
                                       f32_3 %328 = OpFNegate %327 
                                       f32_3 %329 = OpFAdd %324 %328 
                                       f32_4 %330 = OpLoad %154 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %154 %331 
                                       f32_4 %332 = OpLoad %154 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                              Uniform f32_3* %335 = OpAccessChain %21 %334 
                                       f32_3 %336 = OpLoad %335 
                                       f32_3 %337 = OpFMul %333 %336 
                                       f32_4 %338 = OpLoad %154 
                                       f32_4 %339 = OpVectorShuffle %338 %337 0 4 5 6 
                                                      OpStore %154 %339 
                                Private f32* %340 = OpAccessChain %154 %116 
                                         f32 %341 = OpLoad %340 
                                         f32 %343 = OpFMul %341 %342 
                                         f32 %345 = OpFAdd %343 %344 
                                                      OpStore %49 %345 
                                Uniform f32* %347 = OpAccessChain %21 %257 %144 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %348 %181 
                                         f32 %350 = OpFAdd %349 %344 
                                                      OpStore %346 %350 
                                         f32 %351 = OpLoad %49 
                                         f32 %352 = OpLoad %346 
                                         f32 %353 = OpExtInst %1 40 %351 %352 
                                Private f32* %354 = OpAccessChain %154 %76 
                                                      OpStore %354 %353 
                  read_only Texture3DSampled %359 = OpLoad %358 
                                       f32_4 %360 = OpLoad %154 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 2 3 
                                       f32_4 %362 = OpImageSampleImplicitLod %359 %361 
                                                      OpStore %154 %362 
                                       f32_4 %364 = OpLoad %154 
                                                      OpStore %363 %364 
                                                      OpBranch %269 
                                             %365 = OpLabel 
                                Private f32* %366 = OpAccessChain %363 %76 
                                                      OpStore %366 %137 
                                Private f32* %367 = OpAccessChain %363 %116 
                                                      OpStore %367 %137 
                                Private f32* %368 = OpAccessChain %363 %144 
                                                      OpStore %368 %137 
                                Private f32* %369 = OpAccessChain %363 %71 
                                                      OpStore %369 %137 
                                                      OpBranch %269 
                                             %269 = OpLabel 
                                       f32_4 %370 = OpLoad %363 
                              Uniform f32_4* %371 = OpAccessChain %21 %253 
                                       f32_4 %372 = OpLoad %371 
                                         f32 %373 = OpDot %370 %372 
                                                      OpStore %130 %373 
                                         f32 %374 = OpLoad %130 
                                         f32 %375 = OpExtInst %1 43 %374 %83 %137 
                                                      OpStore %130 %375 
                                Private f32* %376 = OpAccessChain %102 %144 
                                         f32 %377 = OpLoad %376 
                                        bool %378 = OpFOrdLessThan %83 %377 
                                                      OpStore %80 %378 
                                        bool %382 = OpLoad %80 
                                                      OpSelectionMerge %384 None 
                                                      OpBranchConditional %382 %383 %385 
                                             %383 = OpLabel 
                                                      OpStore %381 %137 
                                                      OpBranch %384 
                                             %385 = OpLabel 
                                                      OpStore %381 %83 
                                                      OpBranch %384 
                                             %384 = OpLabel 
                                         f32 %386 = OpLoad %381 
                                                      OpStore %379 %386 
                                       f32_4 %389 = OpLoad %102 
                                       f32_2 %390 = OpVectorShuffle %389 %389 0 1 
                                       f32_4 %391 = OpLoad %102 
                                       f32_2 %392 = OpVectorShuffle %391 %391 3 3 
                                       f32_2 %393 = OpFDiv %390 %392 
                                                      OpStore %388 %393 
                                       f32_2 %394 = OpLoad %388 
                                       f32_2 %396 = OpFAdd %394 %395 
                                                      OpStore %388 %396 
                  read_only Texture2DSampled %398 = OpLoad %397 
                                       f32_2 %399 = OpLoad %388 
                                       f32_4 %400 = OpImageSampleImplicitLod %398 %399 
                                         f32 %401 = OpCompositeExtract %400 3 
                                                      OpStore %49 %401 
                                         f32 %402 = OpLoad %49 
                                         f32 %403 = OpLoad %379 
                                         f32 %404 = OpFMul %402 %403 
                                                      OpStore %379 %404 
                                       f32_4 %405 = OpLoad %102 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                       f32_4 %407 = OpLoad %102 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                         f32 %409 = OpDot %406 %408 
                                                      OpStore %49 %409 
                  read_only Texture2DSampled %411 = OpLoad %410 
                                         f32 %412 = OpLoad %49 
                                       f32_2 %413 = OpCompositeConstruct %412 %412 
                                       f32_4 %414 = OpImageSampleImplicitLod %411 %413 
                                         f32 %415 = OpCompositeExtract %414 3 
                                                      OpStore %49 %415 
                                         f32 %416 = OpLoad %49 
                                         f32 %417 = OpLoad %379 
                                         f32 %418 = OpFMul %416 %417 
                                                      OpStore %379 %418 
                                         f32 %419 = OpLoad %130 
                                         f32 %420 = OpLoad %379 
                                         f32 %421 = OpFMul %419 %420 
                                                      OpStore %130 %421 
                                       f32_3 %423 = OpLoad %422 
                                       f32_3 %424 = OpLoad %70 
                                         f32 %425 = OpDot %423 %424 
                                Private f32* %426 = OpAccessChain %102 %76 
                                                      OpStore %426 %425 
                                       f32_3 %428 = OpLoad %427 
                                       f32_3 %429 = OpLoad %70 
                                         f32 %430 = OpDot %428 %429 
                                Private f32* %431 = OpAccessChain %102 %116 
                                                      OpStore %431 %430 
                                       f32_3 %433 = OpLoad %432 
                                       f32_3 %434 = OpLoad %70 
                                         f32 %435 = OpDot %433 %434 
                                Private f32* %436 = OpAccessChain %102 %144 
                                                      OpStore %436 %435 
                                       f32_4 %437 = OpLoad %102 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_4 %439 = OpLoad %102 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                         f32 %441 = OpDot %438 %440 
                                                      OpStore %49 %441 
                                         f32 %442 = OpLoad %49 
                                         f32 %443 = OpExtInst %1 32 %442 
                                                      OpStore %49 %443 
                                         f32 %444 = OpLoad %49 
                                       f32_3 %445 = OpCompositeConstruct %444 %444 %444 
                                       f32_4 %446 = OpLoad %102 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 2 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_4 %449 = OpLoad %102 
                                       f32_4 %450 = OpVectorShuffle %449 %448 4 5 6 3 
                                                      OpStore %102 %450 
                                       f32_4 %451 = OpLoad %9 
                                       f32_3 %452 = OpVectorShuffle %451 %451 0 1 2 
                                         f32 %453 = OpLoad %32 
                                       f32_3 %454 = OpCompositeConstruct %453 %453 %453 
                                       f32_3 %455 = OpFMul %452 %454 
                                       f32_3 %456 = OpLoad %41 
                                       f32_3 %457 = OpFAdd %455 %456 
                                                      OpStore %70 %457 
                                       f32_3 %458 = OpLoad %70 
                                       f32_3 %459 = OpLoad %70 
                                         f32 %460 = OpDot %458 %459 
                                                      OpStore %379 %460 
                                         f32 %461 = OpLoad %379 
                                         f32 %462 = OpExtInst %1 32 %461 
                                                      OpStore %379 %462 
                                       f32_3 %463 = OpLoad %70 
                                         f32 %464 = OpLoad %379 
                                       f32_3 %465 = OpCompositeConstruct %464 %464 %464 
                                       f32_3 %466 = OpFMul %463 %465 
                                                      OpStore %70 %466 
                                       f32_4 %467 = OpLoad %102 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                       f32_3 %469 = OpLoad %70 
                                         f32 %470 = OpDot %468 %469 
                                Private f32* %471 = OpAccessChain %70 %76 
                                                      OpStore %471 %470 
                                Private f32* %472 = OpAccessChain %70 %76 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpExtInst %1 40 %473 %83 
                                Private f32* %475 = OpAccessChain %70 %76 
                                                      OpStore %475 %474 
                                Private f32* %477 = OpAccessChain %70 %76 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpExtInst %1 30 %478 
                                Private f32* %480 = OpAccessChain %476 %76 
                                                      OpStore %480 %479 
                                Private f32* %481 = OpAccessChain %476 %76 
                                         f32 %482 = OpLoad %481 
                                         f32 %484 = OpFMul %482 %483 
                                Private f32* %485 = OpAccessChain %476 %76 
                                                      OpStore %485 %484 
                                Private f32* %486 = OpAccessChain %476 %76 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpExtInst %1 29 %487 
                                Private f32* %489 = OpAccessChain %476 %76 
                                                      OpStore %489 %488 
                                       f32_3 %490 = OpLoad %476 
                                       f32_3 %491 = OpVectorShuffle %490 %490 0 0 0 
                              Uniform f32_4* %493 = OpAccessChain %21 %492 
                                       f32_4 %494 = OpLoad %493 
                                       f32_3 %495 = OpVectorShuffle %494 %494 0 1 2 
                                       f32_3 %496 = OpFMul %491 %495 
                                                      OpStore %476 %496 
                                       f32_3 %497 = OpLoad %205 
                              Uniform f32_4* %498 = OpAccessChain %21 %492 
                                       f32_4 %499 = OpLoad %498 
                                       f32_3 %500 = OpVectorShuffle %499 %499 0 1 2 
                                       f32_3 %501 = OpFMul %497 %500 
                                       f32_3 %502 = OpLoad %476 
                                       f32_3 %503 = OpFAdd %501 %502 
                                                      OpStore %476 %503 
                                         f32 %504 = OpLoad %130 
                                       f32_3 %505 = OpCompositeConstruct %504 %504 %504 
                                       f32_3 %506 = OpLoad %476 
                                       f32_3 %507 = OpFMul %505 %506 
                                       f32_4 %508 = OpLoad %59 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
                                                      OpStore %59 %509 
                                       f32_4 %510 = OpLoad %59 
                                       f32_4 %511 = OpFNegate %510 
                              Uniform f32_4* %513 = OpAccessChain %21 %512 
                                       f32_4 %514 = OpLoad %513 
                                       f32_4 %515 = OpFAdd %511 %514 
                                                      OpStore %9 %515 
                              Uniform f32_4* %516 = OpAccessChain %21 %512 
                                       f32_4 %517 = OpLoad %516 
                                       f32_4 %518 = OpVectorShuffle %517 %517 3 3 3 3 
                                       f32_4 %519 = OpLoad %9 
                                       f32_4 %520 = OpFMul %518 %519 
                                       f32_4 %521 = OpLoad %59 
                                       f32_4 %522 = OpFAdd %520 %521 
                                                      OpStore %9 %522 
                                       f32_4 %525 = OpLoad %9 
                                                      OpStore %524 %525 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat13;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb4 = 0.0<_Perpendicular;
    u_xlat4 = (u_xlatb4) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD5 = u_xlat0;
    vs_TEXCOORD6 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat10_5;
vec4 u_xlat6;
vec4 u_xlat10_6;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
float u_xlat16_24;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat22 = u_xlat2.w + -0.100000001;
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22 = dot(u_xlat2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.yz = vec2(u_xlat22) + vec2(0.0, 0.200000003);
    u_xlat3.x = u_xlat2.w * u_xlat3.y;
    u_xlat4.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat4.z = sqrt(u_xlat22);
    u_xlat22 = fract(_Time.y);
    u_xlat3.x = u_xlat22 * 4.0;
    u_xlat24 = vs_TEXCOORD5.x + (-vs_TEXCOORD6.x);
    u_xlat24 = u_xlat24 + vs_TEXCOORD5.y;
    u_xlat24 = u_xlat24 + (-vs_TEXCOORD6.y);
    u_xlat24 = u_xlat24 * 0.5 + -0.100000001;
    u_xlat24 = fract(u_xlat24);
    u_xlatb3 = u_xlat3.x<u_xlat24;
    u_xlat22 = u_xlat22 * 4.0 + 0.100000001;
    u_xlatb22 = u_xlat24<u_xlat22;
    u_xlatb22 = u_xlatb22 && u_xlatb3;
    u_xlat3.xyz = (bool(u_xlatb22)) ? vec3(1.0, 1.0, 1.0) : u_xlat3.yyz;
    u_xlat22 = u_xlat2.w + (-_Cutoff);
    u_xlatb22 = u_xlat22<0.0;
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat5.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb22){
        u_xlatb22 = unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat6.xyz;
        u_xlat6.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb22)) ? u_xlat6.xyz : vs_TEXCOORD4.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat22 = u_xlat6.y * 0.25 + 0.75;
        u_xlat24 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat6.x = max(u_xlat22, u_xlat24);
        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    //ENDIF
    }
    u_xlat22 = dot(u_xlat6, unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat10_6 = texture(_LightTextureB0, vec2(u_xlat24));
    u_xlat10_5 = texture(_LightTexture0, u_xlat5.xyz);
    u_xlat16_24 = u_xlat10_5.w * u_xlat10_6.w;
    u_xlat22 = u_xlat22 * u_xlat16_24;
    u_xlat5.x = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(vs_TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xyz = u_xlat3.xyz * _LightColor0.xyz + u_xlat0.xyz;
    u_xlat2.xyz = vec3(u_xlat22) * u_xlat0.xyz;
    u_xlat0 = (-u_xlat2) + _OverrideColor;
    SV_Target0 = _OverrideColor.wwww * u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %153 %165 %166 %180 %214 %284 %295 %299 %315 %318 %320 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %151 0 BuiltIn 151 
                                                      OpMemberDecorate %151 1 BuiltIn 151 
                                                      OpMemberDecorate %151 2 BuiltIn 151 
                                                      OpDecorate %151 Block 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %284 Location 284 
                                                      OpDecorate %295 Location 295 
                                                      OpDecorate %299 Location 299 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %318 Location 318 
                                                      OpDecorate %320 Location 320 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %7 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          i32 %76 = OpConstant 4 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Function %6 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                               Private f32_4* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                              Private f32_4* %130 = OpVariable Private 
                                             %150 = OpTypeArray %6 %13 
                                             %151 = OpTypeStruct %7 %6 %150 
                                             %152 = OpTypePointer Output %151 
        Output struct {f32_4; f32; f32[1];}* %153 = OpVariable Output 
                                             %161 = OpTypePointer Output %7 
                                             %163 = OpTypeVector %6 2 
                                             %164 = OpTypePointer Output %163 
                               Output f32_2* %165 = OpVariable Output 
                                Input f32_4* %166 = OpVariable Input 
                                         i32 %169 = OpConstant 5 
                                             %178 = OpTypeVector %6 3 
                                             %179 = OpTypePointer Input %178 
                                Input f32_3* %180 = OpVariable Input 
                                Private f32* %199 = OpVariable Private 
                                Input f32_4* %214 = OpVariable Input 
                                             %259 = OpTypePointer Private %178 
                              Private f32_3* %260 = OpVariable Private 
                                             %283 = OpTypePointer Output %178 
                               Output f32_3* %284 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                               Output f32_3* %295 = OpVariable Output 
                               Output f32_3* %299 = OpVariable Output 
                               Output f32_3* %315 = OpVariable Output 
                               Output f32_4* %318 = OpVariable Output 
                               Output f32_4* %320 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %82 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %77 = OpAccessChain %23 %76 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %75 %78 
                                                      OpStore %74 %79 
                                         bool %83 = OpLoad %74 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %87 
                                              %84 = OpLabel 
                                                      OpStore %82 %86 
                                                      OpBranch %85 
                                              %87 = OpLabel 
                                                      OpStore %82 %88 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %89 = OpLoad %82 
                                                      OpStore %80 %89 
                                 Private f32* %90 = OpAccessChain %9 %31 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpLoad %80 
                                          f32 %93 = OpFMul %91 %92 
                                   Input f32* %94 = OpAccessChain %11 %46 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                        f32_4 %99 = OpLoad %11 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %26 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpFMul %100 %103 
                                                      OpStore %98 %104 
                              Uniform f32_4* %105 = OpAccessChain %23 %25 %25 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %11 
                                       f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %98 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %98 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %43 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %114 0 0 0 0 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %98 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %23 %25 %54 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %98 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %54 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %11 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %9 %129 
                                       f32_4 %131 = OpLoad %98 
                                       f32_4 %132 = OpVectorShuffle %131 %131 1 1 1 1 
                              Uniform f32_4* %133 = OpAccessChain %23 %54 %26 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpFMul %132 %134 
                                                      OpStore %130 %135 
                              Uniform f32_4* %136 = OpAccessChain %23 %54 %25 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %98 
                                       f32_4 %139 = OpVectorShuffle %138 %138 0 0 0 0 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %130 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %130 %142 
                              Uniform f32_4* %143 = OpAccessChain %23 %54 %43 
                                       f32_4 %144 = OpLoad %143 
                                       f32_4 %145 = OpLoad %98 
                                       f32_4 %146 = OpVectorShuffle %145 %145 2 2 2 2 
                                       f32_4 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %130 
                                       f32_4 %149 = OpFAdd %147 %148 
                                                      OpStore %130 %149 
                              Uniform f32_4* %154 = OpAccessChain %23 %54 %54 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %98 
                                       f32_4 %157 = OpVectorShuffle %156 %156 3 3 3 3 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %130 
                                       f32_4 %160 = OpFAdd %158 %159 
                               Output f32_4* %162 = OpAccessChain %153 %25 
                                                      OpStore %162 %160 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                              Uniform f32_4* %170 = OpAccessChain %23 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_2 %173 = OpFMul %168 %172 
                              Uniform f32_4* %174 = OpAccessChain %23 %169 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 3 
                                       f32_2 %177 = OpFAdd %173 %176 
                                                      OpStore %165 %177 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %182 = OpAccessChain %23 %26 %25 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %186 = OpAccessChain %98 %13 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %180 
                              Uniform f32_4* %188 = OpAccessChain %23 %26 %26 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %187 %190 
                                Private f32* %192 = OpAccessChain %98 %46 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %180 
                              Uniform f32_4* %194 = OpAccessChain %23 %26 %43 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpDot %193 %196 
                                Private f32* %198 = OpAccessChain %98 %31 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %98 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_4 %202 = OpLoad %98 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %201 %203 
                                                      OpStore %199 %204 
                                         f32 %205 = OpLoad %199 
                                         f32 %206 = OpExtInst %1 32 %205 
                                                      OpStore %199 %206 
                                         f32 %207 = OpLoad %199 
                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
                                       f32_4 %209 = OpLoad %98 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %98 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                                      OpStore %98 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %23 %25 %26 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 1 2 0 
                                       f32_3 %220 = OpFMul %216 %219 
                                       f32_4 %221 = OpLoad %130 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %130 %222 
                              Uniform f32_4* %223 = OpAccessChain %23 %25 %25 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 1 2 0 
                                       f32_4 %226 = OpLoad %214 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 0 0 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %130 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %130 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %130 %233 
                              Uniform f32_4* %234 = OpAccessChain %23 %25 %43 
                                       f32_4 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 2 0 
                                       f32_4 %237 = OpLoad %214 
                                       f32_3 %238 = OpVectorShuffle %237 %237 2 2 2 
                                       f32_3 %239 = OpFMul %236 %238 
                                       f32_4 %240 = OpLoad %130 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFAdd %239 %241 
                                       f32_4 %243 = OpLoad %130 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %130 %244 
                                       f32_4 %245 = OpLoad %130 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %130 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %246 %248 
                                                      OpStore %199 %249 
                                         f32 %250 = OpLoad %199 
                                         f32 %251 = OpExtInst %1 32 %250 
                                                      OpStore %199 %251 
                                         f32 %252 = OpLoad %199 
                                       f32_3 %253 = OpCompositeConstruct %252 %252 %252 
                                       f32_4 %254 = OpLoad %130 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %130 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %130 %258 
                                       f32_4 %261 = OpLoad %98 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_4 %263 = OpLoad %130 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                                      OpStore %260 %265 
                                       f32_4 %266 = OpLoad %98 
                                       f32_3 %267 = OpVectorShuffle %266 %266 2 0 1 
                                       f32_4 %268 = OpLoad %130 
                                       f32_3 %269 = OpVectorShuffle %268 %268 1 2 0 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %260 
                                       f32_3 %272 = OpFNegate %271 
                                       f32_3 %273 = OpFAdd %270 %272 
                                                      OpStore %260 %273 
                                  Input f32* %274 = OpAccessChain %214 %57 
                                         f32 %275 = OpLoad %274 
                                Uniform f32* %276 = OpAccessChain %23 %43 %57 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFMul %275 %277 
                                                      OpStore %199 %278 
                                         f32 %279 = OpLoad %199 
                                       f32_3 %280 = OpCompositeConstruct %279 %279 %279 
                                       f32_3 %281 = OpLoad %260 
                                       f32_3 %282 = OpFMul %280 %281 
                                                      OpStore %260 %282 
                                Private f32* %285 = OpAccessChain %260 %31 
                                         f32 %286 = OpLoad %285 
                                 Output f32* %288 = OpAccessChain %284 %13 
                                                      OpStore %288 %286 
                                Private f32* %289 = OpAccessChain %130 %46 
                                         f32 %290 = OpLoad %289 
                                 Output f32* %291 = OpAccessChain %284 %31 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %98 %13 
                                         f32 %293 = OpLoad %292 
                                 Output f32* %294 = OpAccessChain %284 %46 
                                                      OpStore %294 %293 
                                Private f32* %296 = OpAccessChain %130 %31 
                                         f32 %297 = OpLoad %296 
                                 Output f32* %298 = OpAccessChain %295 %31 
                                                      OpStore %298 %297 
                                Private f32* %300 = OpAccessChain %130 %13 
                                         f32 %301 = OpLoad %300 
                                 Output f32* %302 = OpAccessChain %299 %31 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %98 %46 
                                         f32 %304 = OpLoad %303 
                                 Output f32* %305 = OpAccessChain %295 %46 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %98 %31 
                                         f32 %307 = OpLoad %306 
                                 Output f32* %308 = OpAccessChain %299 %46 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %260 %13 
                                         f32 %310 = OpLoad %309 
                                 Output f32* %311 = OpAccessChain %295 %13 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %260 %46 
                                         f32 %313 = OpLoad %312 
                                 Output f32* %314 = OpAccessChain %299 %13 
                                                      OpStore %314 %313 
                                       f32_4 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                                      OpStore %315 %317 
                                       f32_4 %319 = OpLoad %9 
                                                      OpStore %318 %319 
                              Uniform f32_4* %321 = OpAccessChain %23 %25 %54 
                                       f32_4 %322 = OpLoad %321 
                                                      OpStore %320 %322 
                                 Output f32* %323 = OpAccessChain %153 %25 %13 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                 Output f32* %326 = OpAccessChain %153 %25 %13 
                                                      OpStore %326 %325 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 500
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %67 %154 %158 %401 %406 %411 %497 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 RelaxedPrecision 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 RelaxedPrecision 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %67 Location 67 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %129 RelaxedPrecision 
                                                      OpDecorate %130 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %132 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %134 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %268 SpecId 268 
                                                      OpDecorate %358 DescriptorSet 358 
                                                      OpDecorate %358 Binding 358 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %379 DescriptorSet 379 
                                                      OpDecorate %379 Binding 379 
                                                      OpDecorate %388 DescriptorSet 388 
                                                      OpDecorate %388 Binding 388 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %401 Location 401 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %406 Location 406 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %411 Location 411 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %437 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %461 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %497 Location 497 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeStruct %7 %10 %7 %7 %7 %17 %10 %10 %7 %18 %7 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                              %24 = OpTypePointer Uniform %7 
                                              %31 = OpTypePointer Private %6 
                                 Private f32* %32 = OpVariable Private 
                                              %40 = OpTypePointer Private %10 
                               Private f32_3* %41 = OpVariable Private 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %10 
                                 Private f32* %49 = OpVariable Private 
                               Private f32_4* %59 = OpVariable Private 
                                              %60 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %61 = OpTypeSampledImage %60 
                                              %62 = OpTypePointer UniformConstant %61 
  UniformConstant read_only Texture2DSampled* %63 = OpVariable UniformConstant 
                                              %65 = OpTypeVector %6 2 
                                              %66 = OpTypePointer Input %65 
                                 Input f32_2* %67 = OpVariable Input 
                               Private f32_3* %70 = OpVariable Private 
                                          u32 %71 = OpConstant 3 
                                          f32 %74 = OpConstant 3.674022E-40 
                                          u32 %76 = OpConstant 0 
                                              %78 = OpTypeBool 
                                              %79 = OpTypePointer Private %78 
                                Private bool* %80 = OpVariable Private 
                                          f32 %83 = OpConstant 3.674022E-40 
                                          i32 %86 = OpConstant 0 
                                          i32 %88 = OpConstant -1 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          f32 %97 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                        f32_3 %99 = OpConstantComposite %96 %97 %98 
                              Private f32_3* %102 = OpVariable Private 
                                         f32 %105 = OpConstant 3.674022E-40 
                                       f32_3 %106 = OpConstantComposite %83 %83 %105 
                                         u32 %114 = OpConstant 1 
                                         f32 %123 = OpConstant 3.674022E-40 
                                       f32_2 %124 = OpConstantComposite %123 %123 
                                Private f32* %128 = OpVariable Private 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         u32 %142 = OpConstant 2 
                                             %144 = OpTypePointer Uniform %6 
                                Private f32* %148 = OpVariable Private 
                                         f32 %150 = OpConstant 3.674022E-40 
                              Private f32_4* %152 = OpVariable Private 
                                             %153 = OpTypePointer Input %7 
                                Input f32_4* %154 = OpVariable Input 
                                             %155 = OpTypePointer Input %6 
                                Input f32_4* %158 = OpVariable Input 
                                         f32 %179 = OpConstant 3.674022E-40 
                               Private bool* %187 = OpVariable Private 
                                         f32 %194 = OpConstant 3.674022E-40 
                              Private f32_3* %203 = OpVariable Private 
                                             %204 = OpTypePointer Function %10 
                                       f32_3 %209 = OpConstantComposite %135 %135 %135 
                                         i32 %215 = OpConstant 11 
                                         i32 %231 = OpConstant 9 
                                         i32 %253 = OpConstant 3 
                                         i32 %258 = OpConstant 4 
                                        bool %262 = OpConstantFalse 
                                        bool %268 = OpSpecConstantFalse 
                                         i32 %276 = OpConstant 5 
                                         i32 %326 = OpConstant 7 
                                         i32 %335 = OpConstant 6 
                                         f32 %343 = OpConstant 3.674022E-40 
                                         f32 %345 = OpConstant 3.674022E-40 
                                             %355 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %356 = OpTypeSampledImage %355 
                                             %357 = OpTypePointer UniformConstant %356 
 UniformConstant read_only Texture3DSampled* %358 = OpVariable UniformConstant 
                              Private f32_4* %363 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %379 = OpVariable UniformConstant 
                                             %385 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %386 = OpTypeSampledImage %385 
                                             %387 = OpTypePointer UniformConstant %386 
UniformConstant read_only TextureCubeSampled* %388 = OpVariable UniformConstant 
                                Input f32_3* %401 = OpVariable Input 
                                Input f32_3* %406 = OpVariable Input 
                                Input f32_3* %411 = OpVariable Input 
                              Private f32_3* %449 = OpVariable Private 
                                         f32 %456 = OpConstant 3.674022E-40 
                                         i32 %465 = OpConstant 8 
                                         i32 %485 = OpConstant 10 
                                             %496 = OpTypePointer Output %7 
                               Output f32_4* %497 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %205 = OpVariable Function 
                             Function f32_3* %313 = OpVariable Function 
                                        f32_3 %13 = OpLoad %12 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFAdd %14 %27 
                                        f32_4 %29 = OpLoad %9 
                                        f32_4 %30 = OpVectorShuffle %29 %28 4 5 6 3 
                                                      OpStore %9 %30 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                          f32 %37 = OpDot %34 %36 
                                                      OpStore %32 %37 
                                          f32 %38 = OpLoad %32 
                                          f32 %39 = OpExtInst %1 32 %38 
                                                      OpStore %32 %39 
                                        f32_3 %42 = OpLoad %12 
                                        f32_3 %43 = OpFNegate %42 
                               Uniform f32_3* %46 = OpAccessChain %21 %44 
                                        f32_3 %47 = OpLoad %46 
                                        f32_3 %48 = OpFAdd %43 %47 
                                                      OpStore %41 %48 
                                        f32_3 %50 = OpLoad %41 
                                        f32_3 %51 = OpLoad %41 
                                          f32 %52 = OpDot %50 %51 
                                                      OpStore %49 %52 
                                          f32 %53 = OpLoad %49 
                                          f32 %54 = OpExtInst %1 32 %53 
                                                      OpStore %49 %54 
                                          f32 %55 = OpLoad %49 
                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
                                        f32_3 %57 = OpLoad %41 
                                        f32_3 %58 = OpFMul %56 %57 
                                                      OpStore %41 %58 
                   read_only Texture2DSampled %64 = OpLoad %63 
                                        f32_2 %68 = OpLoad %67 
                                        f32_4 %69 = OpImageSampleImplicitLod %64 %68 
                                                      OpStore %59 %69 
                                 Private f32* %72 = OpAccessChain %59 %71 
                                          f32 %73 = OpLoad %72 
                                          f32 %75 = OpFAdd %73 %74 
                                 Private f32* %77 = OpAccessChain %70 %76 
                                                      OpStore %77 %75 
                                 Private f32* %81 = OpAccessChain %70 %76 
                                          f32 %82 = OpLoad %81 
                                         bool %84 = OpFOrdLessThan %82 %83 
                                                      OpStore %80 %84 
                                         bool %85 = OpLoad %80 
                                          i32 %87 = OpSelect %85 %44 %86 
                                          i32 %89 = OpIMul %87 %88 
                                         bool %90 = OpINotEqual %89 %86 
                                                      OpSelectionMerge %92 None 
                                                      OpBranchConditional %90 %91 %92 
                                              %91 = OpLabel 
                                                      OpKill
                                              %92 = OpLabel 
                                        f32_4 %94 = OpLoad %59 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                         f32 %100 = OpDot %95 %99 
                                Private f32* %101 = OpAccessChain %70 %76 
                                                      OpStore %101 %100 
                                       f32_3 %103 = OpLoad %70 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 0 0 
                                       f32_3 %107 = OpFAdd %104 %106 
                                                      OpStore %102 %107 
                                       f32_3 %108 = OpLoad %102 
                                       f32_2 %109 = OpVectorShuffle %108 %108 1 1 
                                       f32_4 %110 = OpLoad %59 
                                       f32_2 %111 = OpVectorShuffle %110 %110 3 3 
                                         f32 %112 = OpDot %109 %111 
                                Private f32* %113 = OpAccessChain %70 %76 
                                                      OpStore %113 %112 
                                Private f32* %115 = OpAccessChain %102 %114 
                                         f32 %116 = OpLoad %115 
                                Private f32* %117 = OpAccessChain %102 %114 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFAdd %116 %118 
                                Private f32* %120 = OpAccessChain %70 %114 
                                                      OpStore %120 %119 
                                       f32_3 %121 = OpLoad %70 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_3 %126 = OpLoad %70 
                                       f32_3 %127 = OpVectorShuffle %126 %125 3 4 2 
                                                      OpStore %70 %127 
                                       f32_3 %129 = OpLoad %70 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_3 %131 = OpLoad %70 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                                         f32 %133 = OpDot %130 %132 
                                                      OpStore %128 %133 
                                         f32 %134 = OpLoad %128 
                                         f32 %136 = OpExtInst %1 37 %134 %135 
                                                      OpStore %128 %136 
                                         f32 %137 = OpLoad %128 
                                         f32 %138 = OpFNegate %137 
                                         f32 %139 = OpFAdd %138 %135 
                                                      OpStore %128 %139 
                                         f32 %140 = OpLoad %128 
                                         f32 %141 = OpExtInst %1 31 %140 
                                Private f32* %143 = OpAccessChain %70 %142 
                                                      OpStore %143 %141 
                                Uniform f32* %145 = OpAccessChain %21 %86 %114 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpExtInst %1 10 %146 
                                                      OpStore %49 %147 
                                         f32 %149 = OpLoad %49 
                                         f32 %151 = OpFMul %149 %150 
                                                      OpStore %148 %151 
                                  Input f32* %156 = OpAccessChain %154 %76 
                                         f32 %157 = OpLoad %156 
                                  Input f32* %159 = OpAccessChain %158 %76 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                         f32 %162 = OpFAdd %157 %161 
                                Private f32* %163 = OpAccessChain %152 %76 
                                                      OpStore %163 %162 
                                Private f32* %164 = OpAccessChain %152 %76 
                                         f32 %165 = OpLoad %164 
                                  Input f32* %166 = OpAccessChain %154 %114 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFAdd %165 %167 
                                Private f32* %169 = OpAccessChain %152 %76 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %152 %76 
                                         f32 %171 = OpLoad %170 
                                  Input f32* %172 = OpAccessChain %158 %114 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                         f32 %175 = OpFAdd %171 %174 
                                Private f32* %176 = OpAccessChain %152 %76 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %152 %76 
                                         f32 %178 = OpLoad %177 
                                         f32 %180 = OpFMul %178 %179 
                                         f32 %181 = OpFAdd %180 %74 
                                Private f32* %182 = OpAccessChain %152 %76 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %152 %76 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpExtInst %1 10 %184 
                                Private f32* %186 = OpAccessChain %152 %76 
                                                      OpStore %186 %185 
                                         f32 %188 = OpLoad %148 
                                Private f32* %189 = OpAccessChain %152 %76 
                                         f32 %190 = OpLoad %189 
                                        bool %191 = OpFOrdLessThan %188 %190 
                                                      OpStore %187 %191 
                                         f32 %192 = OpLoad %49 
                                         f32 %193 = OpFMul %192 %150 
                                         f32 %195 = OpFAdd %193 %194 
                                                      OpStore %49 %195 
                                Private f32* %196 = OpAccessChain %152 %76 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpLoad %49 
                                        bool %199 = OpFOrdLessThan %197 %198 
                                                      OpStore %80 %199 
                                        bool %200 = OpLoad %80 
                                        bool %201 = OpLoad %187 
                                        bool %202 = OpLogicalAnd %200 %201 
                                                      OpStore %80 %202 
                                        bool %206 = OpLoad %80 
                                                      OpSelectionMerge %208 None 
                                                      OpBranchConditional %206 %207 %210 
                                             %207 = OpLabel 
                                                      OpStore %205 %209 
                                                      OpBranch %208 
                                             %210 = OpLabel 
                                       f32_3 %211 = OpLoad %102 
                                                      OpStore %205 %211 
                                                      OpBranch %208 
                                             %208 = OpLabel 
                                       f32_3 %212 = OpLoad %205 
                                                      OpStore %203 %212 
                                Private f32* %213 = OpAccessChain %59 %71 
                                         f32 %214 = OpLoad %213 
                                Uniform f32* %216 = OpAccessChain %21 %215 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %214 %218 
                                                      OpStore %128 %219 
                                         f32 %220 = OpLoad %128 
                                        bool %221 = OpFOrdLessThan %220 %83 
                                                      OpStore %80 %221 
                                        bool %222 = OpLoad %80 
                                         i32 %223 = OpSelect %222 %44 %86 
                                         i32 %224 = OpIMul %223 %88 
                                        bool %225 = OpINotEqual %224 %86 
                                                      OpSelectionMerge %227 None 
                                                      OpBranchConditional %225 %226 %227 
                                             %226 = OpLabel 
                                                      OpKill
                                             %227 = OpLabel 
                                       f32_3 %229 = OpLoad %12 
                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
                              Uniform f32_4* %232 = OpAccessChain %21 %231 %44 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpFMul %230 %234 
                                                      OpStore %102 %235 
                              Uniform f32_4* %236 = OpAccessChain %21 %231 %86 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpLoad %12 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 0 0 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_3 %242 = OpLoad %102 
                                       f32_3 %243 = OpFAdd %241 %242 
                                                      OpStore %102 %243 
                              Uniform f32_4* %244 = OpAccessChain %21 %231 %23 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpLoad %12 
                                       f32_3 %248 = OpVectorShuffle %247 %247 2 2 2 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_3 %250 = OpLoad %102 
                                       f32_3 %251 = OpFAdd %249 %250 
                                                      OpStore %102 %251 
                                       f32_3 %252 = OpLoad %102 
                              Uniform f32_4* %254 = OpAccessChain %21 %231 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %252 %256 
                                                      OpStore %102 %257 
                                Uniform f32* %259 = OpAccessChain %21 %258 %76 
                                         f32 %260 = OpLoad %259 
                                        bool %261 = OpFOrdEqual %260 %135 
                                                      OpStore %80 %261 
                                                      OpSelectionMerge %264 None 
                                                      OpBranchConditional %262 %263 %264 
                                             %263 = OpLabel 
                                        bool %265 = OpLoad %80 
                                                      OpSelectionMerge %267 None 
                                                      OpBranchConditional %265 %266 %267 
                                             %266 = OpLabel 
                                                      OpBranch %267 
                                             %267 = OpLabel 
                                                      OpBranch %264 
                                             %264 = OpLabel 
                                                      OpSelectionMerge %270 None 
                                                      OpBranchConditional %268 %269 %365 
                                             %269 = OpLabel 
                                Uniform f32* %271 = OpAccessChain %21 %258 %114 
                                         f32 %272 = OpLoad %271 
                                        bool %273 = OpFOrdEqual %272 %135 
                                                      OpStore %80 %273 
                                       f32_3 %274 = OpLoad %12 
                                       f32_3 %275 = OpVectorShuffle %274 %274 1 1 1 
                              Uniform f32_4* %277 = OpAccessChain %21 %276 %44 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFMul %275 %279 
                                       f32_4 %281 = OpLoad %152 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %152 %282 
                              Uniform f32_4* %283 = OpAccessChain %21 %276 %86 
                                       f32_4 %284 = OpLoad %283 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpLoad %12 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 0 0 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_4 %289 = OpLoad %152 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFAdd %288 %290 
                                       f32_4 %292 = OpLoad %152 
                                       f32_4 %293 = OpVectorShuffle %292 %291 4 5 6 3 
                                                      OpStore %152 %293 
                              Uniform f32_4* %294 = OpAccessChain %21 %276 %23 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpLoad %12 
                                       f32_3 %298 = OpVectorShuffle %297 %297 2 2 2 
                                       f32_3 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %152 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFAdd %299 %301 
                                       f32_4 %303 = OpLoad %152 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %152 %304 
                                       f32_4 %305 = OpLoad %152 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                              Uniform f32_4* %307 = OpAccessChain %21 %276 %253 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFAdd %306 %309 
                                       f32_4 %311 = OpLoad %152 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                                      OpStore %152 %312 
                                        bool %314 = OpLoad %80 
                                                      OpSelectionMerge %316 None 
                                                      OpBranchConditional %314 %315 %319 
                                             %315 = OpLabel 
                                       f32_4 %317 = OpLoad %152 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                                      OpStore %313 %318 
                                                      OpBranch %316 
                                             %319 = OpLabel 
                                       f32_3 %320 = OpLoad %12 
                                                      OpStore %313 %320 
                                                      OpBranch %316 
                                             %316 = OpLabel 
                                       f32_3 %321 = OpLoad %313 
                                       f32_4 %322 = OpLoad %152 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %152 %323 
                                       f32_4 %324 = OpLoad %152 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              Uniform f32_3* %327 = OpAccessChain %21 %326 
                                       f32_3 %328 = OpLoad %327 
                                       f32_3 %329 = OpFNegate %328 
                                       f32_3 %330 = OpFAdd %325 %329 
                                       f32_4 %331 = OpLoad %152 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
                                                      OpStore %152 %332 
                                       f32_4 %333 = OpLoad %152 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                              Uniform f32_3* %336 = OpAccessChain %21 %335 
                                       f32_3 %337 = OpLoad %336 
                                       f32_3 %338 = OpFMul %334 %337 
                                       f32_4 %339 = OpLoad %152 
                                       f32_4 %340 = OpVectorShuffle %339 %338 0 4 5 6 
                                                      OpStore %152 %340 
                                Private f32* %341 = OpAccessChain %152 %114 
                                         f32 %342 = OpLoad %341 
                                         f32 %344 = OpFMul %342 %343 
                                         f32 %346 = OpFAdd %344 %345 
                                                      OpStore %49 %346 
                                Uniform f32* %347 = OpAccessChain %21 %258 %142 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %348 %179 
                                         f32 %350 = OpFAdd %349 %345 
                                                      OpStore %148 %350 
                                         f32 %351 = OpLoad %49 
                                         f32 %352 = OpLoad %148 
                                         f32 %353 = OpExtInst %1 40 %351 %352 
                                Private f32* %354 = OpAccessChain %152 %76 
                                                      OpStore %354 %353 
                  read_only Texture3DSampled %359 = OpLoad %358 
                                       f32_4 %360 = OpLoad %152 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 2 3 
                                       f32_4 %362 = OpImageSampleImplicitLod %359 %361 
                                                      OpStore %152 %362 
                                       f32_4 %364 = OpLoad %152 
                                                      OpStore %363 %364 
                                                      OpBranch %270 
                                             %365 = OpLabel 
                                Private f32* %366 = OpAccessChain %363 %76 
                                                      OpStore %366 %135 
                                Private f32* %367 = OpAccessChain %363 %114 
                                                      OpStore %367 %135 
                                Private f32* %368 = OpAccessChain %363 %142 
                                                      OpStore %368 %135 
                                Private f32* %369 = OpAccessChain %363 %71 
                                                      OpStore %369 %135 
                                                      OpBranch %270 
                                             %270 = OpLabel 
                                       f32_4 %370 = OpLoad %363 
                              Uniform f32_4* %371 = OpAccessChain %21 %253 
                                       f32_4 %372 = OpLoad %371 
                                         f32 %373 = OpDot %370 %372 
                                                      OpStore %128 %373 
                                         f32 %374 = OpLoad %128 
                                         f32 %375 = OpExtInst %1 43 %374 %83 %135 
                                                      OpStore %128 %375 
                                       f32_3 %376 = OpLoad %102 
                                       f32_3 %377 = OpLoad %102 
                                         f32 %378 = OpDot %376 %377 
                                                      OpStore %49 %378 
                  read_only Texture2DSampled %380 = OpLoad %379 
                                         f32 %381 = OpLoad %49 
                                       f32_2 %382 = OpCompositeConstruct %381 %381 
                                       f32_4 %383 = OpImageSampleImplicitLod %380 %382 
                                         f32 %384 = OpCompositeExtract %383 3 
                                                      OpStore %49 %384 
                read_only TextureCubeSampled %389 = OpLoad %388 
                                       f32_3 %390 = OpLoad %102 
                                       f32_4 %391 = OpImageSampleImplicitLod %389 %390 
                                         f32 %392 = OpCompositeExtract %391 3 
                                Private f32* %393 = OpAccessChain %102 %76 
                                                      OpStore %393 %392 
                                         f32 %394 = OpLoad %49 
                                Private f32* %395 = OpAccessChain %102 %76 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFMul %394 %396 
                                                      OpStore %49 %397 
                                         f32 %398 = OpLoad %128 
                                         f32 %399 = OpLoad %49 
                                         f32 %400 = OpFMul %398 %399 
                                                      OpStore %49 %400 
                                       f32_3 %402 = OpLoad %401 
                                       f32_3 %403 = OpLoad %70 
                                         f32 %404 = OpDot %402 %403 
                                Private f32* %405 = OpAccessChain %102 %76 
                                                      OpStore %405 %404 
                                       f32_3 %407 = OpLoad %406 
                                       f32_3 %408 = OpLoad %70 
                                         f32 %409 = OpDot %407 %408 
                                Private f32* %410 = OpAccessChain %102 %114 
                                                      OpStore %410 %409 
                                       f32_3 %412 = OpLoad %411 
                                       f32_3 %413 = OpLoad %70 
                                         f32 %414 = OpDot %412 %413 
                                Private f32* %415 = OpAccessChain %102 %142 
                                                      OpStore %415 %414 
                                       f32_3 %416 = OpLoad %102 
                                       f32_3 %417 = OpLoad %102 
                                         f32 %418 = OpDot %416 %417 
                                                      OpStore %148 %418 
                                         f32 %419 = OpLoad %148 
                                         f32 %420 = OpExtInst %1 32 %419 
                                                      OpStore %148 %420 
                                         f32 %421 = OpLoad %148 
                                       f32_3 %422 = OpCompositeConstruct %421 %421 %421 
                                       f32_3 %423 = OpLoad %102 
                                       f32_3 %424 = OpFMul %422 %423 
                                                      OpStore %102 %424 
                                       f32_4 %425 = OpLoad %9 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                         f32 %427 = OpLoad %32 
                                       f32_3 %428 = OpCompositeConstruct %427 %427 %427 
                                       f32_3 %429 = OpFMul %426 %428 
                                       f32_3 %430 = OpLoad %41 
                                       f32_3 %431 = OpFAdd %429 %430 
                                                      OpStore %70 %431 
                                       f32_3 %432 = OpLoad %70 
                                       f32_3 %433 = OpLoad %70 
                                         f32 %434 = OpDot %432 %433 
                                                      OpStore %128 %434 
                                         f32 %435 = OpLoad %128 
                                         f32 %436 = OpExtInst %1 32 %435 
                                                      OpStore %128 %436 
                                         f32 %437 = OpLoad %128 
                                       f32_3 %438 = OpCompositeConstruct %437 %437 %437 
                                       f32_3 %439 = OpLoad %70 
                                       f32_3 %440 = OpFMul %438 %439 
                                                      OpStore %70 %440 
                                       f32_3 %441 = OpLoad %102 
                                       f32_3 %442 = OpLoad %70 
                                         f32 %443 = OpDot %441 %442 
                                Private f32* %444 = OpAccessChain %70 %76 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %70 %76 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpExtInst %1 40 %446 %83 
                                Private f32* %448 = OpAccessChain %70 %76 
                                                      OpStore %448 %447 
                                Private f32* %450 = OpAccessChain %70 %76 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpExtInst %1 30 %451 
                                Private f32* %453 = OpAccessChain %449 %76 
                                                      OpStore %453 %452 
                                Private f32* %454 = OpAccessChain %449 %76 
                                         f32 %455 = OpLoad %454 
                                         f32 %457 = OpFMul %455 %456 
                                Private f32* %458 = OpAccessChain %449 %76 
                                                      OpStore %458 %457 
                                Private f32* %459 = OpAccessChain %449 %76 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpExtInst %1 29 %460 
                                Private f32* %462 = OpAccessChain %449 %76 
                                                      OpStore %462 %461 
                                       f32_3 %463 = OpLoad %449 
                                       f32_3 %464 = OpVectorShuffle %463 %463 0 0 0 
                              Uniform f32_4* %466 = OpAccessChain %21 %465 
                                       f32_4 %467 = OpLoad %466 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                       f32_3 %469 = OpFMul %464 %468 
                                                      OpStore %449 %469 
                                       f32_3 %470 = OpLoad %203 
                              Uniform f32_4* %471 = OpAccessChain %21 %465 
                                       f32_4 %472 = OpLoad %471 
                                       f32_3 %473 = OpVectorShuffle %472 %472 0 1 2 
                                       f32_3 %474 = OpFMul %470 %473 
                                       f32_3 %475 = OpLoad %449 
                                       f32_3 %476 = OpFAdd %474 %475 
                                                      OpStore %449 %476 
                                         f32 %477 = OpLoad %49 
                                       f32_3 %478 = OpCompositeConstruct %477 %477 %477 
                                       f32_3 %479 = OpLoad %449 
                                       f32_3 %480 = OpFMul %478 %479 
                                       f32_4 %481 = OpLoad %59 
                                       f32_4 %482 = OpVectorShuffle %481 %480 4 5 6 3 
                                                      OpStore %59 %482 
                                       f32_4 %483 = OpLoad %59 
                                       f32_4 %484 = OpFNegate %483 
                              Uniform f32_4* %486 = OpAccessChain %21 %485 
                                       f32_4 %487 = OpLoad %486 
                                       f32_4 %488 = OpFAdd %484 %487 
                                                      OpStore %9 %488 
                              Uniform f32_4* %489 = OpAccessChain %21 %485 
                                       f32_4 %490 = OpLoad %489 
                                       f32_4 %491 = OpVectorShuffle %490 %490 3 3 3 3 
                                       f32_4 %492 = OpLoad %9 
                                       f32_4 %493 = OpFMul %491 %492 
                                       f32_4 %494 = OpLoad %59 
                                       f32_4 %495 = OpFAdd %493 %494 
                                                      OpStore %9 %495 
                                       f32_4 %498 = OpLoad %9 
                                                      OpStore %497 %498 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _Perpendicular;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat13;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb4 = 0.0<_Perpendicular;
    u_xlat4 = (u_xlatb4) ? -1.0 : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4 + in_POSITION0.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD5 = u_xlat0;
    vs_TEXCOORD6 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _OverrideColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
float u_xlat18;
float u_xlat20;
bool u_xlatb20;
float u_xlat21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.x = u_xlat1.w + -0.100000001;
    u_xlatb2 = u_xlat2.x<0.0;
    if((int(u_xlatb2) * int(0xffffffffu))!=0){discard;}
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.yz = u_xlat2.xx + vec2(0.0, 0.200000003);
    u_xlat2.x = u_xlat1.w * u_xlat2.y;
    u_xlat3.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat2.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat2.x = min(u_xlat2.x, 1.0);
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat3.z = sqrt(u_xlat2.x);
    u_xlat2.x = fract(_Time.y);
    u_xlat20 = u_xlat2.x * 4.0;
    u_xlat21 = vs_TEXCOORD5.x + (-vs_TEXCOORD6.x);
    u_xlat21 = u_xlat21 + vs_TEXCOORD5.y;
    u_xlat21 = u_xlat21 + (-vs_TEXCOORD6.y);
    u_xlat21 = u_xlat21 * 0.5 + -0.100000001;
    u_xlat21 = fract(u_xlat21);
    u_xlatb20 = u_xlat20<u_xlat21;
    u_xlat2.x = u_xlat2.x * 4.0 + 0.100000001;
    u_xlatb2 = u_xlat21<u_xlat2.x;
    u_xlatb2 = u_xlatb2 && u_xlatb20;
    u_xlat2.xyz = (bool(u_xlatb2)) ? vec3(1.0, 1.0, 1.0) : u_xlat2.yyz;
    u_xlat20 = u_xlat1.w + (-_Cutoff);
    u_xlatb20 = u_xlat20<0.0;
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat4.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat4.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat4.xy;
    u_xlat4.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD4.xxx + u_xlat5.xyz;
        u_xlat5.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.zzz + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb20)) ? u_xlat5.xyz : vs_TEXCOORD4.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat20 = u_xlat5.y * 0.25 + 0.75;
        u_xlat21 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat5.x = max(u_xlat20, u_xlat21);
        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    //ENDIF
    }
    u_xlat20 = dot(u_xlat5, unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xy);
    u_xlat20 = u_xlat20 * u_xlat10_4.w;
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(vs_TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 40.0;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * _LightColor0.xyz + u_xlat0.xyz;
    u_xlat1.xyz = vec3(u_xlat20) * u_xlat0.xyz;
    u_xlat0 = (-u_xlat1) + _OverrideColor;
    SV_Target0 = _OverrideColor.wwww * u_xlat0 + u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %153 %165 %166 %180 %214 %284 %295 %299 %315 %318 %320 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %151 0 BuiltIn 151 
                                                      OpMemberDecorate %151 1 BuiltIn 151 
                                                      OpMemberDecorate %151 2 BuiltIn 151 
                                                      OpDecorate %151 Block 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate %166 Location 166 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %284 Location 284 
                                                      OpDecorate %295 Location 295 
                                                      OpDecorate %299 Location 299 
                                                      OpDecorate %315 Location 315 
                                                      OpDecorate %318 Location 318 
                                                      OpDecorate %320 Location 320 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %18 %19 %7 %20 %6 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %6 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                                          i32 %43 = OpConstant 2 
                                          u32 %46 = OpConstant 2 
                                          i32 %54 = OpConstant 3 
                                          u32 %57 = OpConstant 3 
                                              %72 = OpTypeBool 
                                              %73 = OpTypePointer Private %72 
                                Private bool* %74 = OpVariable Private 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          i32 %76 = OpConstant 4 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Function %6 
                                          f32 %86 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                               Private f32_4* %98 = OpVariable Private 
                                             %101 = OpTypePointer Uniform %7 
                              Private f32_4* %130 = OpVariable Private 
                                             %150 = OpTypeArray %6 %13 
                                             %151 = OpTypeStruct %7 %6 %150 
                                             %152 = OpTypePointer Output %151 
        Output struct {f32_4; f32; f32[1];}* %153 = OpVariable Output 
                                             %161 = OpTypePointer Output %7 
                                             %163 = OpTypeVector %6 2 
                                             %164 = OpTypePointer Output %163 
                               Output f32_2* %165 = OpVariable Output 
                                Input f32_4* %166 = OpVariable Input 
                                         i32 %169 = OpConstant 5 
                                             %178 = OpTypeVector %6 3 
                                             %179 = OpTypePointer Input %178 
                                Input f32_3* %180 = OpVariable Input 
                                Private f32* %199 = OpVariable Private 
                                Input f32_4* %214 = OpVariable Input 
                                             %259 = OpTypePointer Private %178 
                              Private f32_3* %260 = OpVariable Private 
                                             %283 = OpTypePointer Output %178 
                               Output f32_3* %284 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                               Output f32_3* %295 = OpVariable Output 
                               Output f32_3* %299 = OpVariable Output 
                               Output f32_3* %315 = OpVariable Output 
                               Output f32_4* %318 = OpVariable Output 
                               Output f32_4* %320 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %82 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %28 = OpAccessChain %23 %25 %26 %13 
                                          f32 %29 = OpLoad %28 
                                          f32 %30 = OpFMul %16 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Uniform f32* %34 = OpAccessChain %23 %25 %25 %13 
                                          f32 %35 = OpLoad %34 
                                   Input f32* %36 = OpAccessChain %11 %31 
                                          f32 %37 = OpLoad %36 
                                          f32 %38 = OpFMul %35 %37 
                                 Private f32* %39 = OpAccessChain %9 %31 
                                          f32 %40 = OpLoad %39 
                                          f32 %41 = OpFAdd %38 %40 
                                 Private f32* %42 = OpAccessChain %9 %31 
                                                      OpStore %42 %41 
                                 Uniform f32* %44 = OpAccessChain %23 %25 %43 %13 
                                          f32 %45 = OpLoad %44 
                                   Input f32* %47 = OpAccessChain %11 %46 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %45 %48 
                                 Private f32* %50 = OpAccessChain %9 %31 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %49 %51 
                                 Private f32* %53 = OpAccessChain %9 %31 
                                                      OpStore %53 %52 
                                 Uniform f32* %55 = OpAccessChain %23 %25 %54 %13 
                                          f32 %56 = OpLoad %55 
                                   Input f32* %58 = OpAccessChain %11 %57 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFMul %56 %59 
                                 Private f32* %61 = OpAccessChain %9 %31 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFAdd %60 %62 
                                 Private f32* %64 = OpAccessChain %9 %31 
                                                      OpStore %64 %63 
                                 Private f32* %65 = OpAccessChain %9 %31 
                                          f32 %66 = OpLoad %65 
                                 Uniform f32* %67 = OpAccessChain %23 %25 %54 %13 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Uniform f32* %77 = OpAccessChain %23 %76 
                                          f32 %78 = OpLoad %77 
                                         bool %79 = OpFOrdLessThan %75 %78 
                                                      OpStore %74 %79 
                                         bool %83 = OpLoad %74 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %87 
                                              %84 = OpLabel 
                                                      OpStore %82 %86 
                                                      OpBranch %85 
                                              %87 = OpLabel 
                                                      OpStore %82 %88 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %89 = OpLoad %82 
                                                      OpStore %80 %89 
                                 Private f32* %90 = OpAccessChain %9 %31 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpLoad %80 
                                          f32 %93 = OpFMul %91 %92 
                                   Input f32* %94 = OpAccessChain %11 %46 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                        f32_4 %99 = OpLoad %11 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %102 = OpAccessChain %23 %25 %26 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpFMul %100 %103 
                                                      OpStore %98 %104 
                              Uniform f32_4* %105 = OpAccessChain %23 %25 %25 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %11 
                                       f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %98 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %98 %111 
                              Uniform f32_4* %112 = OpAccessChain %23 %25 %43 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %114 0 0 0 0 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %98 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %23 %25 %54 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %98 %122 
                              Uniform f32_4* %123 = OpAccessChain %23 %25 %54 
                                       f32_4 %124 = OpLoad %123 
                                       f32_4 %125 = OpLoad %11 
                                       f32_4 %126 = OpVectorShuffle %125 %125 3 3 3 3 
                                       f32_4 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpFAdd %127 %128 
                                                      OpStore %9 %129 
                                       f32_4 %131 = OpLoad %98 
                                       f32_4 %132 = OpVectorShuffle %131 %131 1 1 1 1 
                              Uniform f32_4* %133 = OpAccessChain %23 %54 %26 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpFMul %132 %134 
                                                      OpStore %130 %135 
                              Uniform f32_4* %136 = OpAccessChain %23 %54 %25 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %98 
                                       f32_4 %139 = OpVectorShuffle %138 %138 0 0 0 0 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %130 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %130 %142 
                              Uniform f32_4* %143 = OpAccessChain %23 %54 %43 
                                       f32_4 %144 = OpLoad %143 
                                       f32_4 %145 = OpLoad %98 
                                       f32_4 %146 = OpVectorShuffle %145 %145 2 2 2 2 
                                       f32_4 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %130 
                                       f32_4 %149 = OpFAdd %147 %148 
                                                      OpStore %130 %149 
                              Uniform f32_4* %154 = OpAccessChain %23 %54 %54 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %98 
                                       f32_4 %157 = OpVectorShuffle %156 %156 3 3 3 3 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %130 
                                       f32_4 %160 = OpFAdd %158 %159 
                               Output f32_4* %162 = OpAccessChain %153 %25 
                                                      OpStore %162 %160 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                              Uniform f32_4* %170 = OpAccessChain %23 %169 
                                       f32_4 %171 = OpLoad %170 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_2 %173 = OpFMul %168 %172 
                              Uniform f32_4* %174 = OpAccessChain %23 %169 
                                       f32_4 %175 = OpLoad %174 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 3 
                                       f32_2 %177 = OpFAdd %173 %176 
                                                      OpStore %165 %177 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %182 = OpAccessChain %23 %26 %25 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %181 %184 
                                Private f32* %186 = OpAccessChain %98 %13 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %180 
                              Uniform f32_4* %188 = OpAccessChain %23 %26 %26 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %187 %190 
                                Private f32* %192 = OpAccessChain %98 %46 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %180 
                              Uniform f32_4* %194 = OpAccessChain %23 %26 %43 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpDot %193 %196 
                                Private f32* %198 = OpAccessChain %98 %31 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %98 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_4 %202 = OpLoad %98 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %201 %203 
                                                      OpStore %199 %204 
                                         f32 %205 = OpLoad %199 
                                         f32 %206 = OpExtInst %1 32 %205 
                                                      OpStore %199 %206 
                                         f32 %207 = OpLoad %199 
                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
                                       f32_4 %209 = OpLoad %98 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %98 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                                      OpStore %98 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 1 1 1 
                              Uniform f32_4* %217 = OpAccessChain %23 %25 %26 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 1 2 0 
                                       f32_3 %220 = OpFMul %216 %219 
                                       f32_4 %221 = OpLoad %130 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %130 %222 
                              Uniform f32_4* %223 = OpAccessChain %23 %25 %25 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 1 2 0 
                                       f32_4 %226 = OpLoad %214 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 0 0 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %130 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %130 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %130 %233 
                              Uniform f32_4* %234 = OpAccessChain %23 %25 %43 
                                       f32_4 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 2 0 
                                       f32_4 %237 = OpLoad %214 
                                       f32_3 %238 = OpVectorShuffle %237 %237 2 2 2 
                                       f32_3 %239 = OpFMul %236 %238 
                                       f32_4 %240 = OpLoad %130 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFAdd %239 %241 
                                       f32_4 %243 = OpLoad %130 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %130 %244 
                                       f32_4 %245 = OpLoad %130 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %130 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %246 %248 
                                                      OpStore %199 %249 
                                         f32 %250 = OpLoad %199 
                                         f32 %251 = OpExtInst %1 32 %250 
                                                      OpStore %199 %251 
                                         f32 %252 = OpLoad %199 
                                       f32_3 %253 = OpCompositeConstruct %252 %252 %252 
                                       f32_4 %254 = OpLoad %130 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %130 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %130 %258 
                                       f32_4 %261 = OpLoad %98 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_4 %263 = OpLoad %130 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                                      OpStore %260 %265 
                                       f32_4 %266 = OpLoad %98 
                                       f32_3 %267 = OpVectorShuffle %266 %266 2 0 1 
                                       f32_4 %268 = OpLoad %130 
                                       f32_3 %269 = OpVectorShuffle %268 %268 1 2 0 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %260 
                                       f32_3 %272 = OpFNegate %271 
                                       f32_3 %273 = OpFAdd %270 %272 
                                                      OpStore %260 %273 
                                  Input f32* %274 = OpAccessChain %214 %57 
                                         f32 %275 = OpLoad %274 
                                Uniform f32* %276 = OpAccessChain %23 %43 %57 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFMul %275 %277 
                                                      OpStore %199 %278 
                                         f32 %279 = OpLoad %199 
                                       f32_3 %280 = OpCompositeConstruct %279 %279 %279 
                                       f32_3 %281 = OpLoad %260 
                                       f32_3 %282 = OpFMul %280 %281 
                                                      OpStore %260 %282 
                                Private f32* %285 = OpAccessChain %260 %31 
                                         f32 %286 = OpLoad %285 
                                 Output f32* %288 = OpAccessChain %284 %13 
                                                      OpStore %288 %286 
                                Private f32* %289 = OpAccessChain %130 %46 
                                         f32 %290 = OpLoad %289 
                                 Output f32* %291 = OpAccessChain %284 %31 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %98 %13 
                                         f32 %293 = OpLoad %292 
                                 Output f32* %294 = OpAccessChain %284 %46 
                                                      OpStore %294 %293 
                                Private f32* %296 = OpAccessChain %130 %31 
                                         f32 %297 = OpLoad %296 
                                 Output f32* %298 = OpAccessChain %295 %31 
                                                      OpStore %298 %297 
                                Private f32* %300 = OpAccessChain %130 %13 
                                         f32 %301 = OpLoad %300 
                                 Output f32* %302 = OpAccessChain %299 %31 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %98 %46 
                                         f32 %304 = OpLoad %303 
                                 Output f32* %305 = OpAccessChain %295 %46 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %98 %31 
                                         f32 %307 = OpLoad %306 
                                 Output f32* %308 = OpAccessChain %299 %46 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %260 %13 
                                         f32 %310 = OpLoad %309 
                                 Output f32* %311 = OpAccessChain %295 %13 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %260 %46 
                                         f32 %313 = OpLoad %312 
                                 Output f32* %314 = OpAccessChain %299 %13 
                                                      OpStore %314 %313 
                                       f32_4 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                                      OpStore %315 %317 
                                       f32_4 %319 = OpLoad %9 
                                                      OpStore %318 %319 
                              Uniform f32_4* %321 = OpAccessChain %23 %25 %54 
                                       f32_4 %322 = OpLoad %321 
                                                      OpStore %320 %322 
                                 Output f32* %323 = OpAccessChain %153 %25 %13 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                 Output f32* %326 = OpAccessChain %153 %25 %13 
                                                      OpStore %326 %325 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 483
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %47 %137 %141 %378 %383 %388 %480 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 RelaxedPrecision 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 RelaxedPrecision 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %43 DescriptorSet 43 
                                                      OpDecorate %43 Binding 43 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 Location 47 
                                                      OpDecorate %51 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %88 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %110 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %121 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %256 SpecId 256 
                                                      OpDecorate %347 DescriptorSet 347 
                                                      OpDecorate %347 Binding 347 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 DescriptorSet 365 
                                                      OpDecorate %365 Binding 365 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %378 Location 378 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %383 Location 383 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %388 Location 388 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %453 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %459 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %480 RelaxedPrecision 
                                                      OpDecorate %480 Location 480 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeStruct %7 %10 %7 %7 %7 %17 %10 %10 %7 %18 %7 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %10 
                                              %30 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %41 = OpTypeSampledImage %40 
                                              %42 = OpTypePointer UniformConstant %41 
  UniformConstant read_only Texture2DSampled* %43 = OpVariable UniformConstant 
                                              %45 = OpTypeVector %6 2 
                                              %46 = OpTypePointer Input %45 
                                 Input f32_2* %47 = OpVariable Input 
                                              %50 = OpTypePointer Private %10 
                               Private f32_3* %51 = OpVariable Private 
                                          u32 %52 = OpConstant 3 
                                          f32 %55 = OpConstant 3.674022E-40 
                                          u32 %57 = OpConstant 0 
                                              %59 = OpTypeBool 
                                              %60 = OpTypePointer Private %59 
                                Private bool* %61 = OpVariable Private 
                                          f32 %64 = OpConstant 3.674022E-40 
                                          i32 %67 = OpConstant 0 
                                          i32 %69 = OpConstant -1 
                                          f32 %77 = OpConstant 3.674022E-40 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          f32 %79 = OpConstant 3.674022E-40 
                                        f32_3 %80 = OpConstantComposite %77 %78 %79 
                               Private f32_3* %83 = OpVariable Private 
                                          f32 %86 = OpConstant 3.674022E-40 
                                        f32_3 %87 = OpConstantComposite %64 %64 %86 
                                          u32 %95 = OpConstant 1 
                                         f32 %104 = OpConstant 3.674022E-40 
                                       f32_2 %105 = OpConstantComposite %104 %104 
                                Private f32* %109 = OpVariable Private 
                                         f32 %116 = OpConstant 3.674022E-40 
                                         u32 %123 = OpConstant 2 
                                Private f32* %125 = OpVariable Private 
                                             %126 = OpTypePointer Uniform %6 
                              Private f32_4* %130 = OpVariable Private 
                                         f32 %132 = OpConstant 3.674022E-40 
                                Private f32* %135 = OpVariable Private 
                                             %136 = OpTypePointer Input %7 
                                Input f32_4* %137 = OpVariable Input 
                                             %138 = OpTypePointer Input %6 
                                Input f32_4* %141 = OpVariable Input 
                                         f32 %156 = OpConstant 3.674022E-40 
                               Private bool* %161 = OpVariable Private 
                                         f32 %168 = OpConstant 3.674022E-40 
                               Private bool* %170 = OpVariable Private 
                              Private f32_3* %177 = OpVariable Private 
                                             %178 = OpTypePointer Function %10 
                                       f32_3 %183 = OpConstantComposite %116 %116 %116 
                                         i32 %189 = OpConstant 11 
                                         i32 %205 = OpConstant 9 
                                             %206 = OpTypePointer Uniform %7 
                                         i32 %224 = OpConstant 2 
                                         i32 %238 = OpConstant 3 
                               Private bool* %245 = OpVariable Private 
                                         i32 %246 = OpConstant 4 
                                        bool %250 = OpConstantFalse 
                                        bool %256 = OpSpecConstantFalse 
                                         i32 %264 = OpConstant 5 
                                         i32 %314 = OpConstant 7 
                                         i32 %323 = OpConstant 6 
                                Private f32* %329 = OpVariable Private 
                                         f32 %332 = OpConstant 3.674022E-40 
                                         f32 %334 = OpConstant 3.674022E-40 
                                             %344 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %345 = OpTypeSampledImage %344 
                                             %346 = OpTypePointer UniformConstant %345 
 UniformConstant read_only Texture3DSampled* %347 = OpVariable UniformConstant 
                              Private f32_4* %352 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %365 = OpVariable UniformConstant 
                              Private f32_3* %377 = OpVariable Private 
                                Input f32_3* %378 = OpVariable Input 
                                Input f32_3* %383 = OpVariable Input 
                                Input f32_3* %388 = OpVariable Input 
                              Private f32_3* %393 = OpVariable Private 
                              Private f32_3* %432 = OpVariable Private 
                                         f32 %439 = OpConstant 3.674022E-40 
                                         i32 %448 = OpConstant 8 
                                         i32 %468 = OpConstant 10 
                                             %479 = OpTypePointer Output %7 
                               Output f32_4* %480 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %179 = OpVariable Function 
                             Function f32_3* %301 = OpVariable Function 
                                        f32_3 %13 = OpLoad %12 
                                        f32_3 %14 = OpFNegate %13 
                               Uniform f32_3* %25 = OpAccessChain %21 %23 
                                        f32_3 %26 = OpLoad %25 
                                        f32_3 %27 = OpFAdd %14 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
                                                      OpStore %9 %29 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                        f32_4 %34 = OpLoad %9 
                                        f32_3 %35 = OpVectorShuffle %34 %34 0 1 2 
                                          f32 %36 = OpDot %33 %35 
                                                      OpStore %31 %36 
                                          f32 %37 = OpLoad %31 
                                          f32 %38 = OpExtInst %1 32 %37 
                                                      OpStore %31 %38 
                   read_only Texture2DSampled %44 = OpLoad %43 
                                        f32_2 %48 = OpLoad %47 
                                        f32_4 %49 = OpImageSampleImplicitLod %44 %48 
                                                      OpStore %39 %49 
                                 Private f32* %53 = OpAccessChain %39 %52 
                                          f32 %54 = OpLoad %53 
                                          f32 %56 = OpFAdd %54 %55 
                                 Private f32* %58 = OpAccessChain %51 %57 
                                                      OpStore %58 %56 
                                 Private f32* %62 = OpAccessChain %51 %57 
                                          f32 %63 = OpLoad %62 
                                         bool %65 = OpFOrdLessThan %63 %64 
                                                      OpStore %61 %65 
                                         bool %66 = OpLoad %61 
                                          i32 %68 = OpSelect %66 %23 %67 
                                          i32 %70 = OpIMul %68 %69 
                                         bool %71 = OpINotEqual %70 %67 
                                                      OpSelectionMerge %73 None 
                                                      OpBranchConditional %71 %72 %73 
                                              %72 = OpLabel 
                                                      OpKill
                                              %73 = OpLabel 
                                        f32_4 %75 = OpLoad %39 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                          f32 %81 = OpDot %76 %80 
                                 Private f32* %82 = OpAccessChain %51 %57 
                                                      OpStore %82 %81 
                                        f32_3 %84 = OpLoad %51 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore %83 %88 
                                        f32_3 %89 = OpLoad %83 
                                        f32_2 %90 = OpVectorShuffle %89 %89 1 1 
                                        f32_4 %91 = OpLoad %39 
                                        f32_2 %92 = OpVectorShuffle %91 %91 3 3 
                                          f32 %93 = OpDot %90 %92 
                                 Private f32* %94 = OpAccessChain %51 %57 
                                                      OpStore %94 %93 
                                 Private f32* %96 = OpAccessChain %83 %95 
                                          f32 %97 = OpLoad %96 
                                 Private f32* %98 = OpAccessChain %83 %95 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFAdd %97 %99 
                                Private f32* %101 = OpAccessChain %51 %95 
                                                      OpStore %101 %100 
                                       f32_3 %102 = OpLoad %51 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %106 = OpFAdd %103 %105 
                                       f32_3 %107 = OpLoad %51 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %51 %108 
                                       f32_3 %110 = OpLoad %51 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_3 %112 = OpLoad %51 
                                       f32_2 %113 = OpVectorShuffle %112 %112 0 1 
                                         f32 %114 = OpDot %111 %113 
                                                      OpStore %109 %114 
                                         f32 %115 = OpLoad %109 
                                         f32 %117 = OpExtInst %1 37 %115 %116 
                                                      OpStore %109 %117 
                                         f32 %118 = OpLoad %109 
                                         f32 %119 = OpFNegate %118 
                                         f32 %120 = OpFAdd %119 %116 
                                                      OpStore %109 %120 
                                         f32 %121 = OpLoad %109 
                                         f32 %122 = OpExtInst %1 31 %121 
                                Private f32* %124 = OpAccessChain %51 %123 
                                                      OpStore %124 %122 
                                Uniform f32* %127 = OpAccessChain %21 %67 %95 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpExtInst %1 10 %128 
                                                      OpStore %125 %129 
                                         f32 %131 = OpLoad %125 
                                         f32 %133 = OpFMul %131 %132 
                                Private f32* %134 = OpAccessChain %130 %57 
                                                      OpStore %134 %133 
                                  Input f32* %139 = OpAccessChain %137 %57 
                                         f32 %140 = OpLoad %139 
                                  Input f32* %142 = OpAccessChain %141 %57 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFNegate %143 
                                         f32 %145 = OpFAdd %140 %144 
                                                      OpStore %135 %145 
                                         f32 %146 = OpLoad %135 
                                  Input f32* %147 = OpAccessChain %137 %95 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFAdd %146 %148 
                                                      OpStore %135 %149 
                                         f32 %150 = OpLoad %135 
                                  Input f32* %151 = OpAccessChain %141 %95 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                         f32 %154 = OpFAdd %150 %153 
                                                      OpStore %135 %154 
                                         f32 %155 = OpLoad %135 
                                         f32 %157 = OpFMul %155 %156 
                                         f32 %158 = OpFAdd %157 %55 
                                                      OpStore %135 %158 
                                         f32 %159 = OpLoad %135 
                                         f32 %160 = OpExtInst %1 10 %159 
                                                      OpStore %135 %160 
                                Private f32* %162 = OpAccessChain %130 %57 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpLoad %135 
                                        bool %165 = OpFOrdLessThan %163 %164 
                                                      OpStore %161 %165 
                                         f32 %166 = OpLoad %125 
                                         f32 %167 = OpFMul %166 %132 
                                         f32 %169 = OpFAdd %167 %168 
                                                      OpStore %125 %169 
                                         f32 %171 = OpLoad %135 
                                         f32 %172 = OpLoad %125 
                                        bool %173 = OpFOrdLessThan %171 %172 
                                                      OpStore %170 %173 
                                        bool %174 = OpLoad %170 
                                        bool %175 = OpLoad %161 
                                        bool %176 = OpLogicalAnd %174 %175 
                                                      OpStore %170 %176 
                                        bool %180 = OpLoad %170 
                                                      OpSelectionMerge %182 None 
                                                      OpBranchConditional %180 %181 %184 
                                             %181 = OpLabel 
                                                      OpStore %179 %183 
                                                      OpBranch %182 
                                             %184 = OpLabel 
                                       f32_3 %185 = OpLoad %83 
                                                      OpStore %179 %185 
                                                      OpBranch %182 
                                             %182 = OpLabel 
                                       f32_3 %186 = OpLoad %179 
                                                      OpStore %177 %186 
                                Private f32* %187 = OpAccessChain %39 %52 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %190 = OpAccessChain %21 %189 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFNegate %191 
                                         f32 %193 = OpFAdd %188 %192 
                                                      OpStore %109 %193 
                                         f32 %194 = OpLoad %109 
                                        bool %195 = OpFOrdLessThan %194 %64 
                                                      OpStore %61 %195 
                                        bool %196 = OpLoad %61 
                                         i32 %197 = OpSelect %196 %23 %67 
                                         i32 %198 = OpIMul %197 %69 
                                        bool %199 = OpINotEqual %198 %67 
                                                      OpSelectionMerge %201 None 
                                                      OpBranchConditional %199 %200 %201 
                                             %200 = OpLabel 
                                                      OpKill
                                             %201 = OpLabel 
                                       f32_3 %203 = OpLoad %12 
                                       f32_2 %204 = OpVectorShuffle %203 %203 1 1 
                              Uniform f32_4* %207 = OpAccessChain %21 %205 %23 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFMul %204 %209 
                                       f32_3 %211 = OpLoad %83 
                                       f32_3 %212 = OpVectorShuffle %211 %210 3 4 2 
                                                      OpStore %83 %212 
                              Uniform f32_4* %213 = OpAccessChain %21 %205 %67 
                                       f32_4 %214 = OpLoad %213 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_3 %216 = OpLoad %12 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 0 
                                       f32_2 %218 = OpFMul %215 %217 
                                       f32_3 %219 = OpLoad %83 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_2 %221 = OpFAdd %218 %220 
                                       f32_3 %222 = OpLoad %83 
                                       f32_3 %223 = OpVectorShuffle %222 %221 3 4 2 
                                                      OpStore %83 %223 
                              Uniform f32_4* %225 = OpAccessChain %21 %205 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_2 %227 = OpVectorShuffle %226 %226 0 1 
                                       f32_3 %228 = OpLoad %12 
                                       f32_2 %229 = OpVectorShuffle %228 %228 2 2 
                                       f32_2 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %83 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFAdd %230 %232 
                                       f32_3 %234 = OpLoad %83 
                                       f32_3 %235 = OpVectorShuffle %234 %233 3 4 2 
                                                      OpStore %83 %235 
                                       f32_3 %236 = OpLoad %83 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                              Uniform f32_4* %239 = OpAccessChain %21 %205 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                                       f32_2 %242 = OpFAdd %237 %241 
                                       f32_3 %243 = OpLoad %83 
                                       f32_3 %244 = OpVectorShuffle %243 %242 3 4 2 
                                                      OpStore %83 %244 
                                Uniform f32* %247 = OpAccessChain %21 %246 %57 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdEqual %248 %116 
                                                      OpStore %245 %249 
                                                      OpSelectionMerge %252 None 
                                                      OpBranchConditional %250 %251 %252 
                                             %251 = OpLabel 
                                        bool %253 = OpLoad %245 
                                                      OpSelectionMerge %255 None 
                                                      OpBranchConditional %253 %254 %255 
                                             %254 = OpLabel 
                                                      OpBranch %255 
                                             %255 = OpLabel 
                                                      OpBranch %252 
                                             %252 = OpLabel 
                                                      OpSelectionMerge %258 None 
                                                      OpBranchConditional %256 %257 %354 
                                             %257 = OpLabel 
                                Uniform f32* %259 = OpAccessChain %21 %246 %95 
                                         f32 %260 = OpLoad %259 
                                        bool %261 = OpFOrdEqual %260 %116 
                                                      OpStore %245 %261 
                                       f32_3 %262 = OpLoad %12 
                                       f32_3 %263 = OpVectorShuffle %262 %262 1 1 1 
                              Uniform f32_4* %265 = OpAccessChain %21 %264 %23 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFMul %263 %267 
                                       f32_4 %269 = OpLoad %130 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %130 %270 
                              Uniform f32_4* %271 = OpAccessChain %21 %264 %67 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpLoad %12 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 0 0 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_4 %277 = OpLoad %130 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFAdd %276 %278 
                                       f32_4 %280 = OpLoad %130 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %130 %281 
                              Uniform f32_4* %282 = OpAccessChain %21 %264 %224 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_3 %285 = OpLoad %12 
                                       f32_3 %286 = OpVectorShuffle %285 %285 2 2 2 
                                       f32_3 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %130 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFAdd %287 %289 
                                       f32_4 %291 = OpLoad %130 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %130 %292 
                                       f32_4 %293 = OpLoad %130 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                              Uniform f32_4* %295 = OpAccessChain %21 %264 %238 
                                       f32_4 %296 = OpLoad %295 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpFAdd %294 %297 
                                       f32_4 %299 = OpLoad %130 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %130 %300 
                                        bool %302 = OpLoad %245 
                                                      OpSelectionMerge %304 None 
                                                      OpBranchConditional %302 %303 %307 
                                             %303 = OpLabel 
                                       f32_4 %305 = OpLoad %130 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                                      OpStore %301 %306 
                                                      OpBranch %304 
                                             %307 = OpLabel 
                                       f32_3 %308 = OpLoad %12 
                                                      OpStore %301 %308 
                                                      OpBranch %304 
                                             %304 = OpLabel 
                                       f32_3 %309 = OpLoad %301 
                                       f32_4 %310 = OpLoad %130 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %130 %311 
                                       f32_4 %312 = OpLoad %130 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                              Uniform f32_3* %315 = OpAccessChain %21 %314 
                                       f32_3 %316 = OpLoad %315 
                                       f32_3 %317 = OpFNegate %316 
                                       f32_3 %318 = OpFAdd %313 %317 
                                       f32_4 %319 = OpLoad %130 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %130 %320 
                                       f32_4 %321 = OpLoad %130 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                              Uniform f32_3* %324 = OpAccessChain %21 %323 
                                       f32_3 %325 = OpLoad %324 
                                       f32_3 %326 = OpFMul %322 %325 
                                       f32_4 %327 = OpLoad %130 
                                       f32_4 %328 = OpVectorShuffle %327 %326 0 4 5 6 
                                                      OpStore %130 %328 
                                Private f32* %330 = OpAccessChain %130 %95 
                                         f32 %331 = OpLoad %330 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %329 %335 
                                Uniform f32* %336 = OpAccessChain %21 %246 %123 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFMul %337 %156 
                                         f32 %339 = OpFAdd %338 %334 
                                                      OpStore %125 %339 
                                         f32 %340 = OpLoad %125 
                                         f32 %341 = OpLoad %329 
                                         f32 %342 = OpExtInst %1 40 %340 %341 
                                Private f32* %343 = OpAccessChain %130 %57 
                                                      OpStore %343 %342 
                  read_only Texture3DSampled %348 = OpLoad %347 
                                       f32_4 %349 = OpLoad %130 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 2 3 
                                       f32_4 %351 = OpImageSampleImplicitLod %348 %350 
                                                      OpStore %130 %351 
                                       f32_4 %353 = OpLoad %130 
                                                      OpStore %352 %353 
                                                      OpBranch %258 
                                             %354 = OpLabel 
                                Private f32* %355 = OpAccessChain %352 %57 
                                                      OpStore %355 %116 
                                Private f32* %356 = OpAccessChain %352 %95 
                                                      OpStore %356 %116 
                                Private f32* %357 = OpAccessChain %352 %123 
                                                      OpStore %357 %116 
                                Private f32* %358 = OpAccessChain %352 %52 
                                                      OpStore %358 %116 
                                                      OpBranch %258 
                                             %258 = OpLabel 
                                       f32_4 %359 = OpLoad %352 
                              Uniform f32_4* %360 = OpAccessChain %21 %238 
                                       f32_4 %361 = OpLoad %360 
                                         f32 %362 = OpDot %359 %361 
                                                      OpStore %109 %362 
                                         f32 %363 = OpLoad %109 
                                         f32 %364 = OpExtInst %1 43 %363 %64 %116 
                                                      OpStore %109 %364 
                  read_only Texture2DSampled %366 = OpLoad %365 
                                       f32_3 %367 = OpLoad %83 
                                       f32_2 %368 = OpVectorShuffle %367 %367 0 1 
                                       f32_4 %369 = OpImageSampleImplicitLod %366 %368 
                                         f32 %370 = OpCompositeExtract %369 3 
                                Private f32* %371 = OpAccessChain %83 %57 
                                                      OpStore %371 %370 
                                         f32 %372 = OpLoad %109 
                                Private f32* %373 = OpAccessChain %83 %57 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFMul %372 %374 
                                Private f32* %376 = OpAccessChain %83 %57 
                                                      OpStore %376 %375 
                                       f32_3 %379 = OpLoad %378 
                                       f32_3 %380 = OpLoad %51 
                                         f32 %381 = OpDot %379 %380 
                                Private f32* %382 = OpAccessChain %377 %57 
                                                      OpStore %382 %381 
                                       f32_3 %384 = OpLoad %383 
                                       f32_3 %385 = OpLoad %51 
                                         f32 %386 = OpDot %384 %385 
                                Private f32* %387 = OpAccessChain %377 %95 
                                                      OpStore %387 %386 
                                       f32_3 %389 = OpLoad %388 
                                       f32_3 %390 = OpLoad %51 
                                         f32 %391 = OpDot %389 %390 
                                Private f32* %392 = OpAccessChain %377 %123 
                                                      OpStore %392 %391 
                                       f32_3 %394 = OpLoad %377 
                                       f32_3 %395 = OpLoad %377 
                                         f32 %396 = OpDot %394 %395 
                                Private f32* %397 = OpAccessChain %393 %57 
                                                      OpStore %397 %396 
                                Private f32* %398 = OpAccessChain %393 %57 
                                         f32 %399 = OpLoad %398 
                                         f32 %400 = OpExtInst %1 32 %399 
                                Private f32* %401 = OpAccessChain %393 %57 
                                                      OpStore %401 %400 
                                       f32_3 %402 = OpLoad %393 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 0 0 
                                       f32_3 %404 = OpLoad %377 
                                       f32_3 %405 = OpFMul %403 %404 
                                                      OpStore %393 %405 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                         f32 %408 = OpLoad %31 
                                       f32_3 %409 = OpCompositeConstruct %408 %408 %408 
                                       f32_3 %410 = OpFMul %407 %409 
                              Uniform f32_4* %411 = OpAccessChain %21 %224 
                                       f32_4 %412 = OpLoad %411 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_3 %414 = OpFAdd %410 %413 
                                                      OpStore %51 %414 
                                       f32_3 %415 = OpLoad %51 
                                       f32_3 %416 = OpLoad %51 
                                         f32 %417 = OpDot %415 %416 
                                                      OpStore %109 %417 
                                         f32 %418 = OpLoad %109 
                                         f32 %419 = OpExtInst %1 32 %418 
                                                      OpStore %109 %419 
                                         f32 %420 = OpLoad %109 
                                       f32_3 %421 = OpCompositeConstruct %420 %420 %420 
                                       f32_3 %422 = OpLoad %51 
                                       f32_3 %423 = OpFMul %421 %422 
                                                      OpStore %51 %423 
                                       f32_3 %424 = OpLoad %393 
                                       f32_3 %425 = OpLoad %51 
                                         f32 %426 = OpDot %424 %425 
                                Private f32* %427 = OpAccessChain %51 %57 
                                                      OpStore %427 %426 
                                Private f32* %428 = OpAccessChain %51 %57 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 40 %429 %64 
                                Private f32* %431 = OpAccessChain %51 %57 
                                                      OpStore %431 %430 
                                Private f32* %433 = OpAccessChain %51 %57 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpExtInst %1 30 %434 
                                Private f32* %436 = OpAccessChain %432 %57 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %432 %57 
                                         f32 %438 = OpLoad %437 
                                         f32 %440 = OpFMul %438 %439 
                                Private f32* %441 = OpAccessChain %432 %57 
                                                      OpStore %441 %440 
                                Private f32* %442 = OpAccessChain %432 %57 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpExtInst %1 29 %443 
                                Private f32* %445 = OpAccessChain %432 %57 
                                                      OpStore %445 %444 
                                       f32_3 %446 = OpLoad %432 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                              Uniform f32_4* %449 = OpAccessChain %21 %448 
                                       f32_4 %450 = OpLoad %449 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 1 2 
                                       f32_3 %452 = OpFMul %447 %451 
                                                      OpStore %432 %452 
                                       f32_3 %453 = OpLoad %177 
                              Uniform f32_4* %454 = OpAccessChain %21 %448 
                                       f32_4 %455 = OpLoad %454 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_3 %457 = OpFMul %453 %456 
                                       f32_3 %458 = OpLoad %432 
                                       f32_3 %459 = OpFAdd %457 %458 
                                                      OpStore %432 %459 
                                       f32_3 %460 = OpLoad %83 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %432 
                                       f32_3 %463 = OpFMul %461 %462 
                                       f32_4 %464 = OpLoad %39 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %39 %465 
                                       f32_4 %466 = OpLoad %39 
                                       f32_4 %467 = OpFNegate %466 
                              Uniform f32_4* %469 = OpAccessChain %21 %468 
                                       f32_4 %470 = OpLoad %469 
                                       f32_4 %471 = OpFAdd %467 %470 
                                                      OpStore %9 %471 
                              Uniform f32_4* %472 = OpAccessChain %21 %468 
                                       f32_4 %473 = OpLoad %472 
                                       f32_4 %474 = OpVectorShuffle %473 %473 3 3 3 3 
                                       f32_4 %475 = OpLoad %9 
                                       f32_4 %476 = OpFMul %474 %475 
                                       f32_4 %477 = OpLoad %39 
                                       f32_4 %478 = OpFAdd %476 %477 
                                                      OpStore %9 %478 
                                       f32_4 %481 = OpLoad %9 
                                                      OpStore %480 %481 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "META"
  LOD 110
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "Transparent" "RenderType" = "TransparentCutout" }
  Cull Off
  Fog {
   Mode Off
  }
  Lighting On
  GpuProgramID 157827
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	float _Perpendicular;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TANGENT0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat3;
bool u_xlatb3;
bool u_xlatb9;
float u_xlat10;
void main()
{
    u_xlat0.x = in_POSITION0.y * hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[0].y * in_POSITION0.x + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[2].y * in_POSITION0.z + u_xlat0.x;
    u_xlat0.x = hlslcc_mtx4x4unity_ObjectToWorld[3].y * in_POSITION0.w + u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-hlslcc_mtx4x4unity_ObjectToWorld[3].y);
    u_xlatb3 = 0.0<_Perpendicular;
    u_xlat3 = (u_xlatb3) ? -1.0 : 1.0;
    u_xlat0.z = u_xlat0.x * u_xlat3 + in_POSITION0.z;
    u_xlatb9 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb9 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xy = in_POSITION0.xy;
    u_xlat0.xyw = (unity_MetaVertexControl.x) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlatb1 = 0.0<u_xlat0.w;
    u_xlat1.z = u_xlatb1 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyw = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyw;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyw * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.wxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat10 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    vs_TEXCOORD1.y = u_xlat2.x;
    vs_TEXCOORD1.x = u_xlat1.z;
    vs_TEXCOORD1.z = u_xlat0.y;
    vs_TEXCOORD2.x = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat1.y;
    vs_TEXCOORD2.z = u_xlat0.w;
    vs_TEXCOORD3.z = u_xlat0.x;
    vs_TEXCOORD2.y = u_xlat2.y;
    vs_TEXCOORD3.y = u_xlat2.z;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD4 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD5 = hlslcc_mtx4x4unity_ObjectToWorld[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Time;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
bool u_xlatb1;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0.w + -0.100000001;
    u_xlatb1 = u_xlat1<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat10_0.w + (-_Cutoff);
    u_xlat16_0.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat16_0.xyz = u_xlat16_0.xxx + vec3(0.0, 0.0, 0.200000003);
    u_xlat16_0.xyz = log2(u_xlat16_0.xyz);
    u_xlatb6 = u_xlat6<0.0;
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = unity_OneOverOutputBoost;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat6);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat6 = vs_TEXCOORD4.x + (-vs_TEXCOORD5.x);
    u_xlat6 = u_xlat6 + vs_TEXCOORD4.y;
    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.y);
    u_xlat6 = u_xlat6 * 0.5 + -0.100000001;
    u_xlat6 = fract(u_xlat6);
    u_xlat1 = fract(_Time.y);
    u_xlat3 = u_xlat1 * 4.0;
    u_xlat1 = u_xlat1 * 4.0 + 0.100000001;
    u_xlatb1 = u_xlat6<u_xlat1;
    u_xlatb6 = u_xlat3<u_xlat6;
    u_xlatb6 = u_xlatb1 && u_xlatb6;
    u_xlat0.xyz = (bool(u_xlatb6)) ? vec3(1.0, 1.0, 1.0) : u_xlat0.xyz;
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 442
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %112 %163 %238 %249 %250 %263 %299 %376 %387 %391 %426 %434 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %163 Location 163 
                                                      OpMemberDecorate %236 0 BuiltIn 236 
                                                      OpMemberDecorate %236 1 BuiltIn 236 
                                                      OpMemberDecorate %236 2 BuiltIn 236 
                                                      OpDecorate %236 Block 
                                                      OpDecorate %249 Location 249 
                                                      OpDecorate %250 Location 250 
                                                      OpDecorate %263 Location 263 
                                                      OpDecorate %299 Location 299 
                                                      OpDecorate %376 Location 376 
                                                      OpDecorate %387 Location 387 
                                                      OpDecorate %391 Location 391 
                                                      OpDecorate %426 Location 426 
                                                      OpDecorate %434 Location 434 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeInt 32 0 
                                          u32 %13 = OpConstant 1 
                                              %14 = OpTypePointer Input %6 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeVector %12 4 
                                              %22 = OpTypeStruct %18 %19 %7 %20 %7 %7 %6 %21 %7 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4; f32_4; f32; u32_4; f32_4;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 0 
                                          i32 %27 = OpConstant 1 
                                              %28 = OpTypePointer Uniform %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                                          i32 %44 = OpConstant 2 
                                          u32 %47 = OpConstant 2 
                                          i32 %55 = OpConstant 3 
                                          u32 %58 = OpConstant 3 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %76 = OpConstant 3.674022E-40 
                                          i32 %77 = OpConstant 6 
                                 Private f32* %81 = OpVariable Private 
                                              %82 = OpTypePointer Function %6 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %89 = OpConstant 3.674022E-40 
                                Private bool* %99 = OpVariable Private 
                              Private f32_4* %103 = OpVariable Private 
                                         f32 %108 = OpConstant 3.674022E-40 
                                Input f32_4* %112 = OpVariable Input 
                                             %113 = OpTypeVector %6 2 
                                         i32 %116 = OpConstant 4 
                                             %117 = OpTypePointer Uniform %7 
                                             %132 = OpTypeVector %6 3 
                                             %133 = OpTypePointer Function %132 
                                         i32 %135 = OpConstant 7 
                                             %136 = OpTypeVector %73 4 
                                             %137 = OpTypePointer Uniform %21 
                               Private bool* %152 = OpVariable Private 
                                Input f32_4* %163 = OpVariable Input 
                                         i32 %166 = OpConstant 5 
                              Private f32_4* %215 = OpVariable Private 
                                             %235 = OpTypeArray %6 %13 
                                             %236 = OpTypeStruct %7 %6 %235 
                                             %237 = OpTypePointer Output %236 
        Output struct {f32_4; f32; f32[1];}* %238 = OpVariable Output 
                                             %246 = OpTypePointer Output %7 
                                             %248 = OpTypePointer Output %113 
                               Output f32_2* %249 = OpVariable Output 
                                Input f32_4* %250 = OpVariable Input 
                                         i32 %253 = OpConstant 8 
                                             %262 = OpTypePointer Input %132 
                                Input f32_3* %263 = OpVariable Input 
                                Input f32_4* %299 = OpVariable Input 
                                Private f32* %330 = OpVariable Private 
                                             %375 = OpTypePointer Output %132 
                               Output f32_3* %376 = OpVariable Output 
                                             %379 = OpTypePointer Output %6 
                               Output f32_3* %387 = OpVariable Output 
                               Output f32_3* %391 = OpVariable Output 
                               Output f32_4* %426 = OpVariable Output 
                               Output f32_4* %434 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %83 = OpVariable Function 
                               Function f32* %104 = OpVariable Function 
                             Function f32_3* %134 = OpVariable Function 
                               Function f32* %156 = OpVariable Function 
                             Function f32_3* %177 = OpVariable Function 
                                   Input f32* %15 = OpAccessChain %11 %13 
                                          f32 %16 = OpLoad %15 
                                 Uniform f32* %29 = OpAccessChain %24 %26 %27 %13 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFMul %16 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                 Uniform f32* %35 = OpAccessChain %24 %26 %26 %13 
                                          f32 %36 = OpLoad %35 
                                   Input f32* %37 = OpAccessChain %11 %32 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFMul %36 %38 
                                 Private f32* %40 = OpAccessChain %9 %32 
                                          f32 %41 = OpLoad %40 
                                          f32 %42 = OpFAdd %39 %41 
                                 Private f32* %43 = OpAccessChain %9 %32 
                                                      OpStore %43 %42 
                                 Uniform f32* %45 = OpAccessChain %24 %26 %44 %13 
                                          f32 %46 = OpLoad %45 
                                   Input f32* %48 = OpAccessChain %11 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFMul %46 %49 
                                 Private f32* %51 = OpAccessChain %9 %32 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpFAdd %50 %52 
                                 Private f32* %54 = OpAccessChain %9 %32 
                                                      OpStore %54 %53 
                                 Uniform f32* %56 = OpAccessChain %24 %26 %55 %13 
                                          f32 %57 = OpLoad %56 
                                   Input f32* %59 = OpAccessChain %11 %58 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %57 %60 
                                 Private f32* %62 = OpAccessChain %9 %32 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %9 %32 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %9 %32 
                                          f32 %67 = OpLoad %66 
                                 Uniform f32* %68 = OpAccessChain %24 %26 %55 %13 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %67 %70 
                                 Private f32* %72 = OpAccessChain %9 %32 
                                                      OpStore %72 %71 
                                 Uniform f32* %78 = OpAccessChain %24 %77 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %76 %79 
                                                      OpStore %75 %80 
                                         bool %84 = OpLoad %75 
                                                      OpSelectionMerge %86 None 
                                                      OpBranchConditional %84 %85 %88 
                                              %85 = OpLabel 
                                                      OpStore %83 %87 
                                                      OpBranch %86 
                                              %88 = OpLabel 
                                                      OpStore %83 %89 
                                                      OpBranch %86 
                                              %86 = OpLabel 
                                          f32 %90 = OpLoad %83 
                                                      OpStore %81 %90 
                                 Private f32* %91 = OpAccessChain %9 %32 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpLoad %81 
                                          f32 %94 = OpFMul %92 %93 
                                   Input f32* %95 = OpAccessChain %11 %47 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFAdd %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %47 
                                                      OpStore %98 %97 
                                Private f32* %100 = OpAccessChain %9 %47 
                                         f32 %101 = OpLoad %100 
                                        bool %102 = OpFOrdLessThan %76 %101 
                                                      OpStore %99 %102 
                                        bool %105 = OpLoad %99 
                                                      OpSelectionMerge %107 None 
                                                      OpBranchConditional %105 %106 %109 
                                             %106 = OpLabel 
                                                      OpStore %104 %108 
                                                      OpBranch %107 
                                             %109 = OpLabel 
                                                      OpStore %104 %76 
                                                      OpBranch %107 
                                             %107 = OpLabel 
                                         f32 %110 = OpLoad %104 
                                Private f32* %111 = OpAccessChain %103 %47 
                                                      OpStore %111 %110 
                                       f32_4 %114 = OpLoad %112 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                              Uniform f32_4* %118 = OpAccessChain %24 %116 
                                       f32_4 %119 = OpLoad %118 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_2 %121 = OpFMul %115 %120 
                              Uniform f32_4* %122 = OpAccessChain %24 %116 
                                       f32_4 %123 = OpLoad %122 
                                       f32_2 %124 = OpVectorShuffle %123 %123 2 3 
                                       f32_2 %125 = OpFAdd %121 %124 
                                       f32_4 %126 = OpLoad %103 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 2 3 
                                                      OpStore %103 %127 
                                       f32_4 %128 = OpLoad %11 
                                       f32_2 %129 = OpVectorShuffle %128 %128 0 1 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 2 3 
                                                      OpStore %9 %131 
                              Uniform u32_4* %138 = OpAccessChain %24 %135 
                                       u32_4 %139 = OpLoad %138 
                                         u32 %140 = OpCompositeExtract %139 0 
                                        bool %141 = OpINotEqual %140 %32 
                                                      OpSelectionMerge %143 None 
                                                      OpBranchConditional %141 %142 %146 
                                             %142 = OpLabel 
                                       f32_4 %144 = OpLoad %103 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                                      OpStore %134 %145 
                                                      OpBranch %143 
                                             %146 = OpLabel 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                                      OpStore %134 %148 
                                                      OpBranch %143 
                                             %143 = OpLabel 
                                       f32_3 %149 = OpLoad %134 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 2 6 
                                                      OpStore %9 %151 
                                Private f32* %153 = OpAccessChain %9 %58 
                                         f32 %154 = OpLoad %153 
                                        bool %155 = OpFOrdLessThan %76 %154 
                                                      OpStore %152 %155 
                                        bool %157 = OpLoad %152 
                                                      OpSelectionMerge %159 None 
                                                      OpBranchConditional %157 %158 %160 
                                             %158 = OpLabel 
                                                      OpStore %156 %108 
                                                      OpBranch %159 
                                             %160 = OpLabel 
                                                      OpStore %156 %76 
                                                      OpBranch %159 
                                             %159 = OpLabel 
                                         f32 %161 = OpLoad %156 
                                Private f32* %162 = OpAccessChain %103 %47 
                                                      OpStore %162 %161 
                                       f32_4 %164 = OpLoad %163 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                              Uniform f32_4* %167 = OpAccessChain %24 %166 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 1 
                                       f32_2 %170 = OpFMul %165 %169 
                              Uniform f32_4* %171 = OpAccessChain %24 %166 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 2 3 
                                       f32_2 %174 = OpFAdd %170 %173 
                                       f32_4 %175 = OpLoad %103 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore %103 %176 
                              Uniform u32_4* %178 = OpAccessChain %24 %135 
                                       u32_4 %179 = OpLoad %178 
                                         u32 %180 = OpCompositeExtract %179 1 
                                        bool %181 = OpINotEqual %180 %32 
                                                      OpSelectionMerge %183 None 
                                                      OpBranchConditional %181 %182 %186 
                                             %182 = OpLabel 
                                       f32_4 %184 = OpLoad %103 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %177 %185 
                                                      OpBranch %183 
                                             %186 = OpLabel 
                                       f32_4 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 3 
                                                      OpStore %177 %188 
                                                      OpBranch %183 
                                             %183 = OpLabel 
                                       f32_3 %189 = OpLoad %177 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 6 
                                                      OpStore %9 %191 
                                       f32_4 %192 = OpLoad %9 
                                       f32_4 %193 = OpVectorShuffle %192 %192 1 1 1 1 
                              Uniform f32_4* %194 = OpAccessChain %24 %26 %27 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpFMul %193 %195 
                                                      OpStore %103 %196 
                              Uniform f32_4* %197 = OpAccessChain %24 %26 %26 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpLoad %9 
                                       f32_4 %200 = OpVectorShuffle %199 %199 0 0 0 0 
                                       f32_4 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %103 
                                       f32_4 %203 = OpFAdd %201 %202 
                                                      OpStore %103 %203 
                              Uniform f32_4* %204 = OpAccessChain %24 %26 %44 
                                       f32_4 %205 = OpLoad %204 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpVectorShuffle %206 %206 3 3 3 3 
                                       f32_4 %208 = OpFMul %205 %207 
                                       f32_4 %209 = OpLoad %103 
                                       f32_4 %210 = OpFAdd %208 %209 
                                                      OpStore %103 %210 
                                       f32_4 %211 = OpLoad %103 
                              Uniform f32_4* %212 = OpAccessChain %24 %26 %55 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpFAdd %211 %213 
                                                      OpStore %103 %214 
                                       f32_4 %216 = OpLoad %103 
                                       f32_4 %217 = OpVectorShuffle %216 %216 1 1 1 1 
                              Uniform f32_4* %218 = OpAccessChain %24 %55 %27 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpFMul %217 %219 
                                                      OpStore %215 %220 
                              Uniform f32_4* %221 = OpAccessChain %24 %55 %26 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %103 
                                       f32_4 %224 = OpVectorShuffle %223 %223 0 0 0 0 
                                       f32_4 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %215 
                                       f32_4 %227 = OpFAdd %225 %226 
                                                      OpStore %215 %227 
                              Uniform f32_4* %228 = OpAccessChain %24 %55 %44 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %103 
                                       f32_4 %231 = OpVectorShuffle %230 %230 2 2 2 2 
                                       f32_4 %232 = OpFMul %229 %231 
                                       f32_4 %233 = OpLoad %215 
                                       f32_4 %234 = OpFAdd %232 %233 
                                                      OpStore %215 %234 
                              Uniform f32_4* %239 = OpAccessChain %24 %55 %55 
                                       f32_4 %240 = OpLoad %239 
                                       f32_4 %241 = OpLoad %103 
                                       f32_4 %242 = OpVectorShuffle %241 %241 3 3 3 3 
                                       f32_4 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %215 
                                       f32_4 %245 = OpFAdd %243 %244 
                               Output f32_4* %247 = OpAccessChain %238 %26 
                                                      OpStore %247 %245 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 1 
                              Uniform f32_4* %254 = OpAccessChain %24 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_2 %256 = OpVectorShuffle %255 %255 0 1 
                                       f32_2 %257 = OpFMul %252 %256 
                              Uniform f32_4* %258 = OpAccessChain %24 %253 
                                       f32_4 %259 = OpLoad %258 
                                       f32_2 %260 = OpVectorShuffle %259 %259 2 3 
                                       f32_2 %261 = OpFAdd %257 %260 
                                                      OpStore %249 %261 
                                       f32_3 %264 = OpLoad %263 
                              Uniform f32_4* %265 = OpAccessChain %24 %27 %26 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                         f32 %268 = OpDot %264 %267 
                                Private f32* %269 = OpAccessChain %103 %13 
                                                      OpStore %269 %268 
                                       f32_3 %270 = OpLoad %263 
                              Uniform f32_4* %271 = OpAccessChain %24 %27 %27 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpDot %270 %273 
                                Private f32* %275 = OpAccessChain %103 %47 
                                                      OpStore %275 %274 
                                       f32_3 %276 = OpLoad %263 
                              Uniform f32_4* %277 = OpAccessChain %24 %27 %44 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                         f32 %280 = OpDot %276 %279 
                                Private f32* %281 = OpAccessChain %103 %32 
                                                      OpStore %281 %280 
                                       f32_4 %282 = OpLoad %103 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_4 %284 = OpLoad %103 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                Private f32* %287 = OpAccessChain %9 %32 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %9 %32 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 32 %289 
                                Private f32* %291 = OpAccessChain %9 %32 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %9 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 0 0 
                                       f32_4 %294 = OpLoad %103 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_3 %296 = OpFMul %293 %295 
                                       f32_4 %297 = OpLoad %9 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 6 
                                                      OpStore %9 %298 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 1 1 1 
                              Uniform f32_4* %302 = OpAccessChain %24 %26 %27 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 1 2 0 
                                       f32_3 %305 = OpFMul %301 %304 
                                       f32_4 %306 = OpLoad %103 
                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
                                                      OpStore %103 %307 
                              Uniform f32_4* %308 = OpAccessChain %24 %26 %26 
                                       f32_4 %309 = OpLoad %308 
                                       f32_3 %310 = OpVectorShuffle %309 %309 1 2 0 
                                       f32_4 %311 = OpLoad %299 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 0 0 
                                       f32_3 %313 = OpFMul %310 %312 
                                       f32_4 %314 = OpLoad %103 
                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                                       f32_3 %316 = OpFAdd %313 %315 
                                       f32_4 %317 = OpLoad %103 
                                       f32_4 %318 = OpVectorShuffle %317 %316 4 5 6 3 
                                                      OpStore %103 %318 
                              Uniform f32_4* %319 = OpAccessChain %24 %26 %44 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 1 2 0 
                                       f32_4 %322 = OpLoad %299 
                                       f32_3 %323 = OpVectorShuffle %322 %322 2 2 2 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_4 %325 = OpLoad %103 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_3 %327 = OpFAdd %324 %326 
                                       f32_4 %328 = OpLoad %103 
                                       f32_4 %329 = OpVectorShuffle %328 %327 4 5 6 3 
                                                      OpStore %103 %329 
                                       f32_4 %331 = OpLoad %103 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                                       f32_4 %333 = OpLoad %103 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %332 %334 
                                                      OpStore %330 %335 
                                         f32 %336 = OpLoad %330 
                                         f32 %337 = OpExtInst %1 32 %336 
                                                      OpStore %330 %337 
                                         f32 %338 = OpLoad %330 
                                       f32_3 %339 = OpCompositeConstruct %338 %338 %338 
                                       f32_4 %340 = OpLoad %103 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %103 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 6 3 
                                                      OpStore %103 %344 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 3 
                                       f32_4 %347 = OpLoad %103 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_4 %350 = OpLoad %215 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %215 %351 
                                       f32_4 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 3 0 1 
                                       f32_4 %354 = OpLoad %103 
                                       f32_3 %355 = OpVectorShuffle %354 %354 1 2 0 
                                       f32_3 %356 = OpFMul %353 %355 
                                       f32_4 %357 = OpLoad %215 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFNegate %358 
                                       f32_3 %360 = OpFAdd %356 %359 
                                       f32_4 %361 = OpLoad %215 
                                       f32_4 %362 = OpVectorShuffle %361 %360 4 5 6 3 
                                                      OpStore %215 %362 
                                  Input f32* %363 = OpAccessChain %299 %58 
                                         f32 %364 = OpLoad %363 
                                Uniform f32* %365 = OpAccessChain %24 %44 %58 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFMul %364 %366 
                                                      OpStore %330 %367 
                                         f32 %368 = OpLoad %330 
                                       f32_3 %369 = OpCompositeConstruct %368 %368 %368 
                                       f32_4 %370 = OpLoad %215 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFMul %369 %371 
                                       f32_4 %373 = OpLoad %215 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 6 3 
                                                      OpStore %215 %374 
                                Private f32* %377 = OpAccessChain %215 %32 
                                         f32 %378 = OpLoad %377 
                                 Output f32* %380 = OpAccessChain %376 %13 
                                                      OpStore %380 %378 
                                Private f32* %381 = OpAccessChain %103 %47 
                                         f32 %382 = OpLoad %381 
                                 Output f32* %383 = OpAccessChain %376 %32 
                                                      OpStore %383 %382 
                                Private f32* %384 = OpAccessChain %9 %13 
                                         f32 %385 = OpLoad %384 
                                 Output f32* %386 = OpAccessChain %376 %47 
                                                      OpStore %386 %385 
                                Private f32* %388 = OpAccessChain %103 %32 
                                         f32 %389 = OpLoad %388 
                                 Output f32* %390 = OpAccessChain %387 %32 
                                                      OpStore %390 %389 
                                Private f32* %392 = OpAccessChain %103 %13 
                                         f32 %393 = OpLoad %392 
                                 Output f32* %394 = OpAccessChain %391 %32 
                                                      OpStore %394 %393 
                                Private f32* %395 = OpAccessChain %9 %58 
                                         f32 %396 = OpLoad %395 
                                 Output f32* %397 = OpAccessChain %387 %47 
                                                      OpStore %397 %396 
                                Private f32* %398 = OpAccessChain %9 %32 
                                         f32 %399 = OpLoad %398 
                                 Output f32* %400 = OpAccessChain %391 %47 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %215 %13 
                                         f32 %402 = OpLoad %401 
                                 Output f32* %403 = OpAccessChain %387 %13 
                                                      OpStore %403 %402 
                                Private f32* %404 = OpAccessChain %215 %47 
                                         f32 %405 = OpLoad %404 
                                 Output f32* %406 = OpAccessChain %391 %13 
                                                      OpStore %406 %405 
                                       f32_4 %407 = OpLoad %11 
                                       f32_4 %408 = OpVectorShuffle %407 %407 1 1 1 1 
                              Uniform f32_4* %409 = OpAccessChain %24 %26 %27 
                                       f32_4 %410 = OpLoad %409 
                                       f32_4 %411 = OpFMul %408 %410 
                                                      OpStore %103 %411 
                              Uniform f32_4* %412 = OpAccessChain %24 %26 %26 
                                       f32_4 %413 = OpLoad %412 
                                       f32_4 %414 = OpLoad %11 
                                       f32_4 %415 = OpVectorShuffle %414 %414 0 0 0 0 
                                       f32_4 %416 = OpFMul %413 %415 
                                       f32_4 %417 = OpLoad %103 
                                       f32_4 %418 = OpFAdd %416 %417 
                                                      OpStore %103 %418 
                              Uniform f32_4* %419 = OpAccessChain %24 %26 %44 
                                       f32_4 %420 = OpLoad %419 
                                       f32_4 %421 = OpLoad %9 
                                       f32_4 %422 = OpVectorShuffle %421 %421 2 2 2 2 
                                       f32_4 %423 = OpFMul %420 %422 
                                       f32_4 %424 = OpLoad %103 
                                       f32_4 %425 = OpFAdd %423 %424 
                                                      OpStore %9 %425 
                              Uniform f32_4* %427 = OpAccessChain %24 %26 %55 
                                       f32_4 %428 = OpLoad %427 
                                       f32_4 %429 = OpLoad %11 
                                       f32_4 %430 = OpVectorShuffle %429 %429 3 3 3 3 
                                       f32_4 %431 = OpFMul %428 %430 
                                       f32_4 %432 = OpLoad %9 
                                       f32_4 %433 = OpFAdd %431 %432 
                                                      OpStore %426 %433 
                              Uniform f32_4* %435 = OpAccessChain %24 %26 %55 
                                       f32_4 %436 = OpLoad %435 
                                                      OpStore %434 %436 
                                 Output f32* %437 = OpAccessChain %238 %26 %13 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpFNegate %438 
                                 Output f32* %440 = OpAccessChain %238 %26 %13 
                                                      OpStore %440 %439 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 217
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %106 %111 %203 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %27 RelaxedPrecision 
                                                      OpDecorate %31 RelaxedPrecision 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpMemberDecorate %48 0 Offset 48 
                                                      OpMemberDecorate %48 1 Offset 48 
                                                      OpMemberDecorate %48 2 Offset 48 
                                                      OpMemberDecorate %48 3 Offset 48 
                                                      OpMemberDecorate %48 4 RelaxedPrecision 
                                                      OpMemberDecorate %48 4 Offset 48 
                                                      OpDecorate %48 Block 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %59 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %66 RelaxedPrecision 
                                                      OpDecorate %67 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %71 RelaxedPrecision 
                                                      OpDecorate %74 RelaxedPrecision 
                                                      OpDecorate %75 RelaxedPrecision 
                                                      OpDecorate %76 RelaxedPrecision 
                                                      OpDecorate %80 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %102 RelaxedPrecision 
                                                      OpDecorate %106 Location 106 
                                                      OpDecorate %111 Location 111 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %203 Location 203 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 3 
                                          f32 %26 = OpConstant 3.674022E-40 
                                              %28 = OpTypeBool 
                                              %29 = OpTypePointer Private %28 
                                Private bool* %30 = OpVariable Private 
                                          f32 %32 = OpConstant 3.674022E-40 
                                              %35 = OpTypeInt 32 1 
                                          i32 %36 = OpConstant 0 
                                          i32 %37 = OpConstant 1 
                                          i32 %39 = OpConstant -1 
                                              %47 = OpTypeVector %22 4 
                                              %48 = OpTypeStruct %7 %47 %6 %6 %6 
                                              %49 = OpTypePointer Uniform %48 
Uniform struct {f32_4; u32_4; f32; f32; f32;}* %50 = OpVariable Uniform 
                                          i32 %51 = OpConstant 4 
                                              %52 = OpTypePointer Uniform %6 
                                 Private f32* %57 = OpVariable Private 
                                              %58 = OpTypeVector %6 3 
                                          f32 %61 = OpConstant 3.674022E-40 
                                          f32 %62 = OpConstant 3.674022E-40 
                                          f32 %63 = OpConstant 3.674022E-40 
                                        f32_3 %64 = OpConstantComposite %61 %62 %63 
                               Private f32_4* %66 = OpVariable Private 
                                          f32 %69 = OpConstant 3.674022E-40 
                                        f32_3 %70 = OpConstantComposite %32 %32 %69 
                                Private bool* %79 = OpVariable Private 
                                 Private f32* %89 = OpVariable Private 
                                          i32 %90 = OpConstant 2 
                                          f32 %94 = OpConstant 3.674022E-40 
                                              %96 = OpTypePointer Private %58 
                               Private f32_3* %97 = OpVariable Private 
                                             %105 = OpTypePointer Input %7 
                                Input f32_4* %106 = OpVariable Input 
                                         u32 %107 = OpConstant 0 
                                             %108 = OpTypePointer Input %6 
                                Input f32_4* %111 = OpVariable Input 
                                         u32 %117 = OpConstant 1 
                                         f32 %127 = OpConstant 3.674022E-40 
                                Private f32* %132 = OpVariable Private 
                                Private f32* %136 = OpVariable Private 
                                         f32 %138 = OpConstant 3.674022E-40 
                                         f32 %142 = OpConstant 3.674022E-40 
                                             %153 = OpTypePointer Function %58 
                                       f32_3 %158 = OpConstantComposite %94 %94 %94 
                                         i32 %163 = OpConstant 3 
                                             %177 = OpTypeVector %28 4 
                                             %178 = OpTypePointer Uniform %47 
                                       f32_3 %187 = OpConstantComposite %32 %32 %32 
                                             %191 = OpTypePointer Function %6 
                                             %202 = OpTypePointer Output %7 
                               Output f32_4* %203 = OpVariable Output 
                                             %204 = OpTypePointer Function %7 
                                       f32_4 %212 = OpConstantComposite %32 %32 %32 %94 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %154 = OpVariable Function 
                             Function f32_3* %176 = OpVariable Function 
                               Function f32* %192 = OpVariable Function 
                             Function f32_4* %205 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %23 
                                          f32 %25 = OpLoad %24 
                                          f32 %27 = OpFAdd %25 %26 
                                                      OpStore %21 %27 
                                          f32 %31 = OpLoad %21 
                                         bool %33 = OpFOrdLessThan %31 %32 
                                                      OpStore %30 %33 
                                         bool %34 = OpLoad %30 
                                          i32 %38 = OpSelect %34 %37 %36 
                                          i32 %40 = OpIMul %38 %39 
                                         bool %41 = OpINotEqual %40 %36 
                                                      OpSelectionMerge %43 None 
                                                      OpBranchConditional %41 %42 %43 
                                              %42 = OpLabel 
                                                      OpKill
                                              %43 = OpLabel 
                                 Private f32* %45 = OpAccessChain %9 %23 
                                          f32 %46 = OpLoad %45 
                                 Uniform f32* %53 = OpAccessChain %50 %51 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpFNegate %54 
                                          f32 %56 = OpFAdd %46 %55 
                                                      OpStore %21 %56 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                          f32 %65 = OpDot %60 %64 
                                                      OpStore %57 %65 
                                          f32 %67 = OpLoad %57 
                                        f32_3 %68 = OpCompositeConstruct %67 %67 %67 
                                        f32_3 %71 = OpFAdd %68 %70 
                                        f32_4 %72 = OpLoad %66 
                                        f32_4 %73 = OpVectorShuffle %72 %71 4 5 6 3 
                                                      OpStore %66 %73 
                                        f32_4 %74 = OpLoad %66 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
                                        f32_3 %76 = OpExtInst %1 30 %75 
                                        f32_4 %77 = OpLoad %66 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %66 %78 
                                          f32 %80 = OpLoad %21 
                                         bool %81 = OpFOrdLessThan %80 %32 
                                                      OpStore %79 %81 
                                         bool %82 = OpLoad %79 
                                          i32 %83 = OpSelect %82 %37 %36 
                                          i32 %84 = OpIMul %83 %39 
                                         bool %85 = OpINotEqual %84 %36 
                                                      OpSelectionMerge %87 None 
                                                      OpBranchConditional %85 %86 %87 
                                              %86 = OpLabel 
                                                      OpKill
                                              %87 = OpLabel 
                                 Uniform f32* %91 = OpAccessChain %50 %90 
                                          f32 %92 = OpLoad %91 
                                                      OpStore %89 %92 
                                          f32 %93 = OpLoad %89 
                                          f32 %95 = OpExtInst %1 43 %93 %32 %94 
                                                      OpStore %89 %95 
                                        f32_4 %98 = OpLoad %66 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                         f32 %100 = OpLoad %89 
                                       f32_3 %101 = OpCompositeConstruct %100 %100 %100 
                                       f32_3 %102 = OpFMul %99 %101 
                                                      OpStore %97 %102 
                                       f32_3 %103 = OpLoad %97 
                                       f32_3 %104 = OpExtInst %1 29 %103 
                                                      OpStore %97 %104 
                                  Input f32* %109 = OpAccessChain %106 %107 
                                         f32 %110 = OpLoad %109 
                                  Input f32* %112 = OpAccessChain %111 %107 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFNegate %113 
                                         f32 %115 = OpFAdd %110 %114 
                                                      OpStore %89 %115 
                                         f32 %116 = OpLoad %89 
                                  Input f32* %118 = OpAccessChain %106 %117 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFAdd %116 %119 
                                                      OpStore %89 %120 
                                         f32 %121 = OpLoad %89 
                                  Input f32* %122 = OpAccessChain %111 %117 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFNegate %123 
                                         f32 %125 = OpFAdd %121 %124 
                                                      OpStore %89 %125 
                                         f32 %126 = OpLoad %89 
                                         f32 %128 = OpFMul %126 %127 
                                         f32 %129 = OpFAdd %128 %26 
                                                      OpStore %89 %129 
                                         f32 %130 = OpLoad %89 
                                         f32 %131 = OpExtInst %1 10 %130 
                                                      OpStore %89 %131 
                                Uniform f32* %133 = OpAccessChain %50 %36 %117 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpExtInst %1 10 %134 
                                                      OpStore %132 %135 
                                         f32 %137 = OpLoad %132 
                                         f32 %139 = OpFMul %137 %138 
                                                      OpStore %136 %139 
                                         f32 %140 = OpLoad %132 
                                         f32 %141 = OpFMul %140 %138 
                                         f32 %143 = OpFAdd %141 %142 
                                                      OpStore %132 %143 
                                         f32 %144 = OpLoad %89 
                                         f32 %145 = OpLoad %132 
                                        bool %146 = OpFOrdLessThan %144 %145 
                                                      OpStore %30 %146 
                                         f32 %147 = OpLoad %136 
                                         f32 %148 = OpLoad %89 
                                        bool %149 = OpFOrdLessThan %147 %148 
                                                      OpStore %79 %149 
                                        bool %150 = OpLoad %30 
                                        bool %151 = OpLoad %79 
                                        bool %152 = OpLogicalAnd %150 %151 
                                                      OpStore %79 %152 
                                        bool %155 = OpLoad %79 
                                                      OpSelectionMerge %157 None 
                                                      OpBranchConditional %155 %156 %159 
                                             %156 = OpLabel 
                                                      OpStore %154 %158 
                                                      OpBranch %157 
                                             %159 = OpLabel 
                                       f32_3 %160 = OpLoad %97 
                                                      OpStore %154 %160 
                                                      OpBranch %157 
                                             %157 = OpLabel 
                                       f32_3 %161 = OpLoad %154 
                                                      OpStore %97 %161 
                                       f32_3 %162 = OpLoad %97 
                                Uniform f32* %164 = OpAccessChain %50 %163 
                                         f32 %165 = OpLoad %164 
                                Uniform f32* %166 = OpAccessChain %50 %163 
                                         f32 %167 = OpLoad %166 
                                Uniform f32* %168 = OpAccessChain %50 %163 
                                         f32 %169 = OpLoad %168 
                                       f32_3 %170 = OpCompositeConstruct %165 %167 %169 
                                         f32 %171 = OpCompositeExtract %170 0 
                                         f32 %172 = OpCompositeExtract %170 1 
                                         f32 %173 = OpCompositeExtract %170 2 
                                       f32_3 %174 = OpCompositeConstruct %171 %172 %173 
                                       f32_3 %175 = OpExtInst %1 37 %162 %174 
                                                      OpStore %97 %175 
                              Uniform u32_4* %179 = OpAccessChain %50 %37 
                                       u32_4 %180 = OpLoad %179 
                                         u32 %181 = OpCompositeExtract %180 0 
                                        bool %182 = OpINotEqual %181 %107 
                                                      OpSelectionMerge %184 None 
                                                      OpBranchConditional %182 %183 %186 
                                             %183 = OpLabel 
                                       f32_3 %185 = OpLoad %97 
                                                      OpStore %176 %185 
                                                      OpBranch %184 
                                             %186 = OpLabel 
                                                      OpStore %176 %187 
                                                      OpBranch %184 
                                             %184 = OpLabel 
                                       f32_3 %188 = OpLoad %176 
                                       f32_4 %189 = OpLoad %66 
                                       f32_4 %190 = OpVectorShuffle %189 %188 4 5 6 3 
                                                      OpStore %66 %190 
                              Uniform u32_4* %193 = OpAccessChain %50 %37 
                                       u32_4 %194 = OpLoad %193 
                                         u32 %195 = OpCompositeExtract %194 0 
                                        bool %196 = OpINotEqual %195 %107 
                                                      OpSelectionMerge %198 None 
                                                      OpBranchConditional %196 %197 %199 
                                             %197 = OpLabel 
                                                      OpStore %192 %94 
                                                      OpBranch %198 
                                             %199 = OpLabel 
                                                      OpStore %192 %32 
                                                      OpBranch %198 
                                             %198 = OpLabel 
                                         f32 %200 = OpLoad %192 
                                Private f32* %201 = OpAccessChain %66 %23 
                                                      OpStore %201 %200 
                              Uniform u32_4* %206 = OpAccessChain %50 %37 
                                       u32_4 %207 = OpLoad %206 
                                         u32 %208 = OpCompositeExtract %207 1 
                                        bool %209 = OpINotEqual %208 %107 
                                                      OpSelectionMerge %211 None 
                                                      OpBranchConditional %209 %210 %213 
                                             %210 = OpLabel 
                                                      OpStore %205 %212 
                                                      OpBranch %211 
                                             %213 = OpLabel 
                                       f32_4 %214 = OpLoad %66 
                                                      OpStore %205 %214 
                                                      OpBranch %211 
                                             %211 = OpLabel 
                                       f32_4 %215 = OpLoad %205 
                                                      OpStore %203 %215 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
Fallback "tk2d/BlendVertexColor"
}