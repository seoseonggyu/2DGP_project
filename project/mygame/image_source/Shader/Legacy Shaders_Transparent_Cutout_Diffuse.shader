//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Legacy Shaders/Transparent/Cutout/Diffuse" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_MainTex ("Base (RGB) Trans (A)", 2D) = "white" { }
_Cutoff ("Alpha cutoff", Range(0, 1)) = 0.5
}
SubShader {
 LOD 200
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
  ColorMask RGB 0
  GpuProgramID 52850
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat3.x = u_xlat0.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat0.x = max(u_xlat3.x, u_xlat2);
        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
    } else {
        u_xlat0.x = float(1.0);
        u_xlat0.y = float(1.0);
        u_xlat0.z = float(1.0);
        u_xlat0.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %89 %199 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %26 0 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 RelaxedPrecision 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpMemberDecorate %26 5 Offset 26 
                                                      OpMemberDecorate %26 6 RelaxedPrecision 
                                                      OpMemberDecorate %26 6 Offset 26 
                                                      OpMemberDecorate %26 7 RelaxedPrecision 
                                                      OpMemberDecorate %26 7 Offset 26 
                                                      OpMemberDecorate %26 8 RelaxedPrecision 
                                                      OpMemberDecorate %26 8 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %80 SpecId 80 
                                                      OpDecorate %89 Location 89 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 4 
                                              %24 = OpTypeArray %7 %23 
                                              %25 = OpTypeVector %6 3 
                                              %26 = OpTypeStruct %7 %7 %7 %24 %25 %25 %7 %7 %6 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %28 = OpVariable Uniform 
                                              %29 = OpTypeInt 32 1 
                                          i32 %30 = OpConstant 7 
                                              %31 = OpTypePointer Uniform %7 
                                              %35 = OpTypePointer Private %25 
                               Private f32_3* %36 = OpVariable Private 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 8 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                          i32 %69 = OpConstant 2 
                                          f32 %72 = OpConstant 3.674022E-40 
                                         bool %74 = OpConstantFalse 
                                         bool %80 = OpSpecConstantFalse 
                                          u32 %83 = OpConstant 1 
                               Private f32_3* %87 = OpVariable Private 
                                              %88 = OpTypePointer Input %25 
                                 Input f32_3* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                              Private f32_4* %118 = OpVariable Private 
                                             %119 = OpTypePointer Function %25 
                                         i32 %132 = OpConstant 5 
                                             %133 = OpTypePointer Uniform %25 
                                         i32 %142 = OpConstant 4 
                                         f32 %150 = OpConstant 3.674022E-40 
                                         f32 %152 = OpConstant 3.674022E-40 
                                Private f32* %155 = OpVariable Private 
                                         u32 %156 = OpConstant 2 
                                         f32 %159 = OpConstant 3.674022E-40 
                                             %167 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %168 = OpTypeSampledImage %167 
                                             %169 = OpTypePointer UniformConstant %168 
 UniformConstant read_only Texture3DSampled* %170 = OpVariable UniformConstant 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %193 = OpConstant 6 
                                Private f32* %198 = OpVariable Private 
                                Input f32_3* %199 = OpVariable Input 
                                             %211 = OpTypePointer Output %7 
                               Output f32_4* %212 = OpVariable Output 
                                             %221 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %120 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %21 = OpLoad %9 
                               Uniform f32_4* %32 = OpAccessChain %28 %30 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpFMul %21 %33 
                                                      OpStore %20 %34 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %28 %30 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %28 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %36 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %36 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %62 = OpSelect %59 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %70 = OpAccessChain %28 %69 %50 
                                          f32 %71 = OpLoad %70 
                                         bool %73 = OpFOrdEqual %71 %72 
                                                      OpStore %54 %73 
                                                      OpSelectionMerge %76 None 
                                                      OpBranchConditional %74 %75 %76 
                                              %75 = OpLabel 
                                         bool %77 = OpLoad %54 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %79 
                                              %78 = OpLabel 
                                                      OpBranch %79 
                                              %79 = OpLabel 
                                                      OpBranch %76 
                                              %76 = OpLabel 
                                                      OpSelectionMerge %82 None 
                                                      OpBranchConditional %80 %81 %177 
                                              %81 = OpLabel 
                                 Uniform f32* %84 = OpAccessChain %28 %69 %83 
                                          f32 %85 = OpLoad %84 
                                         bool %86 = OpFOrdEqual %85 %72 
                                                      OpStore %54 %86 
                                        f32_3 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %28 %92 %61 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %91 %95 
                                                      OpStore %87 %96 
                               Uniform f32_4* %97 = OpAccessChain %28 %92 %60 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpLoad %89 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_3 %103 = OpLoad %87 
                                       f32_3 %104 = OpFAdd %102 %103 
                                                      OpStore %87 %104 
                              Uniform f32_4* %105 = OpAccessChain %28 %92 %69 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_3 %111 = OpLoad %87 
                                       f32_3 %112 = OpFAdd %110 %111 
                                                      OpStore %87 %112 
                                       f32_3 %113 = OpLoad %87 
                              Uniform f32_4* %114 = OpAccessChain %28 %92 %92 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                                      OpStore %87 %117 
                                        bool %121 = OpLoad %54 
                                                      OpSelectionMerge %123 None 
                                                      OpBranchConditional %121 %122 %125 
                                             %122 = OpLabel 
                                       f32_3 %124 = OpLoad %87 
                                                      OpStore %120 %124 
                                                      OpBranch %123 
                                             %125 = OpLabel 
                                       f32_3 %126 = OpLoad %89 
                                                      OpStore %120 %126 
                                                      OpBranch %123 
                                             %123 = OpLabel 
                                       f32_3 %127 = OpLoad %120 
                                       f32_4 %128 = OpLoad %118 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %118 %129 
                                       f32_4 %130 = OpLoad %118 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                              Uniform f32_3* %134 = OpAccessChain %28 %132 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                                       f32_3 %137 = OpFAdd %131 %136 
                                       f32_4 %138 = OpLoad %118 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
                                                      OpStore %118 %139 
                                       f32_4 %140 = OpLoad %118 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                              Uniform f32_3* %143 = OpAccessChain %28 %142 
                                       f32_3 %144 = OpLoad %143 
                                       f32_3 %145 = OpFMul %141 %144 
                                       f32_4 %146 = OpLoad %118 
                                       f32_4 %147 = OpVectorShuffle %146 %145 0 4 5 6 
                                                      OpStore %118 %147 
                                Private f32* %148 = OpAccessChain %118 %83 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpFMul %149 %150 
                                         f32 %153 = OpFAdd %151 %152 
                                Private f32* %154 = OpAccessChain %87 %50 
                                                      OpStore %154 %153 
                                Uniform f32* %157 = OpAccessChain %28 %69 %156 
                                         f32 %158 = OpLoad %157 
                                         f32 %160 = OpFMul %158 %159 
                                         f32 %161 = OpFAdd %160 %152 
                                                      OpStore %155 %161 
                                Private f32* %162 = OpAccessChain %87 %50 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpLoad %155 
                                         f32 %165 = OpExtInst %1 40 %163 %164 
                                Private f32* %166 = OpAccessChain %118 %50 
                                                      OpStore %166 %165 
                  read_only Texture3DSampled %171 = OpLoad %170 
                                       f32_4 %172 = OpLoad %118 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 2 3 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                                      OpStore %118 %174 
                                       f32_4 %176 = OpLoad %118 
                                                      OpStore %175 %176 
                                                      OpBranch %82 
                                             %177 = OpLabel 
                                Private f32* %178 = OpAccessChain %175 %50 
                                                      OpStore %178 %72 
                                Private f32* %179 = OpAccessChain %175 %83 
                                                      OpStore %179 %72 
                                Private f32* %180 = OpAccessChain %175 %156 
                                                      OpStore %180 %72 
                                Private f32* %181 = OpAccessChain %175 %37 
                                                      OpStore %181 %72 
                                                      OpBranch %82 
                                              %82 = OpLabel 
                                       f32_4 %182 = OpLoad %175 
                              Uniform f32_4* %183 = OpAccessChain %28 %61 
                                       f32_4 %184 = OpLoad %183 
                                         f32 %185 = OpDot %182 %184 
                                Private f32* %186 = OpAccessChain %36 %50 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %36 %50 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 43 %188 %57 %72 
                                Private f32* %190 = OpAccessChain %36 %50 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                              Uniform f32_4* %194 = OpAccessChain %28 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFMul %192 %196 
                                                      OpStore %36 %197 
                                       f32_3 %200 = OpLoad %199 
                              Uniform f32_4* %201 = OpAccessChain %28 %60 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %200 %203 
                                                      OpStore %198 %204 
                                         f32 %205 = OpLoad %198 
                                         f32 %206 = OpExtInst %1 40 %205 %57 
                                                      OpStore %198 %206 
                                       f32_4 %207 = OpLoad %20 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpLoad %36 
                                       f32_3 %210 = OpFMul %208 %209 
                                                      OpStore %36 %210 
                                         f32 %213 = OpLoad %198 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpLoad %36 
                                       f32_3 %216 = OpFMul %214 %215 
                                       f32_4 %217 = OpLoad %212 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %212 %218 
                                Private f32* %219 = OpAccessChain %20 %37 
                                         f32 %220 = OpLoad %219 
                                 Output f32* %222 = OpAccessChain %212 %37 
                                                      OpStore %222 %220 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat3.x = u_xlat0.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat0.x = max(u_xlat3.x, u_xlat2);
        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
    } else {
        u_xlat0.x = float(1.0);
        u_xlat0.y = float(1.0);
        u_xlat0.z = float(1.0);
        u_xlat0.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 270
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %261 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %261 Location 261 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                                Output f32_2* %99 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                               Output f32_3* %151 = OpVariable Output 
                                             %154 = OpTypePointer Private %51 
                              Private f32_3* %155 = OpVariable Private 
                              Private f32_4* %172 = OpVariable Private 
                              Private f32_3* %178 = OpVariable Private 
                                         i32 %184 = OpConstant 4 
                                         i32 %190 = OpConstant 5 
                                         i32 %196 = OpConstant 6 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         u32 %206 = OpConstant 3 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_3 %228 = OpConstantComposite %227 %227 %227 
                                         f32 %236 = OpConstant 3.674022E-40 
                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_3 %249 = OpConstantComposite %248 %248 %248 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                               Output f32_3* %261 = OpVariable Output 
                                             %264 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore %99 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                Private f32* %156 = OpAccessChain %9 %83 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %9 %83 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                Private f32* %161 = OpAccessChain %155 %120 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %9 %120 
                                         f32 %163 = OpLoad %162 
                                Private f32* %164 = OpAccessChain %9 %120 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %163 %165 
                                Private f32* %167 = OpAccessChain %155 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFNegate %168 
                                         f32 %170 = OpFAdd %166 %169 
                                Private f32* %171 = OpAccessChain %155 %120 
                                                      OpStore %171 %170 
                                       f32_4 %173 = OpLoad %9 
                                       f32_4 %174 = OpVectorShuffle %173 %173 1 2 2 0 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 1 2 2 
                                       f32_4 %177 = OpFMul %174 %176 
                                                      OpStore %172 %177 
                              Uniform f32_4* %179 = OpAccessChain %21 %47 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpLoad %172 
                                         f32 %182 = OpDot %180 %181 
                                Private f32* %183 = OpAccessChain %178 %120 
                                                      OpStore %183 %182 
                              Uniform f32_4* %185 = OpAccessChain %21 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpLoad %172 
                                         f32 %188 = OpDot %186 %187 
                                Private f32* %189 = OpAccessChain %178 %83 
                                                      OpStore %189 %188 
                              Uniform f32_4* %191 = OpAccessChain %21 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpLoad %172 
                                         f32 %194 = OpDot %192 %193 
                                Private f32* %195 = OpAccessChain %178 %134 
                                                      OpStore %195 %194 
                              Uniform f32_4* %197 = OpAccessChain %21 %196 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpLoad %155 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                       f32_3 %203 = OpLoad %178 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %155 %204 
                                Private f32* %207 = OpAccessChain %9 %206 
                                                      OpStore %207 %205 
                              Uniform f32_4* %208 = OpAccessChain %21 %29 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %9 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %178 %120 
                                                      OpStore %212 %211 
                              Uniform f32_4* %213 = OpAccessChain %21 %24 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %9 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %178 %83 
                                                      OpStore %217 %216 
                              Uniform f32_4* %218 = OpAccessChain %21 %37 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %9 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %178 %134 
                                                      OpStore %222 %221 
                                       f32_3 %223 = OpLoad %155 
                                       f32_3 %224 = OpLoad %178 
                                       f32_3 %225 = OpFAdd %223 %224 
                                                      OpStore %155 %225 
                                       f32_3 %226 = OpLoad %155 
                                       f32_3 %229 = OpExtInst %1 40 %226 %228 
                                                      OpStore %155 %229 
                                       f32_3 %230 = OpLoad %155 
                                       f32_3 %231 = OpExtInst %1 30 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %238 = OpFMul %235 %237 
                                       f32_4 %239 = OpLoad %9 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %9 %240 
                                       f32_4 %241 = OpLoad %9 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpExtInst %1 29 %242 
                                       f32_4 %244 = OpLoad %9 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %9 %245 
                                       f32_4 %246 = OpLoad %9 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %9 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %9 %255 
                                       f32_4 %256 = OpLoad %9 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpExtInst %1 40 %257 %228 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                                      OpStore %261 %263 
                                 Output f32* %265 = OpAccessChain %87 %29 %83 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFNegate %266 
                                 Output f32* %268 = OpAccessChain %87 %29 %83 
                                                      OpStore %268 %267 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 232
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %89 %199 %214 %218 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %26 0 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 RelaxedPrecision 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpMemberDecorate %26 5 Offset 26 
                                                      OpMemberDecorate %26 6 RelaxedPrecision 
                                                      OpMemberDecorate %26 6 Offset 26 
                                                      OpMemberDecorate %26 7 RelaxedPrecision 
                                                      OpMemberDecorate %26 7 Offset 26 
                                                      OpMemberDecorate %26 8 RelaxedPrecision 
                                                      OpMemberDecorate %26 8 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %80 SpecId 80 
                                                      OpDecorate %89 Location 89 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %218 Location 218 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 4 
                                              %24 = OpTypeArray %7 %23 
                                              %25 = OpTypeVector %6 3 
                                              %26 = OpTypeStruct %7 %7 %7 %24 %25 %25 %7 %7 %6 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %28 = OpVariable Uniform 
                                              %29 = OpTypeInt 32 1 
                                          i32 %30 = OpConstant 7 
                                              %31 = OpTypePointer Uniform %7 
                                              %35 = OpTypePointer Private %25 
                               Private f32_3* %36 = OpVariable Private 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 8 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                          i32 %69 = OpConstant 2 
                                          f32 %72 = OpConstant 3.674022E-40 
                                         bool %74 = OpConstantFalse 
                                         bool %80 = OpSpecConstantFalse 
                                          u32 %83 = OpConstant 1 
                               Private f32_3* %87 = OpVariable Private 
                                              %88 = OpTypePointer Input %25 
                                 Input f32_3* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                              Private f32_4* %118 = OpVariable Private 
                                             %119 = OpTypePointer Function %25 
                                         i32 %132 = OpConstant 5 
                                             %133 = OpTypePointer Uniform %25 
                                         i32 %142 = OpConstant 4 
                                         f32 %150 = OpConstant 3.674022E-40 
                                         f32 %152 = OpConstant 3.674022E-40 
                                Private f32* %155 = OpVariable Private 
                                         u32 %156 = OpConstant 2 
                                         f32 %159 = OpConstant 3.674022E-40 
                                             %167 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %168 = OpTypeSampledImage %167 
                                             %169 = OpTypePointer UniformConstant %168 
 UniformConstant read_only Texture3DSampled* %170 = OpVariable UniformConstant 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %193 = OpConstant 6 
                                Private f32* %198 = OpVariable Private 
                                Input f32_3* %199 = OpVariable Input 
                              Private f32_3* %211 = OpVariable Private 
                                Input f32_3* %214 = OpVariable Input 
                                             %217 = OpTypePointer Output %7 
                               Output f32_4* %218 = OpVariable Output 
                                             %229 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %120 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %21 = OpLoad %9 
                               Uniform f32_4* %32 = OpAccessChain %28 %30 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpFMul %21 %33 
                                                      OpStore %20 %34 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %28 %30 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %28 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %36 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %36 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %62 = OpSelect %59 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %70 = OpAccessChain %28 %69 %50 
                                          f32 %71 = OpLoad %70 
                                         bool %73 = OpFOrdEqual %71 %72 
                                                      OpStore %54 %73 
                                                      OpSelectionMerge %76 None 
                                                      OpBranchConditional %74 %75 %76 
                                              %75 = OpLabel 
                                         bool %77 = OpLoad %54 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %79 
                                              %78 = OpLabel 
                                                      OpBranch %79 
                                              %79 = OpLabel 
                                                      OpBranch %76 
                                              %76 = OpLabel 
                                                      OpSelectionMerge %82 None 
                                                      OpBranchConditional %80 %81 %177 
                                              %81 = OpLabel 
                                 Uniform f32* %84 = OpAccessChain %28 %69 %83 
                                          f32 %85 = OpLoad %84 
                                         bool %86 = OpFOrdEqual %85 %72 
                                                      OpStore %54 %86 
                                        f32_3 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %28 %92 %61 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %91 %95 
                                                      OpStore %87 %96 
                               Uniform f32_4* %97 = OpAccessChain %28 %92 %60 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpLoad %89 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_3 %103 = OpLoad %87 
                                       f32_3 %104 = OpFAdd %102 %103 
                                                      OpStore %87 %104 
                              Uniform f32_4* %105 = OpAccessChain %28 %92 %69 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_3 %111 = OpLoad %87 
                                       f32_3 %112 = OpFAdd %110 %111 
                                                      OpStore %87 %112 
                                       f32_3 %113 = OpLoad %87 
                              Uniform f32_4* %114 = OpAccessChain %28 %92 %92 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                                      OpStore %87 %117 
                                        bool %121 = OpLoad %54 
                                                      OpSelectionMerge %123 None 
                                                      OpBranchConditional %121 %122 %125 
                                             %122 = OpLabel 
                                       f32_3 %124 = OpLoad %87 
                                                      OpStore %120 %124 
                                                      OpBranch %123 
                                             %125 = OpLabel 
                                       f32_3 %126 = OpLoad %89 
                                                      OpStore %120 %126 
                                                      OpBranch %123 
                                             %123 = OpLabel 
                                       f32_3 %127 = OpLoad %120 
                                       f32_4 %128 = OpLoad %118 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %118 %129 
                                       f32_4 %130 = OpLoad %118 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                              Uniform f32_3* %134 = OpAccessChain %28 %132 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                                       f32_3 %137 = OpFAdd %131 %136 
                                       f32_4 %138 = OpLoad %118 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
                                                      OpStore %118 %139 
                                       f32_4 %140 = OpLoad %118 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                              Uniform f32_3* %143 = OpAccessChain %28 %142 
                                       f32_3 %144 = OpLoad %143 
                                       f32_3 %145 = OpFMul %141 %144 
                                       f32_4 %146 = OpLoad %118 
                                       f32_4 %147 = OpVectorShuffle %146 %145 0 4 5 6 
                                                      OpStore %118 %147 
                                Private f32* %148 = OpAccessChain %118 %83 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpFMul %149 %150 
                                         f32 %153 = OpFAdd %151 %152 
                                Private f32* %154 = OpAccessChain %87 %50 
                                                      OpStore %154 %153 
                                Uniform f32* %157 = OpAccessChain %28 %69 %156 
                                         f32 %158 = OpLoad %157 
                                         f32 %160 = OpFMul %158 %159 
                                         f32 %161 = OpFAdd %160 %152 
                                                      OpStore %155 %161 
                                Private f32* %162 = OpAccessChain %87 %50 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpLoad %155 
                                         f32 %165 = OpExtInst %1 40 %163 %164 
                                Private f32* %166 = OpAccessChain %118 %50 
                                                      OpStore %166 %165 
                  read_only Texture3DSampled %171 = OpLoad %170 
                                       f32_4 %172 = OpLoad %118 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 2 3 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                                      OpStore %118 %174 
                                       f32_4 %176 = OpLoad %118 
                                                      OpStore %175 %176 
                                                      OpBranch %82 
                                             %177 = OpLabel 
                                Private f32* %178 = OpAccessChain %175 %50 
                                                      OpStore %178 %72 
                                Private f32* %179 = OpAccessChain %175 %83 
                                                      OpStore %179 %72 
                                Private f32* %180 = OpAccessChain %175 %156 
                                                      OpStore %180 %72 
                                Private f32* %181 = OpAccessChain %175 %37 
                                                      OpStore %181 %72 
                                                      OpBranch %82 
                                              %82 = OpLabel 
                                       f32_4 %182 = OpLoad %175 
                              Uniform f32_4* %183 = OpAccessChain %28 %61 
                                       f32_4 %184 = OpLoad %183 
                                         f32 %185 = OpDot %182 %184 
                                Private f32* %186 = OpAccessChain %36 %50 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %36 %50 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 43 %188 %57 %72 
                                Private f32* %190 = OpAccessChain %36 %50 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                              Uniform f32_4* %194 = OpAccessChain %28 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFMul %192 %196 
                                                      OpStore %36 %197 
                                       f32_3 %200 = OpLoad %199 
                              Uniform f32_4* %201 = OpAccessChain %28 %60 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %200 %203 
                                                      OpStore %198 %204 
                                         f32 %205 = OpLoad %198 
                                         f32 %206 = OpExtInst %1 40 %205 %57 
                                                      OpStore %198 %206 
                                       f32_4 %207 = OpLoad %20 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpLoad %36 
                                       f32_3 %210 = OpFMul %208 %209 
                                                      OpStore %36 %210 
                                       f32_4 %212 = OpLoad %20 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %215 = OpLoad %214 
                                       f32_3 %216 = OpFMul %213 %215 
                                                      OpStore %211 %216 
                                       f32_3 %219 = OpLoad %36 
                                         f32 %220 = OpLoad %198 
                                       f32_3 %221 = OpCompositeConstruct %220 %220 %220 
                                       f32_3 %222 = OpFMul %219 %221 
                                       f32_3 %223 = OpLoad %211 
                                       f32_3 %224 = OpFAdd %222 %223 
                                       f32_4 %225 = OpLoad %218 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %218 %226 
                                Private f32* %227 = OpAccessChain %20 %37 
                                         f32 %228 = OpLoad %227 
                                 Output f32* %230 = OpAccessChain %218 %37 
                                                      OpStore %230 %228 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
bool u_xlatb3;
float u_xlat6;
bool u_xlatb6;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat0.x) + u_xlat3.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb6)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat2.y * 0.25 + 0.75;
        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat9, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_2.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6 = min(u_xlat0.x, u_xlat6);
    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 183
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 %174 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 Location 174 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                               Output f32_4* %162 = OpVariable Output 
                               Output f32_4* %174 = OpVariable Output 
                                         f32 %175 = OpConstant 3.674022E-40 
                                       f32_4 %176 = OpConstantComposite %175 %175 %175 %175 
                                             %177 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad %162 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %162 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %162 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %162 %173 
                                                      OpStore %174 %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFNegate %179 
                                 Output f32* %181 = OpAccessChain %92 %28 %88 
                                                      OpStore %181 %180 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 326
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %72 %258 %301 %314 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 ArrayStride 25 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 RelaxedPrecision 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 RelaxedPrecision 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 RelaxedPrecision 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpMemberDecorate %27 10 RelaxedPrecision 
                                                      OpMemberDecorate %27 10 Offset 27 
                                                      OpMemberDecorate %27 11 RelaxedPrecision 
                                                      OpMemberDecorate %27 11 Offset 27 
                                                      OpMemberDecorate %27 12 RelaxedPrecision 
                                                      OpMemberDecorate %27 12 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %155 SpecId 155 
                                                      OpDecorate %236 DescriptorSet 236 
                                                      OpDecorate %236 Binding 236 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %258 Location 258 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %265 DescriptorSet 265 
                                                      OpDecorate %265 Binding 265 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 Location 301 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %314 Location 314 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %22 = OpTypeVector %6 3 
                                              %23 = OpTypeInt 32 0 
                                          u32 %24 = OpConstant 4 
                                              %25 = OpTypeArray %7 %24 
                                              %26 = OpTypeArray %7 %24 
                                              %27 = OpTypeStruct %22 %7 %7 %7 %7 %25 %7 %26 %22 %22 %7 %7 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 11 
                                              %32 = OpTypePointer Uniform %7 
                               Private f32_4* %36 = OpVariable Private 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 12 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypePointer Private %22 
                               Private f32_3* %70 = OpVariable Private 
                                              %71 = OpTypePointer Input %22 
                                 Input f32_3* %72 = OpVariable Input 
                                              %75 = OpTypePointer Uniform %22 
                               Private f32_3* %79 = OpVariable Private 
                                          i32 %80 = OpConstant 5 
                                          u32 %81 = OpConstant 2 
                                          u32 %87 = OpConstant 1 
                                          i32 %89 = OpConstant 2 
                               Private f32_3* %97 = OpVariable Private 
                                          i32 %99 = OpConstant 4 
                                         i32 %131 = OpConstant 3 
                                         f32 %141 = OpConstant 3.674022E-40 
                               Private bool* %144 = OpVariable Private 
                                         i32 %145 = OpConstant 6 
                                        bool %149 = OpConstantFalse 
                                        bool %155 = OpSpecConstantFalse 
                               Private bool* %158 = OpVariable Private 
                                         i32 %164 = OpConstant 7 
                                             %190 = OpTypePointer Function %22 
                                         i32 %200 = OpConstant 9 
                              Private f32_4* %205 = OpVariable Private 
                                         i32 %207 = OpConstant 8 
                                             %213 = OpTypePointer Private %15 
                              Private f32_2* %214 = OpVariable Private 
                                         f32 %217 = OpConstant 3.674022E-40 
                                         f32 %219 = OpConstant 3.674022E-40 
                                Private f32* %222 = OpVariable Private 
                                         f32 %225 = OpConstant 3.674022E-40 
                                             %233 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %234 = OpTypeSampledImage %233 
                                             %235 = OpTypePointer UniformConstant %234 
 UniformConstant read_only Texture3DSampled* %236 = OpVariable UniformConstant 
                              Private f32_3* %247 = OpVariable Private 
                                             %257 = OpTypePointer Input %7 
                                Input f32_4* %258 = OpVariable Input 
                                Private f32* %264 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %265 = OpVariable UniformConstant 
                                Private f32* %270 = OpVariable Private 
                                             %282 = OpTypePointer Function %6 
                                         i32 %295 = OpConstant 10 
                                Private f32* %300 = OpVariable Private 
                                Input f32_3* %301 = OpVariable Input 
                                             %313 = OpTypePointer Output %7 
                               Output f32_4* %314 = OpVariable Output 
                                             %323 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %191 = OpVariable Function 
                               Function f32* %283 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %21 = OpLoad %9 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_4 %35 = OpFMul %21 %34 
                                                      OpStore %20 %35 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %29 %31 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %29 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %36 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %36 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %62 = OpSelect %59 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                        f32_3 %73 = OpLoad %72 
                                        f32_3 %74 = OpFNegate %73 
                               Uniform f32_3* %76 = OpAccessChain %29 %60 
                                        f32_3 %77 = OpLoad %76 
                                        f32_3 %78 = OpFAdd %74 %77 
                                                      OpStore %70 %78 
                                 Uniform f32* %82 = OpAccessChain %29 %80 %60 %81 
                                          f32 %83 = OpLoad %82 
                                 Private f32* %84 = OpAccessChain %79 %50 
                                                      OpStore %84 %83 
                                 Uniform f32* %85 = OpAccessChain %29 %80 %61 %81 
                                          f32 %86 = OpLoad %85 
                                 Private f32* %88 = OpAccessChain %79 %87 
                                                      OpStore %88 %86 
                                 Uniform f32* %90 = OpAccessChain %29 %80 %89 %81 
                                          f32 %91 = OpLoad %90 
                                 Private f32* %92 = OpAccessChain %79 %81 
                                                      OpStore %92 %91 
                                        f32_3 %93 = OpLoad %70 
                                        f32_3 %94 = OpLoad %79 
                                          f32 %95 = OpDot %93 %94 
                                 Private f32* %96 = OpAccessChain %70 %50 
                                                      OpStore %96 %95 
                                        f32_3 %98 = OpLoad %72 
                              Uniform f32_4* %100 = OpAccessChain %29 %99 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFNegate %102 
                                       f32_3 %104 = OpFAdd %98 %103 
                                                      OpStore %97 %104 
                                       f32_3 %105 = OpLoad %97 
                                       f32_3 %106 = OpLoad %97 
                                         f32 %107 = OpDot %105 %106 
                                Private f32* %108 = OpAccessChain %97 %50 
                                                      OpStore %108 %107 
                                Private f32* %109 = OpAccessChain %97 %50 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpExtInst %1 31 %110 
                                Private f32* %112 = OpAccessChain %97 %50 
                                                      OpStore %112 %111 
                                Private f32* %113 = OpAccessChain %70 %50 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFNegate %114 
                                Private f32* %116 = OpAccessChain %97 %50 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFAdd %115 %117 
                                Private f32* %119 = OpAccessChain %97 %50 
                                                      OpStore %119 %118 
                                Uniform f32* %120 = OpAccessChain %29 %99 %37 
                                         f32 %121 = OpLoad %120 
                                Private f32* %122 = OpAccessChain %97 %50 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFMul %121 %123 
                                Private f32* %125 = OpAccessChain %70 %50 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFAdd %124 %126 
                                Private f32* %128 = OpAccessChain %70 %50 
                                                      OpStore %128 %127 
                                Private f32* %129 = OpAccessChain %70 %50 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %132 = OpAccessChain %29 %131 %81 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFMul %130 %133 
                                Uniform f32* %135 = OpAccessChain %29 %131 %37 
                                         f32 %136 = OpLoad %135 
                                         f32 %137 = OpFAdd %134 %136 
                                Private f32* %138 = OpAccessChain %70 %50 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %70 %50 
                                         f32 %140 = OpLoad %139 
                                         f32 %142 = OpExtInst %1 43 %140 %57 %141 
                                Private f32* %143 = OpAccessChain %70 %50 
                                                      OpStore %143 %142 
                                Uniform f32* %146 = OpAccessChain %29 %145 %50 
                                         f32 %147 = OpLoad %146 
                                        bool %148 = OpFOrdEqual %147 %141 
                                                      OpStore %144 %148 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %151 
                                             %150 = OpLabel 
                                        bool %152 = OpLoad %144 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %154 
                                             %153 = OpLabel 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                                      OpSelectionMerge %157 None 
                                                      OpBranchConditional %155 %156 %242 
                                             %156 = OpLabel 
                                Uniform f32* %159 = OpAccessChain %29 %145 %87 
                                         f32 %160 = OpLoad %159 
                                        bool %161 = OpFOrdEqual %160 %141 
                                                      OpStore %158 %161 
                                       f32_3 %162 = OpLoad %72 
                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
                              Uniform f32_4* %165 = OpAccessChain %29 %164 %61 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFMul %163 %167 
                                                      OpStore %79 %168 
                              Uniform f32_4* %169 = OpAccessChain %29 %164 %60 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpLoad %72 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 0 0 
                                       f32_3 %174 = OpFMul %171 %173 
                                       f32_3 %175 = OpLoad %79 
                                       f32_3 %176 = OpFAdd %174 %175 
                                                      OpStore %79 %176 
                              Uniform f32_4* %177 = OpAccessChain %29 %164 %89 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpLoad %72 
                                       f32_3 %181 = OpVectorShuffle %180 %180 2 2 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_3 %183 = OpLoad %79 
                                       f32_3 %184 = OpFAdd %182 %183 
                                                      OpStore %79 %184 
                                       f32_3 %185 = OpLoad %79 
                              Uniform f32_4* %186 = OpAccessChain %29 %164 %131 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFAdd %185 %188 
                                                      OpStore %79 %189 
                                        bool %192 = OpLoad %158 
                                                      OpSelectionMerge %194 None 
                                                      OpBranchConditional %192 %193 %196 
                                             %193 = OpLabel 
                                       f32_3 %195 = OpLoad %79 
                                                      OpStore %191 %195 
                                                      OpBranch %194 
                                             %196 = OpLabel 
                                       f32_3 %197 = OpLoad %72 
                                                      OpStore %191 %197 
                                                      OpBranch %194 
                                             %194 = OpLabel 
                                       f32_3 %198 = OpLoad %191 
                                                      OpStore %79 %198 
                                       f32_3 %199 = OpLoad %79 
                              Uniform f32_3* %201 = OpAccessChain %29 %200 
                                       f32_3 %202 = OpLoad %201 
                                       f32_3 %203 = OpFNegate %202 
                                       f32_3 %204 = OpFAdd %199 %203 
                                                      OpStore %79 %204 
                                       f32_3 %206 = OpLoad %79 
                              Uniform f32_3* %208 = OpAccessChain %29 %207 
                                       f32_3 %209 = OpLoad %208 
                                       f32_3 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %205 
                                       f32_4 %212 = OpVectorShuffle %211 %210 0 4 5 6 
                                                      OpStore %205 %212 
                                Private f32* %215 = OpAccessChain %205 %87 
                                         f32 %216 = OpLoad %215 
                                         f32 %218 = OpFMul %216 %217 
                                         f32 %220 = OpFAdd %218 %219 
                                Private f32* %221 = OpAccessChain %214 %50 
                                                      OpStore %221 %220 
                                Uniform f32* %223 = OpAccessChain %29 %145 %81 
                                         f32 %224 = OpLoad %223 
                                         f32 %226 = OpFMul %224 %225 
                                         f32 %227 = OpFAdd %226 %219 
                                                      OpStore %222 %227 
                                         f32 %228 = OpLoad %222 
                                Private f32* %229 = OpAccessChain %214 %50 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpExtInst %1 40 %228 %230 
                                Private f32* %232 = OpAccessChain %205 %50 
                                                      OpStore %232 %231 
                  read_only Texture3DSampled %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %205 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 2 3 
                                       f32_4 %240 = OpImageSampleImplicitLod %237 %239 
                                                      OpStore %205 %240 
                                       f32_4 %241 = OpLoad %205 
                                                      OpStore %36 %241 
                                                      OpBranch %157 
                                             %242 = OpLabel 
                                Private f32* %243 = OpAccessChain %36 %50 
                                                      OpStore %243 %141 
                                Private f32* %244 = OpAccessChain %36 %87 
                                                      OpStore %244 %141 
                                Private f32* %245 = OpAccessChain %36 %81 
                                                      OpStore %245 %141 
                                Private f32* %246 = OpAccessChain %36 %37 
                                                      OpStore %246 %141 
                                                      OpBranch %157 
                                             %157 = OpLabel 
                                       f32_4 %248 = OpLoad %36 
                              Uniform f32_4* %249 = OpAccessChain %29 %89 
                                       f32_4 %250 = OpLoad %249 
                                         f32 %251 = OpDot %248 %250 
                                Private f32* %252 = OpAccessChain %247 %50 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %247 %50 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 43 %254 %57 %141 
                                Private f32* %256 = OpAccessChain %247 %50 
                                                      OpStore %256 %255 
                                       f32_4 %259 = OpLoad %258 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_4 %261 = OpLoad %258 
                                       f32_2 %262 = OpVectorShuffle %261 %261 3 3 
                                       f32_2 %263 = OpFDiv %260 %262 
                                                      OpStore %214 %263 
                  read_only Texture2DSampled %266 = OpLoad %265 
                                       f32_2 %267 = OpLoad %214 
                                       f32_4 %268 = OpImageSampleImplicitLod %266 %267 
                                         f32 %269 = OpCompositeExtract %268 0 
                                                      OpStore %264 %269 
                                Private f32* %271 = OpAccessChain %70 %50 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpLoad %264 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %270 %274 
                                         f32 %275 = OpLoad %270 
                                         f32 %276 = OpExtInst %1 43 %275 %57 %141 
                                                      OpStore %270 %276 
                                         f32 %277 = OpLoad %270 
                                Private f32* %278 = OpAccessChain %247 %50 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpExtInst %1 37 %277 %279 
                                Private f32* %281 = OpAccessChain %247 %50 
                                                      OpStore %281 %280 
                                        bool %284 = OpLoad %144 
                                                      OpSelectionMerge %286 None 
                                                      OpBranchConditional %284 %285 %289 
                                             %285 = OpLabel 
                                Private f32* %287 = OpAccessChain %247 %50 
                                         f32 %288 = OpLoad %287 
                                                      OpStore %283 %288 
                                                      OpBranch %286 
                                             %289 = OpLabel 
                                         f32 %290 = OpLoad %270 
                                                      OpStore %283 %290 
                                                      OpBranch %286 
                                             %286 = OpLabel 
                                         f32 %291 = OpLoad %283 
                                Private f32* %292 = OpAccessChain %247 %50 
                                                      OpStore %292 %291 
                                       f32_3 %293 = OpLoad %247 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 0 0 
                              Uniform f32_4* %296 = OpAccessChain %29 %295 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFMul %294 %298 
                                                      OpStore %247 %299 
                                       f32_3 %302 = OpLoad %301 
                              Uniform f32_4* %303 = OpAccessChain %29 %61 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                         f32 %306 = OpDot %302 %305 
                                                      OpStore %300 %306 
                                         f32 %307 = OpLoad %300 
                                         f32 %308 = OpExtInst %1 40 %307 %57 
                                                      OpStore %300 %308 
                                       f32_4 %309 = OpLoad %20 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %311 = OpLoad %247 
                                       f32_3 %312 = OpFMul %310 %311 
                                                      OpStore %247 %312 
                                         f32 %315 = OpLoad %300 
                                       f32_3 %316 = OpCompositeConstruct %315 %315 %315 
                                       f32_3 %317 = OpLoad %247 
                                       f32_3 %318 = OpFMul %316 %317 
                                       f32_4 %319 = OpLoad %314 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %314 %320 
                                Private f32* %321 = OpAccessChain %20 %37 
                                         f32 %322 = OpLoad %321 
                                 Output f32* %324 = OpAccessChain %314 %37 
                                                      OpStore %324 %322 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(unity_SHBr, u_xlat2);
    u_xlat1.y = dot(unity_SHBg, u_xlat2);
    u_xlat1.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat8;
float u_xlat12;
bool u_xlatb12;
float u_xlat18;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = (-u_xlat0.x) + u_xlat6.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb12)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat2.y * 0.25 + 0.75;
        u_xlat18 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat18, u_xlat12);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_2.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12 = min(u_xlat0.x, u_xlat12);
    u_xlat0.x = (u_xlatb6) ? u_xlat12 : u_xlat0.x;
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb6)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat2.y * 0.25;
        u_xlat8 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat6.x = max(u_xlat6.x, u_xlat8);
        u_xlat2.x = min(u_xlat3.x, u_xlat6.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = vs_TEXCOORD1.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat5);
        u_xlat3.y = dot(u_xlat10_4, u_xlat5);
        u_xlat3.z = dot(u_xlat10_2, u_xlat5);
    } else {
        u_xlat2.xyz = vs_TEXCOORD1.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xzw * u_xlat6.xxx + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 238
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %114 %152 %192 %217 %229 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %155 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %217 Location 217 
                                                      OpDecorate %229 Location 229 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 5 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 7 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                               Output f32_2* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 8 
                                             %113 = OpTypePointer Input %51 
                                Input f32_3* %114 = OpVariable Input 
                                         i32 %116 = OpConstant 6 
                                         u32 %121 = OpConstant 0 
                                             %122 = OpTypePointer Private %6 
                                         u32 %135 = OpConstant 2 
                                Private f32* %137 = OpVariable Private 
                               Output f32_3* %152 = OpVariable Output 
                                Private f32* %155 = OpVariable Private 
                              Private f32_4* %169 = OpVariable Private 
                                             %175 = OpTypePointer Private %51 
                              Private f32_3* %176 = OpVariable Private 
                               Output f32_3* %192 = OpVariable Output 
                                         i32 %193 = OpConstant 4 
                                             %204 = OpTypePointer Uniform %6 
                              Private f32_4* %209 = OpVariable Private 
                                         f32 %212 = OpConstant 3.674022E-40 
                                       f32_3 %213 = OpConstantComposite %212 %212 %212 
                               Output f32_4* %217 = OpVariable Output 
                               Output f32_4* %229 = OpVariable Output 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_4 %231 = OpConstantComposite %230 %230 %230 %230 
                                             %232 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore %100 %112 
                                       f32_3 %115 = OpLoad %114 
                              Uniform f32_4* %117 = OpAccessChain %21 %116 %29 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %115 %119 
                                Private f32* %123 = OpAccessChain %45 %121 
                                                      OpStore %123 %120 
                                       f32_3 %124 = OpLoad %114 
                              Uniform f32_4* %125 = OpAccessChain %21 %116 %24 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %129 = OpAccessChain %45 %90 
                                                      OpStore %129 %128 
                                       f32_3 %130 = OpLoad %114 
                              Uniform f32_4* %131 = OpAccessChain %21 %116 %37 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %130 %133 
                                Private f32* %136 = OpAccessChain %45 %135 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %45 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_4 %140 = OpLoad %45 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                         f32 %142 = OpDot %139 %141 
                                                      OpStore %137 %142 
                                         f32 %143 = OpLoad %137 
                                         f32 %144 = OpExtInst %1 32 %143 
                                                      OpStore %137 %144 
                                         f32 %145 = OpLoad %137 
                                       f32_3 %146 = OpCompositeConstruct %145 %145 %145 
                                       f32_4 %147 = OpLoad %45 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %45 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %45 %151 
                                       f32_4 %153 = OpLoad %45 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore %152 %154 
                                Private f32* %156 = OpAccessChain %45 %90 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %45 %90 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                                      OpStore %155 %160 
                                Private f32* %161 = OpAccessChain %45 %121 
                                         f32 %162 = OpLoad %161 
                                Private f32* %163 = OpAccessChain %45 %121 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFMul %162 %164 
                                         f32 %166 = OpLoad %155 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %165 %167 
                                                      OpStore %155 %168 
                                       f32_4 %170 = OpLoad %45 
                                       f32_4 %171 = OpVectorShuffle %170 %170 1 2 2 0 
                                       f32_4 %172 = OpLoad %45 
                                       f32_4 %173 = OpVectorShuffle %172 %172 0 1 2 2 
                                       f32_4 %174 = OpFMul %171 %173 
                                                      OpStore %169 %174 
                              Uniform f32_4* %177 = OpAccessChain %21 %24 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpLoad %169 
                                         f32 %180 = OpDot %178 %179 
                                Private f32* %181 = OpAccessChain %176 %121 
                                                      OpStore %181 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %37 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %169 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %176 %90 
                                                      OpStore %186 %185 
                              Uniform f32_4* %187 = OpAccessChain %21 %47 
                                       f32_4 %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %169 
                                         f32 %190 = OpDot %188 %189 
                                Private f32* %191 = OpAccessChain %176 %135 
                                                      OpStore %191 %190 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpLoad %155 
                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %176 
                                       f32_3 %201 = OpFAdd %199 %200 
                                                      OpStore %192 %201 
                                Private f32* %202 = OpAccessChain %9 %90 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %21 %29 %121 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                Private f32* %208 = OpAccessChain %9 %90 
                                                      OpStore %208 %207 
                                       f32_4 %210 = OpLoad %9 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 3 1 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %209 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 1 5 6 
                                                      OpStore %209 %216 
                                       f32_4 %218 = OpLoad %9 
                                       f32_2 %219 = OpVectorShuffle %218 %218 2 3 
                                       f32_4 %220 = OpLoad %217 
                                       f32_4 %221 = OpVectorShuffle %220 %219 0 1 4 5 
                                                      OpStore %217 %221 
                                       f32_4 %222 = OpLoad %209 
                                       f32_2 %223 = OpVectorShuffle %222 %222 2 2 
                                       f32_4 %224 = OpLoad %209 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 3 
                                       f32_2 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad %217 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %217 %228 
                                                      OpStore %229 %231 
                                 Output f32* %233 = OpAccessChain %94 %29 %90 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                 Output f32* %236 = OpAccessChain %94 %29 %90 
                                                      OpStore %236 %235 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 531
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %71 %282 %436 %476 %517 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 ArrayStride 25 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 RelaxedPrecision 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 RelaxedPrecision 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 RelaxedPrecision 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 RelaxedPrecision 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 RelaxedPrecision 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 RelaxedPrecision 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpMemberDecorate %27 10 Offset 27 
                                                      OpMemberDecorate %27 11 Offset 27 
                                                      OpMemberDecorate %27 12 Offset 27 
                                                      OpMemberDecorate %27 13 RelaxedPrecision 
                                                      OpMemberDecorate %27 13 Offset 27 
                                                      OpMemberDecorate %27 14 RelaxedPrecision 
                                                      OpMemberDecorate %27 14 Offset 27 
                                                      OpMemberDecorate %27 15 RelaxedPrecision 
                                                      OpMemberDecorate %27 15 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %71 Location 71 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %159 SpecId 159 
                                                      OpDecorate %259 DescriptorSet 259 
                                                      OpDecorate %259 Binding 259 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %289 DescriptorSet 289 
                                                      OpDecorate %289 Binding 289 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %476 Location 476 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %517 Location 517 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %22 = OpTypeVector %6 3 
                                              %23 = OpTypeInt 32 0 
                                          u32 %24 = OpConstant 4 
                                              %25 = OpTypeArray %7 %24 
                                              %26 = OpTypeArray %7 %24 
                                              %27 = OpTypeStruct %22 %7 %7 %7 %7 %7 %7 %7 %25 %7 %26 %22 %22 %7 %7 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 14 
                                              %32 = OpTypePointer Uniform %7 
                               Private f32_4* %36 = OpVariable Private 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 15 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                               Private f32_4* %69 = OpVariable Private 
                                              %70 = OpTypePointer Input %22 
                                 Input f32_3* %71 = OpVariable Input 
                                              %74 = OpTypePointer Uniform %22 
                               Private f32_4* %80 = OpVariable Private 
                                          i32 %81 = OpConstant 8 
                                          u32 %82 = OpConstant 2 
                                          u32 %88 = OpConstant 1 
                                          i32 %90 = OpConstant 2 
                                             %100 = OpTypePointer Private %22 
                              Private f32_3* %101 = OpVariable Private 
                                         i32 %103 = OpConstant 7 
                                         i32 %135 = OpConstant 6 
                                         f32 %145 = OpConstant 3.674022E-40 
                               Private bool* %148 = OpVariable Private 
                                         i32 %149 = OpConstant 9 
                                        bool %153 = OpConstantFalse 
                                        bool %159 = OpSpecConstantFalse 
                               Private bool* %162 = OpVariable Private 
                                         i32 %168 = OpConstant 10 
                                         i32 %199 = OpConstant 3 
                                             %206 = OpTypePointer Function %22 
                                         i32 %220 = OpConstant 12 
                              Private f32_4* %227 = OpVariable Private 
                                         i32 %230 = OpConstant 11 
                                             %236 = OpTypePointer Private %15 
                              Private f32_2* %237 = OpVariable Private 
                                         f32 %240 = OpConstant 3.674022E-40 
                                         f32 %242 = OpConstant 3.674022E-40 
                                Private f32* %245 = OpVariable Private 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %256 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %257 = OpTypeSampledImage %256 
                                             %258 = OpTypePointer UniformConstant %257 
 UniformConstant read_only Texture3DSampled* %259 = OpVariable UniformConstant 
                              Private f32_3* %270 = OpVariable Private 
                                         i32 %272 = OpConstant 5 
                                             %281 = OpTypePointer Input %7 
                                Input f32_4* %282 = OpVariable Input 
                                Private f32* %288 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %289 = OpVariable UniformConstant 
                                Private f32* %294 = OpVariable Private 
                                             %306 = OpTypePointer Function %6 
                                         i32 %319 = OpConstant 13 
                                Private f32* %394 = OpVariable Private 
                                       f32_3 %417 = OpConstantComposite %240 %57 %57 
                                       f32_3 %427 = OpConstantComposite %248 %57 %57 
                              Private f32_4* %435 = OpVariable Private 
                                Input f32_3* %436 = OpVariable Input 
                              Private f32_3* %441 = OpVariable Private 
                                         i32 %469 = OpConstant 4 
                                Input f32_3* %476 = OpVariable Input 
                                       f32_3 %480 = OpConstantComposite %57 %57 %57 
                              Private f32_3* %482 = OpVariable Private 
                                         f32 %486 = OpConstant 3.674022E-40 
                                       f32_3 %487 = OpConstantComposite %486 %486 %486 
                                         f32 %492 = OpConstant 3.674022E-40 
                                       f32_3 %493 = OpConstantComposite %492 %492 %492 
                                         f32 %495 = OpConstant 3.674022E-40 
                                       f32_3 %496 = OpConstantComposite %495 %495 %495 
                                Private f32* %500 = OpVariable Private 
                                             %516 = OpTypePointer Output %7 
                               Output f32_4* %517 = OpVariable Output 
                                             %528 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %207 = OpVariable Function 
                               Function f32* %307 = OpVariable Function 
                             Function f32_3* %361 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %21 = OpLoad %9 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_4 %35 = OpFMul %21 %34 
                                                      OpStore %20 %35 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %29 %31 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %29 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %36 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %36 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %62 = OpSelect %59 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                        f32_3 %72 = OpLoad %71 
                                        f32_3 %73 = OpFNegate %72 
                               Uniform f32_3* %75 = OpAccessChain %29 %60 
                                        f32_3 %76 = OpLoad %75 
                                        f32_3 %77 = OpFAdd %73 %76 
                                        f32_4 %78 = OpLoad %69 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %69 %79 
                                 Uniform f32* %83 = OpAccessChain %29 %81 %60 %82 
                                          f32 %84 = OpLoad %83 
                                 Private f32* %85 = OpAccessChain %80 %50 
                                                      OpStore %85 %84 
                                 Uniform f32* %86 = OpAccessChain %29 %81 %61 %82 
                                          f32 %87 = OpLoad %86 
                                 Private f32* %89 = OpAccessChain %80 %88 
                                                      OpStore %89 %87 
                                 Uniform f32* %91 = OpAccessChain %29 %81 %90 %82 
                                          f32 %92 = OpLoad %91 
                                 Private f32* %93 = OpAccessChain %80 %82 
                                                      OpStore %93 %92 
                                        f32_4 %94 = OpLoad %69 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %80 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %95 %97 
                                 Private f32* %99 = OpAccessChain %69 %50 
                                                      OpStore %99 %98 
                                       f32_3 %102 = OpLoad %71 
                              Uniform f32_4* %104 = OpAccessChain %29 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFNegate %106 
                                       f32_3 %108 = OpFAdd %102 %107 
                                                      OpStore %101 %108 
                                       f32_3 %109 = OpLoad %101 
                                       f32_3 %110 = OpLoad %101 
                                         f32 %111 = OpDot %109 %110 
                                Private f32* %112 = OpAccessChain %101 %50 
                                                      OpStore %112 %111 
                                Private f32* %113 = OpAccessChain %101 %50 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpExtInst %1 31 %114 
                                Private f32* %116 = OpAccessChain %101 %50 
                                                      OpStore %116 %115 
                                Private f32* %117 = OpAccessChain %69 %50 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Private f32* %120 = OpAccessChain %101 %50 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %119 %121 
                                Private f32* %123 = OpAccessChain %101 %50 
                                                      OpStore %123 %122 
                                Uniform f32* %124 = OpAccessChain %29 %103 %37 
                                         f32 %125 = OpLoad %124 
                                Private f32* %126 = OpAccessChain %101 %50 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFMul %125 %127 
                                Private f32* %129 = OpAccessChain %69 %50 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %128 %130 
                                Private f32* %132 = OpAccessChain %69 %50 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %69 %50 
                                         f32 %134 = OpLoad %133 
                                Uniform f32* %136 = OpAccessChain %29 %135 %82 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFMul %134 %137 
                                Uniform f32* %139 = OpAccessChain %29 %135 %37 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpFAdd %138 %140 
                                Private f32* %142 = OpAccessChain %69 %50 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %69 %50 
                                         f32 %144 = OpLoad %143 
                                         f32 %146 = OpExtInst %1 43 %144 %57 %145 
                                Private f32* %147 = OpAccessChain %69 %50 
                                                      OpStore %147 %146 
                                Uniform f32* %150 = OpAccessChain %29 %149 %50 
                                         f32 %151 = OpLoad %150 
                                        bool %152 = OpFOrdEqual %151 %145 
                                                      OpStore %148 %152 
                                                      OpSelectionMerge %155 None 
                                                      OpBranchConditional %153 %154 %155 
                                             %154 = OpLabel 
                                        bool %156 = OpLoad %148 
                                                      OpSelectionMerge %158 None 
                                                      OpBranchConditional %156 %157 %158 
                                             %157 = OpLabel 
                                                      OpBranch %158 
                                             %158 = OpLabel 
                                                      OpBranch %155 
                                             %155 = OpLabel 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %265 
                                             %160 = OpLabel 
                                Uniform f32* %163 = OpAccessChain %29 %149 %88 
                                         f32 %164 = OpLoad %163 
                                        bool %165 = OpFOrdEqual %164 %145 
                                                      OpStore %162 %165 
                                       f32_3 %166 = OpLoad %71 
                                       f32_3 %167 = OpVectorShuffle %166 %166 1 1 1 
                              Uniform f32_4* %169 = OpAccessChain %29 %168 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFMul %167 %171 
                                       f32_4 %173 = OpLoad %80 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %80 %174 
                              Uniform f32_4* %175 = OpAccessChain %29 %168 %60 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpLoad %71 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 0 0 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %80 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFAdd %180 %182 
                                       f32_4 %184 = OpLoad %80 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                      OpStore %80 %185 
                              Uniform f32_4* %186 = OpAccessChain %29 %168 %90 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpLoad %71 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 2 2 
                                       f32_3 %191 = OpFMul %188 %190 
                                       f32_4 %192 = OpLoad %80 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFAdd %191 %193 
                                       f32_4 %195 = OpLoad %80 
                                       f32_4 %196 = OpVectorShuffle %195 %194 4 5 6 3 
                                                      OpStore %80 %196 
                                       f32_4 %197 = OpLoad %80 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                              Uniform f32_4* %200 = OpAccessChain %29 %168 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %198 %202 
                                       f32_4 %204 = OpLoad %80 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %80 %205 
                                        bool %208 = OpLoad %162 
                                                      OpSelectionMerge %210 None 
                                                      OpBranchConditional %208 %209 %213 
                                             %209 = OpLabel 
                                       f32_4 %211 = OpLoad %80 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                                      OpStore %207 %212 
                                                      OpBranch %210 
                                             %213 = OpLabel 
                                       f32_3 %214 = OpLoad %71 
                                                      OpStore %207 %214 
                                                      OpBranch %210 
                                             %210 = OpLabel 
                                       f32_3 %215 = OpLoad %207 
                                       f32_4 %216 = OpLoad %80 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %80 %217 
                                       f32_4 %218 = OpLoad %80 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                              Uniform f32_3* %221 = OpAccessChain %29 %220 
                                       f32_3 %222 = OpLoad %221 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpFAdd %219 %223 
                                       f32_4 %225 = OpLoad %80 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %80 %226 
                                       f32_4 %228 = OpLoad %80 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                              Uniform f32_3* %231 = OpAccessChain %29 %230 
                                       f32_3 %232 = OpLoad %231 
                                       f32_3 %233 = OpFMul %229 %232 
                                       f32_4 %234 = OpLoad %227 
                                       f32_4 %235 = OpVectorShuffle %234 %233 0 4 5 6 
                                                      OpStore %227 %235 
                                Private f32* %238 = OpAccessChain %227 %88 
                                         f32 %239 = OpLoad %238 
                                         f32 %241 = OpFMul %239 %240 
                                         f32 %243 = OpFAdd %241 %242 
                                Private f32* %244 = OpAccessChain %237 %50 
                                                      OpStore %244 %243 
                                Uniform f32* %246 = OpAccessChain %29 %149 %82 
                                         f32 %247 = OpLoad %246 
                                         f32 %249 = OpFMul %247 %248 
                                         f32 %250 = OpFAdd %249 %242 
                                                      OpStore %245 %250 
                                         f32 %251 = OpLoad %245 
                                Private f32* %252 = OpAccessChain %237 %50 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpExtInst %1 40 %251 %253 
                                Private f32* %255 = OpAccessChain %227 %50 
                                                      OpStore %255 %254 
                  read_only Texture3DSampled %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %227 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 2 3 
                                       f32_4 %263 = OpImageSampleImplicitLod %260 %262 
                                                      OpStore %227 %263 
                                       f32_4 %264 = OpLoad %227 
                                                      OpStore %36 %264 
                                                      OpBranch %161 
                                             %265 = OpLabel 
                                Private f32* %266 = OpAccessChain %36 %50 
                                                      OpStore %266 %145 
                                Private f32* %267 = OpAccessChain %36 %88 
                                                      OpStore %267 %145 
                                Private f32* %268 = OpAccessChain %36 %82 
                                                      OpStore %268 %145 
                                Private f32* %269 = OpAccessChain %36 %37 
                                                      OpStore %269 %145 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                       f32_4 %271 = OpLoad %36 
                              Uniform f32_4* %273 = OpAccessChain %29 %272 
                                       f32_4 %274 = OpLoad %273 
                                         f32 %275 = OpDot %271 %274 
                                Private f32* %276 = OpAccessChain %270 %50 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %270 %50 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpExtInst %1 43 %278 %57 %145 
                                Private f32* %280 = OpAccessChain %270 %50 
                                                      OpStore %280 %279 
                                       f32_4 %283 = OpLoad %282 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_4 %285 = OpLoad %282 
                                       f32_2 %286 = OpVectorShuffle %285 %285 3 3 
                                       f32_2 %287 = OpFDiv %284 %286 
                                                      OpStore %237 %287 
                  read_only Texture2DSampled %290 = OpLoad %289 
                                       f32_2 %291 = OpLoad %237 
                                       f32_4 %292 = OpImageSampleImplicitLod %290 %291 
                                         f32 %293 = OpCompositeExtract %292 0 
                                                      OpStore %288 %293 
                                Private f32* %295 = OpAccessChain %69 %50 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpLoad %288 
                                         f32 %298 = OpFAdd %296 %297 
                                                      OpStore %294 %298 
                                         f32 %299 = OpLoad %294 
                                         f32 %300 = OpExtInst %1 43 %299 %57 %145 
                                                      OpStore %294 %300 
                                         f32 %301 = OpLoad %294 
                                Private f32* %302 = OpAccessChain %270 %50 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpExtInst %1 37 %301 %303 
                                Private f32* %305 = OpAccessChain %270 %50 
                                                      OpStore %305 %304 
                                        bool %308 = OpLoad %148 
                                                      OpSelectionMerge %310 None 
                                                      OpBranchConditional %308 %309 %313 
                                             %309 = OpLabel 
                                Private f32* %311 = OpAccessChain %270 %50 
                                         f32 %312 = OpLoad %311 
                                                      OpStore %307 %312 
                                                      OpBranch %310 
                                             %313 = OpLabel 
                                         f32 %314 = OpLoad %294 
                                                      OpStore %307 %314 
                                                      OpBranch %310 
                                             %310 = OpLabel 
                                         f32 %315 = OpLoad %307 
                                Private f32* %316 = OpAccessChain %270 %50 
                                                      OpStore %316 %315 
                                       f32_3 %317 = OpLoad %270 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 0 0 
                              Uniform f32_4* %320 = OpAccessChain %29 %319 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpFMul %318 %322 
                                                      OpStore %270 %323 
                                                      OpSelectionMerge %325 None 
                                                      OpBranchConditional %153 %324 %325 
                                             %324 = OpLabel 
                                        bool %326 = OpLoad %148 
                                                      OpSelectionMerge %328 None 
                                                      OpBranchConditional %326 %327 %328 
                                             %327 = OpLabel 
                                                      OpBranch %328 
                                             %328 = OpLabel 
                                                      OpBranch %325 
                                             %325 = OpLabel 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %159 %329 %454 
                                             %329 = OpLabel 
                                Uniform f32* %331 = OpAccessChain %29 %149 %88 
                                         f32 %332 = OpLoad %331 
                                        bool %333 = OpFOrdEqual %332 %145 
                                                      OpStore %54 %333 
                                       f32_3 %334 = OpLoad %71 
                                       f32_3 %335 = OpVectorShuffle %334 %334 1 1 1 
                              Uniform f32_4* %336 = OpAccessChain %29 %168 %61 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFMul %335 %338 
                                                      OpStore %101 %339 
                              Uniform f32_4* %340 = OpAccessChain %29 %168 %60 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpLoad %71 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 0 0 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_3 %346 = OpLoad %101 
                                       f32_3 %347 = OpFAdd %345 %346 
                                                      OpStore %101 %347 
                              Uniform f32_4* %348 = OpAccessChain %29 %168 %90 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpLoad %71 
                                       f32_3 %352 = OpVectorShuffle %351 %351 2 2 2 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_3 %354 = OpLoad %101 
                                       f32_3 %355 = OpFAdd %353 %354 
                                                      OpStore %101 %355 
                                       f32_3 %356 = OpLoad %101 
                              Uniform f32_4* %357 = OpAccessChain %29 %168 %199 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFAdd %356 %359 
                                                      OpStore %101 %360 
                                        bool %362 = OpLoad %54 
                                                      OpSelectionMerge %364 None 
                                                      OpBranchConditional %362 %363 %366 
                                             %363 = OpLabel 
                                       f32_3 %365 = OpLoad %101 
                                                      OpStore %361 %365 
                                                      OpBranch %364 
                                             %366 = OpLabel 
                                       f32_3 %367 = OpLoad %71 
                                                      OpStore %361 %367 
                                                      OpBranch %364 
                                             %364 = OpLabel 
                                       f32_3 %368 = OpLoad %361 
                                       f32_4 %369 = OpLoad %69 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %69 %370 
                                       f32_4 %371 = OpLoad %69 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                              Uniform f32_3* %373 = OpAccessChain %29 %220 
                                       f32_3 %374 = OpLoad %373 
                                       f32_3 %375 = OpFNegate %374 
                                       f32_3 %376 = OpFAdd %372 %375 
                                       f32_4 %377 = OpLoad %69 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %69 %378 
                                       f32_4 %379 = OpLoad %69 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                              Uniform f32_3* %381 = OpAccessChain %29 %230 
                                       f32_3 %382 = OpLoad %381 
                                       f32_3 %383 = OpFMul %380 %382 
                                       f32_4 %384 = OpLoad %69 
                                       f32_4 %385 = OpVectorShuffle %384 %383 0 4 5 6 
                                                      OpStore %69 %385 
                                Private f32* %386 = OpAccessChain %69 %88 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %387 %240 
                                Private f32* %389 = OpAccessChain %101 %50 
                                                      OpStore %389 %388 
                                Uniform f32* %390 = OpAccessChain %29 %149 %82 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFMul %391 %248 
                                Private f32* %393 = OpAccessChain %80 %50 
                                                      OpStore %393 %392 
                                Uniform f32* %395 = OpAccessChain %29 %149 %82 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFNegate %396 
                                         f32 %398 = OpFMul %397 %248 
                                         f32 %399 = OpFAdd %398 %240 
                                                      OpStore %394 %399 
                                Private f32* %400 = OpAccessChain %101 %50 
                                         f32 %401 = OpLoad %400 
                                Private f32* %402 = OpAccessChain %80 %50 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpExtInst %1 40 %401 %403 
                                Private f32* %405 = OpAccessChain %101 %50 
                                                      OpStore %405 %404 
                                         f32 %406 = OpLoad %394 
                                Private f32* %407 = OpAccessChain %101 %50 
                                         f32 %408 = OpLoad %407 
                                         f32 %409 = OpExtInst %1 37 %406 %408 
                                Private f32* %410 = OpAccessChain %69 %50 
                                                      OpStore %410 %409 
                  read_only Texture3DSampled %411 = OpLoad %259 
                                       f32_4 %412 = OpLoad %69 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 2 3 
                                       f32_4 %414 = OpImageSampleImplicitLod %411 %413 
                                                      OpStore %227 %414 
                                       f32_4 %415 = OpLoad %69 
                                       f32_3 %416 = OpVectorShuffle %415 %415 0 2 3 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %80 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %80 %420 
                  read_only Texture3DSampled %421 = OpLoad %259 
                                       f32_4 %422 = OpLoad %80 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_4 %424 = OpImageSampleImplicitLod %421 %423 
                                                      OpStore %80 %424 
                                       f32_4 %425 = OpLoad %69 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 2 3 
                                       f32_3 %428 = OpFAdd %426 %427 
                                       f32_4 %429 = OpLoad %69 
                                       f32_4 %430 = OpVectorShuffle %429 %428 4 5 6 3 
                                                      OpStore %69 %430 
                  read_only Texture3DSampled %431 = OpLoad %259 
                                       f32_4 %432 = OpLoad %69 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                       f32_4 %434 = OpImageSampleImplicitLod %431 %433 
                                                      OpStore %69 %434 
                                       f32_3 %437 = OpLoad %436 
                                       f32_4 %438 = OpLoad %435 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %435 %439 
                                Private f32* %440 = OpAccessChain %435 %37 
                                                      OpStore %440 %145 
                                       f32_4 %442 = OpLoad %227 
                                       f32_4 %443 = OpLoad %435 
                                         f32 %444 = OpDot %442 %443 
                                Private f32* %445 = OpAccessChain %441 %50 
                                                      OpStore %445 %444 
                                       f32_4 %446 = OpLoad %80 
                                       f32_4 %447 = OpLoad %435 
                                         f32 %448 = OpDot %446 %447 
                                Private f32* %449 = OpAccessChain %441 %88 
                                                      OpStore %449 %448 
                                       f32_4 %450 = OpLoad %69 
                                       f32_4 %451 = OpLoad %435 
                                         f32 %452 = OpDot %450 %451 
                                Private f32* %453 = OpAccessChain %441 %82 
                                                      OpStore %453 %452 
                                                      OpBranch %330 
                                             %454 = OpLabel 
                                       f32_3 %455 = OpLoad %436 
                                       f32_4 %456 = OpLoad %69 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 6 3 
                                                      OpStore %69 %457 
                                Private f32* %458 = OpAccessChain %69 %37 
                                                      OpStore %458 %145 
                              Uniform f32_4* %459 = OpAccessChain %29 %90 
                                       f32_4 %460 = OpLoad %459 
                                       f32_4 %461 = OpLoad %69 
                                         f32 %462 = OpDot %460 %461 
                                Private f32* %463 = OpAccessChain %441 %50 
                                                      OpStore %463 %462 
                              Uniform f32_4* %464 = OpAccessChain %29 %199 
                                       f32_4 %465 = OpLoad %464 
                                       f32_4 %466 = OpLoad %69 
                                         f32 %467 = OpDot %465 %466 
                                Private f32* %468 = OpAccessChain %441 %88 
                                                      OpStore %468 %467 
                              Uniform f32_4* %470 = OpAccessChain %29 %469 
                                       f32_4 %471 = OpLoad %470 
                                       f32_4 %472 = OpLoad %69 
                                         f32 %473 = OpDot %471 %472 
                                Private f32* %474 = OpAccessChain %441 %82 
                                                      OpStore %474 %473 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                       f32_3 %475 = OpLoad %441 
                                       f32_3 %477 = OpLoad %476 
                                       f32_3 %478 = OpFAdd %475 %477 
                                                      OpStore %441 %478 
                                       f32_3 %479 = OpLoad %441 
                                       f32_3 %481 = OpExtInst %1 40 %479 %480 
                                                      OpStore %441 %481 
                                       f32_3 %483 = OpLoad %441 
                                       f32_3 %484 = OpExtInst %1 30 %483 
                                                      OpStore %482 %484 
                                       f32_3 %485 = OpLoad %482 
                                       f32_3 %488 = OpFMul %485 %487 
                                                      OpStore %482 %488 
                                       f32_3 %489 = OpLoad %482 
                                       f32_3 %490 = OpExtInst %1 29 %489 
                                                      OpStore %482 %490 
                                       f32_3 %491 = OpLoad %482 
                                       f32_3 %494 = OpFMul %491 %493 
                                       f32_3 %497 = OpFAdd %494 %496 
                                                      OpStore %482 %497 
                                       f32_3 %498 = OpLoad %482 
                                       f32_3 %499 = OpExtInst %1 40 %498 %480 
                                                      OpStore %482 %499 
                                       f32_3 %501 = OpLoad %436 
                              Uniform f32_4* %502 = OpAccessChain %29 %61 
                                       f32_4 %503 = OpLoad %502 
                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
                                         f32 %505 = OpDot %501 %504 
                                                      OpStore %500 %505 
                                         f32 %506 = OpLoad %500 
                                         f32 %507 = OpExtInst %1 40 %506 %57 
                                                      OpStore %500 %507 
                                       f32_4 %508 = OpLoad %20 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                       f32_3 %510 = OpLoad %270 
                                       f32_3 %511 = OpFMul %509 %510 
                                                      OpStore %270 %511 
                                       f32_3 %512 = OpLoad %482 
                                       f32_4 %513 = OpLoad %20 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_3 %515 = OpFMul %512 %514 
                                                      OpStore %441 %515 
                                       f32_3 %518 = OpLoad %270 
                                         f32 %519 = OpLoad %500 
                                       f32_3 %520 = OpCompositeConstruct %519 %519 %519 
                                       f32_3 %521 = OpFMul %518 %520 
                                       f32_3 %522 = OpLoad %441 
                                       f32_3 %523 = OpFAdd %521 %522 
                                       f32_4 %524 = OpLoad %517 
                                       f32_4 %525 = OpVectorShuffle %524 %523 4 5 6 3 
                                                      OpStore %517 %525 
                                Private f32* %526 = OpAccessChain %20 %37 
                                         f32 %527 = OpLoad %526 
                                 Output f32* %529 = OpAccessChain %517 %37 
                                                      OpStore %529 %527 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat3.x = u_xlat0.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat0.x = max(u_xlat3.x, u_xlat2);
        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
    } else {
        u_xlat0.x = float(1.0);
        u_xlat0.y = float(1.0);
        u_xlat0.z = float(1.0);
        u_xlat0.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %89 %199 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %26 0 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 RelaxedPrecision 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpMemberDecorate %26 5 Offset 26 
                                                      OpMemberDecorate %26 6 RelaxedPrecision 
                                                      OpMemberDecorate %26 6 Offset 26 
                                                      OpMemberDecorate %26 7 RelaxedPrecision 
                                                      OpMemberDecorate %26 7 Offset 26 
                                                      OpMemberDecorate %26 8 RelaxedPrecision 
                                                      OpMemberDecorate %26 8 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %80 SpecId 80 
                                                      OpDecorate %89 Location 89 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 4 
                                              %24 = OpTypeArray %7 %23 
                                              %25 = OpTypeVector %6 3 
                                              %26 = OpTypeStruct %7 %7 %7 %24 %25 %25 %7 %7 %6 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %28 = OpVariable Uniform 
                                              %29 = OpTypeInt 32 1 
                                          i32 %30 = OpConstant 7 
                                              %31 = OpTypePointer Uniform %7 
                                              %35 = OpTypePointer Private %25 
                               Private f32_3* %36 = OpVariable Private 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 8 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                          i32 %69 = OpConstant 2 
                                          f32 %72 = OpConstant 3.674022E-40 
                                         bool %74 = OpConstantFalse 
                                         bool %80 = OpSpecConstantFalse 
                                          u32 %83 = OpConstant 1 
                               Private f32_3* %87 = OpVariable Private 
                                              %88 = OpTypePointer Input %25 
                                 Input f32_3* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                              Private f32_4* %118 = OpVariable Private 
                                             %119 = OpTypePointer Function %25 
                                         i32 %132 = OpConstant 5 
                                             %133 = OpTypePointer Uniform %25 
                                         i32 %142 = OpConstant 4 
                                         f32 %150 = OpConstant 3.674022E-40 
                                         f32 %152 = OpConstant 3.674022E-40 
                                Private f32* %155 = OpVariable Private 
                                         u32 %156 = OpConstant 2 
                                         f32 %159 = OpConstant 3.674022E-40 
                                             %167 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %168 = OpTypeSampledImage %167 
                                             %169 = OpTypePointer UniformConstant %168 
 UniformConstant read_only Texture3DSampled* %170 = OpVariable UniformConstant 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %193 = OpConstant 6 
                                Private f32* %198 = OpVariable Private 
                                Input f32_3* %199 = OpVariable Input 
                                             %211 = OpTypePointer Output %7 
                               Output f32_4* %212 = OpVariable Output 
                                             %221 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %120 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %21 = OpLoad %9 
                               Uniform f32_4* %32 = OpAccessChain %28 %30 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpFMul %21 %33 
                                                      OpStore %20 %34 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %28 %30 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %28 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %36 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %36 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %62 = OpSelect %59 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %70 = OpAccessChain %28 %69 %50 
                                          f32 %71 = OpLoad %70 
                                         bool %73 = OpFOrdEqual %71 %72 
                                                      OpStore %54 %73 
                                                      OpSelectionMerge %76 None 
                                                      OpBranchConditional %74 %75 %76 
                                              %75 = OpLabel 
                                         bool %77 = OpLoad %54 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %79 
                                              %78 = OpLabel 
                                                      OpBranch %79 
                                              %79 = OpLabel 
                                                      OpBranch %76 
                                              %76 = OpLabel 
                                                      OpSelectionMerge %82 None 
                                                      OpBranchConditional %80 %81 %177 
                                              %81 = OpLabel 
                                 Uniform f32* %84 = OpAccessChain %28 %69 %83 
                                          f32 %85 = OpLoad %84 
                                         bool %86 = OpFOrdEqual %85 %72 
                                                      OpStore %54 %86 
                                        f32_3 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %28 %92 %61 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %91 %95 
                                                      OpStore %87 %96 
                               Uniform f32_4* %97 = OpAccessChain %28 %92 %60 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpLoad %89 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_3 %103 = OpLoad %87 
                                       f32_3 %104 = OpFAdd %102 %103 
                                                      OpStore %87 %104 
                              Uniform f32_4* %105 = OpAccessChain %28 %92 %69 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_3 %111 = OpLoad %87 
                                       f32_3 %112 = OpFAdd %110 %111 
                                                      OpStore %87 %112 
                                       f32_3 %113 = OpLoad %87 
                              Uniform f32_4* %114 = OpAccessChain %28 %92 %92 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                                      OpStore %87 %117 
                                        bool %121 = OpLoad %54 
                                                      OpSelectionMerge %123 None 
                                                      OpBranchConditional %121 %122 %125 
                                             %122 = OpLabel 
                                       f32_3 %124 = OpLoad %87 
                                                      OpStore %120 %124 
                                                      OpBranch %123 
                                             %125 = OpLabel 
                                       f32_3 %126 = OpLoad %89 
                                                      OpStore %120 %126 
                                                      OpBranch %123 
                                             %123 = OpLabel 
                                       f32_3 %127 = OpLoad %120 
                                       f32_4 %128 = OpLoad %118 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %118 %129 
                                       f32_4 %130 = OpLoad %118 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                              Uniform f32_3* %134 = OpAccessChain %28 %132 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                                       f32_3 %137 = OpFAdd %131 %136 
                                       f32_4 %138 = OpLoad %118 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
                                                      OpStore %118 %139 
                                       f32_4 %140 = OpLoad %118 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                              Uniform f32_3* %143 = OpAccessChain %28 %142 
                                       f32_3 %144 = OpLoad %143 
                                       f32_3 %145 = OpFMul %141 %144 
                                       f32_4 %146 = OpLoad %118 
                                       f32_4 %147 = OpVectorShuffle %146 %145 0 4 5 6 
                                                      OpStore %118 %147 
                                Private f32* %148 = OpAccessChain %118 %83 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpFMul %149 %150 
                                         f32 %153 = OpFAdd %151 %152 
                                Private f32* %154 = OpAccessChain %87 %50 
                                                      OpStore %154 %153 
                                Uniform f32* %157 = OpAccessChain %28 %69 %156 
                                         f32 %158 = OpLoad %157 
                                         f32 %160 = OpFMul %158 %159 
                                         f32 %161 = OpFAdd %160 %152 
                                                      OpStore %155 %161 
                                Private f32* %162 = OpAccessChain %87 %50 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpLoad %155 
                                         f32 %165 = OpExtInst %1 40 %163 %164 
                                Private f32* %166 = OpAccessChain %118 %50 
                                                      OpStore %166 %165 
                  read_only Texture3DSampled %171 = OpLoad %170 
                                       f32_4 %172 = OpLoad %118 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 2 3 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                                      OpStore %118 %174 
                                       f32_4 %176 = OpLoad %118 
                                                      OpStore %175 %176 
                                                      OpBranch %82 
                                             %177 = OpLabel 
                                Private f32* %178 = OpAccessChain %175 %50 
                                                      OpStore %178 %72 
                                Private f32* %179 = OpAccessChain %175 %83 
                                                      OpStore %179 %72 
                                Private f32* %180 = OpAccessChain %175 %156 
                                                      OpStore %180 %72 
                                Private f32* %181 = OpAccessChain %175 %37 
                                                      OpStore %181 %72 
                                                      OpBranch %82 
                                              %82 = OpLabel 
                                       f32_4 %182 = OpLoad %175 
                              Uniform f32_4* %183 = OpAccessChain %28 %61 
                                       f32_4 %184 = OpLoad %183 
                                         f32 %185 = OpDot %182 %184 
                                Private f32* %186 = OpAccessChain %36 %50 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %36 %50 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 43 %188 %57 %72 
                                Private f32* %190 = OpAccessChain %36 %50 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                              Uniform f32_4* %194 = OpAccessChain %28 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFMul %192 %196 
                                                      OpStore %36 %197 
                                       f32_3 %200 = OpLoad %199 
                              Uniform f32_4* %201 = OpAccessChain %28 %60 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %200 %203 
                                                      OpStore %198 %204 
                                         f32 %205 = OpLoad %198 
                                         f32 %206 = OpExtInst %1 40 %205 %57 
                                                      OpStore %198 %206 
                                       f32_4 %207 = OpLoad %20 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpLoad %36 
                                       f32_3 %210 = OpFMul %208 %209 
                                                      OpStore %36 %210 
                                         f32 %213 = OpLoad %198 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpLoad %36 
                                       f32_3 %216 = OpFMul %214 %215 
                                       f32_4 %217 = OpLoad %212 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %212 %218 
                                Private f32* %219 = OpAccessChain %20 %37 
                                         f32 %220 = OpLoad %219 
                                 Output f32* %222 = OpAccessChain %212 %37 
                                                      OpStore %222 %220 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat3.x = u_xlat0.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat0.x = max(u_xlat3.x, u_xlat2);
        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
    } else {
        u_xlat0.x = float(1.0);
        u_xlat0.y = float(1.0);
        u_xlat0.z = float(1.0);
        u_xlat0.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 398
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %116 %155 %158 %386 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %116 Location 116 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %386 Location 386 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 14 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                             %101 = OpTypePointer Output %100 
                               Output f32_2* %102 = OpVariable Output 
                                Input f32_4* %103 = OpVariable Input 
                                         i32 %106 = OpConstant 15 
                                             %115 = OpTypePointer Input %53 
                                Input f32_3* %116 = OpVariable Input 
                                         i32 %118 = OpConstant 13 
                                         u32 %123 = OpConstant 0 
                                             %124 = OpTypePointer Private %6 
                                         u32 %137 = OpConstant 2 
                                Private f32* %139 = OpVariable Private 
                                             %154 = OpTypePointer Output %53 
                               Output f32_3* %155 = OpVariable Output 
                               Output f32_3* %158 = OpVariable Output 
                              Private f32_4* %167 = OpVariable Private 
                              Private f32_4* %180 = OpVariable Private 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_4 %221 = OpConstantComposite %220 %220 %220 %220 
                                         f32 %229 = OpConstant 3.674022E-40 
                                       f32_4 %230 = OpConstantComposite %229 %229 %229 %229 
                                         i32 %237 = OpConstant 4 
                                             %277 = OpTypePointer Private %53 
                              Private f32_3* %278 = OpVariable Private 
                              Private f32_4* %295 = OpVariable Private 
                              Private f32_3* %301 = OpVariable Private 
                                         i32 %302 = OpConstant 8 
                                         i32 %308 = OpConstant 9 
                                         i32 %314 = OpConstant 10 
                                         i32 %320 = OpConstant 11 
                                         u32 %329 = OpConstant 3 
                                         i32 %331 = OpConstant 5 
                                         i32 %337 = OpConstant 6 
                                         i32 %343 = OpConstant 7 
                                       f32_3 %353 = OpConstantComposite %229 %229 %229 
                                         f32 %361 = OpConstant 3.674022E-40 
                                       f32_3 %362 = OpConstantComposite %361 %361 %361 
                                         f32 %373 = OpConstant 3.674022E-40 
                                       f32_3 %374 = OpConstantComposite %373 %373 %373 
                                         f32 %376 = OpConstant 3.674022E-40 
                                       f32_3 %377 = OpConstantComposite %376 %376 %376 
                               Output f32_3* %386 = OpVariable Output 
                                             %392 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                                      OpStore %102 %114 
                                       f32_3 %117 = OpLoad %116 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 %31 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %117 %121 
                                Private f32* %125 = OpAccessChain %47 %123 
                                                      OpStore %125 %122 
                                       f32_3 %126 = OpLoad %116 
                              Uniform f32_4* %127 = OpAccessChain %23 %118 %26 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %131 = OpAccessChain %47 %86 
                                                      OpStore %131 %130 
                                       f32_3 %132 = OpLoad %116 
                              Uniform f32_4* %133 = OpAccessChain %23 %118 %39 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                Private f32* %138 = OpAccessChain %47 %137 
                                                      OpStore %138 %136 
                                       f32_4 %140 = OpLoad %47 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %47 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %139 %144 
                                         f32 %145 = OpLoad %139 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %139 %146 
                                         f32 %147 = OpLoad %139 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %47 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %47 %153 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore %155 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                                      OpStore %158 %160 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %161 0 0 0 0 
                                       f32_4 %163 = OpFNegate %162 
                              Uniform f32_4* %164 = OpAccessChain %23 %31 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpFAdd %163 %165 
                                                      OpStore %65 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_4 %169 = OpVectorShuffle %168 %168 1 1 1 1 
                                       f32_4 %170 = OpFNegate %169 
                              Uniform f32_4* %171 = OpAccessChain %23 %26 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpFAdd %170 %172 
                                                      OpStore %167 %173 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 2 2 2 2 
                                       f32_4 %176 = OpFNegate %175 
                              Uniform f32_4* %177 = OpAccessChain %23 %39 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpFAdd %176 %178 
                                                      OpStore %9 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                                       f32_4 %183 = OpLoad %167 
                                       f32_4 %184 = OpFMul %182 %183 
                                                      OpStore %180 %184 
                                       f32_4 %185 = OpLoad %167 
                                       f32_4 %186 = OpLoad %167 
                                       f32_4 %187 = OpFMul %185 %186 
                                                      OpStore %167 %187 
                                       f32_4 %188 = OpLoad %65 
                                       f32_4 %189 = OpLoad %65 
                                       f32_4 %190 = OpFMul %188 %189 
                                       f32_4 %191 = OpLoad %167 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %167 %192 
                                       f32_4 %193 = OpLoad %65 
                                       f32_4 %194 = OpLoad %47 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %180 
                                       f32_4 %198 = OpFAdd %196 %197 
                                                      OpStore %65 %198 
                                       f32_4 %199 = OpLoad %9 
                                       f32_4 %200 = OpLoad %47 
                                       f32_4 %201 = OpVectorShuffle %200 %200 2 2 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %65 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %65 %204 
                                       f32_4 %205 = OpLoad %9 
                                       f32_4 %206 = OpLoad %9 
                                       f32_4 %207 = OpFMul %205 %206 
                                       f32_4 %208 = OpLoad %167 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %9 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %213 = OpExtInst %1 40 %210 %212 
                                                      OpStore %9 %213 
                                       f32_4 %214 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 32 %214 
                                                      OpStore %167 %215 
                                       f32_4 %216 = OpLoad %9 
                              Uniform f32_4* %217 = OpAccessChain %23 %49 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpFMul %216 %218 
                                       f32_4 %222 = OpFAdd %219 %221 
                                                      OpStore %9 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %224 = OpFDiv %221 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %65 
                                       f32_4 %226 = OpLoad %167 
                                       f32_4 %227 = OpFMul %225 %226 
                                                      OpStore %65 %227 
                                       f32_4 %228 = OpLoad %65 
                                       f32_4 %231 = OpExtInst %1 40 %228 %230 
                                                      OpStore %65 %231 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpLoad %65 
                                       f32_4 %234 = OpFMul %232 %233 
                                                      OpStore %9 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 1 1 1 
                              Uniform f32_4* %238 = OpAccessChain %23 %237 %26 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %236 %240 
                                       f32_4 %242 = OpLoad %65 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %65 %243 
                              Uniform f32_4* %244 = OpAccessChain %23 %237 %31 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %65 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %65 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %65 %254 
                              Uniform f32_4* %255 = OpAccessChain %23 %237 %39 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 2 2 2 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_4 %261 = OpLoad %65 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFAdd %260 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %9 %265 
                              Uniform f32_4* %266 = OpAccessChain %23 %237 %49 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_4 %269 = OpLoad %9 
                                       f32_3 %270 = OpVectorShuffle %269 %269 3 3 3 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %9 %276 
                                Private f32* %279 = OpAccessChain %47 %86 
                                         f32 %280 = OpLoad %279 
                                Private f32* %281 = OpAccessChain %47 %86 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %280 %282 
                                Private f32* %284 = OpAccessChain %278 %123 
                                                      OpStore %284 %283 
                                Private f32* %285 = OpAccessChain %47 %123 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %47 %123 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %286 %288 
                                Private f32* %290 = OpAccessChain %278 %123 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFNegate %291 
                                         f32 %293 = OpFAdd %289 %292 
                                Private f32* %294 = OpAccessChain %278 %123 
                                                      OpStore %294 %293 
                                       f32_4 %296 = OpLoad %47 
                                       f32_4 %297 = OpVectorShuffle %296 %296 1 2 2 0 
                                       f32_4 %298 = OpLoad %47 
                                       f32_4 %299 = OpVectorShuffle %298 %298 0 1 2 2 
                                       f32_4 %300 = OpFMul %297 %299 
                                                      OpStore %295 %300 
                              Uniform f32_4* %303 = OpAccessChain %23 %302 
                                       f32_4 %304 = OpLoad %303 
                                       f32_4 %305 = OpLoad %295 
                                         f32 %306 = OpDot %304 %305 
                                Private f32* %307 = OpAccessChain %301 %123 
                                                      OpStore %307 %306 
                              Uniform f32_4* %309 = OpAccessChain %23 %308 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpLoad %295 
                                         f32 %312 = OpDot %310 %311 
                                Private f32* %313 = OpAccessChain %301 %86 
                                                      OpStore %313 %312 
                              Uniform f32_4* %315 = OpAccessChain %23 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_4 %317 = OpLoad %295 
                                         f32 %318 = OpDot %316 %317 
                                Private f32* %319 = OpAccessChain %301 %137 
                                                      OpStore %319 %318 
                              Uniform f32_4* %321 = OpAccessChain %23 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpLoad %278 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_3 %327 = OpLoad %301 
                                       f32_3 %328 = OpFAdd %326 %327 
                                                      OpStore %278 %328 
                                Private f32* %330 = OpAccessChain %47 %329 
                                                      OpStore %330 %220 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpLoad %47 
                                         f32 %335 = OpDot %333 %334 
                                Private f32* %336 = OpAccessChain %301 %123 
                                                      OpStore %336 %335 
                              Uniform f32_4* %338 = OpAccessChain %23 %337 
                                       f32_4 %339 = OpLoad %338 
                                       f32_4 %340 = OpLoad %47 
                                         f32 %341 = OpDot %339 %340 
                                Private f32* %342 = OpAccessChain %301 %86 
                                                      OpStore %342 %341 
                              Uniform f32_4* %344 = OpAccessChain %23 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_4 %346 = OpLoad %47 
                                         f32 %347 = OpDot %345 %346 
                                Private f32* %348 = OpAccessChain %301 %137 
                                                      OpStore %348 %347 
                                       f32_3 %349 = OpLoad %278 
                                       f32_3 %350 = OpLoad %301 
                                       f32_3 %351 = OpFAdd %349 %350 
                                                      OpStore %278 %351 
                                       f32_3 %352 = OpLoad %278 
                                       f32_3 %354 = OpExtInst %1 40 %352 %353 
                                                      OpStore %278 %354 
                                       f32_3 %355 = OpLoad %278 
                                       f32_3 %356 = OpExtInst %1 30 %355 
                                       f32_4 %357 = OpLoad %47 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %47 %358 
                                       f32_4 %359 = OpLoad %47 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %363 = OpFMul %360 %362 
                                       f32_4 %364 = OpLoad %47 
                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
                                                      OpStore %47 %365 
                                       f32_4 %366 = OpLoad %47 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpExtInst %1 29 %367 
                                       f32_4 %369 = OpLoad %47 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %47 %370 
                                       f32_4 %371 = OpLoad %47 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %47 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %47 %380 
                                       f32_4 %381 = OpLoad %47 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpExtInst %1 40 %382 %353 
                                       f32_4 %384 = OpLoad %47 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %47 %385 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %47 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                                      OpStore %386 %391 
                                 Output f32* %393 = OpAccessChain %90 %31 %86 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFNegate %394 
                                 Output f32* %396 = OpAccessChain %90 %31 %86 
                                                      OpStore %396 %395 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 232
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %89 %199 %214 %218 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %26 0 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 RelaxedPrecision 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpMemberDecorate %26 5 Offset 26 
                                                      OpMemberDecorate %26 6 RelaxedPrecision 
                                                      OpMemberDecorate %26 6 Offset 26 
                                                      OpMemberDecorate %26 7 RelaxedPrecision 
                                                      OpMemberDecorate %26 7 Offset 26 
                                                      OpMemberDecorate %26 8 RelaxedPrecision 
                                                      OpMemberDecorate %26 8 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %80 SpecId 80 
                                                      OpDecorate %89 Location 89 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %214 Location 214 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %218 Location 218 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 4 
                                              %24 = OpTypeArray %7 %23 
                                              %25 = OpTypeVector %6 3 
                                              %26 = OpTypeStruct %7 %7 %7 %24 %25 %25 %7 %7 %6 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %28 = OpVariable Uniform 
                                              %29 = OpTypeInt 32 1 
                                          i32 %30 = OpConstant 7 
                                              %31 = OpTypePointer Uniform %7 
                                              %35 = OpTypePointer Private %25 
                               Private f32_3* %36 = OpVariable Private 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 8 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                          i32 %69 = OpConstant 2 
                                          f32 %72 = OpConstant 3.674022E-40 
                                         bool %74 = OpConstantFalse 
                                         bool %80 = OpSpecConstantFalse 
                                          u32 %83 = OpConstant 1 
                               Private f32_3* %87 = OpVariable Private 
                                              %88 = OpTypePointer Input %25 
                                 Input f32_3* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                              Private f32_4* %118 = OpVariable Private 
                                             %119 = OpTypePointer Function %25 
                                         i32 %132 = OpConstant 5 
                                             %133 = OpTypePointer Uniform %25 
                                         i32 %142 = OpConstant 4 
                                         f32 %150 = OpConstant 3.674022E-40 
                                         f32 %152 = OpConstant 3.674022E-40 
                                Private f32* %155 = OpVariable Private 
                                         u32 %156 = OpConstant 2 
                                         f32 %159 = OpConstant 3.674022E-40 
                                             %167 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %168 = OpTypeSampledImage %167 
                                             %169 = OpTypePointer UniformConstant %168 
 UniformConstant read_only Texture3DSampled* %170 = OpVariable UniformConstant 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %193 = OpConstant 6 
                                Private f32* %198 = OpVariable Private 
                                Input f32_3* %199 = OpVariable Input 
                              Private f32_3* %211 = OpVariable Private 
                                Input f32_3* %214 = OpVariable Input 
                                             %217 = OpTypePointer Output %7 
                               Output f32_4* %218 = OpVariable Output 
                                             %229 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %120 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %21 = OpLoad %9 
                               Uniform f32_4* %32 = OpAccessChain %28 %30 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpFMul %21 %33 
                                                      OpStore %20 %34 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %28 %30 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %28 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %36 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %36 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %62 = OpSelect %59 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %70 = OpAccessChain %28 %69 %50 
                                          f32 %71 = OpLoad %70 
                                         bool %73 = OpFOrdEqual %71 %72 
                                                      OpStore %54 %73 
                                                      OpSelectionMerge %76 None 
                                                      OpBranchConditional %74 %75 %76 
                                              %75 = OpLabel 
                                         bool %77 = OpLoad %54 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %79 
                                              %78 = OpLabel 
                                                      OpBranch %79 
                                              %79 = OpLabel 
                                                      OpBranch %76 
                                              %76 = OpLabel 
                                                      OpSelectionMerge %82 None 
                                                      OpBranchConditional %80 %81 %177 
                                              %81 = OpLabel 
                                 Uniform f32* %84 = OpAccessChain %28 %69 %83 
                                          f32 %85 = OpLoad %84 
                                         bool %86 = OpFOrdEqual %85 %72 
                                                      OpStore %54 %86 
                                        f32_3 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %28 %92 %61 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %91 %95 
                                                      OpStore %87 %96 
                               Uniform f32_4* %97 = OpAccessChain %28 %92 %60 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpLoad %89 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_3 %103 = OpLoad %87 
                                       f32_3 %104 = OpFAdd %102 %103 
                                                      OpStore %87 %104 
                              Uniform f32_4* %105 = OpAccessChain %28 %92 %69 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_3 %111 = OpLoad %87 
                                       f32_3 %112 = OpFAdd %110 %111 
                                                      OpStore %87 %112 
                                       f32_3 %113 = OpLoad %87 
                              Uniform f32_4* %114 = OpAccessChain %28 %92 %92 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                                      OpStore %87 %117 
                                        bool %121 = OpLoad %54 
                                                      OpSelectionMerge %123 None 
                                                      OpBranchConditional %121 %122 %125 
                                             %122 = OpLabel 
                                       f32_3 %124 = OpLoad %87 
                                                      OpStore %120 %124 
                                                      OpBranch %123 
                                             %125 = OpLabel 
                                       f32_3 %126 = OpLoad %89 
                                                      OpStore %120 %126 
                                                      OpBranch %123 
                                             %123 = OpLabel 
                                       f32_3 %127 = OpLoad %120 
                                       f32_4 %128 = OpLoad %118 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %118 %129 
                                       f32_4 %130 = OpLoad %118 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                              Uniform f32_3* %134 = OpAccessChain %28 %132 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                                       f32_3 %137 = OpFAdd %131 %136 
                                       f32_4 %138 = OpLoad %118 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
                                                      OpStore %118 %139 
                                       f32_4 %140 = OpLoad %118 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                              Uniform f32_3* %143 = OpAccessChain %28 %142 
                                       f32_3 %144 = OpLoad %143 
                                       f32_3 %145 = OpFMul %141 %144 
                                       f32_4 %146 = OpLoad %118 
                                       f32_4 %147 = OpVectorShuffle %146 %145 0 4 5 6 
                                                      OpStore %118 %147 
                                Private f32* %148 = OpAccessChain %118 %83 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpFMul %149 %150 
                                         f32 %153 = OpFAdd %151 %152 
                                Private f32* %154 = OpAccessChain %87 %50 
                                                      OpStore %154 %153 
                                Uniform f32* %157 = OpAccessChain %28 %69 %156 
                                         f32 %158 = OpLoad %157 
                                         f32 %160 = OpFMul %158 %159 
                                         f32 %161 = OpFAdd %160 %152 
                                                      OpStore %155 %161 
                                Private f32* %162 = OpAccessChain %87 %50 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpLoad %155 
                                         f32 %165 = OpExtInst %1 40 %163 %164 
                                Private f32* %166 = OpAccessChain %118 %50 
                                                      OpStore %166 %165 
                  read_only Texture3DSampled %171 = OpLoad %170 
                                       f32_4 %172 = OpLoad %118 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 2 3 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                                      OpStore %118 %174 
                                       f32_4 %176 = OpLoad %118 
                                                      OpStore %175 %176 
                                                      OpBranch %82 
                                             %177 = OpLabel 
                                Private f32* %178 = OpAccessChain %175 %50 
                                                      OpStore %178 %72 
                                Private f32* %179 = OpAccessChain %175 %83 
                                                      OpStore %179 %72 
                                Private f32* %180 = OpAccessChain %175 %156 
                                                      OpStore %180 %72 
                                Private f32* %181 = OpAccessChain %175 %37 
                                                      OpStore %181 %72 
                                                      OpBranch %82 
                                              %82 = OpLabel 
                                       f32_4 %182 = OpLoad %175 
                              Uniform f32_4* %183 = OpAccessChain %28 %61 
                                       f32_4 %184 = OpLoad %183 
                                         f32 %185 = OpDot %182 %184 
                                Private f32* %186 = OpAccessChain %36 %50 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %36 %50 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 43 %188 %57 %72 
                                Private f32* %190 = OpAccessChain %36 %50 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                              Uniform f32_4* %194 = OpAccessChain %28 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFMul %192 %196 
                                                      OpStore %36 %197 
                                       f32_3 %200 = OpLoad %199 
                              Uniform f32_4* %201 = OpAccessChain %28 %60 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %200 %203 
                                                      OpStore %198 %204 
                                         f32 %205 = OpLoad %198 
                                         f32 %206 = OpExtInst %1 40 %205 %57 
                                                      OpStore %198 %206 
                                       f32_4 %207 = OpLoad %20 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpLoad %36 
                                       f32_3 %210 = OpFMul %208 %209 
                                                      OpStore %36 %210 
                                       f32_4 %212 = OpLoad %20 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %215 = OpLoad %214 
                                       f32_3 %216 = OpFMul %213 %215 
                                                      OpStore %211 %216 
                                       f32_3 %219 = OpLoad %36 
                                         f32 %220 = OpLoad %198 
                                       f32_3 %221 = OpCompositeConstruct %220 %220 %220 
                                       f32_3 %222 = OpFMul %219 %221 
                                       f32_3 %223 = OpLoad %211 
                                       f32_3 %224 = OpFAdd %222 %223 
                                       f32_4 %225 = OpLoad %218 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %218 %226 
                                Private f32* %227 = OpAccessChain %20 %37 
                                         f32 %228 = OpLoad %227 
                                 Output f32* %230 = OpAccessChain %218 %37 
                                                      OpStore %230 %228 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
bool u_xlatb3;
float u_xlat6;
bool u_xlatb6;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat3.x = (-u_xlat0.x) + u_xlat3.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat3.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb6)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat2.y * 0.25 + 0.75;
        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat9, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_2.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6 = min(u_xlat0.x, u_xlat6);
    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 183
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 %174 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %174 Location 174 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                                Output f32_2* %98 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                               Output f32_3* %142 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                               Output f32_4* %162 = OpVariable Output 
                               Output f32_4* %174 = OpVariable Output 
                                         f32 %175 = OpConstant 3.674022E-40 
                                       f32_4 %176 = OpConstantComposite %175 %175 %175 %175 
                                             %177 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore %98 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore %142 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad %162 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore %162 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad %162 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore %162 %173 
                                                      OpStore %174 %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFNegate %179 
                                 Output f32* %181 = OpAccessChain %92 %28 %88 
                                                      OpStore %181 %180 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 326
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %72 %258 %301 %314 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 ArrayStride 25 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 RelaxedPrecision 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 RelaxedPrecision 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 RelaxedPrecision 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpMemberDecorate %27 10 RelaxedPrecision 
                                                      OpMemberDecorate %27 10 Offset 27 
                                                      OpMemberDecorate %27 11 RelaxedPrecision 
                                                      OpMemberDecorate %27 11 Offset 27 
                                                      OpMemberDecorate %27 12 RelaxedPrecision 
                                                      OpMemberDecorate %27 12 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %136 RelaxedPrecision 
                                                      OpDecorate %155 SpecId 155 
                                                      OpDecorate %236 DescriptorSet 236 
                                                      OpDecorate %236 Binding 236 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %258 Location 258 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %265 DescriptorSet 265 
                                                      OpDecorate %265 Binding 265 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 Location 301 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %314 Location 314 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %22 = OpTypeVector %6 3 
                                              %23 = OpTypeInt 32 0 
                                          u32 %24 = OpConstant 4 
                                              %25 = OpTypeArray %7 %24 
                                              %26 = OpTypeArray %7 %24 
                                              %27 = OpTypeStruct %22 %7 %7 %7 %7 %25 %7 %26 %22 %22 %7 %7 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 11 
                                              %32 = OpTypePointer Uniform %7 
                               Private f32_4* %36 = OpVariable Private 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 12 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypePointer Private %22 
                               Private f32_3* %70 = OpVariable Private 
                                              %71 = OpTypePointer Input %22 
                                 Input f32_3* %72 = OpVariable Input 
                                              %75 = OpTypePointer Uniform %22 
                               Private f32_3* %79 = OpVariable Private 
                                          i32 %80 = OpConstant 5 
                                          u32 %81 = OpConstant 2 
                                          u32 %87 = OpConstant 1 
                                          i32 %89 = OpConstant 2 
                               Private f32_3* %97 = OpVariable Private 
                                          i32 %99 = OpConstant 4 
                                         i32 %131 = OpConstant 3 
                                         f32 %141 = OpConstant 3.674022E-40 
                               Private bool* %144 = OpVariable Private 
                                         i32 %145 = OpConstant 6 
                                        bool %149 = OpConstantFalse 
                                        bool %155 = OpSpecConstantFalse 
                               Private bool* %158 = OpVariable Private 
                                         i32 %164 = OpConstant 7 
                                             %190 = OpTypePointer Function %22 
                                         i32 %200 = OpConstant 9 
                              Private f32_4* %205 = OpVariable Private 
                                         i32 %207 = OpConstant 8 
                                             %213 = OpTypePointer Private %15 
                              Private f32_2* %214 = OpVariable Private 
                                         f32 %217 = OpConstant 3.674022E-40 
                                         f32 %219 = OpConstant 3.674022E-40 
                                Private f32* %222 = OpVariable Private 
                                         f32 %225 = OpConstant 3.674022E-40 
                                             %233 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %234 = OpTypeSampledImage %233 
                                             %235 = OpTypePointer UniformConstant %234 
 UniformConstant read_only Texture3DSampled* %236 = OpVariable UniformConstant 
                              Private f32_3* %247 = OpVariable Private 
                                             %257 = OpTypePointer Input %7 
                                Input f32_4* %258 = OpVariable Input 
                                Private f32* %264 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %265 = OpVariable UniformConstant 
                                Private f32* %270 = OpVariable Private 
                                             %282 = OpTypePointer Function %6 
                                         i32 %295 = OpConstant 10 
                                Private f32* %300 = OpVariable Private 
                                Input f32_3* %301 = OpVariable Input 
                                             %313 = OpTypePointer Output %7 
                               Output f32_4* %314 = OpVariable Output 
                                             %323 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %191 = OpVariable Function 
                               Function f32* %283 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %21 = OpLoad %9 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_4 %35 = OpFMul %21 %34 
                                                      OpStore %20 %35 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %29 %31 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %29 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %36 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %36 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %62 = OpSelect %59 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                        f32_3 %73 = OpLoad %72 
                                        f32_3 %74 = OpFNegate %73 
                               Uniform f32_3* %76 = OpAccessChain %29 %60 
                                        f32_3 %77 = OpLoad %76 
                                        f32_3 %78 = OpFAdd %74 %77 
                                                      OpStore %70 %78 
                                 Uniform f32* %82 = OpAccessChain %29 %80 %60 %81 
                                          f32 %83 = OpLoad %82 
                                 Private f32* %84 = OpAccessChain %79 %50 
                                                      OpStore %84 %83 
                                 Uniform f32* %85 = OpAccessChain %29 %80 %61 %81 
                                          f32 %86 = OpLoad %85 
                                 Private f32* %88 = OpAccessChain %79 %87 
                                                      OpStore %88 %86 
                                 Uniform f32* %90 = OpAccessChain %29 %80 %89 %81 
                                          f32 %91 = OpLoad %90 
                                 Private f32* %92 = OpAccessChain %79 %81 
                                                      OpStore %92 %91 
                                        f32_3 %93 = OpLoad %70 
                                        f32_3 %94 = OpLoad %79 
                                          f32 %95 = OpDot %93 %94 
                                 Private f32* %96 = OpAccessChain %70 %50 
                                                      OpStore %96 %95 
                                        f32_3 %98 = OpLoad %72 
                              Uniform f32_4* %100 = OpAccessChain %29 %99 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFNegate %102 
                                       f32_3 %104 = OpFAdd %98 %103 
                                                      OpStore %97 %104 
                                       f32_3 %105 = OpLoad %97 
                                       f32_3 %106 = OpLoad %97 
                                         f32 %107 = OpDot %105 %106 
                                Private f32* %108 = OpAccessChain %97 %50 
                                                      OpStore %108 %107 
                                Private f32* %109 = OpAccessChain %97 %50 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpExtInst %1 31 %110 
                                Private f32* %112 = OpAccessChain %97 %50 
                                                      OpStore %112 %111 
                                Private f32* %113 = OpAccessChain %70 %50 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpFNegate %114 
                                Private f32* %116 = OpAccessChain %97 %50 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFAdd %115 %117 
                                Private f32* %119 = OpAccessChain %97 %50 
                                                      OpStore %119 %118 
                                Uniform f32* %120 = OpAccessChain %29 %99 %37 
                                         f32 %121 = OpLoad %120 
                                Private f32* %122 = OpAccessChain %97 %50 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFMul %121 %123 
                                Private f32* %125 = OpAccessChain %70 %50 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFAdd %124 %126 
                                Private f32* %128 = OpAccessChain %70 %50 
                                                      OpStore %128 %127 
                                Private f32* %129 = OpAccessChain %70 %50 
                                         f32 %130 = OpLoad %129 
                                Uniform f32* %132 = OpAccessChain %29 %131 %81 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFMul %130 %133 
                                Uniform f32* %135 = OpAccessChain %29 %131 %37 
                                         f32 %136 = OpLoad %135 
                                         f32 %137 = OpFAdd %134 %136 
                                Private f32* %138 = OpAccessChain %70 %50 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %70 %50 
                                         f32 %140 = OpLoad %139 
                                         f32 %142 = OpExtInst %1 43 %140 %57 %141 
                                Private f32* %143 = OpAccessChain %70 %50 
                                                      OpStore %143 %142 
                                Uniform f32* %146 = OpAccessChain %29 %145 %50 
                                         f32 %147 = OpLoad %146 
                                        bool %148 = OpFOrdEqual %147 %141 
                                                      OpStore %144 %148 
                                                      OpSelectionMerge %151 None 
                                                      OpBranchConditional %149 %150 %151 
                                             %150 = OpLabel 
                                        bool %152 = OpLoad %144 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %154 
                                             %153 = OpLabel 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                                      OpBranch %151 
                                             %151 = OpLabel 
                                                      OpSelectionMerge %157 None 
                                                      OpBranchConditional %155 %156 %242 
                                             %156 = OpLabel 
                                Uniform f32* %159 = OpAccessChain %29 %145 %87 
                                         f32 %160 = OpLoad %159 
                                        bool %161 = OpFOrdEqual %160 %141 
                                                      OpStore %158 %161 
                                       f32_3 %162 = OpLoad %72 
                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
                              Uniform f32_4* %165 = OpAccessChain %29 %164 %61 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFMul %163 %167 
                                                      OpStore %79 %168 
                              Uniform f32_4* %169 = OpAccessChain %29 %164 %60 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpLoad %72 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 0 0 
                                       f32_3 %174 = OpFMul %171 %173 
                                       f32_3 %175 = OpLoad %79 
                                       f32_3 %176 = OpFAdd %174 %175 
                                                      OpStore %79 %176 
                              Uniform f32_4* %177 = OpAccessChain %29 %164 %89 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpLoad %72 
                                       f32_3 %181 = OpVectorShuffle %180 %180 2 2 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_3 %183 = OpLoad %79 
                                       f32_3 %184 = OpFAdd %182 %183 
                                                      OpStore %79 %184 
                                       f32_3 %185 = OpLoad %79 
                              Uniform f32_4* %186 = OpAccessChain %29 %164 %131 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFAdd %185 %188 
                                                      OpStore %79 %189 
                                        bool %192 = OpLoad %158 
                                                      OpSelectionMerge %194 None 
                                                      OpBranchConditional %192 %193 %196 
                                             %193 = OpLabel 
                                       f32_3 %195 = OpLoad %79 
                                                      OpStore %191 %195 
                                                      OpBranch %194 
                                             %196 = OpLabel 
                                       f32_3 %197 = OpLoad %72 
                                                      OpStore %191 %197 
                                                      OpBranch %194 
                                             %194 = OpLabel 
                                       f32_3 %198 = OpLoad %191 
                                                      OpStore %79 %198 
                                       f32_3 %199 = OpLoad %79 
                              Uniform f32_3* %201 = OpAccessChain %29 %200 
                                       f32_3 %202 = OpLoad %201 
                                       f32_3 %203 = OpFNegate %202 
                                       f32_3 %204 = OpFAdd %199 %203 
                                                      OpStore %79 %204 
                                       f32_3 %206 = OpLoad %79 
                              Uniform f32_3* %208 = OpAccessChain %29 %207 
                                       f32_3 %209 = OpLoad %208 
                                       f32_3 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %205 
                                       f32_4 %212 = OpVectorShuffle %211 %210 0 4 5 6 
                                                      OpStore %205 %212 
                                Private f32* %215 = OpAccessChain %205 %87 
                                         f32 %216 = OpLoad %215 
                                         f32 %218 = OpFMul %216 %217 
                                         f32 %220 = OpFAdd %218 %219 
                                Private f32* %221 = OpAccessChain %214 %50 
                                                      OpStore %221 %220 
                                Uniform f32* %223 = OpAccessChain %29 %145 %81 
                                         f32 %224 = OpLoad %223 
                                         f32 %226 = OpFMul %224 %225 
                                         f32 %227 = OpFAdd %226 %219 
                                                      OpStore %222 %227 
                                         f32 %228 = OpLoad %222 
                                Private f32* %229 = OpAccessChain %214 %50 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpExtInst %1 40 %228 %230 
                                Private f32* %232 = OpAccessChain %205 %50 
                                                      OpStore %232 %231 
                  read_only Texture3DSampled %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %205 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 2 3 
                                       f32_4 %240 = OpImageSampleImplicitLod %237 %239 
                                                      OpStore %205 %240 
                                       f32_4 %241 = OpLoad %205 
                                                      OpStore %36 %241 
                                                      OpBranch %157 
                                             %242 = OpLabel 
                                Private f32* %243 = OpAccessChain %36 %50 
                                                      OpStore %243 %141 
                                Private f32* %244 = OpAccessChain %36 %87 
                                                      OpStore %244 %141 
                                Private f32* %245 = OpAccessChain %36 %81 
                                                      OpStore %245 %141 
                                Private f32* %246 = OpAccessChain %36 %37 
                                                      OpStore %246 %141 
                                                      OpBranch %157 
                                             %157 = OpLabel 
                                       f32_4 %248 = OpLoad %36 
                              Uniform f32_4* %249 = OpAccessChain %29 %89 
                                       f32_4 %250 = OpLoad %249 
                                         f32 %251 = OpDot %248 %250 
                                Private f32* %252 = OpAccessChain %247 %50 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %247 %50 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 43 %254 %57 %141 
                                Private f32* %256 = OpAccessChain %247 %50 
                                                      OpStore %256 %255 
                                       f32_4 %259 = OpLoad %258 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_4 %261 = OpLoad %258 
                                       f32_2 %262 = OpVectorShuffle %261 %261 3 3 
                                       f32_2 %263 = OpFDiv %260 %262 
                                                      OpStore %214 %263 
                  read_only Texture2DSampled %266 = OpLoad %265 
                                       f32_2 %267 = OpLoad %214 
                                       f32_4 %268 = OpImageSampleImplicitLod %266 %267 
                                         f32 %269 = OpCompositeExtract %268 0 
                                                      OpStore %264 %269 
                                Private f32* %271 = OpAccessChain %70 %50 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpLoad %264 
                                         f32 %274 = OpFAdd %272 %273 
                                                      OpStore %270 %274 
                                         f32 %275 = OpLoad %270 
                                         f32 %276 = OpExtInst %1 43 %275 %57 %141 
                                                      OpStore %270 %276 
                                         f32 %277 = OpLoad %270 
                                Private f32* %278 = OpAccessChain %247 %50 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpExtInst %1 37 %277 %279 
                                Private f32* %281 = OpAccessChain %247 %50 
                                                      OpStore %281 %280 
                                        bool %284 = OpLoad %144 
                                                      OpSelectionMerge %286 None 
                                                      OpBranchConditional %284 %285 %289 
                                             %285 = OpLabel 
                                Private f32* %287 = OpAccessChain %247 %50 
                                         f32 %288 = OpLoad %287 
                                                      OpStore %283 %288 
                                                      OpBranch %286 
                                             %289 = OpLabel 
                                         f32 %290 = OpLoad %270 
                                                      OpStore %283 %290 
                                                      OpBranch %286 
                                             %286 = OpLabel 
                                         f32 %291 = OpLoad %283 
                                Private f32* %292 = OpAccessChain %247 %50 
                                                      OpStore %292 %291 
                                       f32_3 %293 = OpLoad %247 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 0 0 
                              Uniform f32_4* %296 = OpAccessChain %29 %295 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFMul %294 %298 
                                                      OpStore %247 %299 
                                       f32_3 %302 = OpLoad %301 
                              Uniform f32_4* %303 = OpAccessChain %29 %61 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                         f32 %306 = OpDot %302 %305 
                                                      OpStore %300 %306 
                                         f32 %307 = OpLoad %300 
                                         f32 %308 = OpExtInst %1 40 %307 %57 
                                                      OpStore %300 %308 
                                       f32_4 %309 = OpLoad %20 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %311 = OpLoad %247 
                                       f32_3 %312 = OpFMul %310 %311 
                                                      OpStore %247 %312 
                                         f32 %315 = OpLoad %300 
                                       f32_3 %316 = OpCompositeConstruct %315 %315 %315 
                                       f32_3 %317 = OpLoad %247 
                                       f32_3 %318 = OpFMul %316 %317 
                                       f32_4 %319 = OpLoad %314 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %314 %320 
                                Private f32* %321 = OpAccessChain %20 %37 
                                         f32 %322 = OpLoad %321 
                                 Output f32* %324 = OpAccessChain %314 %37 
                                                      OpStore %324 %322 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat2);
    u_xlat4.y = dot(unity_SHBg, u_xlat2);
    u_xlat4.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat8;
float u_xlat12;
bool u_xlatb12;
float u_xlat18;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = (-u_xlat0.x) + u_xlat6.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb12)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat2.y * 0.25 + 0.75;
        u_xlat18 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat18, u_xlat12);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_2.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12 = min(u_xlat0.x, u_xlat12);
    u_xlat0.x = (u_xlatb6) ? u_xlat12 : u_xlat0.x;
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb6)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6.x = u_xlat2.y * 0.25;
        u_xlat8 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat6.x = max(u_xlat6.x, u_xlat8);
        u_xlat2.x = min(u_xlat3.x, u_xlat6.x);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = vs_TEXCOORD1.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat5);
        u_xlat3.y = dot(u_xlat10_4, u_xlat5);
        u_xlat3.z = dot(u_xlat10_2, u_xlat5);
    } else {
        u_xlat2.xyz = vs_TEXCOORD1.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat6.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xzw * u_xlat6.xxx + u_xlat1.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 398
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %103 %104 %117 %156 %159 %352 %379 %391 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 RelaxedPrecision 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 RelaxedPrecision 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 RelaxedPrecision 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %104 Location 104 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %159 Location 159 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %352 Location 352 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %379 Location 379 
                                                      OpDecorate %391 Location 391 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 10 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 12 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                               Output f32_2* %103 = OpVariable Output 
                                Input f32_4* %104 = OpVariable Input 
                                         i32 %107 = OpConstant 13 
                                             %116 = OpTypePointer Input %53 
                                Input f32_3* %117 = OpVariable Input 
                                         i32 %119 = OpConstant 11 
                                         u32 %124 = OpConstant 0 
                                             %125 = OpTypePointer Private %6 
                                         u32 %138 = OpConstant 2 
                                Private f32* %140 = OpVariable Private 
                                             %155 = OpTypePointer Output %53 
                               Output f32_3* %156 = OpVariable Output 
                               Output f32_3* %159 = OpVariable Output 
                              Private f32_4* %162 = OpVariable Private 
                              Private f32_4* %169 = OpVariable Private 
                              Private f32_4* %182 = OpVariable Private 
                                         f32 %213 = OpConstant 3.674022E-40 
                                       f32_4 %214 = OpConstantComposite %213 %213 %213 %213 
                                         i32 %219 = OpConstant 4 
                                         f32 %223 = OpConstant 3.674022E-40 
                                       f32_4 %224 = OpConstantComposite %223 %223 %223 %223 
                                         f32 %232 = OpConstant 3.674022E-40 
                                       f32_4 %233 = OpConstantComposite %232 %232 %232 %232 
                                         i32 %240 = OpConstant 5 
                                         f32 %282 = OpConstant 3.674022E-40 
                                       f32_3 %283 = OpConstantComposite %282 %282 %282 
                                         f32 %285 = OpConstant 3.674022E-40 
                                       f32_3 %286 = OpConstantComposite %285 %285 %285 
                                         f32 %295 = OpConstant 3.674022E-40 
                                       f32_3 %296 = OpConstantComposite %295 %295 %295 
                                             %300 = OpTypePointer Private %53 
                              Private f32_3* %301 = OpVariable Private 
                              Private f32_4* %318 = OpVariable Private 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %325 = OpConstant 6 
                                         i32 %331 = OpConstant 7 
                                         i32 %337 = OpConstant 8 
                                         i32 %343 = OpConstant 9 
                               Output f32_3* %352 = OpVariable Output 
                                             %362 = OpTypePointer Uniform %6 
                                         f32 %369 = OpConstant 3.674022E-40 
                                         u32 %371 = OpConstant 3 
                                       f32_2 %375 = OpConstantComposite %369 %369 
                               Output f32_4* %379 = OpVariable Output 
                               Output f32_4* %391 = OpVariable Output 
                                             %392 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                              Uniform f32_4* %108 = OpAccessChain %23 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_2 %111 = OpFMul %106 %110 
                              Uniform f32_4* %112 = OpAccessChain %23 %107 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                                       f32_2 %115 = OpFAdd %111 %114 
                                                      OpStore %103 %115 
                                       f32_3 %118 = OpLoad %117 
                              Uniform f32_4* %120 = OpAccessChain %23 %119 %31 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %118 %122 
                                Private f32* %126 = OpAccessChain %65 %124 
                                                      OpStore %126 %123 
                                       f32_3 %127 = OpLoad %117 
                              Uniform f32_4* %128 = OpAccessChain %23 %119 %26 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %132 = OpAccessChain %65 %93 
                                                      OpStore %132 %131 
                                       f32_3 %133 = OpLoad %117 
                              Uniform f32_4* %134 = OpAccessChain %23 %119 %39 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %139 = OpAccessChain %65 %138 
                                                      OpStore %139 %137 
                                       f32_4 %141 = OpLoad %65 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %65 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %142 %144 
                                                      OpStore %140 %145 
                                         f32 %146 = OpLoad %140 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %140 %147 
                                         f32 %148 = OpLoad %140 
                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
                                       f32_4 %150 = OpLoad %65 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %65 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %65 %154 
                                       f32_4 %157 = OpLoad %65 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                                      OpStore %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                                      OpStore %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFNegate %164 
                              Uniform f32_4* %166 = OpAccessChain %23 %26 
                                       f32_4 %167 = OpLoad %166 
                                       f32_4 %168 = OpFAdd %165 %167 
                                                      OpStore %162 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 1 1 1 1 
                                       f32_4 %172 = OpFNegate %171 
                              Uniform f32_4* %173 = OpAccessChain %23 %39 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpFAdd %172 %174 
                                                      OpStore %169 %175 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 2 2 2 2 
                                       f32_4 %178 = OpFNegate %177 
                              Uniform f32_4* %179 = OpAccessChain %23 %49 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpFAdd %178 %180 
                                                      OpStore %9 %181 
                                       f32_4 %183 = OpLoad %65 
                                       f32_4 %184 = OpVectorShuffle %183 %183 1 1 1 1 
                                       f32_4 %185 = OpLoad %169 
                                       f32_4 %186 = OpFMul %184 %185 
                                                      OpStore %182 %186 
                                       f32_4 %187 = OpLoad %169 
                                       f32_4 %188 = OpLoad %169 
                                       f32_4 %189 = OpFMul %187 %188 
                                                      OpStore %169 %189 
                                       f32_4 %190 = OpLoad %162 
                                       f32_4 %191 = OpLoad %162 
                                       f32_4 %192 = OpFMul %190 %191 
                                       f32_4 %193 = OpLoad %169 
                                       f32_4 %194 = OpFAdd %192 %193 
                                                      OpStore %169 %194 
                                       f32_4 %195 = OpLoad %162 
                                       f32_4 %196 = OpLoad %65 
                                       f32_4 %197 = OpVectorShuffle %196 %196 0 0 0 0 
                                       f32_4 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %182 
                                       f32_4 %200 = OpFAdd %198 %199 
                                                      OpStore %162 %200 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpLoad %65 
                                       f32_4 %203 = OpVectorShuffle %202 %202 2 2 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                       f32_4 %205 = OpLoad %162 
                                       f32_4 %206 = OpFAdd %204 %205 
                                                      OpStore %162 %206 
                                       f32_4 %207 = OpLoad %9 
                                       f32_4 %208 = OpLoad %9 
                                       f32_4 %209 = OpFMul %207 %208 
                                       f32_4 %210 = OpLoad %169 
                                       f32_4 %211 = OpFAdd %209 %210 
                                                      OpStore %9 %211 
                                       f32_4 %212 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 40 %212 %214 
                                                      OpStore %9 %215 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpExtInst %1 32 %216 
                                                      OpStore %169 %217 
                                       f32_4 %218 = OpLoad %9 
                              Uniform f32_4* %220 = OpAccessChain %23 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpFMul %218 %221 
                                       f32_4 %225 = OpFAdd %222 %224 
                                                      OpStore %9 %225 
                                       f32_4 %226 = OpLoad %9 
                                       f32_4 %227 = OpFDiv %224 %226 
                                                      OpStore %9 %227 
                                       f32_4 %228 = OpLoad %162 
                                       f32_4 %229 = OpLoad %169 
                                       f32_4 %230 = OpFMul %228 %229 
                                                      OpStore %162 %230 
                                       f32_4 %231 = OpLoad %162 
                                       f32_4 %234 = OpExtInst %1 40 %231 %233 
                                                      OpStore %162 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpLoad %162 
                                       f32_4 %237 = OpFMul %235 %236 
                                                      OpStore %9 %237 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 1 1 1 
                              Uniform f32_4* %241 = OpAccessChain %23 %240 %26 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %162 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %162 %246 
                              Uniform f32_4* %247 = OpAccessChain %23 %240 %31 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_4 %250 = OpLoad %9 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_4 %253 = OpLoad %162 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %162 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %162 %257 
                              Uniform f32_4* %258 = OpAccessChain %23 %240 %39 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 2 2 2 
                                       f32_3 %263 = OpFMul %260 %262 
                                       f32_4 %264 = OpLoad %162 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFAdd %263 %265 
                                       f32_4 %267 = OpLoad %9 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %9 %268 
                              Uniform f32_4* %269 = OpAccessChain %23 %240 %49 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFAdd %274 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                       f32_4 %280 = OpLoad %9 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_3 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad %162 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %162 %289 
                                       f32_4 %290 = OpLoad %9 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_4 %292 = OpLoad %162 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_3 %297 = OpFAdd %294 %296 
                                       f32_4 %298 = OpLoad %162 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                                      OpStore %162 %299 
                                Private f32* %302 = OpAccessChain %65 %93 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %65 %93 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                Private f32* %307 = OpAccessChain %301 %124 
                                                      OpStore %307 %306 
                                Private f32* %308 = OpAccessChain %65 %124 
                                         f32 %309 = OpLoad %308 
                                Private f32* %310 = OpAccessChain %65 %124 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFMul %309 %311 
                                Private f32* %313 = OpAccessChain %301 %124 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpFAdd %312 %315 
                                Private f32* %317 = OpAccessChain %301 %124 
                                                      OpStore %317 %316 
                                       f32_4 %319 = OpLoad %65 
                                       f32_4 %320 = OpVectorShuffle %319 %319 1 2 2 0 
                                       f32_4 %321 = OpLoad %65 
                                       f32_4 %322 = OpVectorShuffle %321 %321 0 1 2 2 
                                       f32_4 %323 = OpFMul %320 %322 
                                                      OpStore %318 %323 
                              Uniform f32_4* %326 = OpAccessChain %23 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_4 %328 = OpLoad %318 
                                         f32 %329 = OpDot %327 %328 
                                Private f32* %330 = OpAccessChain %324 %124 
                                                      OpStore %330 %329 
                              Uniform f32_4* %332 = OpAccessChain %23 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpLoad %318 
                                         f32 %335 = OpDot %333 %334 
                                Private f32* %336 = OpAccessChain %324 %93 
                                                      OpStore %336 %335 
                              Uniform f32_4* %338 = OpAccessChain %23 %337 
                                       f32_4 %339 = OpLoad %338 
                                       f32_4 %340 = OpLoad %318 
                                         f32 %341 = OpDot %339 %340 
                                Private f32* %342 = OpAccessChain %324 %138 
                                                      OpStore %342 %341 
                              Uniform f32_4* %344 = OpAccessChain %23 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_3 %347 = OpLoad %301 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 0 0 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_3 %350 = OpLoad %324 
                                       f32_3 %351 = OpFAdd %349 %350 
                                                      OpStore %301 %351 
                                       f32_4 %353 = OpLoad %9 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_4 %355 = OpLoad %162 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFMul %354 %356 
                                       f32_3 %358 = OpLoad %301 
                                       f32_3 %359 = OpFAdd %357 %358 
                                                      OpStore %352 %359 
                                Private f32* %360 = OpAccessChain %47 %93 
                                         f32 %361 = OpLoad %360 
                                Uniform f32* %363 = OpAccessChain %23 %31 %124 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %361 %364 
                                Private f32* %366 = OpAccessChain %9 %124 
                                                      OpStore %366 %365 
                                Private f32* %367 = OpAccessChain %9 %124 
                                         f32 %368 = OpLoad %367 
                                         f32 %370 = OpFMul %368 %369 
                                Private f32* %372 = OpAccessChain %9 %371 
                                                      OpStore %372 %370 
                                       f32_4 %373 = OpLoad %47 
                                       f32_2 %374 = OpVectorShuffle %373 %373 0 3 
                                       f32_2 %376 = OpFMul %374 %375 
                                       f32_4 %377 = OpLoad %9 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 1 5 3 
                                                      OpStore %9 %378 
                                       f32_4 %380 = OpLoad %47 
                                       f32_2 %381 = OpVectorShuffle %380 %380 2 3 
                                       f32_4 %382 = OpLoad %379 
                                       f32_4 %383 = OpVectorShuffle %382 %381 0 1 4 5 
                                                      OpStore %379 %383 
                                       f32_4 %384 = OpLoad %9 
                                       f32_2 %385 = OpVectorShuffle %384 %384 2 2 
                                       f32_4 %386 = OpLoad %9 
                                       f32_2 %387 = OpVectorShuffle %386 %386 0 3 
                                       f32_2 %388 = OpFAdd %385 %387 
                                       f32_4 %389 = OpLoad %379 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 2 3 
                                                      OpStore %379 %390 
                                                      OpStore %391 %233 
                                 Output f32* %393 = OpAccessChain %97 %31 %93 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFNegate %394 
                                 Output f32* %396 = OpAccessChain %97 %31 %93 
                                                      OpStore %396 %395 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 531
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %71 %282 %436 %476 %517 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 ArrayStride 25 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 RelaxedPrecision 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 RelaxedPrecision 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 RelaxedPrecision 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 RelaxedPrecision 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 RelaxedPrecision 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 RelaxedPrecision 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpMemberDecorate %27 10 Offset 27 
                                                      OpMemberDecorate %27 11 Offset 27 
                                                      OpMemberDecorate %27 12 Offset 27 
                                                      OpMemberDecorate %27 13 RelaxedPrecision 
                                                      OpMemberDecorate %27 13 Offset 27 
                                                      OpMemberDecorate %27 14 RelaxedPrecision 
                                                      OpMemberDecorate %27 14 Offset 27 
                                                      OpMemberDecorate %27 15 RelaxedPrecision 
                                                      OpMemberDecorate %27 15 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %71 Location 71 
                                                      OpDecorate %137 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %159 SpecId 159 
                                                      OpDecorate %259 DescriptorSet 259 
                                                      OpDecorate %259 Binding 259 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %282 Location 282 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %289 DescriptorSet 289 
                                                      OpDecorate %289 Binding 289 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %303 RelaxedPrecision 
                                                      OpDecorate %304 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %460 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %476 RelaxedPrecision 
                                                      OpDecorate %476 Location 476 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %481 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %485 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %489 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %491 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %512 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %517 Location 517 
                                                      OpDecorate %518 RelaxedPrecision 
                                                      OpDecorate %519 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %22 = OpTypeVector %6 3 
                                              %23 = OpTypeInt 32 0 
                                          u32 %24 = OpConstant 4 
                                              %25 = OpTypeArray %7 %24 
                                              %26 = OpTypeArray %7 %24 
                                              %27 = OpTypeStruct %22 %7 %7 %7 %7 %7 %7 %7 %25 %7 %26 %22 %22 %7 %7 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 14 
                                              %32 = OpTypePointer Uniform %7 
                               Private f32_4* %36 = OpVariable Private 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 15 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                               Private f32_4* %69 = OpVariable Private 
                                              %70 = OpTypePointer Input %22 
                                 Input f32_3* %71 = OpVariable Input 
                                              %74 = OpTypePointer Uniform %22 
                               Private f32_4* %80 = OpVariable Private 
                                          i32 %81 = OpConstant 8 
                                          u32 %82 = OpConstant 2 
                                          u32 %88 = OpConstant 1 
                                          i32 %90 = OpConstant 2 
                                             %100 = OpTypePointer Private %22 
                              Private f32_3* %101 = OpVariable Private 
                                         i32 %103 = OpConstant 7 
                                         i32 %135 = OpConstant 6 
                                         f32 %145 = OpConstant 3.674022E-40 
                               Private bool* %148 = OpVariable Private 
                                         i32 %149 = OpConstant 9 
                                        bool %153 = OpConstantFalse 
                                        bool %159 = OpSpecConstantFalse 
                               Private bool* %162 = OpVariable Private 
                                         i32 %168 = OpConstant 10 
                                         i32 %199 = OpConstant 3 
                                             %206 = OpTypePointer Function %22 
                                         i32 %220 = OpConstant 12 
                              Private f32_4* %227 = OpVariable Private 
                                         i32 %230 = OpConstant 11 
                                             %236 = OpTypePointer Private %15 
                              Private f32_2* %237 = OpVariable Private 
                                         f32 %240 = OpConstant 3.674022E-40 
                                         f32 %242 = OpConstant 3.674022E-40 
                                Private f32* %245 = OpVariable Private 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %256 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %257 = OpTypeSampledImage %256 
                                             %258 = OpTypePointer UniformConstant %257 
 UniformConstant read_only Texture3DSampled* %259 = OpVariable UniformConstant 
                              Private f32_3* %270 = OpVariable Private 
                                         i32 %272 = OpConstant 5 
                                             %281 = OpTypePointer Input %7 
                                Input f32_4* %282 = OpVariable Input 
                                Private f32* %288 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %289 = OpVariable UniformConstant 
                                Private f32* %294 = OpVariable Private 
                                             %306 = OpTypePointer Function %6 
                                         i32 %319 = OpConstant 13 
                                Private f32* %394 = OpVariable Private 
                                       f32_3 %417 = OpConstantComposite %240 %57 %57 
                                       f32_3 %427 = OpConstantComposite %248 %57 %57 
                              Private f32_4* %435 = OpVariable Private 
                                Input f32_3* %436 = OpVariable Input 
                              Private f32_3* %441 = OpVariable Private 
                                         i32 %469 = OpConstant 4 
                                Input f32_3* %476 = OpVariable Input 
                                       f32_3 %480 = OpConstantComposite %57 %57 %57 
                              Private f32_3* %482 = OpVariable Private 
                                         f32 %486 = OpConstant 3.674022E-40 
                                       f32_3 %487 = OpConstantComposite %486 %486 %486 
                                         f32 %492 = OpConstant 3.674022E-40 
                                       f32_3 %493 = OpConstantComposite %492 %492 %492 
                                         f32 %495 = OpConstant 3.674022E-40 
                                       f32_3 %496 = OpConstantComposite %495 %495 %495 
                                Private f32* %500 = OpVariable Private 
                                             %516 = OpTypePointer Output %7 
                               Output f32_4* %517 = OpVariable Output 
                                             %528 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %207 = OpVariable Function 
                               Function f32* %307 = OpVariable Function 
                             Function f32_3* %361 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %21 = OpLoad %9 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_4 %35 = OpFMul %21 %34 
                                                      OpStore %20 %35 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %29 %31 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %29 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %36 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %36 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %62 = OpSelect %59 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                        f32_3 %72 = OpLoad %71 
                                        f32_3 %73 = OpFNegate %72 
                               Uniform f32_3* %75 = OpAccessChain %29 %60 
                                        f32_3 %76 = OpLoad %75 
                                        f32_3 %77 = OpFAdd %73 %76 
                                        f32_4 %78 = OpLoad %69 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %69 %79 
                                 Uniform f32* %83 = OpAccessChain %29 %81 %60 %82 
                                          f32 %84 = OpLoad %83 
                                 Private f32* %85 = OpAccessChain %80 %50 
                                                      OpStore %85 %84 
                                 Uniform f32* %86 = OpAccessChain %29 %81 %61 %82 
                                          f32 %87 = OpLoad %86 
                                 Private f32* %89 = OpAccessChain %80 %88 
                                                      OpStore %89 %87 
                                 Uniform f32* %91 = OpAccessChain %29 %81 %90 %82 
                                          f32 %92 = OpLoad %91 
                                 Private f32* %93 = OpAccessChain %80 %82 
                                                      OpStore %93 %92 
                                        f32_4 %94 = OpLoad %69 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %80 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                          f32 %98 = OpDot %95 %97 
                                 Private f32* %99 = OpAccessChain %69 %50 
                                                      OpStore %99 %98 
                                       f32_3 %102 = OpLoad %71 
                              Uniform f32_4* %104 = OpAccessChain %29 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFNegate %106 
                                       f32_3 %108 = OpFAdd %102 %107 
                                                      OpStore %101 %108 
                                       f32_3 %109 = OpLoad %101 
                                       f32_3 %110 = OpLoad %101 
                                         f32 %111 = OpDot %109 %110 
                                Private f32* %112 = OpAccessChain %101 %50 
                                                      OpStore %112 %111 
                                Private f32* %113 = OpAccessChain %101 %50 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpExtInst %1 31 %114 
                                Private f32* %116 = OpAccessChain %101 %50 
                                                      OpStore %116 %115 
                                Private f32* %117 = OpAccessChain %69 %50 
                                         f32 %118 = OpLoad %117 
                                         f32 %119 = OpFNegate %118 
                                Private f32* %120 = OpAccessChain %101 %50 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFAdd %119 %121 
                                Private f32* %123 = OpAccessChain %101 %50 
                                                      OpStore %123 %122 
                                Uniform f32* %124 = OpAccessChain %29 %103 %37 
                                         f32 %125 = OpLoad %124 
                                Private f32* %126 = OpAccessChain %101 %50 
                                         f32 %127 = OpLoad %126 
                                         f32 %128 = OpFMul %125 %127 
                                Private f32* %129 = OpAccessChain %69 %50 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %128 %130 
                                Private f32* %132 = OpAccessChain %69 %50 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %69 %50 
                                         f32 %134 = OpLoad %133 
                                Uniform f32* %136 = OpAccessChain %29 %135 %82 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFMul %134 %137 
                                Uniform f32* %139 = OpAccessChain %29 %135 %37 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpFAdd %138 %140 
                                Private f32* %142 = OpAccessChain %69 %50 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %69 %50 
                                         f32 %144 = OpLoad %143 
                                         f32 %146 = OpExtInst %1 43 %144 %57 %145 
                                Private f32* %147 = OpAccessChain %69 %50 
                                                      OpStore %147 %146 
                                Uniform f32* %150 = OpAccessChain %29 %149 %50 
                                         f32 %151 = OpLoad %150 
                                        bool %152 = OpFOrdEqual %151 %145 
                                                      OpStore %148 %152 
                                                      OpSelectionMerge %155 None 
                                                      OpBranchConditional %153 %154 %155 
                                             %154 = OpLabel 
                                        bool %156 = OpLoad %148 
                                                      OpSelectionMerge %158 None 
                                                      OpBranchConditional %156 %157 %158 
                                             %157 = OpLabel 
                                                      OpBranch %158 
                                             %158 = OpLabel 
                                                      OpBranch %155 
                                             %155 = OpLabel 
                                                      OpSelectionMerge %161 None 
                                                      OpBranchConditional %159 %160 %265 
                                             %160 = OpLabel 
                                Uniform f32* %163 = OpAccessChain %29 %149 %88 
                                         f32 %164 = OpLoad %163 
                                        bool %165 = OpFOrdEqual %164 %145 
                                                      OpStore %162 %165 
                                       f32_3 %166 = OpLoad %71 
                                       f32_3 %167 = OpVectorShuffle %166 %166 1 1 1 
                              Uniform f32_4* %169 = OpAccessChain %29 %168 %61 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFMul %167 %171 
                                       f32_4 %173 = OpLoad %80 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %80 %174 
                              Uniform f32_4* %175 = OpAccessChain %29 %168 %60 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpLoad %71 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 0 0 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %80 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFAdd %180 %182 
                                       f32_4 %184 = OpLoad %80 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                      OpStore %80 %185 
                              Uniform f32_4* %186 = OpAccessChain %29 %168 %90 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpLoad %71 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 2 2 
                                       f32_3 %191 = OpFMul %188 %190 
                                       f32_4 %192 = OpLoad %80 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFAdd %191 %193 
                                       f32_4 %195 = OpLoad %80 
                                       f32_4 %196 = OpVectorShuffle %195 %194 4 5 6 3 
                                                      OpStore %80 %196 
                                       f32_4 %197 = OpLoad %80 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                              Uniform f32_4* %200 = OpAccessChain %29 %168 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %198 %202 
                                       f32_4 %204 = OpLoad %80 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %80 %205 
                                        bool %208 = OpLoad %162 
                                                      OpSelectionMerge %210 None 
                                                      OpBranchConditional %208 %209 %213 
                                             %209 = OpLabel 
                                       f32_4 %211 = OpLoad %80 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                                      OpStore %207 %212 
                                                      OpBranch %210 
                                             %213 = OpLabel 
                                       f32_3 %214 = OpLoad %71 
                                                      OpStore %207 %214 
                                                      OpBranch %210 
                                             %210 = OpLabel 
                                       f32_3 %215 = OpLoad %207 
                                       f32_4 %216 = OpLoad %80 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %80 %217 
                                       f32_4 %218 = OpLoad %80 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                              Uniform f32_3* %221 = OpAccessChain %29 %220 
                                       f32_3 %222 = OpLoad %221 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpFAdd %219 %223 
                                       f32_4 %225 = OpLoad %80 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %80 %226 
                                       f32_4 %228 = OpLoad %80 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                              Uniform f32_3* %231 = OpAccessChain %29 %230 
                                       f32_3 %232 = OpLoad %231 
                                       f32_3 %233 = OpFMul %229 %232 
                                       f32_4 %234 = OpLoad %227 
                                       f32_4 %235 = OpVectorShuffle %234 %233 0 4 5 6 
                                                      OpStore %227 %235 
                                Private f32* %238 = OpAccessChain %227 %88 
                                         f32 %239 = OpLoad %238 
                                         f32 %241 = OpFMul %239 %240 
                                         f32 %243 = OpFAdd %241 %242 
                                Private f32* %244 = OpAccessChain %237 %50 
                                                      OpStore %244 %243 
                                Uniform f32* %246 = OpAccessChain %29 %149 %82 
                                         f32 %247 = OpLoad %246 
                                         f32 %249 = OpFMul %247 %248 
                                         f32 %250 = OpFAdd %249 %242 
                                                      OpStore %245 %250 
                                         f32 %251 = OpLoad %245 
                                Private f32* %252 = OpAccessChain %237 %50 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpExtInst %1 40 %251 %253 
                                Private f32* %255 = OpAccessChain %227 %50 
                                                      OpStore %255 %254 
                  read_only Texture3DSampled %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %227 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 2 3 
                                       f32_4 %263 = OpImageSampleImplicitLod %260 %262 
                                                      OpStore %227 %263 
                                       f32_4 %264 = OpLoad %227 
                                                      OpStore %36 %264 
                                                      OpBranch %161 
                                             %265 = OpLabel 
                                Private f32* %266 = OpAccessChain %36 %50 
                                                      OpStore %266 %145 
                                Private f32* %267 = OpAccessChain %36 %88 
                                                      OpStore %267 %145 
                                Private f32* %268 = OpAccessChain %36 %82 
                                                      OpStore %268 %145 
                                Private f32* %269 = OpAccessChain %36 %37 
                                                      OpStore %269 %145 
                                                      OpBranch %161 
                                             %161 = OpLabel 
                                       f32_4 %271 = OpLoad %36 
                              Uniform f32_4* %273 = OpAccessChain %29 %272 
                                       f32_4 %274 = OpLoad %273 
                                         f32 %275 = OpDot %271 %274 
                                Private f32* %276 = OpAccessChain %270 %50 
                                                      OpStore %276 %275 
                                Private f32* %277 = OpAccessChain %270 %50 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpExtInst %1 43 %278 %57 %145 
                                Private f32* %280 = OpAccessChain %270 %50 
                                                      OpStore %280 %279 
                                       f32_4 %283 = OpLoad %282 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 1 
                                       f32_4 %285 = OpLoad %282 
                                       f32_2 %286 = OpVectorShuffle %285 %285 3 3 
                                       f32_2 %287 = OpFDiv %284 %286 
                                                      OpStore %237 %287 
                  read_only Texture2DSampled %290 = OpLoad %289 
                                       f32_2 %291 = OpLoad %237 
                                       f32_4 %292 = OpImageSampleImplicitLod %290 %291 
                                         f32 %293 = OpCompositeExtract %292 0 
                                                      OpStore %288 %293 
                                Private f32* %295 = OpAccessChain %69 %50 
                                         f32 %296 = OpLoad %295 
                                         f32 %297 = OpLoad %288 
                                         f32 %298 = OpFAdd %296 %297 
                                                      OpStore %294 %298 
                                         f32 %299 = OpLoad %294 
                                         f32 %300 = OpExtInst %1 43 %299 %57 %145 
                                                      OpStore %294 %300 
                                         f32 %301 = OpLoad %294 
                                Private f32* %302 = OpAccessChain %270 %50 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpExtInst %1 37 %301 %303 
                                Private f32* %305 = OpAccessChain %270 %50 
                                                      OpStore %305 %304 
                                        bool %308 = OpLoad %148 
                                                      OpSelectionMerge %310 None 
                                                      OpBranchConditional %308 %309 %313 
                                             %309 = OpLabel 
                                Private f32* %311 = OpAccessChain %270 %50 
                                         f32 %312 = OpLoad %311 
                                                      OpStore %307 %312 
                                                      OpBranch %310 
                                             %313 = OpLabel 
                                         f32 %314 = OpLoad %294 
                                                      OpStore %307 %314 
                                                      OpBranch %310 
                                             %310 = OpLabel 
                                         f32 %315 = OpLoad %307 
                                Private f32* %316 = OpAccessChain %270 %50 
                                                      OpStore %316 %315 
                                       f32_3 %317 = OpLoad %270 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 0 0 
                              Uniform f32_4* %320 = OpAccessChain %29 %319 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpFMul %318 %322 
                                                      OpStore %270 %323 
                                                      OpSelectionMerge %325 None 
                                                      OpBranchConditional %153 %324 %325 
                                             %324 = OpLabel 
                                        bool %326 = OpLoad %148 
                                                      OpSelectionMerge %328 None 
                                                      OpBranchConditional %326 %327 %328 
                                             %327 = OpLabel 
                                                      OpBranch %328 
                                             %328 = OpLabel 
                                                      OpBranch %325 
                                             %325 = OpLabel 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %159 %329 %454 
                                             %329 = OpLabel 
                                Uniform f32* %331 = OpAccessChain %29 %149 %88 
                                         f32 %332 = OpLoad %331 
                                        bool %333 = OpFOrdEqual %332 %145 
                                                      OpStore %54 %333 
                                       f32_3 %334 = OpLoad %71 
                                       f32_3 %335 = OpVectorShuffle %334 %334 1 1 1 
                              Uniform f32_4* %336 = OpAccessChain %29 %168 %61 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFMul %335 %338 
                                                      OpStore %101 %339 
                              Uniform f32_4* %340 = OpAccessChain %29 %168 %60 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpLoad %71 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 0 0 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_3 %346 = OpLoad %101 
                                       f32_3 %347 = OpFAdd %345 %346 
                                                      OpStore %101 %347 
                              Uniform f32_4* %348 = OpAccessChain %29 %168 %90 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpLoad %71 
                                       f32_3 %352 = OpVectorShuffle %351 %351 2 2 2 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_3 %354 = OpLoad %101 
                                       f32_3 %355 = OpFAdd %353 %354 
                                                      OpStore %101 %355 
                                       f32_3 %356 = OpLoad %101 
                              Uniform f32_4* %357 = OpAccessChain %29 %168 %199 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFAdd %356 %359 
                                                      OpStore %101 %360 
                                        bool %362 = OpLoad %54 
                                                      OpSelectionMerge %364 None 
                                                      OpBranchConditional %362 %363 %366 
                                             %363 = OpLabel 
                                       f32_3 %365 = OpLoad %101 
                                                      OpStore %361 %365 
                                                      OpBranch %364 
                                             %366 = OpLabel 
                                       f32_3 %367 = OpLoad %71 
                                                      OpStore %361 %367 
                                                      OpBranch %364 
                                             %364 = OpLabel 
                                       f32_3 %368 = OpLoad %361 
                                       f32_4 %369 = OpLoad %69 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %69 %370 
                                       f32_4 %371 = OpLoad %69 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                              Uniform f32_3* %373 = OpAccessChain %29 %220 
                                       f32_3 %374 = OpLoad %373 
                                       f32_3 %375 = OpFNegate %374 
                                       f32_3 %376 = OpFAdd %372 %375 
                                       f32_4 %377 = OpLoad %69 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %69 %378 
                                       f32_4 %379 = OpLoad %69 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                              Uniform f32_3* %381 = OpAccessChain %29 %230 
                                       f32_3 %382 = OpLoad %381 
                                       f32_3 %383 = OpFMul %380 %382 
                                       f32_4 %384 = OpLoad %69 
                                       f32_4 %385 = OpVectorShuffle %384 %383 0 4 5 6 
                                                      OpStore %69 %385 
                                Private f32* %386 = OpAccessChain %69 %88 
                                         f32 %387 = OpLoad %386 
                                         f32 %388 = OpFMul %387 %240 
                                Private f32* %389 = OpAccessChain %101 %50 
                                                      OpStore %389 %388 
                                Uniform f32* %390 = OpAccessChain %29 %149 %82 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFMul %391 %248 
                                Private f32* %393 = OpAccessChain %80 %50 
                                                      OpStore %393 %392 
                                Uniform f32* %395 = OpAccessChain %29 %149 %82 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpFNegate %396 
                                         f32 %398 = OpFMul %397 %248 
                                         f32 %399 = OpFAdd %398 %240 
                                                      OpStore %394 %399 
                                Private f32* %400 = OpAccessChain %101 %50 
                                         f32 %401 = OpLoad %400 
                                Private f32* %402 = OpAccessChain %80 %50 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpExtInst %1 40 %401 %403 
                                Private f32* %405 = OpAccessChain %101 %50 
                                                      OpStore %405 %404 
                                         f32 %406 = OpLoad %394 
                                Private f32* %407 = OpAccessChain %101 %50 
                                         f32 %408 = OpLoad %407 
                                         f32 %409 = OpExtInst %1 37 %406 %408 
                                Private f32* %410 = OpAccessChain %69 %50 
                                                      OpStore %410 %409 
                  read_only Texture3DSampled %411 = OpLoad %259 
                                       f32_4 %412 = OpLoad %69 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 2 3 
                                       f32_4 %414 = OpImageSampleImplicitLod %411 %413 
                                                      OpStore %227 %414 
                                       f32_4 %415 = OpLoad %69 
                                       f32_3 %416 = OpVectorShuffle %415 %415 0 2 3 
                                       f32_3 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad %80 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                      OpStore %80 %420 
                  read_only Texture3DSampled %421 = OpLoad %259 
                                       f32_4 %422 = OpLoad %80 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_4 %424 = OpImageSampleImplicitLod %421 %423 
                                                      OpStore %80 %424 
                                       f32_4 %425 = OpLoad %69 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 2 3 
                                       f32_3 %428 = OpFAdd %426 %427 
                                       f32_4 %429 = OpLoad %69 
                                       f32_4 %430 = OpVectorShuffle %429 %428 4 5 6 3 
                                                      OpStore %69 %430 
                  read_only Texture3DSampled %431 = OpLoad %259 
                                       f32_4 %432 = OpLoad %69 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                       f32_4 %434 = OpImageSampleImplicitLod %431 %433 
                                                      OpStore %69 %434 
                                       f32_3 %437 = OpLoad %436 
                                       f32_4 %438 = OpLoad %435 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %435 %439 
                                Private f32* %440 = OpAccessChain %435 %37 
                                                      OpStore %440 %145 
                                       f32_4 %442 = OpLoad %227 
                                       f32_4 %443 = OpLoad %435 
                                         f32 %444 = OpDot %442 %443 
                                Private f32* %445 = OpAccessChain %441 %50 
                                                      OpStore %445 %444 
                                       f32_4 %446 = OpLoad %80 
                                       f32_4 %447 = OpLoad %435 
                                         f32 %448 = OpDot %446 %447 
                                Private f32* %449 = OpAccessChain %441 %88 
                                                      OpStore %449 %448 
                                       f32_4 %450 = OpLoad %69 
                                       f32_4 %451 = OpLoad %435 
                                         f32 %452 = OpDot %450 %451 
                                Private f32* %453 = OpAccessChain %441 %82 
                                                      OpStore %453 %452 
                                                      OpBranch %330 
                                             %454 = OpLabel 
                                       f32_3 %455 = OpLoad %436 
                                       f32_4 %456 = OpLoad %69 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 6 3 
                                                      OpStore %69 %457 
                                Private f32* %458 = OpAccessChain %69 %37 
                                                      OpStore %458 %145 
                              Uniform f32_4* %459 = OpAccessChain %29 %90 
                                       f32_4 %460 = OpLoad %459 
                                       f32_4 %461 = OpLoad %69 
                                         f32 %462 = OpDot %460 %461 
                                Private f32* %463 = OpAccessChain %441 %50 
                                                      OpStore %463 %462 
                              Uniform f32_4* %464 = OpAccessChain %29 %199 
                                       f32_4 %465 = OpLoad %464 
                                       f32_4 %466 = OpLoad %69 
                                         f32 %467 = OpDot %465 %466 
                                Private f32* %468 = OpAccessChain %441 %88 
                                                      OpStore %468 %467 
                              Uniform f32_4* %470 = OpAccessChain %29 %469 
                                       f32_4 %471 = OpLoad %470 
                                       f32_4 %472 = OpLoad %69 
                                         f32 %473 = OpDot %471 %472 
                                Private f32* %474 = OpAccessChain %441 %82 
                                                      OpStore %474 %473 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                       f32_3 %475 = OpLoad %441 
                                       f32_3 %477 = OpLoad %476 
                                       f32_3 %478 = OpFAdd %475 %477 
                                                      OpStore %441 %478 
                                       f32_3 %479 = OpLoad %441 
                                       f32_3 %481 = OpExtInst %1 40 %479 %480 
                                                      OpStore %441 %481 
                                       f32_3 %483 = OpLoad %441 
                                       f32_3 %484 = OpExtInst %1 30 %483 
                                                      OpStore %482 %484 
                                       f32_3 %485 = OpLoad %482 
                                       f32_3 %488 = OpFMul %485 %487 
                                                      OpStore %482 %488 
                                       f32_3 %489 = OpLoad %482 
                                       f32_3 %490 = OpExtInst %1 29 %489 
                                                      OpStore %482 %490 
                                       f32_3 %491 = OpLoad %482 
                                       f32_3 %494 = OpFMul %491 %493 
                                       f32_3 %497 = OpFAdd %494 %496 
                                                      OpStore %482 %497 
                                       f32_3 %498 = OpLoad %482 
                                       f32_3 %499 = OpExtInst %1 40 %498 %480 
                                                      OpStore %482 %499 
                                       f32_3 %501 = OpLoad %436 
                              Uniform f32_4* %502 = OpAccessChain %29 %61 
                                       f32_4 %503 = OpLoad %502 
                                       f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
                                         f32 %505 = OpDot %501 %504 
                                                      OpStore %500 %505 
                                         f32 %506 = OpLoad %500 
                                         f32 %507 = OpExtInst %1 40 %506 %57 
                                                      OpStore %500 %507 
                                       f32_4 %508 = OpLoad %20 
                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                       f32_3 %510 = OpLoad %270 
                                       f32_3 %511 = OpFMul %509 %510 
                                                      OpStore %270 %511 
                                       f32_3 %512 = OpLoad %482 
                                       f32_4 %513 = OpLoad %20 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_3 %515 = OpFMul %512 %514 
                                                      OpStore %441 %515 
                                       f32_3 %518 = OpLoad %270 
                                         f32 %519 = OpLoad %500 
                                       f32_3 %520 = OpCompositeConstruct %519 %519 %519 
                                       f32_3 %521 = OpFMul %518 %520 
                                       f32_3 %522 = OpLoad %441 
                                       f32_3 %523 = OpFAdd %521 %522 
                                       f32_4 %524 = OpLoad %517 
                                       f32_4 %525 = OpVectorShuffle %524 %523 4 5 6 3 
                                                      OpStore %517 %525 
                                Private f32* %526 = OpAccessChain %20 %37 
                                         f32 %527 = OpLoad %526 
                                 Output f32* %529 = OpAccessChain %517 %37 
                                                      OpStore %529 %527 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  Blend One One, One One
  ColorMask RGB 0
  ZWrite Off
  GpuProgramID 99297
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat10_1 * _Color;
    u_xlat12 = u_xlat10_1.w * _Color.w + (-_Cutoff);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xx);
    u_xlat12 = u_xlat12 * u_xlat10_1.w;
    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 274
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %49 %251 %262 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 RelaxedPrecision 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 RelaxedPrecision 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %49 Location 49 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %130 SpecId 130 
                                                      OpDecorate %209 DescriptorSet 209 
                                                      OpDecorate %209 Binding 209 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 DescriptorSet 233 
                                                      OpDecorate %233 Binding 233 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 Location 251 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %262 Location 262 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeArray %14 %16 
                                              %19 = OpTypeStruct %14 %14 %14 %17 %7 %7 %14 %18 %14 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                              %24 = OpTypePointer Uniform %14 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                                              %40 = OpTypePointer Private %14 
                               Private f32_4* %41 = OpVariable Private 
                                              %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %43 = OpTypeSampledImage %42 
                                              %44 = OpTypePointer UniformConstant %43 
  UniformConstant read_only Texture2DSampled* %45 = OpVariable UniformConstant 
                                              %47 = OpTypeVector %6 2 
                                              %48 = OpTypePointer Input %47 
                                 Input f32_2* %49 = OpVariable Input 
                               Private f32_4* %52 = OpVariable Private 
                                          i32 %54 = OpConstant 8 
                               Private f32_4* %58 = OpVariable Private 
                                          u32 %59 = OpConstant 3 
                                              %62 = OpTypePointer Uniform %6 
                                          i32 %66 = OpConstant 9 
                                          u32 %71 = OpConstant 0 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %81 = OpConstant 1 
                                          i32 %83 = OpConstant -1 
                               Private f32_3* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 7 
                                         i32 %105 = OpConstant 2 
                                         i32 %115 = OpConstant 3 
                                         f32 %122 = OpConstant 3.674022E-40 
                                        bool %124 = OpConstantFalse 
                                        bool %130 = OpSpecConstantFalse 
                                         u32 %133 = OpConstant 1 
                              Private f32_3* %137 = OpVariable Private 
                                             %165 = OpTypePointer Function %7 
                                         i32 %175 = OpConstant 5 
                                             %176 = OpTypePointer Uniform %7 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 4 
                                         f32 %191 = OpConstant 3.674022E-40 
                                         f32 %193 = OpConstant 3.674022E-40 
                                Private f32* %195 = OpVariable Private 
                                         u32 %196 = OpConstant 2 
                                         f32 %199 = OpConstant 3.674022E-40 
                                             %206 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %207 = OpTypeSampledImage %206 
                                             %208 = OpTypePointer UniformConstant %207 
 UniformConstant read_only Texture3DSampled* %209 = OpVariable UniformConstant 
                              Private f32_3* %220 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %233 = OpVariable UniformConstant 
                                         i32 %245 = OpConstant 6 
                                Private f32* %250 = OpVariable Private 
                                Input f32_3* %251 = OpVariable Input 
                                             %261 = OpTypePointer Output %14 
                               Output f32_4* %262 = OpVariable Output 
                                             %271 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %166 = OpVariable Function 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFAdd %13 %27 
                                                      OpStore %9 %28 
                                        f32_3 %31 = OpLoad %9 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpDot %31 %32 
                                                      OpStore %30 %33 
                                          f32 %34 = OpLoad %30 
                                          f32 %35 = OpExtInst %1 32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFMul %37 %38 
                                                      OpStore %9 %39 
                   read_only Texture2DSampled %46 = OpLoad %45 
                                        f32_2 %50 = OpLoad %49 
                                        f32_4 %51 = OpImageSampleImplicitLod %46 %50 
                                                      OpStore %41 %51 
                                        f32_4 %53 = OpLoad %41 
                               Uniform f32_4* %55 = OpAccessChain %21 %54 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpFMul %53 %56 
                                                      OpStore %52 %57 
                                 Private f32* %60 = OpAccessChain %41 %59 
                                          f32 %61 = OpLoad %60 
                                 Uniform f32* %63 = OpAccessChain %21 %54 %59 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFMul %61 %64 
                                 Uniform f32* %67 = OpAccessChain %21 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %65 %69 
                                 Private f32* %72 = OpAccessChain %58 %71 
                                                      OpStore %72 %70 
                                 Private f32* %76 = OpAccessChain %58 %71 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                         bool %80 = OpLoad %75 
                                          i32 %82 = OpSelect %80 %81 %23 
                                          i32 %84 = OpIMul %82 %83 
                                         bool %85 = OpINotEqual %84 %23 
                                                      OpSelectionMerge %87 None 
                                                      OpBranchConditional %85 %86 %87 
                                              %86 = OpLabel 
                                                      OpKill
                                              %87 = OpLabel 
                                        f32_3 %90 = OpLoad %11 
                                        f32_3 %91 = OpVectorShuffle %90 %90 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %21 %92 %81 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %91 %95 
                                                      OpStore %89 %96 
                               Uniform f32_4* %97 = OpAccessChain %21 %92 %23 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpLoad %11 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_3 %103 = OpLoad %89 
                                       f32_3 %104 = OpFAdd %102 %103 
                                                      OpStore %89 %104 
                              Uniform f32_4* %106 = OpAccessChain %21 %92 %105 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpLoad %11 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_3 %112 = OpLoad %89 
                                       f32_3 %113 = OpFAdd %111 %112 
                                                      OpStore %89 %113 
                                       f32_3 %114 = OpLoad %89 
                              Uniform f32_4* %116 = OpAccessChain %21 %92 %115 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %114 %118 
                                                      OpStore %89 %119 
                                Uniform f32* %120 = OpAccessChain %21 %105 %71 
                                         f32 %121 = OpLoad %120 
                                        bool %123 = OpFOrdEqual %121 %122 
                                                      OpStore %75 %123 
                                                      OpSelectionMerge %126 None 
                                                      OpBranchConditional %124 %125 %126 
                                             %125 = OpLabel 
                                        bool %127 = OpLoad %75 
                                                      OpSelectionMerge %129 None 
                                                      OpBranchConditional %127 %128 %129 
                                             %128 = OpLabel 
                                                      OpBranch %129 
                                             %129 = OpLabel 
                                                      OpBranch %126 
                                             %126 = OpLabel 
                                                      OpSelectionMerge %132 None 
                                                      OpBranchConditional %130 %131 %215 
                                             %131 = OpLabel 
                                Uniform f32* %134 = OpAccessChain %21 %105 %133 
                                         f32 %135 = OpLoad %134 
                                        bool %136 = OpFOrdEqual %135 %122 
                                                      OpStore %75 %136 
                                       f32_3 %138 = OpLoad %11 
                                       f32_3 %139 = OpVectorShuffle %138 %138 1 1 1 
                              Uniform f32_4* %140 = OpAccessChain %21 %115 %81 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %139 %142 
                                                      OpStore %137 %143 
                              Uniform f32_4* %144 = OpAccessChain %21 %115 %23 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpLoad %11 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_3 %150 = OpLoad %137 
                                       f32_3 %151 = OpFAdd %149 %150 
                                                      OpStore %137 %151 
                              Uniform f32_4* %152 = OpAccessChain %21 %115 %105 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpLoad %11 
                                       f32_3 %156 = OpVectorShuffle %155 %155 2 2 2 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_3 %158 = OpLoad %137 
                                       f32_3 %159 = OpFAdd %157 %158 
                                                      OpStore %137 %159 
                                       f32_3 %160 = OpLoad %137 
                              Uniform f32_4* %161 = OpAccessChain %21 %115 %115 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_3 %164 = OpFAdd %160 %163 
                                                      OpStore %137 %164 
                                        bool %167 = OpLoad %75 
                                                      OpSelectionMerge %169 None 
                                                      OpBranchConditional %167 %168 %171 
                                             %168 = OpLabel 
                                       f32_3 %170 = OpLoad %137 
                                                      OpStore %166 %170 
                                                      OpBranch %169 
                                             %171 = OpLabel 
                                       f32_3 %172 = OpLoad %11 
                                                      OpStore %166 %172 
                                                      OpBranch %169 
                                             %169 = OpLabel 
                                       f32_3 %173 = OpLoad %166 
                                                      OpStore %137 %173 
                                       f32_3 %174 = OpLoad %137 
                              Uniform f32_3* %177 = OpAccessChain %21 %175 
                                       f32_3 %178 = OpLoad %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %174 %179 
                                                      OpStore %137 %180 
                                       f32_3 %182 = OpLoad %137 
                              Uniform f32_3* %184 = OpAccessChain %21 %183 
                                       f32_3 %185 = OpLoad %184 
                                       f32_3 %186 = OpFMul %182 %185 
                                       f32_4 %187 = OpLoad %181 
                                       f32_4 %188 = OpVectorShuffle %187 %186 0 4 5 6 
                                                      OpStore %181 %188 
                                Private f32* %189 = OpAccessChain %181 %133 
                                         f32 %190 = OpLoad %189 
                                         f32 %192 = OpFMul %190 %191 
                                         f32 %194 = OpFAdd %192 %193 
                                                      OpStore %30 %194 
                                Uniform f32* %197 = OpAccessChain %21 %105 %196 
                                         f32 %198 = OpLoad %197 
                                         f32 %200 = OpFMul %198 %199 
                                         f32 %201 = OpFAdd %200 %193 
                                                      OpStore %195 %201 
                                         f32 %202 = OpLoad %30 
                                         f32 %203 = OpLoad %195 
                                         f32 %204 = OpExtInst %1 40 %202 %203 
                                Private f32* %205 = OpAccessChain %181 %71 
                                                      OpStore %205 %204 
                  read_only Texture3DSampled %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %181 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 2 3 
                                       f32_4 %213 = OpImageSampleImplicitLod %210 %212 
                                                      OpStore %181 %213 
                                       f32_4 %214 = OpLoad %181 
                                                      OpStore %58 %214 
                                                      OpBranch %132 
                                             %215 = OpLabel 
                                Private f32* %216 = OpAccessChain %58 %71 
                                                      OpStore %216 %122 
                                Private f32* %217 = OpAccessChain %58 %133 
                                                      OpStore %217 %122 
                                Private f32* %218 = OpAccessChain %58 %196 
                                                      OpStore %218 %122 
                                Private f32* %219 = OpAccessChain %58 %59 
                                                      OpStore %219 %122 
                                                      OpBranch %132 
                                             %132 = OpLabel 
                                       f32_4 %221 = OpLoad %58 
                              Uniform f32_4* %222 = OpAccessChain %21 %81 
                                       f32_4 %223 = OpLoad %222 
                                         f32 %224 = OpDot %221 %223 
                                Private f32* %225 = OpAccessChain %220 %71 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %220 %71 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpExtInst %1 43 %227 %78 %122 
                                Private f32* %229 = OpAccessChain %220 %71 
                                                      OpStore %229 %228 
                                       f32_3 %230 = OpLoad %89 
                                       f32_3 %231 = OpLoad %89 
                                         f32 %232 = OpDot %230 %231 
                                                      OpStore %30 %232 
                  read_only Texture2DSampled %234 = OpLoad %233 
                                         f32 %235 = OpLoad %30 
                                       f32_2 %236 = OpCompositeConstruct %235 %235 
                                       f32_4 %237 = OpImageSampleImplicitLod %234 %236 
                                         f32 %238 = OpCompositeExtract %237 3 
                                                      OpStore %30 %238 
                                Private f32* %239 = OpAccessChain %220 %71 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpLoad %30 
                                         f32 %242 = OpFMul %240 %241 
                                                      OpStore %30 %242 
                                         f32 %243 = OpLoad %30 
                                       f32_3 %244 = OpCompositeConstruct %243 %243 %243 
                              Uniform f32_4* %246 = OpAccessChain %21 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFMul %244 %248 
                                                      OpStore %220 %249 
                                       f32_3 %252 = OpLoad %251 
                                       f32_3 %253 = OpLoad %9 
                                         f32 %254 = OpDot %252 %253 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %250 
                                         f32 %256 = OpExtInst %1 40 %255 %78 
                                                      OpStore %250 %256 
                                       f32_4 %257 = OpLoad %52 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpLoad %220 
                                       f32_3 %260 = OpFMul %258 %259 
                                                      OpStore %220 %260 
                                         f32 %263 = OpLoad %250 
                                       f32_3 %264 = OpCompositeConstruct %263 %263 %263 
                                       f32_3 %265 = OpLoad %220 
                                       f32_3 %266 = OpFMul %264 %265 
                                       f32_4 %267 = OpLoad %262 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %262 %268 
                                Private f32* %269 = OpAccessChain %52 %59 
                                         f32 %270 = OpLoad %269 
                                 Output f32* %272 = OpAccessChain %262 %59 
                                                      OpStore %272 %270 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec3 u_xlat3;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb0){
        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat3.x = u_xlat0.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat0.x = max(u_xlat3.x, u_xlat2);
        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
    } else {
        u_xlat0.x = float(1.0);
        u_xlat0.y = float(1.0);
        u_xlat0.z = float(1.0);
        u_xlat0.w = float(1.0);
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0, unity_OcclusionMaskSelector);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %89 %199 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %26 0 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 RelaxedPrecision 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpMemberDecorate %26 5 Offset 26 
                                                      OpMemberDecorate %26 6 RelaxedPrecision 
                                                      OpMemberDecorate %26 6 Offset 26 
                                                      OpMemberDecorate %26 7 RelaxedPrecision 
                                                      OpMemberDecorate %26 7 Offset 26 
                                                      OpMemberDecorate %26 8 RelaxedPrecision 
                                                      OpMemberDecorate %26 8 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %80 SpecId 80 
                                                      OpDecorate %89 Location 89 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 Location 199 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 Location 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 4 
                                              %24 = OpTypeArray %7 %23 
                                              %25 = OpTypeVector %6 3 
                                              %26 = OpTypeStruct %7 %7 %7 %24 %25 %25 %7 %7 %6 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4; f32;}* %28 = OpVariable Uniform 
                                              %29 = OpTypeInt 32 1 
                                          i32 %30 = OpConstant 7 
                                              %31 = OpTypePointer Uniform %7 
                                              %35 = OpTypePointer Private %25 
                               Private f32_3* %36 = OpVariable Private 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 8 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                          i32 %69 = OpConstant 2 
                                          f32 %72 = OpConstant 3.674022E-40 
                                         bool %74 = OpConstantFalse 
                                         bool %80 = OpSpecConstantFalse 
                                          u32 %83 = OpConstant 1 
                               Private f32_3* %87 = OpVariable Private 
                                              %88 = OpTypePointer Input %25 
                                 Input f32_3* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                              Private f32_4* %118 = OpVariable Private 
                                             %119 = OpTypePointer Function %25 
                                         i32 %132 = OpConstant 5 
                                             %133 = OpTypePointer Uniform %25 
                                         i32 %142 = OpConstant 4 
                                         f32 %150 = OpConstant 3.674022E-40 
                                         f32 %152 = OpConstant 3.674022E-40 
                                Private f32* %155 = OpVariable Private 
                                         u32 %156 = OpConstant 2 
                                         f32 %159 = OpConstant 3.674022E-40 
                                             %167 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %168 = OpTypeSampledImage %167 
                                             %169 = OpTypePointer UniformConstant %168 
 UniformConstant read_only Texture3DSampled* %170 = OpVariable UniformConstant 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %193 = OpConstant 6 
                                Private f32* %198 = OpVariable Private 
                                Input f32_3* %199 = OpVariable Input 
                                             %211 = OpTypePointer Output %7 
                               Output f32_4* %212 = OpVariable Output 
                                             %221 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %120 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %21 = OpLoad %9 
                               Uniform f32_4* %32 = OpAccessChain %28 %30 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpFMul %21 %33 
                                                      OpStore %20 %34 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %28 %30 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %28 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %36 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %36 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %62 = OpSelect %59 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                 Uniform f32* %70 = OpAccessChain %28 %69 %50 
                                          f32 %71 = OpLoad %70 
                                         bool %73 = OpFOrdEqual %71 %72 
                                                      OpStore %54 %73 
                                                      OpSelectionMerge %76 None 
                                                      OpBranchConditional %74 %75 %76 
                                              %75 = OpLabel 
                                         bool %77 = OpLoad %54 
                                                      OpSelectionMerge %79 None 
                                                      OpBranchConditional %77 %78 %79 
                                              %78 = OpLabel 
                                                      OpBranch %79 
                                              %79 = OpLabel 
                                                      OpBranch %76 
                                              %76 = OpLabel 
                                                      OpSelectionMerge %82 None 
                                                      OpBranchConditional %80 %81 %177 
                                              %81 = OpLabel 
                                 Uniform f32* %84 = OpAccessChain %28 %69 %83 
                                          f32 %85 = OpLoad %84 
                                         bool %86 = OpFOrdEqual %85 %72 
                                                      OpStore %54 %86 
                                        f32_3 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %28 %92 %61 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %91 %95 
                                                      OpStore %87 %96 
                               Uniform f32_4* %97 = OpAccessChain %28 %92 %60 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpLoad %89 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_3 %103 = OpLoad %87 
                                       f32_3 %104 = OpFAdd %102 %103 
                                                      OpStore %87 %104 
                              Uniform f32_4* %105 = OpAccessChain %28 %92 %69 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_3 %111 = OpLoad %87 
                                       f32_3 %112 = OpFAdd %110 %111 
                                                      OpStore %87 %112 
                                       f32_3 %113 = OpLoad %87 
                              Uniform f32_4* %114 = OpAccessChain %28 %92 %92 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                                      OpStore %87 %117 
                                        bool %121 = OpLoad %54 
                                                      OpSelectionMerge %123 None 
                                                      OpBranchConditional %121 %122 %125 
                                             %122 = OpLabel 
                                       f32_3 %124 = OpLoad %87 
                                                      OpStore %120 %124 
                                                      OpBranch %123 
                                             %125 = OpLabel 
                                       f32_3 %126 = OpLoad %89 
                                                      OpStore %120 %126 
                                                      OpBranch %123 
                                             %123 = OpLabel 
                                       f32_3 %127 = OpLoad %120 
                                       f32_4 %128 = OpLoad %118 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %118 %129 
                                       f32_4 %130 = OpLoad %118 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                              Uniform f32_3* %134 = OpAccessChain %28 %132 
                                       f32_3 %135 = OpLoad %134 
                                       f32_3 %136 = OpFNegate %135 
                                       f32_3 %137 = OpFAdd %131 %136 
                                       f32_4 %138 = OpLoad %118 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
                                                      OpStore %118 %139 
                                       f32_4 %140 = OpLoad %118 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                              Uniform f32_3* %143 = OpAccessChain %28 %142 
                                       f32_3 %144 = OpLoad %143 
                                       f32_3 %145 = OpFMul %141 %144 
                                       f32_4 %146 = OpLoad %118 
                                       f32_4 %147 = OpVectorShuffle %146 %145 0 4 5 6 
                                                      OpStore %118 %147 
                                Private f32* %148 = OpAccessChain %118 %83 
                                         f32 %149 = OpLoad %148 
                                         f32 %151 = OpFMul %149 %150 
                                         f32 %153 = OpFAdd %151 %152 
                                Private f32* %154 = OpAccessChain %87 %50 
                                                      OpStore %154 %153 
                                Uniform f32* %157 = OpAccessChain %28 %69 %156 
                                         f32 %158 = OpLoad %157 
                                         f32 %160 = OpFMul %158 %159 
                                         f32 %161 = OpFAdd %160 %152 
                                                      OpStore %155 %161 
                                Private f32* %162 = OpAccessChain %87 %50 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpLoad %155 
                                         f32 %165 = OpExtInst %1 40 %163 %164 
                                Private f32* %166 = OpAccessChain %118 %50 
                                                      OpStore %166 %165 
                  read_only Texture3DSampled %171 = OpLoad %170 
                                       f32_4 %172 = OpLoad %118 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 2 3 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                                      OpStore %118 %174 
                                       f32_4 %176 = OpLoad %118 
                                                      OpStore %175 %176 
                                                      OpBranch %82 
                                             %177 = OpLabel 
                                Private f32* %178 = OpAccessChain %175 %50 
                                                      OpStore %178 %72 
                                Private f32* %179 = OpAccessChain %175 %83 
                                                      OpStore %179 %72 
                                Private f32* %180 = OpAccessChain %175 %156 
                                                      OpStore %180 %72 
                                Private f32* %181 = OpAccessChain %175 %37 
                                                      OpStore %181 %72 
                                                      OpBranch %82 
                                              %82 = OpLabel 
                                       f32_4 %182 = OpLoad %175 
                              Uniform f32_4* %183 = OpAccessChain %28 %61 
                                       f32_4 %184 = OpLoad %183 
                                         f32 %185 = OpDot %182 %184 
                                Private f32* %186 = OpAccessChain %36 %50 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %36 %50 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 43 %188 %57 %72 
                                Private f32* %190 = OpAccessChain %36 %50 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                              Uniform f32_4* %194 = OpAccessChain %28 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFMul %192 %196 
                                                      OpStore %36 %197 
                                       f32_3 %200 = OpLoad %199 
                              Uniform f32_4* %201 = OpAccessChain %28 %60 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %200 %203 
                                                      OpStore %198 %204 
                                         f32 %205 = OpLoad %198 
                                         f32 %206 = OpExtInst %1 40 %205 %57 
                                                      OpStore %198 %206 
                                       f32_4 %207 = OpLoad %20 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpLoad %36 
                                       f32_3 %210 = OpFMul %208 %209 
                                                      OpStore %36 %210 
                                         f32 %213 = OpLoad %198 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpLoad %36 
                                       f32_3 %216 = OpFMul %214 %215 
                                       f32_4 %217 = OpLoad %212 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %212 %218 
                                Private f32* %219 = OpAccessChain %20 %37 
                                         f32 %220 = OpLoad %219 
                                 Output f32* %222 = OpAccessChain %212 %37 
                                                      OpStore %222 %220 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat10_3;
bool u_xlatb3;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec2 u_xlat8;
float u_xlat15;
bool u_xlatb15;
float u_xlat16;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat10_1 * _Color;
    u_xlat15 = u_xlat10_1.w * _Color.w + (-_Cutoff);
    u_xlatb15 = u_xlat15<0.0;
    if((int(u_xlatb15) * int(0xffffffffu))!=0){discard;}
    u_xlat1 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat3.y * 0.25 + 0.75;
        u_xlat8.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat15, u_xlat8.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat15 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlatb3 = 0.0<u_xlat1.z;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat8.xy = u_xlat1.xy / u_xlat1.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
    u_xlat10_4 = texture(_LightTexture0, u_xlat8.xy);
    u_xlat16 = u_xlat3.x * u_xlat10_4.w;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat1.xx);
    u_xlat1.x = u_xlat16 * u_xlat10_3.w;
    u_xlat15 = u_xlat15 * u_xlat1.x;
    u_xlat1.xyz = vec3(u_xlat15) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat5.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 310
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %49 %287 %298 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 RelaxedPrecision 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 RelaxedPrecision 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %49 Location 49 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %126 SpecId 126 
                                                      OpDecorate %206 DescriptorSet 206 
                                                      OpDecorate %206 Binding 206 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %251 DescriptorSet 251 
                                                      OpDecorate %251 Binding 251 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %265 DescriptorSet 265 
                                                      OpDecorate %265 Binding 265 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %287 Location 287 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %292 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %298 Location 298 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %302 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeArray %14 %16 
                                              %19 = OpTypeStruct %14 %14 %14 %17 %7 %7 %14 %18 %14 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                              %24 = OpTypePointer Uniform %14 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                                              %40 = OpTypePointer Private %14 
                               Private f32_4* %41 = OpVariable Private 
                                              %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %43 = OpTypeSampledImage %42 
                                              %44 = OpTypePointer UniformConstant %43 
  UniformConstant read_only Texture2DSampled* %45 = OpVariable UniformConstant 
                                              %47 = OpTypeVector %6 2 
                                              %48 = OpTypePointer Input %47 
                                 Input f32_2* %49 = OpVariable Input 
                               Private f32_4* %52 = OpVariable Private 
                                          i32 %54 = OpConstant 8 
                               Private f32_4* %58 = OpVariable Private 
                                          u32 %59 = OpConstant 3 
                                              %62 = OpTypePointer Uniform %6 
                                          i32 %66 = OpConstant 9 
                                          u32 %71 = OpConstant 0 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %81 = OpConstant 1 
                                          i32 %83 = OpConstant -1 
                               Private f32_4* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 7 
                                         i32 %103 = OpConstant 2 
                                         i32 %112 = OpConstant 3 
                                         f32 %118 = OpConstant 3.674022E-40 
                                        bool %120 = OpConstantFalse 
                                        bool %126 = OpSpecConstantFalse 
                                         u32 %129 = OpConstant 1 
                              Private f32_3* %133 = OpVariable Private 
                                             %161 = OpTypePointer Function %7 
                                         i32 %171 = OpConstant 5 
                                             %172 = OpTypePointer Uniform %7 
                              Private f32_4* %177 = OpVariable Private 
                                         i32 %179 = OpConstant 4 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         f32 %189 = OpConstant 3.674022E-40 
                                         u32 %191 = OpConstant 2 
                                         f32 %194 = OpConstant 3.674022E-40 
                                             %203 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %204 = OpTypeSampledImage %203 
                                             %205 = OpTypePointer UniformConstant %204 
 UniformConstant read_only Texture3DSampled* %206 = OpVariable UniformConstant 
                              Private f32_3* %217 = OpVariable Private 
                                Private f32* %230 = OpVariable Private 
                                             %231 = OpTypePointer Function %6 
                                       f32_2 %247 = OpConstantComposite %194 %194 
 UniformConstant read_only Texture2DSampled* %251 = OpVariable UniformConstant 
 UniformConstant read_only Texture2DSampled* %265 = OpVariable UniformConstant 
                                         i32 %281 = OpConstant 6 
                                Private f32* %286 = OpVariable Private 
                                Input f32_3* %287 = OpVariable Input 
                                             %297 = OpTypePointer Output %14 
                               Output f32_4* %298 = OpVariable Output 
                                             %307 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %162 = OpVariable Function 
                               Function f32* %232 = OpVariable Function 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFAdd %13 %27 
                                                      OpStore %9 %28 
                                        f32_3 %31 = OpLoad %9 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpDot %31 %32 
                                                      OpStore %30 %33 
                                          f32 %34 = OpLoad %30 
                                          f32 %35 = OpExtInst %1 32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFMul %37 %38 
                                                      OpStore %9 %39 
                   read_only Texture2DSampled %46 = OpLoad %45 
                                        f32_2 %50 = OpLoad %49 
                                        f32_4 %51 = OpImageSampleImplicitLod %46 %50 
                                                      OpStore %41 %51 
                                        f32_4 %53 = OpLoad %41 
                               Uniform f32_4* %55 = OpAccessChain %21 %54 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpFMul %53 %56 
                                                      OpStore %52 %57 
                                 Private f32* %60 = OpAccessChain %41 %59 
                                          f32 %61 = OpLoad %60 
                                 Uniform f32* %63 = OpAccessChain %21 %54 %59 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFMul %61 %64 
                                 Uniform f32* %67 = OpAccessChain %21 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %65 %69 
                                 Private f32* %72 = OpAccessChain %58 %71 
                                                      OpStore %72 %70 
                                 Private f32* %76 = OpAccessChain %58 %71 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                         bool %80 = OpLoad %75 
                                          i32 %82 = OpSelect %80 %81 %23 
                                          i32 %84 = OpIMul %82 %83 
                                         bool %85 = OpINotEqual %84 %23 
                                                      OpSelectionMerge %87 None 
                                                      OpBranchConditional %85 %86 %87 
                                              %86 = OpLabel 
                                                      OpKill
                                              %87 = OpLabel 
                                        f32_3 %90 = OpLoad %11 
                                        f32_4 %91 = OpVectorShuffle %90 %90 1 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %21 %92 %81 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpFMul %91 %94 
                                                      OpStore %89 %95 
                               Uniform f32_4* %96 = OpAccessChain %21 %92 %23 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpLoad %11 
                                        f32_4 %99 = OpVectorShuffle %98 %98 0 0 0 0 
                                       f32_4 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %89 
                                       f32_4 %102 = OpFAdd %100 %101 
                                                      OpStore %89 %102 
                              Uniform f32_4* %104 = OpAccessChain %21 %92 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpLoad %11 
                                       f32_4 %107 = OpVectorShuffle %106 %106 2 2 2 2 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %89 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %89 %110 
                                       f32_4 %111 = OpLoad %89 
                              Uniform f32_4* %113 = OpAccessChain %21 %92 %112 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpFAdd %111 %114 
                                                      OpStore %89 %115 
                                Uniform f32* %116 = OpAccessChain %21 %103 %71 
                                         f32 %117 = OpLoad %116 
                                        bool %119 = OpFOrdEqual %117 %118 
                                                      OpStore %75 %119 
                                                      OpSelectionMerge %122 None 
                                                      OpBranchConditional %120 %121 %122 
                                             %121 = OpLabel 
                                        bool %123 = OpLoad %75 
                                                      OpSelectionMerge %125 None 
                                                      OpBranchConditional %123 %124 %125 
                                             %124 = OpLabel 
                                                      OpBranch %125 
                                             %125 = OpLabel 
                                                      OpBranch %122 
                                             %122 = OpLabel 
                                                      OpSelectionMerge %128 None 
                                                      OpBranchConditional %126 %127 %212 
                                             %127 = OpLabel 
                                Uniform f32* %130 = OpAccessChain %21 %103 %129 
                                         f32 %131 = OpLoad %130 
                                        bool %132 = OpFOrdEqual %131 %118 
                                                      OpStore %75 %132 
                                       f32_3 %134 = OpLoad %11 
                                       f32_3 %135 = OpVectorShuffle %134 %134 1 1 1 
                              Uniform f32_4* %136 = OpAccessChain %21 %112 %81 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_3 %139 = OpFMul %135 %138 
                                                      OpStore %133 %139 
                              Uniform f32_4* %140 = OpAccessChain %21 %112 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpLoad %11 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 0 0 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_3 %146 = OpLoad %133 
                                       f32_3 %147 = OpFAdd %145 %146 
                                                      OpStore %133 %147 
                              Uniform f32_4* %148 = OpAccessChain %21 %112 %103 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpLoad %11 
                                       f32_3 %152 = OpVectorShuffle %151 %151 2 2 2 
                                       f32_3 %153 = OpFMul %150 %152 
                                       f32_3 %154 = OpLoad %133 
                                       f32_3 %155 = OpFAdd %153 %154 
                                                      OpStore %133 %155 
                                       f32_3 %156 = OpLoad %133 
                              Uniform f32_4* %157 = OpAccessChain %21 %112 %112 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                                      OpStore %133 %160 
                                        bool %163 = OpLoad %75 
                                                      OpSelectionMerge %165 None 
                                                      OpBranchConditional %163 %164 %167 
                                             %164 = OpLabel 
                                       f32_3 %166 = OpLoad %133 
                                                      OpStore %162 %166 
                                                      OpBranch %165 
                                             %167 = OpLabel 
                                       f32_3 %168 = OpLoad %11 
                                                      OpStore %162 %168 
                                                      OpBranch %165 
                                             %165 = OpLabel 
                                       f32_3 %169 = OpLoad %162 
                                                      OpStore %133 %169 
                                       f32_3 %170 = OpLoad %133 
                              Uniform f32_3* %173 = OpAccessChain %21 %171 
                                       f32_3 %174 = OpLoad %173 
                                       f32_3 %175 = OpFNegate %174 
                                       f32_3 %176 = OpFAdd %170 %175 
                                                      OpStore %133 %176 
                                       f32_3 %178 = OpLoad %133 
                              Uniform f32_3* %180 = OpAccessChain %21 %179 
                                       f32_3 %181 = OpLoad %180 
                                       f32_3 %182 = OpFMul %178 %181 
                                       f32_4 %183 = OpLoad %177 
                                       f32_4 %184 = OpVectorShuffle %183 %182 0 4 5 6 
                                                      OpStore %177 %184 
                                Private f32* %185 = OpAccessChain %177 %129 
                                         f32 %186 = OpLoad %185 
                                         f32 %188 = OpFMul %186 %187 
                                         f32 %190 = OpFAdd %188 %189 
                                                      OpStore %30 %190 
                                Uniform f32* %192 = OpAccessChain %21 %103 %191 
                                         f32 %193 = OpLoad %192 
                                         f32 %195 = OpFMul %193 %194 
                                         f32 %196 = OpFAdd %195 %189 
                                Private f32* %197 = OpAccessChain %133 %71 
                                                      OpStore %197 %196 
                                         f32 %198 = OpLoad %30 
                                Private f32* %199 = OpAccessChain %133 %71 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpExtInst %1 40 %198 %200 
                                Private f32* %202 = OpAccessChain %177 %71 
                                                      OpStore %202 %201 
                  read_only Texture3DSampled %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %177 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 2 3 
                                       f32_4 %210 = OpImageSampleImplicitLod %207 %209 
                                                      OpStore %177 %210 
                                       f32_4 %211 = OpLoad %177 
                                                      OpStore %58 %211 
                                                      OpBranch %128 
                                             %212 = OpLabel 
                                Private f32* %213 = OpAccessChain %58 %71 
                                                      OpStore %213 %118 
                                Private f32* %214 = OpAccessChain %58 %129 
                                                      OpStore %214 %118 
                                Private f32* %215 = OpAccessChain %58 %191 
                                                      OpStore %215 %118 
                                Private f32* %216 = OpAccessChain %58 %59 
                                                      OpStore %216 %118 
                                                      OpBranch %128 
                                             %128 = OpLabel 
                                       f32_4 %218 = OpLoad %58 
                              Uniform f32_4* %219 = OpAccessChain %21 %81 
                                       f32_4 %220 = OpLoad %219 
                                         f32 %221 = OpDot %218 %220 
                                Private f32* %222 = OpAccessChain %217 %71 
                                                      OpStore %222 %221 
                                Private f32* %223 = OpAccessChain %217 %71 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpExtInst %1 43 %224 %78 %118 
                                Private f32* %226 = OpAccessChain %217 %71 
                                                      OpStore %226 %225 
                                Private f32* %227 = OpAccessChain %89 %191 
                                         f32 %228 = OpLoad %227 
                                        bool %229 = OpFOrdLessThan %78 %228 
                                                      OpStore %75 %229 
                                        bool %233 = OpLoad %75 
                                                      OpSelectionMerge %235 None 
                                                      OpBranchConditional %233 %234 %236 
                                             %234 = OpLabel 
                                                      OpStore %232 %118 
                                                      OpBranch %235 
                                             %236 = OpLabel 
                                                      OpStore %232 %78 
                                                      OpBranch %235 
                                             %235 = OpLabel 
                                         f32 %237 = OpLoad %232 
                                                      OpStore %230 %237 
                                       f32_4 %238 = OpLoad %89 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                                       f32_4 %240 = OpLoad %89 
                                       f32_2 %241 = OpVectorShuffle %240 %240 3 3 
                                       f32_2 %242 = OpFDiv %239 %241 
                                       f32_3 %243 = OpLoad %133 
                                       f32_3 %244 = OpVectorShuffle %243 %242 3 4 2 
                                                      OpStore %133 %244 
                                       f32_3 %245 = OpLoad %133 
                                       f32_2 %246 = OpVectorShuffle %245 %245 0 1 
                                       f32_2 %248 = OpFAdd %246 %247 
                                       f32_3 %249 = OpLoad %133 
                                       f32_3 %250 = OpVectorShuffle %249 %248 3 4 2 
                                                      OpStore %133 %250 
                  read_only Texture2DSampled %252 = OpLoad %251 
                                       f32_3 %253 = OpLoad %133 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_4 %255 = OpImageSampleImplicitLod %252 %254 
                                         f32 %256 = OpCompositeExtract %255 3 
                                                      OpStore %30 %256 
                                         f32 %257 = OpLoad %30 
                                         f32 %258 = OpLoad %230 
                                         f32 %259 = OpFMul %257 %258 
                                                      OpStore %230 %259 
                                       f32_4 %260 = OpLoad %89 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_4 %262 = OpLoad %89 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %261 %263 
                                                      OpStore %30 %264 
                  read_only Texture2DSampled %266 = OpLoad %265 
                                         f32 %267 = OpLoad %30 
                                       f32_2 %268 = OpCompositeConstruct %267 %267 
                                       f32_4 %269 = OpImageSampleImplicitLod %266 %268 
                                         f32 %270 = OpCompositeExtract %269 3 
                                                      OpStore %30 %270 
                                         f32 %271 = OpLoad %30 
                                         f32 %272 = OpLoad %230 
                                         f32 %273 = OpFMul %271 %272 
                                                      OpStore %230 %273 
                                Private f32* %274 = OpAccessChain %217 %71 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpLoad %230 
                                         f32 %277 = OpFMul %275 %276 
                                Private f32* %278 = OpAccessChain %217 %71 
                                                      OpStore %278 %277 
                                       f32_3 %279 = OpLoad %217 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 0 0 
                              Uniform f32_4* %282 = OpAccessChain %21 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_3 %285 = OpFMul %280 %284 
                                                      OpStore %217 %285 
                                       f32_3 %288 = OpLoad %287 
                                       f32_3 %289 = OpLoad %9 
                                         f32 %290 = OpDot %288 %289 
                                                      OpStore %286 %290 
                                         f32 %291 = OpLoad %286 
                                         f32 %292 = OpExtInst %1 40 %291 %78 
                                                      OpStore %286 %292 
                                       f32_4 %293 = OpLoad %52 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_3 %295 = OpLoad %217 
                                       f32_3 %296 = OpFMul %294 %295 
                                                      OpStore %217 %296 
                                         f32 %299 = OpLoad %286 
                                       f32_3 %300 = OpCompositeConstruct %299 %299 %299 
                                       f32_3 %301 = OpLoad %217 
                                       f32_3 %302 = OpFMul %300 %301 
                                       f32_4 %303 = OpLoad %298 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %298 %304 
                                Private f32* %305 = OpAccessChain %52 %59 
                                         f32 %306 = OpLoad %305 
                                 Output f32* %308 = OpAccessChain %298 %59 
                                                      OpStore %308 %306 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat10_1 * _Color;
    u_xlat12 = u_xlat10_1.w * _Color.w + (-_Cutoff);
    u_xlatb12 = u_xlat12<0.0;
    if((int(u_xlatb12) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xyz);
    u_xlat16_1 = u_xlat10_1.w * u_xlat10_3.w;
    u_xlat12 = u_xlat12 * u_xlat16_1;
    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.w = u_xlat2.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 287
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %49 %264 %275 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 RelaxedPrecision 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 RelaxedPrecision 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %45 RelaxedPrecision 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %46 RelaxedPrecision 
                                                      OpDecorate %49 Location 49 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %65 RelaxedPrecision 
                                                      OpDecorate %68 RelaxedPrecision 
                                                      OpDecorate %69 RelaxedPrecision 
                                                      OpDecorate %70 RelaxedPrecision 
                                                      OpDecorate %77 RelaxedPrecision 
                                                      OpDecorate %130 SpecId 130 
                                                      OpDecorate %209 DescriptorSet 209 
                                                      OpDecorate %209 Binding 209 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %233 DescriptorSet 233 
                                                      OpDecorate %233 Binding 233 
                                                      OpDecorate %242 DescriptorSet 242 
                                                      OpDecorate %242 Binding 242 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 Location 264 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %271 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %275 Location 275 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_3* %11 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeArray %14 %16 
                                              %19 = OpTypeStruct %14 %14 %14 %17 %7 %7 %14 %18 %14 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                              %24 = OpTypePointer Uniform %14 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %30 = OpVariable Private 
                                              %40 = OpTypePointer Private %14 
                               Private f32_4* %41 = OpVariable Private 
                                              %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %43 = OpTypeSampledImage %42 
                                              %44 = OpTypePointer UniformConstant %43 
  UniformConstant read_only Texture2DSampled* %45 = OpVariable UniformConstant 
                                              %47 = OpTypeVector %6 2 
                                              %48 = OpTypePointer Input %47 
                                 Input f32_2* %49 = OpVariable Input 
                               Private f32_4* %52 = OpVariable Private 
                                          i32 %54 = OpConstant 8 
                               Private f32_4* %58 = OpVariable Private 
                                          u32 %59 = OpConstant 3 
                                              %62 = OpTypePointer Uniform %6 
                                          i32 %66 = OpConstant 9 
                                          u32 %71 = OpConstant 0 
                                              %73 = OpTypeBool 
                                              %74 = OpTypePointer Private %73 
                                Private bool* %75 = OpVariable Private 
                                          f32 %78 = OpConstant 3.674022E-40 
                                          i32 %81 = OpConstant 1 
                                          i32 %83 = OpConstant -1 
                               Private f32_3* %89 = OpVariable Private 
                                          i32 %92 = OpConstant 7 
                                         i32 %105 = OpConstant 2 
                                         i32 %115 = OpConstant 3 
                                         f32 %122 = OpConstant 3.674022E-40 
                                        bool %124 = OpConstantFalse 
                                        bool %130 = OpSpecConstantFalse 
                                         u32 %133 = OpConstant 1 
                              Private f32_3* %137 = OpVariable Private 
                                             %165 = OpTypePointer Function %7 
                                         i32 %175 = OpConstant 5 
                                             %176 = OpTypePointer Uniform %7 
                              Private f32_4* %181 = OpVariable Private 
                                         i32 %183 = OpConstant 4 
                                         f32 %191 = OpConstant 3.674022E-40 
                                         f32 %193 = OpConstant 3.674022E-40 
                                Private f32* %195 = OpVariable Private 
                                         u32 %196 = OpConstant 2 
                                         f32 %199 = OpConstant 3.674022E-40 
                                             %206 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %207 = OpTypeSampledImage %206 
                                             %208 = OpTypePointer UniformConstant %207 
 UniformConstant read_only Texture3DSampled* %209 = OpVariable UniformConstant 
                              Private f32_3* %220 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %233 = OpVariable UniformConstant 
                                             %239 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %240 = OpTypeSampledImage %239 
                                             %241 = OpTypePointer UniformConstant %240 
UniformConstant read_only TextureCubeSampled* %242 = OpVariable UniformConstant 
                                         i32 %258 = OpConstant 6 
                                Private f32* %263 = OpVariable Private 
                                Input f32_3* %264 = OpVariable Input 
                                             %274 = OpTypePointer Output %14 
                               Output f32_4* %275 = OpVariable Output 
                                             %284 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %166 = OpVariable Function 
                                        f32_3 %12 = OpLoad %11 
                                        f32_3 %13 = OpFNegate %12 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFAdd %13 %27 
                                                      OpStore %9 %28 
                                        f32_3 %31 = OpLoad %9 
                                        f32_3 %32 = OpLoad %9 
                                          f32 %33 = OpDot %31 %32 
                                                      OpStore %30 %33 
                                          f32 %34 = OpLoad %30 
                                          f32 %35 = OpExtInst %1 32 %34 
                                                      OpStore %30 %35 
                                          f32 %36 = OpLoad %30 
                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFMul %37 %38 
                                                      OpStore %9 %39 
                   read_only Texture2DSampled %46 = OpLoad %45 
                                        f32_2 %50 = OpLoad %49 
                                        f32_4 %51 = OpImageSampleImplicitLod %46 %50 
                                                      OpStore %41 %51 
                                        f32_4 %53 = OpLoad %41 
                               Uniform f32_4* %55 = OpAccessChain %21 %54 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpFMul %53 %56 
                                                      OpStore %52 %57 
                                 Private f32* %60 = OpAccessChain %41 %59 
                                          f32 %61 = OpLoad %60 
                                 Uniform f32* %63 = OpAccessChain %21 %54 %59 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFMul %61 %64 
                                 Uniform f32* %67 = OpAccessChain %21 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFNegate %68 
                                          f32 %70 = OpFAdd %65 %69 
                                 Private f32* %72 = OpAccessChain %58 %71 
                                                      OpStore %72 %70 
                                 Private f32* %76 = OpAccessChain %58 %71 
                                          f32 %77 = OpLoad %76 
                                         bool %79 = OpFOrdLessThan %77 %78 
                                                      OpStore %75 %79 
                                         bool %80 = OpLoad %75 
                                          i32 %82 = OpSelect %80 %81 %23 
                                          i32 %84 = OpIMul %82 %83 
                                         bool %85 = OpINotEqual %84 %23 
                                                      OpSelectionMerge %87 None 
                                                      OpBranchConditional %85 %86 %87 
                                              %86 = OpLabel 
                                                      OpKill
                                              %87 = OpLabel 
                                        f32_3 %90 = OpLoad %11 
                                        f32_3 %91 = OpVectorShuffle %90 %90 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %21 %92 %81 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %91 %95 
                                                      OpStore %89 %96 
                               Uniform f32_4* %97 = OpAccessChain %21 %92 %23 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpLoad %11 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_3 %103 = OpLoad %89 
                                       f32_3 %104 = OpFAdd %102 %103 
                                                      OpStore %89 %104 
                              Uniform f32_4* %106 = OpAccessChain %21 %92 %105 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpLoad %11 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_3 %112 = OpLoad %89 
                                       f32_3 %113 = OpFAdd %111 %112 
                                                      OpStore %89 %113 
                                       f32_3 %114 = OpLoad %89 
                              Uniform f32_4* %116 = OpAccessChain %21 %92 %115 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %114 %118 
                                                      OpStore %89 %119 
                                Uniform f32* %120 = OpAccessChain %21 %105 %71 
                                         f32 %121 = OpLoad %120 
                                        bool %123 = OpFOrdEqual %121 %122 
                                                      OpStore %75 %123 
                                                      OpSelectionMerge %126 None 
                                                      OpBranchConditional %124 %125 %126 
                                             %125 = OpLabel 
                                        bool %127 = OpLoad %75 
                                                      OpSelectionMerge %129 None 
                                                      OpBranchConditional %127 %128 %129 
                                             %128 = OpLabel 
                                                      OpBranch %129 
                                             %129 = OpLabel 
                                                      OpBranch %126 
                                             %126 = OpLabel 
                                                      OpSelectionMerge %132 None 
                                                      OpBranchConditional %130 %131 %215 
                                             %131 = OpLabel 
                                Uniform f32* %134 = OpAccessChain %21 %105 %133 
                                         f32 %135 = OpLoad %134 
                                        bool %136 = OpFOrdEqual %135 %122 
                                                      OpStore %75 %136 
                                       f32_3 %138 = OpLoad %11 
                                       f32_3 %139 = OpVectorShuffle %138 %138 1 1 1 
                              Uniform f32_4* %140 = OpAccessChain %21 %115 %81 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %139 %142 
                                                      OpStore %137 %143 
                              Uniform f32_4* %144 = OpAccessChain %21 %115 %23 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpLoad %11 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 0 0 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_3 %150 = OpLoad %137 
                                       f32_3 %151 = OpFAdd %149 %150 
                                                      OpStore %137 %151 
                              Uniform f32_4* %152 = OpAccessChain %21 %115 %105 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpLoad %11 
                                       f32_3 %156 = OpVectorShuffle %155 %155 2 2 2 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_3 %158 = OpLoad %137 
                                       f32_3 %159 = OpFAdd %157 %158 
                                                      OpStore %137 %159 
                                       f32_3 %160 = OpLoad %137 
                              Uniform f32_4* %161 = OpAccessChain %21 %115 %115 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_3 %164 = OpFAdd %160 %163 
                                                      OpStore %137 %164 
                                        bool %167 = OpLoad %75 
                                                      OpSelectionMerge %169 None 
                                                      OpBranchConditional %167 %168 %171 
                                             %168 = OpLabel 
                                       f32_3 %170 = OpLoad %137 
                                                      OpStore %166 %170 
                                                      OpBranch %169 
                                             %171 = OpLabel 
                                       f32_3 %172 = OpLoad %11 
                                                      OpStore %166 %172 
                                                      OpBranch %169 
                                             %169 = OpLabel 
                                       f32_3 %173 = OpLoad %166 
                                                      OpStore %137 %173 
                                       f32_3 %174 = OpLoad %137 
                              Uniform f32_3* %177 = OpAccessChain %21 %175 
                                       f32_3 %178 = OpLoad %177 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %174 %179 
                                                      OpStore %137 %180 
                                       f32_3 %182 = OpLoad %137 
                              Uniform f32_3* %184 = OpAccessChain %21 %183 
                                       f32_3 %185 = OpLoad %184 
                                       f32_3 %186 = OpFMul %182 %185 
                                       f32_4 %187 = OpLoad %181 
                                       f32_4 %188 = OpVectorShuffle %187 %186 0 4 5 6 
                                                      OpStore %181 %188 
                                Private f32* %189 = OpAccessChain %181 %133 
                                         f32 %190 = OpLoad %189 
                                         f32 %192 = OpFMul %190 %191 
                                         f32 %194 = OpFAdd %192 %193 
                                                      OpStore %30 %194 
                                Uniform f32* %197 = OpAccessChain %21 %105 %196 
                                         f32 %198 = OpLoad %197 
                                         f32 %200 = OpFMul %198 %199 
                                         f32 %201 = OpFAdd %200 %193 
                                                      OpStore %195 %201 
                                         f32 %202 = OpLoad %30 
                                         f32 %203 = OpLoad %195 
                                         f32 %204 = OpExtInst %1 40 %202 %203 
                                Private f32* %205 = OpAccessChain %181 %71 
                                                      OpStore %205 %204 
                  read_only Texture3DSampled %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %181 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 2 3 
                                       f32_4 %213 = OpImageSampleImplicitLod %210 %212 
                                                      OpStore %181 %213 
                                       f32_4 %214 = OpLoad %181 
                                                      OpStore %58 %214 
                                                      OpBranch %132 
                                             %215 = OpLabel 
                                Private f32* %216 = OpAccessChain %58 %71 
                                                      OpStore %216 %122 
                                Private f32* %217 = OpAccessChain %58 %133 
                                                      OpStore %217 %122 
                                Private f32* %218 = OpAccessChain %58 %196 
                                                      OpStore %218 %122 
                                Private f32* %219 = OpAccessChain %58 %59 
                                                      OpStore %219 %122 
                                                      OpBranch %132 
                                             %132 = OpLabel 
                                       f32_4 %221 = OpLoad %58 
                              Uniform f32_4* %222 = OpAccessChain %21 %81 
                                       f32_4 %223 = OpLoad %222 
                                         f32 %224 = OpDot %221 %223 
                                Private f32* %225 = OpAccessChain %220 %71 
                                                      OpStore %225 %224 
                                Private f32* %226 = OpAccessChain %220 %71 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpExtInst %1 43 %227 %78 %122 
                                Private f32* %229 = OpAccessChain %220 %71 
                                                      OpStore %229 %228 
                                       f32_3 %230 = OpLoad %89 
                                       f32_3 %231 = OpLoad %89 
                                         f32 %232 = OpDot %230 %231 
                                                      OpStore %30 %232 
                  read_only Texture2DSampled %234 = OpLoad %233 
                                         f32 %235 = OpLoad %30 
                                       f32_2 %236 = OpCompositeConstruct %235 %235 
                                       f32_4 %237 = OpImageSampleImplicitLod %234 %236 
                                         f32 %238 = OpCompositeExtract %237 3 
                                                      OpStore %30 %238 
                read_only TextureCubeSampled %243 = OpLoad %242 
                                       f32_3 %244 = OpLoad %89 
                                       f32_4 %245 = OpImageSampleImplicitLod %243 %244 
                                         f32 %246 = OpCompositeExtract %245 3 
                                Private f32* %247 = OpAccessChain %89 %71 
                                                      OpStore %247 %246 
                                         f32 %248 = OpLoad %30 
                                Private f32* %249 = OpAccessChain %89 %71 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFMul %248 %250 
                                                      OpStore %30 %251 
                                Private f32* %252 = OpAccessChain %220 %71 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpLoad %30 
                                         f32 %255 = OpFMul %253 %254 
                                                      OpStore %30 %255 
                                         f32 %256 = OpLoad %30 
                                       f32_3 %257 = OpCompositeConstruct %256 %256 %256 
                              Uniform f32_4* %259 = OpAccessChain %21 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpFMul %257 %261 
                                                      OpStore %220 %262 
                                       f32_3 %265 = OpLoad %264 
                                       f32_3 %266 = OpLoad %9 
                                         f32 %267 = OpDot %265 %266 
                                                      OpStore %263 %267 
                                         f32 %268 = OpLoad %263 
                                         f32 %269 = OpExtInst %1 40 %268 %78 
                                                      OpStore %263 %269 
                                       f32_4 %270 = OpLoad %52 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_3 %272 = OpLoad %220 
                                       f32_3 %273 = OpFMul %271 %272 
                                                      OpStore %220 %273 
                                         f32 %276 = OpLoad %263 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_3 %278 = OpLoad %220 
                                       f32_3 %279 = OpFMul %277 %278 
                                       f32_4 %280 = OpLoad %275 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %275 %281 
                                Private f32* %282 = OpAccessChain %52 %59 
                                         f32 %283 = OpLoad %282 
                                 Output f32* %285 = OpAccessChain %275 %59 
                                                      OpStore %285 %283 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat10_2;
float u_xlat6;
bool u_xlatb6;
float u_xlat9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_0 * _Color;
    u_xlat0.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0.x<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb6)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat2.y * 0.25 + 0.75;
        u_xlat9 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat9, u_xlat6);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat0.xy);
    u_xlat0.x = u_xlat6 * u_xlat10_2.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 261
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %72 %236 %249 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %20 RelaxedPrecision 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpDecorate %26 ArrayStride 26 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 RelaxedPrecision 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpMemberDecorate %27 5 Offset 27 
                                                      OpMemberDecorate %27 6 RelaxedPrecision 
                                                      OpMemberDecorate %27 6 Offset 27 
                                                      OpMemberDecorate %27 7 Offset 27 
                                                      OpMemberDecorate %27 8 RelaxedPrecision 
                                                      OpMemberDecorate %27 8 Offset 27 
                                                      OpMemberDecorate %27 9 RelaxedPrecision 
                                                      OpMemberDecorate %27 9 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %36 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %72 Location 72 
                                                      OpDecorate %114 SpecId 114 
                                                      OpDecorate %195 DescriptorSet 195 
                                                      OpDecorate %195 Binding 195 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 DescriptorSet 216 
                                                      OpDecorate %216 Binding 216 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 Location 236 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %249 Location 249 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                               Private f32_4* %20 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 4 
                                              %24 = OpTypeArray %7 %23 
                                              %25 = OpTypeVector %6 3 
                                              %26 = OpTypeArray %7 %23 
                                              %27 = OpTypeStruct %7 %7 %7 %24 %25 %25 %7 %26 %7 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_3; f32_3; f32_4; f32_4[4]; f32_4; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 8 
                                              %32 = OpTypePointer Uniform %7 
                               Private f32_4* %36 = OpVariable Private 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 9 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 0 
                                          i32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant -1 
                                              %69 = OpTypePointer Private %15 
                               Private f32_2* %70 = OpVariable Private 
                                              %71 = OpTypePointer Input %25 
                                 Input f32_3* %72 = OpVariable Input 
                                          i32 %75 = OpConstant 7 
                                          i32 %88 = OpConstant 2 
                                          i32 %98 = OpConstant 3 
                               Private bool* %103 = OpVariable Private 
                                         f32 %106 = OpConstant 3.674022E-40 
                                        bool %108 = OpConstantFalse 
                                        bool %114 = OpSpecConstantFalse 
                                         u32 %117 = OpConstant 1 
                                             %121 = OpTypePointer Private %25 
                              Private f32_3* %122 = OpVariable Private 
                                             %150 = OpTypePointer Function %25 
                                         i32 %160 = OpConstant 5 
                                             %161 = OpTypePointer Uniform %25 
                              Private f32_4* %166 = OpVariable Private 
                                         i32 %168 = OpConstant 4 
                                Private f32* %174 = OpVariable Private 
                                         f32 %177 = OpConstant 3.674022E-40 
                                         f32 %179 = OpConstant 3.674022E-40 
                                Private f32* %181 = OpVariable Private 
                                         u32 %182 = OpConstant 2 
                                         f32 %185 = OpConstant 3.674022E-40 
                                             %192 = OpTypeImage %6 Dim3D 0 0 0 1 Unknown 
                                             %193 = OpTypeSampledImage %192 
                                             %194 = OpTypePointer UniformConstant %193 
 UniformConstant read_only Texture3DSampled* %195 = OpVariable UniformConstant 
                              Private f32_3* %206 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %216 = OpVariable UniformConstant 
                                         i32 %230 = OpConstant 6 
                                Private f32* %235 = OpVariable Private 
                                Input f32_3* %236 = OpVariable Input 
                                             %248 = OpTypePointer Output %7 
                               Output f32_4* %249 = OpVariable Output 
                                             %258 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %151 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %21 = OpLoad %9 
                               Uniform f32_4* %33 = OpAccessChain %29 %31 
                                        f32_4 %34 = OpLoad %33 
                                        f32_4 %35 = OpFMul %21 %34 
                                                      OpStore %20 %35 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %29 %31 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %29 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %36 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %36 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %62 = OpSelect %59 %61 %60 
                                          i32 %64 = OpIMul %62 %63 
                                         bool %65 = OpINotEqual %64 %60 
                                                      OpSelectionMerge %67 None 
                                                      OpBranchConditional %65 %66 %67 
                                              %66 = OpLabel 
                                                      OpKill
                                              %67 = OpLabel 
                                        f32_3 %73 = OpLoad %72 
                                        f32_2 %74 = OpVectorShuffle %73 %73 1 1 
                               Uniform f32_4* %76 = OpAccessChain %29 %75 %61 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 0 1 
                                        f32_2 %79 = OpFMul %74 %78 
                                                      OpStore %70 %79 
                               Uniform f32_4* %80 = OpAccessChain %29 %75 %60 
                                        f32_4 %81 = OpLoad %80 
                                        f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                                        f32_3 %83 = OpLoad %72 
                                        f32_2 %84 = OpVectorShuffle %83 %83 0 0 
                                        f32_2 %85 = OpFMul %82 %84 
                                        f32_2 %86 = OpLoad %70 
                                        f32_2 %87 = OpFAdd %85 %86 
                                                      OpStore %70 %87 
                               Uniform f32_4* %89 = OpAccessChain %29 %75 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                                        f32_3 %92 = OpLoad %72 
                                        f32_2 %93 = OpVectorShuffle %92 %92 2 2 
                                        f32_2 %94 = OpFMul %91 %93 
                                        f32_2 %95 = OpLoad %70 
                                        f32_2 %96 = OpFAdd %94 %95 
                                                      OpStore %70 %96 
                                        f32_2 %97 = OpLoad %70 
                               Uniform f32_4* %99 = OpAccessChain %29 %75 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                       f32_2 %102 = OpFAdd %97 %101 
                                                      OpStore %70 %102 
                                Uniform f32* %104 = OpAccessChain %29 %88 %50 
                                         f32 %105 = OpLoad %104 
                                        bool %107 = OpFOrdEqual %105 %106 
                                                      OpStore %103 %107 
                                                      OpSelectionMerge %110 None 
                                                      OpBranchConditional %108 %109 %110 
                                             %109 = OpLabel 
                                        bool %111 = OpLoad %103 
                                                      OpSelectionMerge %113 None 
                                                      OpBranchConditional %111 %112 %113 
                                             %112 = OpLabel 
                                                      OpBranch %113 
                                             %113 = OpLabel 
                                                      OpBranch %110 
                                             %110 = OpLabel 
                                                      OpSelectionMerge %116 None 
                                                      OpBranchConditional %114 %115 %201 
                                             %115 = OpLabel 
                                Uniform f32* %118 = OpAccessChain %29 %88 %117 
                                         f32 %119 = OpLoad %118 
                                        bool %120 = OpFOrdEqual %119 %106 
                                                      OpStore %103 %120 
                                       f32_3 %123 = OpLoad %72 
                                       f32_3 %124 = OpVectorShuffle %123 %123 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %29 %98 %61 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFMul %124 %127 
                                                      OpStore %122 %128 
                              Uniform f32_4* %129 = OpAccessChain %29 %98 %60 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpLoad %72 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 0 0 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_3 %135 = OpLoad %122 
                                       f32_3 %136 = OpFAdd %134 %135 
                                                      OpStore %122 %136 
                              Uniform f32_4* %137 = OpAccessChain %29 %98 %88 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpLoad %72 
                                       f32_3 %141 = OpVectorShuffle %140 %140 2 2 2 
                                       f32_3 %142 = OpFMul %139 %141 
                                       f32_3 %143 = OpLoad %122 
                                       f32_3 %144 = OpFAdd %142 %143 
                                                      OpStore %122 %144 
                                       f32_3 %145 = OpLoad %122 
                              Uniform f32_4* %146 = OpAccessChain %29 %98 %98 
                                       f32_4 %147 = OpLoad %146 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %145 %148 
                                                      OpStore %122 %149 
                                        bool %152 = OpLoad %103 
                                                      OpSelectionMerge %154 None 
                                                      OpBranchConditional %152 %153 %156 
                                             %153 = OpLabel 
                                       f32_3 %155 = OpLoad %122 
                                                      OpStore %151 %155 
                                                      OpBranch %154 
                                             %156 = OpLabel 
                                       f32_3 %157 = OpLoad %72 
                                                      OpStore %151 %157 
                                                      OpBranch %154 
                                             %154 = OpLabel 
                                       f32_3 %158 = OpLoad %151 
                                                      OpStore %122 %158 
                                       f32_3 %159 = OpLoad %122 
                              Uniform f32_3* %162 = OpAccessChain %29 %160 
                                       f32_3 %163 = OpLoad %162 
                                       f32_3 %164 = OpFNegate %163 
                                       f32_3 %165 = OpFAdd %159 %164 
                                                      OpStore %122 %165 
                                       f32_3 %167 = OpLoad %122 
                              Uniform f32_3* %169 = OpAccessChain %29 %168 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %166 
                                       f32_4 %173 = OpVectorShuffle %172 %171 0 4 5 6 
                                                      OpStore %166 %173 
                                Private f32* %175 = OpAccessChain %166 %117 
                                         f32 %176 = OpLoad %175 
                                         f32 %178 = OpFMul %176 %177 
                                         f32 %180 = OpFAdd %178 %179 
                                                      OpStore %174 %180 
                                Uniform f32* %183 = OpAccessChain %29 %88 %182 
                                         f32 %184 = OpLoad %183 
                                         f32 %186 = OpFMul %184 %185 
                                         f32 %187 = OpFAdd %186 %179 
                                                      OpStore %181 %187 
                                         f32 %188 = OpLoad %181 
                                         f32 %189 = OpLoad %174 
                                         f32 %190 = OpExtInst %1 40 %188 %189 
                                Private f32* %191 = OpAccessChain %166 %50 
                                                      OpStore %191 %190 
                  read_only Texture3DSampled %196 = OpLoad %195 
                                       f32_4 %197 = OpLoad %166 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 2 3 
                                       f32_4 %199 = OpImageSampleImplicitLod %196 %198 
                                                      OpStore %166 %199 
                                       f32_4 %200 = OpLoad %166 
                                                      OpStore %36 %200 
                                                      OpBranch %116 
                                             %201 = OpLabel 
                                Private f32* %202 = OpAccessChain %36 %50 
                                                      OpStore %202 %106 
                                Private f32* %203 = OpAccessChain %36 %117 
                                                      OpStore %203 %106 
                                Private f32* %204 = OpAccessChain %36 %182 
                                                      OpStore %204 %106 
                                Private f32* %205 = OpAccessChain %36 %37 
                                                      OpStore %205 %106 
                                                      OpBranch %116 
                                             %116 = OpLabel 
                                       f32_4 %207 = OpLoad %36 
                              Uniform f32_4* %208 = OpAccessChain %29 %61 
                                       f32_4 %209 = OpLoad %208 
                                         f32 %210 = OpDot %207 %209 
                                Private f32* %211 = OpAccessChain %206 %50 
                                                      OpStore %211 %210 
                                Private f32* %212 = OpAccessChain %206 %50 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpExtInst %1 43 %213 %57 %106 
                                Private f32* %215 = OpAccessChain %206 %50 
                                                      OpStore %215 %214 
                  read_only Texture2DSampled %217 = OpLoad %216 
                                       f32_2 %218 = OpLoad %70 
                                       f32_4 %219 = OpImageSampleImplicitLod %217 %218 
                                         f32 %220 = OpCompositeExtract %219 3 
                                Private f32* %221 = OpAccessChain %70 %50 
                                                      OpStore %221 %220 
                                Private f32* %222 = OpAccessChain %206 %50 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %70 %50 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                Private f32* %227 = OpAccessChain %70 %50 
                                                      OpStore %227 %226 
                                       f32_2 %228 = OpLoad %70 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                              Uniform f32_4* %231 = OpAccessChain %29 %230 
                                       f32_4 %232 = OpLoad %231 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %234 = OpFMul %229 %233 
                                                      OpStore %206 %234 
                                       f32_3 %237 = OpLoad %236 
                              Uniform f32_4* %238 = OpAccessChain %29 %60 
                                       f32_4 %239 = OpLoad %238 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %237 %240 
                                                      OpStore %235 %241 
                                         f32 %242 = OpLoad %235 
                                         f32 %243 = OpExtInst %1 40 %242 %57 
                                                      OpStore %235 %243 
                                       f32_4 %244 = OpLoad %20 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_3 %246 = OpLoad %206 
                                       f32_3 %247 = OpFMul %245 %246 
                                                      OpStore %206 %247 
                                         f32 %250 = OpLoad %235 
                                       f32_3 %251 = OpCompositeConstruct %250 %250 %250 
                                       f32_3 %252 = OpLoad %206 
                                       f32_3 %253 = OpFMul %251 %252 
                                       f32_4 %254 = OpLoad %249 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %249 %255 
                                Private f32* %256 = OpAccessChain %20 %37 
                                         f32 %257 = OpLoad %256 
                                 Output f32* %259 = OpAccessChain %249 %37 
                                                      OpStore %259 %257 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
}
}
 Pass {
  Name "PREPASS"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "PREPASSBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  GpuProgramID 137135
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0 = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb0 = u_xlat0<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 152
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                                             %146 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                 Output f32* %147 = OpAccessChain %85 %23 %81 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                                      OpStore %150 %149 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 68
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %16 %54 %57 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %8 RelaxedPrecision 
                                                    OpDecorate %12 RelaxedPrecision 
                                                    OpDecorate %12 DescriptorSet 12 
                                                    OpDecorate %12 Binding 12 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %16 Location 16 
                                                    OpDecorate %22 RelaxedPrecision 
                                                    OpDecorate %23 RelaxedPrecision 
                                                    OpDecorate %24 RelaxedPrecision 
                                                    OpMemberDecorate %25 0 RelaxedPrecision 
                                                    OpMemberDecorate %25 0 Offset 25 
                                                    OpMemberDecorate %25 1 RelaxedPrecision 
                                                    OpMemberDecorate %25 1 Offset 25 
                                                    OpDecorate %25 Block 
                                                    OpDecorate %27 DescriptorSet 27 
                                                    OpDecorate %27 Binding 27 
                                                    OpDecorate %32 RelaxedPrecision 
                                                    OpDecorate %33 RelaxedPrecision 
                                                    OpDecorate %36 RelaxedPrecision 
                                                    OpDecorate %37 RelaxedPrecision 
                                                    OpDecorate %38 RelaxedPrecision 
                                                    OpDecorate %42 RelaxedPrecision 
                                                    OpDecorate %54 RelaxedPrecision 
                                                    OpDecorate %54 Location 54 
                                                    OpDecorate %57 Location 57 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypePointer Private %6 
                                Private f32* %8 = OpVariable Private 
                                             %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %10 = OpTypeSampledImage %9 
                                            %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2DSampled* %12 = OpVariable UniformConstant 
                                            %14 = OpTypeVector %6 2 
                                            %15 = OpTypePointer Input %14 
                               Input f32_2* %16 = OpVariable Input 
                                            %18 = OpTypeVector %6 4 
                                            %20 = OpTypeInt 32 0 
                                        u32 %21 = OpConstant 3 
                               Private f32* %23 = OpVariable Private 
                                            %25 = OpTypeStruct %18 %6 
                                            %26 = OpTypePointer Uniform %25 
              Uniform struct {f32_4; f32;}* %27 = OpVariable Uniform 
                                            %28 = OpTypeInt 32 1 
                                        i32 %29 = OpConstant 0 
                                            %30 = OpTypePointer Uniform %6 
                                        i32 %34 = OpConstant 1 
                                            %39 = OpTypeBool 
                                            %40 = OpTypePointer Private %39 
                              Private bool* %41 = OpVariable Private 
                                        f32 %43 = OpConstant 3.674022E-40 
                                        i32 %47 = OpConstant -1 
                                            %53 = OpTypePointer Output %18 
                              Output f32_4* %54 = OpVariable Output 
                                            %55 = OpTypeVector %6 3 
                                            %56 = OpTypePointer Input %55 
                               Input f32_3* %57 = OpVariable Input 
                                        f32 %59 = OpConstant 3.674022E-40 
                                      f32_3 %60 = OpConstantComposite %59 %59 %59 
                                            %65 = OpTypePointer Output %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %13 = OpLoad %12 
                                      f32_2 %17 = OpLoad %16 
                                      f32_4 %19 = OpImageSampleImplicitLod %13 %17 
                                        f32 %22 = OpCompositeExtract %19 3 
                                                    OpStore %8 %22 
                                        f32 %24 = OpLoad %8 
                               Uniform f32* %31 = OpAccessChain %27 %29 %21 
                                        f32 %32 = OpLoad %31 
                                        f32 %33 = OpFMul %24 %32 
                               Uniform f32* %35 = OpAccessChain %27 %34 
                                        f32 %36 = OpLoad %35 
                                        f32 %37 = OpFNegate %36 
                                        f32 %38 = OpFAdd %33 %37 
                                                    OpStore %23 %38 
                                        f32 %42 = OpLoad %23 
                                       bool %44 = OpFOrdLessThan %42 %43 
                                                    OpStore %41 %44 
                                       bool %45 = OpLoad %41 
                                        i32 %46 = OpSelect %45 %34 %29 
                                        i32 %48 = OpIMul %46 %47 
                                       bool %49 = OpINotEqual %48 %29 
                                                    OpSelectionMerge %51 None 
                                                    OpBranchConditional %49 %50 %51 
                                            %50 = OpLabel 
                                                    OpKill
                                            %51 = OpLabel 
                                      f32_3 %58 = OpLoad %57 
                                      f32_3 %61 = OpFMul %58 %60 
                                      f32_3 %62 = OpFAdd %61 %60 
                                      f32_4 %63 = OpLoad %54 
                                      f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                    OpStore %54 %64 
                                Output f32* %66 = OpAccessChain %54 %21 
                                                    OpStore %66 %43 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
 Pass {
  Name "PREPASS"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "PREPASSFINAL" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  ZWrite Off
  GpuProgramID 231689
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat10_1 = texture(_LightBuffer, u_xlat1.xy);
    u_xlat16_1.xyz = log2(u_xlat10_1.xyz);
    u_xlat1.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD4.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %283 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                               Output f32_2* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                               Output f32_4* %129 = OpVariable Output 
                               Output f32_4* %141 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                               Output f32_3* %283 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore %100 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad %129 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore %129 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %129 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore %129 %140 
                                                      OpStore %141 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore %283 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 103
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %67 %87 %91 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %22 RelaxedPrecision 
                                                    OpDecorate %27 RelaxedPrecision 
                                                    OpMemberDecorate %28 0 RelaxedPrecision 
                                                    OpMemberDecorate %28 0 Offset 28 
                                                    OpMemberDecorate %28 1 RelaxedPrecision 
                                                    OpMemberDecorate %28 1 Offset 28 
                                                    OpDecorate %28 Block 
                                                    OpDecorate %30 DescriptorSet 30 
                                                    OpDecorate %30 Binding 30 
                                                    OpDecorate %35 RelaxedPrecision 
                                                    OpDecorate %36 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %41 RelaxedPrecision 
                                                    OpDecorate %44 RelaxedPrecision 
                                                    OpDecorate %45 RelaxedPrecision 
                                                    OpDecorate %48 RelaxedPrecision 
                                                    OpDecorate %49 RelaxedPrecision 
                                                    OpDecorate %54 RelaxedPrecision 
                                                    OpDecorate %67 Location 67 
                                                    OpDecorate %75 RelaxedPrecision 
                                                    OpDecorate %76 RelaxedPrecision 
                                                    OpDecorate %76 DescriptorSet 76 
                                                    OpDecorate %76 Binding 76 
                                                    OpDecorate %77 RelaxedPrecision 
                                                    OpDecorate %81 RelaxedPrecision 
                                                    OpDecorate %82 RelaxedPrecision 
                                                    OpDecorate %83 RelaxedPrecision 
                                                    OpDecorate %84 RelaxedPrecision 
                                                    OpDecorate %85 RelaxedPrecision 
                                                    OpDecorate %87 Location 87 
                                                    OpDecorate %91 RelaxedPrecision 
                                                    OpDecorate %91 Location 91 
                                                    OpDecorate %92 RelaxedPrecision 
                                                    OpDecorate %93 RelaxedPrecision 
                                                    OpDecorate %99 RelaxedPrecision 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %20 = OpTypeVector %6 3 
                                            %21 = OpTypePointer Private %20 
                             Private f32_3* %22 = OpVariable Private 
                                            %23 = OpTypeInt 32 0 
                                        u32 %24 = OpConstant 3 
                                            %25 = OpTypePointer Private %6 
                                            %28 = OpTypeStruct %7 %6 
                                            %29 = OpTypePointer Uniform %28 
              Uniform struct {f32_4; f32;}* %30 = OpVariable Uniform 
                                            %31 = OpTypeInt 32 1 
                                        i32 %32 = OpConstant 0 
                                            %33 = OpTypePointer Uniform %6 
                                        i32 %37 = OpConstant 1 
                                        u32 %42 = OpConstant 0 
                             Private f32_4* %44 = OpVariable Private 
                                            %46 = OpTypePointer Uniform %7 
                                            %50 = OpTypeBool 
                                            %51 = OpTypePointer Private %50 
                              Private bool* %52 = OpVariable Private 
                                        f32 %55 = OpConstant 3.674022E-40 
                                        i32 %59 = OpConstant -1 
                             Private f32_3* %65 = OpVariable Private 
                                            %66 = OpTypePointer Input %7 
                               Input f32_4* %67 = OpVariable Input 
                             Private f32_3* %75 = OpVariable Private 
UniformConstant read_only Texture2DSampled* %76 = OpVariable UniformConstant 
                                            %86 = OpTypePointer Input %20 
                               Input f32_3* %87 = OpVariable Input 
                                            %90 = OpTypePointer Output %7 
                              Output f32_4* %91 = OpVariable Output 
                                           %100 = OpTypePointer Output %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                    OpStore %9 %19 
                               Private f32* %26 = OpAccessChain %9 %24 
                                        f32 %27 = OpLoad %26 
                               Uniform f32* %34 = OpAccessChain %30 %32 %24 
                                        f32 %35 = OpLoad %34 
                                        f32 %36 = OpFMul %27 %35 
                               Uniform f32* %38 = OpAccessChain %30 %37 
                                        f32 %39 = OpLoad %38 
                                        f32 %40 = OpFNegate %39 
                                        f32 %41 = OpFAdd %36 %40 
                               Private f32* %43 = OpAccessChain %22 %42 
                                                    OpStore %43 %41 
                                      f32_4 %45 = OpLoad %9 
                             Uniform f32_4* %47 = OpAccessChain %30 %32 
                                      f32_4 %48 = OpLoad %47 
                                      f32_4 %49 = OpFMul %45 %48 
                                                    OpStore %44 %49 
                               Private f32* %53 = OpAccessChain %22 %42 
                                        f32 %54 = OpLoad %53 
                                       bool %56 = OpFOrdLessThan %54 %55 
                                                    OpStore %52 %56 
                                       bool %57 = OpLoad %52 
                                        i32 %58 = OpSelect %57 %37 %32 
                                        i32 %60 = OpIMul %58 %59 
                                       bool %61 = OpINotEqual %60 %32 
                                                    OpSelectionMerge %63 None 
                                                    OpBranchConditional %61 %62 %63 
                                            %62 = OpLabel 
                                                    OpKill
                                            %63 = OpLabel 
                                      f32_4 %68 = OpLoad %67 
                                      f32_2 %69 = OpVectorShuffle %68 %68 0 1 
                                      f32_4 %70 = OpLoad %67 
                                      f32_2 %71 = OpVectorShuffle %70 %70 3 3 
                                      f32_2 %72 = OpFDiv %69 %71 
                                      f32_3 %73 = OpLoad %65 
                                      f32_3 %74 = OpVectorShuffle %73 %72 3 4 2 
                                                    OpStore %65 %74 
                 read_only Texture2DSampled %77 = OpLoad %76 
                                      f32_3 %78 = OpLoad %65 
                                      f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                      f32_4 %80 = OpImageSampleImplicitLod %77 %79 
                                      f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                                    OpStore %75 %81 
                                      f32_3 %82 = OpLoad %75 
                                      f32_3 %83 = OpExtInst %1 30 %82 
                                                    OpStore %22 %83 
                                      f32_3 %84 = OpLoad %22 
                                      f32_3 %85 = OpFNegate %84 
                                      f32_3 %88 = OpLoad %87 
                                      f32_3 %89 = OpFAdd %85 %88 
                                                    OpStore %65 %89 
                                      f32_4 %92 = OpLoad %44 
                                      f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                      f32_3 %94 = OpLoad %65 
                                      f32_3 %95 = OpFMul %93 %94 
                                      f32_4 %96 = OpLoad %91 
                                      f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                    OpStore %91 %97 
                               Private f32* %98 = OpAccessChain %44 %24 
                                        f32 %99 = OpLoad %98 
                               Output f32* %101 = OpAccessChain %91 %24 
                                                    OpStore %101 %99 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
bool u_xlatb1;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat10_1 = texture(_LightBuffer, u_xlat1.xy);
    u_xlat16_1.xyz = log2(u_xlat10_1.xyz);
    u_xlat1.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD4.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %283 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                               Output f32_2* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                               Output f32_4* %129 = OpVariable Output 
                               Output f32_4* %141 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                               Output f32_3* %283 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore %100 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad %129 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore %129 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %129 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore %129 %140 
                                                      OpStore %141 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore %283 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 103
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %67 %87 %91 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %22 RelaxedPrecision 
                                                    OpDecorate %27 RelaxedPrecision 
                                                    OpMemberDecorate %28 0 RelaxedPrecision 
                                                    OpMemberDecorate %28 0 Offset 28 
                                                    OpMemberDecorate %28 1 RelaxedPrecision 
                                                    OpMemberDecorate %28 1 Offset 28 
                                                    OpDecorate %28 Block 
                                                    OpDecorate %30 DescriptorSet 30 
                                                    OpDecorate %30 Binding 30 
                                                    OpDecorate %35 RelaxedPrecision 
                                                    OpDecorate %36 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %41 RelaxedPrecision 
                                                    OpDecorate %44 RelaxedPrecision 
                                                    OpDecorate %45 RelaxedPrecision 
                                                    OpDecorate %48 RelaxedPrecision 
                                                    OpDecorate %49 RelaxedPrecision 
                                                    OpDecorate %54 RelaxedPrecision 
                                                    OpDecorate %67 Location 67 
                                                    OpDecorate %75 RelaxedPrecision 
                                                    OpDecorate %76 RelaxedPrecision 
                                                    OpDecorate %76 DescriptorSet 76 
                                                    OpDecorate %76 Binding 76 
                                                    OpDecorate %77 RelaxedPrecision 
                                                    OpDecorate %81 RelaxedPrecision 
                                                    OpDecorate %82 RelaxedPrecision 
                                                    OpDecorate %83 RelaxedPrecision 
                                                    OpDecorate %84 RelaxedPrecision 
                                                    OpDecorate %85 RelaxedPrecision 
                                                    OpDecorate %87 Location 87 
                                                    OpDecorate %91 RelaxedPrecision 
                                                    OpDecorate %91 Location 91 
                                                    OpDecorate %92 RelaxedPrecision 
                                                    OpDecorate %93 RelaxedPrecision 
                                                    OpDecorate %99 RelaxedPrecision 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %20 = OpTypeVector %6 3 
                                            %21 = OpTypePointer Private %20 
                             Private f32_3* %22 = OpVariable Private 
                                            %23 = OpTypeInt 32 0 
                                        u32 %24 = OpConstant 3 
                                            %25 = OpTypePointer Private %6 
                                            %28 = OpTypeStruct %7 %6 
                                            %29 = OpTypePointer Uniform %28 
              Uniform struct {f32_4; f32;}* %30 = OpVariable Uniform 
                                            %31 = OpTypeInt 32 1 
                                        i32 %32 = OpConstant 0 
                                            %33 = OpTypePointer Uniform %6 
                                        i32 %37 = OpConstant 1 
                                        u32 %42 = OpConstant 0 
                             Private f32_4* %44 = OpVariable Private 
                                            %46 = OpTypePointer Uniform %7 
                                            %50 = OpTypeBool 
                                            %51 = OpTypePointer Private %50 
                              Private bool* %52 = OpVariable Private 
                                        f32 %55 = OpConstant 3.674022E-40 
                                        i32 %59 = OpConstant -1 
                             Private f32_3* %65 = OpVariable Private 
                                            %66 = OpTypePointer Input %7 
                               Input f32_4* %67 = OpVariable Input 
                             Private f32_3* %75 = OpVariable Private 
UniformConstant read_only Texture2DSampled* %76 = OpVariable UniformConstant 
                                            %86 = OpTypePointer Input %20 
                               Input f32_3* %87 = OpVariable Input 
                                            %90 = OpTypePointer Output %7 
                              Output f32_4* %91 = OpVariable Output 
                                           %100 = OpTypePointer Output %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                    OpStore %9 %19 
                               Private f32* %26 = OpAccessChain %9 %24 
                                        f32 %27 = OpLoad %26 
                               Uniform f32* %34 = OpAccessChain %30 %32 %24 
                                        f32 %35 = OpLoad %34 
                                        f32 %36 = OpFMul %27 %35 
                               Uniform f32* %38 = OpAccessChain %30 %37 
                                        f32 %39 = OpLoad %38 
                                        f32 %40 = OpFNegate %39 
                                        f32 %41 = OpFAdd %36 %40 
                               Private f32* %43 = OpAccessChain %22 %42 
                                                    OpStore %43 %41 
                                      f32_4 %45 = OpLoad %9 
                             Uniform f32_4* %47 = OpAccessChain %30 %32 
                                      f32_4 %48 = OpLoad %47 
                                      f32_4 %49 = OpFMul %45 %48 
                                                    OpStore %44 %49 
                               Private f32* %53 = OpAccessChain %22 %42 
                                        f32 %54 = OpLoad %53 
                                       bool %56 = OpFOrdLessThan %54 %55 
                                                    OpStore %52 %56 
                                       bool %57 = OpLoad %52 
                                        i32 %58 = OpSelect %57 %37 %32 
                                        i32 %60 = OpIMul %58 %59 
                                       bool %61 = OpINotEqual %60 %32 
                                                    OpSelectionMerge %63 None 
                                                    OpBranchConditional %61 %62 %63 
                                            %62 = OpLabel 
                                                    OpKill
                                            %63 = OpLabel 
                                      f32_4 %68 = OpLoad %67 
                                      f32_2 %69 = OpVectorShuffle %68 %68 0 1 
                                      f32_4 %70 = OpLoad %67 
                                      f32_2 %71 = OpVectorShuffle %70 %70 3 3 
                                      f32_2 %72 = OpFDiv %69 %71 
                                      f32_3 %73 = OpLoad %65 
                                      f32_3 %74 = OpVectorShuffle %73 %72 3 4 2 
                                                    OpStore %65 %74 
                 read_only Texture2DSampled %77 = OpLoad %76 
                                      f32_3 %78 = OpLoad %65 
                                      f32_2 %79 = OpVectorShuffle %78 %78 0 1 
                                      f32_4 %80 = OpImageSampleImplicitLod %77 %79 
                                      f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                                    OpStore %75 %81 
                                      f32_3 %82 = OpLoad %75 
                                      f32_3 %83 = OpExtInst %1 30 %82 
                                                    OpStore %22 %83 
                                      f32_3 %84 = OpLoad %22 
                                      f32_3 %85 = OpFNegate %84 
                                      f32_3 %88 = OpLoad %87 
                                      f32_3 %89 = OpFAdd %85 %88 
                                                    OpStore %65 %89 
                                      f32_4 %92 = OpLoad %44 
                                      f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                      f32_3 %94 = OpLoad %65 
                                      f32_3 %95 = OpFMul %93 %94 
                                      f32_4 %96 = OpLoad %91 
                                      f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                    OpStore %91 %97 
                               Private f32* %98 = OpAccessChain %44 %24 
                                        f32 %99 = OpLoad %98 
                               Output f32* %101 = OpAccessChain %91 %24 
                                                    OpStore %101 %99 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlatb1 = u_xlat1.x<0.0;
    if((int(u_xlatb1) * int(0xffffffffu))!=0){discard;}
    u_xlat1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat10_1 = texture(_LightBuffer, u_xlat1.xy);
    u_xlat1.xyz = u_xlat10_1.xyz + vs_TEXCOORD4.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 293
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %283 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 RelaxedPrecision 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %283 Location 283 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                               Output f32_2* %100 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                               Output f32_4* %129 = OpVariable Output 
                               Output f32_4* %141 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                                             %181 = OpTypePointer Private %51 
                              Private f32_3* %182 = OpVariable Private 
                              Private f32_4* %199 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         i32 %212 = OpConstant 5 
                                         i32 %218 = OpConstant 6 
                                         i32 %224 = OpConstant 7 
                                         f32 %233 = OpConstant 3.674022E-40 
                                         u32 %234 = OpConstant 3 
                                       f32_3 %255 = OpConstantComposite %142 %142 %142 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_3 %264 = OpConstantComposite %263 %263 %263 
                                         f32 %275 = OpConstant 3.674022E-40 
                                       f32_3 %276 = OpConstantComposite %275 %275 %275 
                                         f32 %278 = OpConstant 3.674022E-40 
                                       f32_3 %279 = OpConstantComposite %278 %278 %278 
                               Output f32_3* %283 = OpVariable Output 
                                             %287 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore %100 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad %129 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore %129 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %129 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore %129 %140 
                                                      OpStore %141 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                Private f32* %185 = OpAccessChain %9 %90 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %184 %186 
                                Private f32* %188 = OpAccessChain %182 %116 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %116 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %182 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %193 %196 
                                Private f32* %198 = OpAccessChain %182 %116 
                                                      OpStore %198 %197 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 1 2 2 0 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %202 0 1 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                                      OpStore %199 %204 
                              Uniform f32_4* %207 = OpAccessChain %21 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %199 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %205 %116 
                                                      OpStore %211 %210 
                              Uniform f32_4* %213 = OpAccessChain %21 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %199 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %205 %90 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %199 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %205 %164 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpLoad %182 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 0 0 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_3 %231 = OpLoad %205 
                                       f32_3 %232 = OpFAdd %230 %231 
                                                      OpStore %182 %232 
                                Private f32* %235 = OpAccessChain %9 %234 
                                                      OpStore %235 %233 
                              Uniform f32_4* %236 = OpAccessChain %21 %24 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %9 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %205 %116 
                                                      OpStore %240 %239 
                              Uniform f32_4* %241 = OpAccessChain %21 %37 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %9 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %205 %90 
                                                      OpStore %245 %244 
                              Uniform f32_4* %246 = OpAccessChain %21 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %9 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %205 %164 
                                                      OpStore %250 %249 
                                       f32_3 %251 = OpLoad %182 
                                       f32_3 %252 = OpLoad %205 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %182 %253 
                                       f32_3 %254 = OpLoad %182 
                                       f32_3 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %182 %256 
                                       f32_3 %257 = OpLoad %182 
                                       f32_3 %258 = OpExtInst %1 30 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpExtInst %1 29 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %9 %272 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpExtInst %1 40 %285 %255 
                                                      OpStore %283 %286 
                                 Output f32* %288 = OpAccessChain %94 %29 %90 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFNegate %289 
                                 Output f32* %291 = OpAccessChain %94 %29 %90 
                                                      OpStore %291 %290 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 97
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %64 %81 %85 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %25 RelaxedPrecision 
                                                    OpMemberDecorate %26 0 RelaxedPrecision 
                                                    OpMemberDecorate %26 0 Offset 26 
                                                    OpMemberDecorate %26 1 RelaxedPrecision 
                                                    OpMemberDecorate %26 1 Offset 26 
                                                    OpDecorate %26 Block 
                                                    OpDecorate %28 DescriptorSet 28 
                                                    OpDecorate %28 Binding 28 
                                                    OpDecorate %33 RelaxedPrecision 
                                                    OpDecorate %34 RelaxedPrecision 
                                                    OpDecorate %37 RelaxedPrecision 
                                                    OpDecorate %38 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %41 RelaxedPrecision 
                                                    OpDecorate %44 RelaxedPrecision 
                                                    OpDecorate %45 RelaxedPrecision 
                                                    OpDecorate %49 RelaxedPrecision 
                                                    OpDecorate %64 Location 64 
                                                    OpDecorate %72 RelaxedPrecision 
                                                    OpDecorate %73 RelaxedPrecision 
                                                    OpDecorate %73 DescriptorSet 73 
                                                    OpDecorate %73 Binding 73 
                                                    OpDecorate %74 RelaxedPrecision 
                                                    OpDecorate %78 RelaxedPrecision 
                                                    OpDecorate %79 RelaxedPrecision 
                                                    OpDecorate %81 Location 81 
                                                    OpDecorate %85 RelaxedPrecision 
                                                    OpDecorate %85 Location 85 
                                                    OpDecorate %86 RelaxedPrecision 
                                                    OpDecorate %87 RelaxedPrecision 
                                                    OpDecorate %93 RelaxedPrecision 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %20 = OpTypePointer Private %6 
                               Private f32* %21 = OpVariable Private 
                                            %22 = OpTypeInt 32 0 
                                        u32 %23 = OpConstant 3 
                                            %26 = OpTypeStruct %7 %6 
                                            %27 = OpTypePointer Uniform %26 
              Uniform struct {f32_4; f32;}* %28 = OpVariable Uniform 
                                            %29 = OpTypeInt 32 1 
                                        i32 %30 = OpConstant 0 
                                            %31 = OpTypePointer Uniform %6 
                                        i32 %35 = OpConstant 1 
                             Private f32_4* %40 = OpVariable Private 
                                            %42 = OpTypePointer Uniform %7 
                                            %46 = OpTypeBool 
                                            %47 = OpTypePointer Private %46 
                              Private bool* %48 = OpVariable Private 
                                        f32 %50 = OpConstant 3.674022E-40 
                                        i32 %54 = OpConstant -1 
                                            %60 = OpTypeVector %6 3 
                                            %61 = OpTypePointer Private %60 
                             Private f32_3* %62 = OpVariable Private 
                                            %63 = OpTypePointer Input %7 
                               Input f32_4* %64 = OpVariable Input 
                             Private f32_3* %72 = OpVariable Private 
UniformConstant read_only Texture2DSampled* %73 = OpVariable UniformConstant 
                                            %80 = OpTypePointer Input %60 
                               Input f32_3* %81 = OpVariable Input 
                                            %84 = OpTypePointer Output %7 
                              Output f32_4* %85 = OpVariable Output 
                                            %94 = OpTypePointer Output %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                    OpStore %9 %19 
                               Private f32* %24 = OpAccessChain %9 %23 
                                        f32 %25 = OpLoad %24 
                               Uniform f32* %32 = OpAccessChain %28 %30 %23 
                                        f32 %33 = OpLoad %32 
                                        f32 %34 = OpFMul %25 %33 
                               Uniform f32* %36 = OpAccessChain %28 %35 
                                        f32 %37 = OpLoad %36 
                                        f32 %38 = OpFNegate %37 
                                        f32 %39 = OpFAdd %34 %38 
                                                    OpStore %21 %39 
                                      f32_4 %41 = OpLoad %9 
                             Uniform f32_4* %43 = OpAccessChain %28 %30 
                                      f32_4 %44 = OpLoad %43 
                                      f32_4 %45 = OpFMul %41 %44 
                                                    OpStore %40 %45 
                                        f32 %49 = OpLoad %21 
                                       bool %51 = OpFOrdLessThan %49 %50 
                                                    OpStore %48 %51 
                                       bool %52 = OpLoad %48 
                                        i32 %53 = OpSelect %52 %35 %30 
                                        i32 %55 = OpIMul %53 %54 
                                       bool %56 = OpINotEqual %55 %30 
                                                    OpSelectionMerge %58 None 
                                                    OpBranchConditional %56 %57 %58 
                                            %57 = OpLabel 
                                                    OpKill
                                            %58 = OpLabel 
                                      f32_4 %65 = OpLoad %64 
                                      f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                                      f32_4 %67 = OpLoad %64 
                                      f32_2 %68 = OpVectorShuffle %67 %67 3 3 
                                      f32_2 %69 = OpFDiv %66 %68 
                                      f32_3 %70 = OpLoad %62 
                                      f32_3 %71 = OpVectorShuffle %70 %69 3 4 2 
                                                    OpStore %62 %71 
                 read_only Texture2DSampled %74 = OpLoad %73 
                                      f32_3 %75 = OpLoad %62 
                                      f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                                      f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                      f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                                    OpStore %72 %78 
                                      f32_3 %79 = OpLoad %72 
                                      f32_3 %82 = OpLoad %81 
                                      f32_3 %83 = OpFAdd %79 %82 
                                                    OpStore %62 %83 
                                      f32_4 %86 = OpLoad %40 
                                      f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                      f32_3 %88 = OpLoad %62 
                                      f32_3 %89 = OpFMul %87 %88 
                                      f32_4 %90 = OpLoad %85 
                                      f32_4 %91 = OpVectorShuffle %90 %89 4 5 6 3 
                                                    OpStore %85 %91 
                               Private f32* %92 = OpAccessChain %40 %23 
                                        f32 %93 = OpLoad %92 
                                Output f32* %95 = OpAccessChain %85 %23 
                                                    OpStore %95 %93 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DEFERRED" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  GpuProgramID 314249
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec3 u_xlat0;
vec4 u_xlat10_0;
float u_xlat3;
bool u_xlatb3;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlatb3 = u_xlat3<0.0;
    if((int(u_xlatb3) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %263 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                                Output f32_2* %99 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                               Output f32_3* %151 = OpVariable Output 
                               Output f32_4* %154 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                                             %157 = OpTypePointer Private %51 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                       f32_3 %230 = OpConstantComposite %155 %155 %155 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                               Output f32_3* %263 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore %99 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                                      OpStore %154 %156 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %83 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %120 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %120 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %120 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %83 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %134 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %9 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %9 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %120 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %9 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %83 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %9 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %134 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %158 %231 
                                       f32_3 %232 = OpLoad %158 
                                       f32_3 %233 = OpExtInst %1 30 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpExtInst %1 29 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %9 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 40 %259 %230 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                                      OpStore %263 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 102
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %68 %74 %77 %86 %89 %98 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %22 RelaxedPrecision 
                                                    OpDecorate %27 RelaxedPrecision 
                                                    OpMemberDecorate %28 0 RelaxedPrecision 
                                                    OpMemberDecorate %28 0 Offset 28 
                                                    OpMemberDecorate %28 1 RelaxedPrecision 
                                                    OpMemberDecorate %28 1 Offset 28 
                                                    OpDecorate %28 Block 
                                                    OpDecorate %30 DescriptorSet 30 
                                                    OpDecorate %30 Binding 30 
                                                    OpDecorate %35 RelaxedPrecision 
                                                    OpDecorate %36 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %40 RelaxedPrecision 
                                                    OpDecorate %41 RelaxedPrecision 
                                                    OpDecorate %44 RelaxedPrecision 
                                                    OpDecorate %45 RelaxedPrecision 
                                                    OpDecorate %46 RelaxedPrecision 
                                                    OpDecorate %49 RelaxedPrecision 
                                                    OpDecorate %50 RelaxedPrecision 
                                                    OpDecorate %51 RelaxedPrecision 
                                                    OpDecorate %56 RelaxedPrecision 
                                                    OpDecorate %68 RelaxedPrecision 
                                                    OpDecorate %68 Location 68 
                                                    OpDecorate %69 RelaxedPrecision 
                                                    OpDecorate %72 RelaxedPrecision 
                                                    OpDecorate %74 RelaxedPrecision 
                                                    OpDecorate %74 Location 74 
                                                    OpDecorate %75 RelaxedPrecision 
                                                    OpDecorate %76 RelaxedPrecision 
                                                    OpDecorate %77 RelaxedPrecision 
                                                    OpDecorate %77 Location 77 
                                                    OpDecorate %78 RelaxedPrecision 
                                                    OpDecorate %79 RelaxedPrecision 
                                                    OpDecorate %80 RelaxedPrecision 
                                                    OpDecorate %86 RelaxedPrecision 
                                                    OpDecorate %86 Location 86 
                                                    OpDecorate %89 Location 89 
                                                    OpDecorate %98 RelaxedPrecision 
                                                    OpDecorate %98 Location 98 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %20 = OpTypeVector %6 3 
                                            %21 = OpTypePointer Private %20 
                             Private f32_3* %22 = OpVariable Private 
                                            %23 = OpTypeInt 32 0 
                                        u32 %24 = OpConstant 3 
                                            %25 = OpTypePointer Private %6 
                                            %28 = OpTypeStruct %7 %6 
                                            %29 = OpTypePointer Uniform %28 
              Uniform struct {f32_4; f32;}* %30 = OpVariable Uniform 
                                            %31 = OpTypeInt 32 1 
                                        i32 %32 = OpConstant 0 
                                            %33 = OpTypePointer Uniform %6 
                                        i32 %37 = OpConstant 1 
                                        u32 %42 = OpConstant 0 
                             Private f32_3* %44 = OpVariable Private 
                                            %47 = OpTypePointer Uniform %7 
                                            %52 = OpTypeBool 
                                            %53 = OpTypePointer Private %52 
                              Private bool* %54 = OpVariable Private 
                                        f32 %57 = OpConstant 3.674022E-40 
                                        i32 %61 = OpConstant -1 
                                            %67 = OpTypePointer Output %7 
                              Output f32_4* %68 = OpVariable Output 
                                            %73 = OpTypePointer Input %20 
                               Input f32_3* %74 = OpVariable Input 
                              Output f32_4* %77 = OpVariable Output 
                                        f32 %83 = OpConstant 3.674022E-40 
                                            %84 = OpTypePointer Output %6 
                              Output f32_4* %86 = OpVariable Output 
                                      f32_4 %87 = OpConstantComposite %57 %57 %57 %57 
                             Private f32_4* %88 = OpVariable Private 
                               Input f32_3* %89 = OpVariable Input 
                                        f32 %91 = OpConstant 3.674022E-40 
                                      f32_3 %92 = OpConstantComposite %91 %91 %91 
                              Output f32_4* %98 = OpVariable Output 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                    OpStore %9 %19 
                               Private f32* %26 = OpAccessChain %9 %24 
                                        f32 %27 = OpLoad %26 
                               Uniform f32* %34 = OpAccessChain %30 %32 %24 
                                        f32 %35 = OpLoad %34 
                                        f32 %36 = OpFMul %27 %35 
                               Uniform f32* %38 = OpAccessChain %30 %37 
                                        f32 %39 = OpLoad %38 
                                        f32 %40 = OpFNegate %39 
                                        f32 %41 = OpFAdd %36 %40 
                               Private f32* %43 = OpAccessChain %22 %42 
                                                    OpStore %43 %41 
                                      f32_4 %45 = OpLoad %9 
                                      f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                             Uniform f32_4* %48 = OpAccessChain %30 %32 
                                      f32_4 %49 = OpLoad %48 
                                      f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                      f32_3 %51 = OpFMul %46 %50 
                                                    OpStore %44 %51 
                               Private f32* %55 = OpAccessChain %22 %42 
                                        f32 %56 = OpLoad %55 
                                       bool %58 = OpFOrdLessThan %56 %57 
                                                    OpStore %54 %58 
                                       bool %59 = OpLoad %54 
                                        i32 %60 = OpSelect %59 %37 %32 
                                        i32 %62 = OpIMul %60 %61 
                                       bool %63 = OpINotEqual %62 %32 
                                                    OpSelectionMerge %65 None 
                                                    OpBranchConditional %63 %64 %65 
                                            %64 = OpLabel 
                                                    OpKill
                                            %65 = OpLabel 
                                      f32_3 %69 = OpLoad %44 
                                      f32_4 %70 = OpLoad %68 
                                      f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                                    OpStore %68 %71 
                                      f32_3 %72 = OpLoad %44 
                                      f32_3 %75 = OpLoad %74 
                                      f32_3 %76 = OpFMul %72 %75 
                                                    OpStore %22 %76 
                                      f32_3 %78 = OpLoad %22 
                                      f32_3 %79 = OpFNegate %78 
                                      f32_3 %80 = OpExtInst %1 29 %79 
                                      f32_4 %81 = OpLoad %77 
                                      f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                    OpStore %77 %82 
                                Output f32* %85 = OpAccessChain %68 %24 
                                                    OpStore %85 %83 
                                                    OpStore %86 %87 
                                      f32_3 %90 = OpLoad %89 
                                      f32_3 %93 = OpFMul %90 %92 
                                      f32_3 %94 = OpFAdd %93 %92 
                                      f32_4 %95 = OpLoad %88 
                                      f32_4 %96 = OpVectorShuffle %95 %94 4 5 6 3 
                                                    OpStore %88 %96 
                               Private f32* %97 = OpAccessChain %88 %24 
                                                    OpStore %97 %83 
                                      f32_4 %99 = OpLoad %88 
                                                    OpStore %98 %99 
                               Output f32* %100 = OpAccessChain %77 %24 
                                                    OpStore %100 %83 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec3 u_xlat0;
vec4 u_xlat10_0;
bool u_xlatb0;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    u_xlatb0 = u_xlat3<0.0;
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %52 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %97 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %146 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                                Output f32_3* %52 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                                Output f32_2* %97 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                               Output f32_3* %140 = OpVariable Output 
                               Output f32_4* %146 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore %52 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore %97 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore %140 %145 
                                                      OpStore %146 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 90
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %51 %72 %76 %85 %87 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %25 RelaxedPrecision 
                                                    OpMemberDecorate %26 0 RelaxedPrecision 
                                                    OpMemberDecorate %26 0 Offset 26 
                                                    OpMemberDecorate %26 1 RelaxedPrecision 
                                                    OpMemberDecorate %26 1 Offset 26 
                                                    OpDecorate %26 Block 
                                                    OpDecorate %28 DescriptorSet 28 
                                                    OpDecorate %28 Binding 28 
                                                    OpDecorate %33 RelaxedPrecision 
                                                    OpDecorate %34 RelaxedPrecision 
                                                    OpDecorate %37 RelaxedPrecision 
                                                    OpDecorate %38 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %42 RelaxedPrecision 
                                                    OpDecorate %43 RelaxedPrecision 
                                                    OpDecorate %44 RelaxedPrecision 
                                                    OpDecorate %47 RelaxedPrecision 
                                                    OpDecorate %48 RelaxedPrecision 
                                                    OpDecorate %49 RelaxedPrecision 
                                                    OpDecorate %51 RelaxedPrecision 
                                                    OpDecorate %51 Location 51 
                                                    OpDecorate %52 RelaxedPrecision 
                                                    OpDecorate %58 RelaxedPrecision 
                                                    OpDecorate %72 RelaxedPrecision 
                                                    OpDecorate %72 Location 72 
                                                    OpDecorate %76 Location 76 
                                                    OpDecorate %85 RelaxedPrecision 
                                                    OpDecorate %85 Location 85 
                                                    OpDecorate %87 RelaxedPrecision 
                                                    OpDecorate %87 Location 87 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %20 = OpTypePointer Private %6 
                               Private f32* %21 = OpVariable Private 
                                            %22 = OpTypeInt 32 0 
                                        u32 %23 = OpConstant 3 
                                            %26 = OpTypeStruct %7 %6 
                                            %27 = OpTypePointer Uniform %26 
              Uniform struct {f32_4; f32;}* %28 = OpVariable Uniform 
                                            %29 = OpTypeInt 32 1 
                                        i32 %30 = OpConstant 0 
                                            %31 = OpTypePointer Uniform %6 
                                        i32 %35 = OpConstant 1 
                                            %40 = OpTypeVector %6 3 
                                            %41 = OpTypePointer Private %40 
                             Private f32_3* %42 = OpVariable Private 
                                            %45 = OpTypePointer Uniform %7 
                                            %50 = OpTypePointer Output %7 
                              Output f32_4* %51 = OpVariable Output 
                                            %55 = OpTypeBool 
                                            %56 = OpTypePointer Private %55 
                              Private bool* %57 = OpVariable Private 
                                        f32 %59 = OpConstant 3.674022E-40 
                                        i32 %63 = OpConstant -1 
                                        f32 %69 = OpConstant 3.674022E-40 
                                            %70 = OpTypePointer Output %6 
                              Output f32_4* %72 = OpVariable Output 
                                      f32_4 %73 = OpConstantComposite %59 %59 %59 %59 
                             Private f32_4* %74 = OpVariable Private 
                                            %75 = OpTypePointer Input %40 
                               Input f32_3* %76 = OpVariable Input 
                                        f32 %78 = OpConstant 3.674022E-40 
                                      f32_3 %79 = OpConstantComposite %78 %78 %78 
                              Output f32_4* %85 = OpVariable Output 
                              Output f32_4* %87 = OpVariable Output 
                                      f32_4 %88 = OpConstantComposite %69 %69 %69 %69 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                    OpStore %9 %19 
                               Private f32* %24 = OpAccessChain %9 %23 
                                        f32 %25 = OpLoad %24 
                               Uniform f32* %32 = OpAccessChain %28 %30 %23 
                                        f32 %33 = OpLoad %32 
                                        f32 %34 = OpFMul %25 %33 
                               Uniform f32* %36 = OpAccessChain %28 %35 
                                        f32 %37 = OpLoad %36 
                                        f32 %38 = OpFNegate %37 
                                        f32 %39 = OpFAdd %34 %38 
                                                    OpStore %21 %39 
                                      f32_4 %43 = OpLoad %9 
                                      f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                             Uniform f32_4* %46 = OpAccessChain %28 %30 
                                      f32_4 %47 = OpLoad %46 
                                      f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                      f32_3 %49 = OpFMul %44 %48 
                                                    OpStore %42 %49 
                                      f32_3 %52 = OpLoad %42 
                                      f32_4 %53 = OpLoad %51 
                                      f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
                                                    OpStore %51 %54 
                                        f32 %58 = OpLoad %21 
                                       bool %60 = OpFOrdLessThan %58 %59 
                                                    OpStore %57 %60 
                                       bool %61 = OpLoad %57 
                                        i32 %62 = OpSelect %61 %35 %30 
                                        i32 %64 = OpIMul %62 %63 
                                       bool %65 = OpINotEqual %64 %30 
                                                    OpSelectionMerge %67 None 
                                                    OpBranchConditional %65 %66 %67 
                                            %66 = OpLabel 
                                                    OpKill
                                            %67 = OpLabel 
                                Output f32* %71 = OpAccessChain %51 %23 
                                                    OpStore %71 %69 
                                                    OpStore %72 %73 
                                      f32_3 %77 = OpLoad %76 
                                      f32_3 %80 = OpFMul %77 %79 
                                      f32_3 %81 = OpFAdd %80 %79 
                                      f32_4 %82 = OpLoad %74 
                                      f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                    OpStore %74 %83 
                               Private f32* %84 = OpAccessChain %74 %23 
                                                    OpStore %84 %69 
                                      f32_4 %86 = OpLoad %74 
                                                    OpStore %85 %86 
                                                    OpStore %87 %88 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec3 u_xlat0;
vec4 u_xlat10_0;
float u_xlat3;
bool u_xlatb3;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlatb3 = u_xlat3<0.0;
    if((int(u_xlatb3) * int(0xffffffffu))!=0){discard;}
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target3.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %263 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 RelaxedPrecision 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 RelaxedPrecision 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 RelaxedPrecision 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 RelaxedPrecision 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 RelaxedPrecision 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 RelaxedPrecision 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 RelaxedPrecision 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %53 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %172 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %263 Location 263 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                                Output f32_3* %53 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                                Output f32_2* %99 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                               Output f32_3* %151 = OpVariable Output 
                               Output f32_4* %154 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                                             %157 = OpTypePointer Private %51 
                              Private f32_3* %158 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %187 = OpConstant 4 
                                         i32 %193 = OpConstant 5 
                                         i32 %199 = OpConstant 6 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         u32 %209 = OpConstant 3 
                                       f32_3 %230 = OpConstantComposite %155 %155 %155 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                               Output f32_3* %263 = OpVariable Output 
                                             %266 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore %53 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore %99 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %151 %153 
                                                      OpStore %154 %156 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %83 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %158 %120 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %120 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %158 %120 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %169 %172 
                                Private f32* %174 = OpAccessChain %158 %120 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 1 2 2 0 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 0 1 2 2 
                                       f32_4 %180 = OpFMul %177 %179 
                                                      OpStore %175 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %47 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %175 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %181 %120 
                                                      OpStore %186 %185 
                              Uniform f32_4* %188 = OpAccessChain %21 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpLoad %175 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %181 %83 
                                                      OpStore %192 %191 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %175 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %181 %134 
                                                      OpStore %198 %197 
                              Uniform f32_4* %200 = OpAccessChain %21 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpLoad %158 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 0 0 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_3 %206 = OpLoad %181 
                                       f32_3 %207 = OpFAdd %205 %206 
                                                      OpStore %158 %207 
                                Private f32* %210 = OpAccessChain %9 %209 
                                                      OpStore %210 %208 
                              Uniform f32_4* %211 = OpAccessChain %21 %29 
                                       f32_4 %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %9 
                                         f32 %214 = OpDot %212 %213 
                                Private f32* %215 = OpAccessChain %181 %120 
                                                      OpStore %215 %214 
                              Uniform f32_4* %216 = OpAccessChain %21 %24 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %9 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %181 %83 
                                                      OpStore %220 %219 
                              Uniform f32_4* %221 = OpAccessChain %21 %37 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %9 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %181 %134 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %158 
                                       f32_3 %227 = OpLoad %181 
                                       f32_3 %228 = OpFAdd %226 %227 
                                                      OpStore %158 %228 
                                       f32_3 %229 = OpLoad %158 
                                       f32_3 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %158 %231 
                                       f32_3 %232 = OpLoad %158 
                                       f32_3 %233 = OpExtInst %1 30 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %9 %235 
                                       f32_4 %236 = OpLoad %9 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %9 
                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                      OpStore %9 %242 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpExtInst %1 29 %244 
                                       f32_4 %246 = OpLoad %9 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %9 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %9 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %9 %257 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpExtInst %1 40 %259 %230 
                                       f32_4 %261 = OpLoad %9 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %9 %262 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                                      OpStore %263 %265 
                                 Output f32* %267 = OpAccessChain %87 %29 %83 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %87 %29 %83 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 96
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %17 %65 %69 %72 %80 %83 %92 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpDecorate %9 RelaxedPrecision 
                                                    OpDecorate %13 RelaxedPrecision 
                                                    OpDecorate %13 DescriptorSet 13 
                                                    OpDecorate %13 Binding 13 
                                                    OpDecorate %14 RelaxedPrecision 
                                                    OpDecorate %17 Location 17 
                                                    OpDecorate %21 RelaxedPrecision 
                                                    OpDecorate %25 RelaxedPrecision 
                                                    OpMemberDecorate %26 0 RelaxedPrecision 
                                                    OpMemberDecorate %26 0 Offset 26 
                                                    OpMemberDecorate %26 1 RelaxedPrecision 
                                                    OpMemberDecorate %26 1 Offset 26 
                                                    OpDecorate %26 Block 
                                                    OpDecorate %28 DescriptorSet 28 
                                                    OpDecorate %28 Binding 28 
                                                    OpDecorate %33 RelaxedPrecision 
                                                    OpDecorate %34 RelaxedPrecision 
                                                    OpDecorate %37 RelaxedPrecision 
                                                    OpDecorate %38 RelaxedPrecision 
                                                    OpDecorate %39 RelaxedPrecision 
                                                    OpDecorate %42 RelaxedPrecision 
                                                    OpDecorate %43 RelaxedPrecision 
                                                    OpDecorate %44 RelaxedPrecision 
                                                    OpDecorate %47 RelaxedPrecision 
                                                    OpDecorate %48 RelaxedPrecision 
                                                    OpDecorate %49 RelaxedPrecision 
                                                    OpDecorate %53 RelaxedPrecision 
                                                    OpDecorate %65 RelaxedPrecision 
                                                    OpDecorate %65 Location 65 
                                                    OpDecorate %66 RelaxedPrecision 
                                                    OpDecorate %69 RelaxedPrecision 
                                                    OpDecorate %69 Location 69 
                                                    OpDecorate %70 RelaxedPrecision 
                                                    OpDecorate %72 RelaxedPrecision 
                                                    OpDecorate %72 Location 72 
                                                    OpDecorate %73 RelaxedPrecision 
                                                    OpDecorate %74 RelaxedPrecision 
                                                    OpDecorate %80 RelaxedPrecision 
                                                    OpDecorate %80 Location 80 
                                                    OpDecorate %83 Location 83 
                                                    OpDecorate %92 RelaxedPrecision 
                                                    OpDecorate %92 Location 92 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %11 = OpTypeSampledImage %10 
                                            %12 = OpTypePointer UniformConstant %11 
UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Input %15 
                               Input f32_2* %17 = OpVariable Input 
                                            %20 = OpTypePointer Private %6 
                               Private f32* %21 = OpVariable Private 
                                            %22 = OpTypeInt 32 0 
                                        u32 %23 = OpConstant 3 
                                            %26 = OpTypeStruct %7 %6 
                                            %27 = OpTypePointer Uniform %26 
              Uniform struct {f32_4; f32;}* %28 = OpVariable Uniform 
                                            %29 = OpTypeInt 32 1 
                                        i32 %30 = OpConstant 0 
                                            %31 = OpTypePointer Uniform %6 
                                        i32 %35 = OpConstant 1 
                                            %40 = OpTypeVector %6 3 
                                            %41 = OpTypePointer Private %40 
                             Private f32_3* %42 = OpVariable Private 
                                            %45 = OpTypePointer Uniform %7 
                                            %50 = OpTypeBool 
                                            %51 = OpTypePointer Private %50 
                              Private bool* %52 = OpVariable Private 
                                        f32 %54 = OpConstant 3.674022E-40 
                                        i32 %58 = OpConstant -1 
                                            %64 = OpTypePointer Output %7 
                              Output f32_4* %65 = OpVariable Output 
                              Output f32_4* %69 = OpVariable Output 
                                            %71 = OpTypePointer Input %40 
                               Input f32_3* %72 = OpVariable Input 
                                        f32 %77 = OpConstant 3.674022E-40 
                                            %78 = OpTypePointer Output %6 
                              Output f32_4* %80 = OpVariable Output 
                                      f32_4 %81 = OpConstantComposite %54 %54 %54 %54 
                             Private f32_4* %82 = OpVariable Private 
                               Input f32_3* %83 = OpVariable Input 
                                        f32 %85 = OpConstant 3.674022E-40 
                                      f32_3 %86 = OpConstantComposite %85 %85 %85 
                              Output f32_4* %92 = OpVariable Output 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                 read_only Texture2DSampled %14 = OpLoad %13 
                                      f32_2 %18 = OpLoad %17 
                                      f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                    OpStore %9 %19 
                               Private f32* %24 = OpAccessChain %9 %23 
                                        f32 %25 = OpLoad %24 
                               Uniform f32* %32 = OpAccessChain %28 %30 %23 
                                        f32 %33 = OpLoad %32 
                                        f32 %34 = OpFMul %25 %33 
                               Uniform f32* %36 = OpAccessChain %28 %35 
                                        f32 %37 = OpLoad %36 
                                        f32 %38 = OpFNegate %37 
                                        f32 %39 = OpFAdd %34 %38 
                                                    OpStore %21 %39 
                                      f32_4 %43 = OpLoad %9 
                                      f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                             Uniform f32_4* %46 = OpAccessChain %28 %30 
                                      f32_4 %47 = OpLoad %46 
                                      f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                      f32_3 %49 = OpFMul %44 %48 
                                                    OpStore %42 %49 
                                        f32 %53 = OpLoad %21 
                                       bool %55 = OpFOrdLessThan %53 %54 
                                                    OpStore %52 %55 
                                       bool %56 = OpLoad %52 
                                        i32 %57 = OpSelect %56 %35 %30 
                                        i32 %59 = OpIMul %57 %58 
                                       bool %60 = OpINotEqual %59 %30 
                                                    OpSelectionMerge %62 None 
                                                    OpBranchConditional %60 %61 %62 
                                            %61 = OpLabel 
                                                    OpKill
                                            %62 = OpLabel 
                                      f32_3 %66 = OpLoad %42 
                                      f32_4 %67 = OpLoad %65 
                                      f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                                    OpStore %65 %68 
                                      f32_3 %70 = OpLoad %42 
                                      f32_3 %73 = OpLoad %72 
                                      f32_3 %74 = OpFMul %70 %73 
                                      f32_4 %75 = OpLoad %69 
                                      f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                    OpStore %69 %76 
                                Output f32* %79 = OpAccessChain %65 %23 
                                                    OpStore %79 %77 
                                                    OpStore %80 %81 
                                      f32_3 %84 = OpLoad %83 
                                      f32_3 %87 = OpFMul %84 %86 
                                      f32_3 %88 = OpFAdd %87 %86 
                                      f32_4 %89 = OpLoad %82 
                                      f32_4 %90 = OpVectorShuffle %89 %88 4 5 6 3 
                                                    OpStore %82 %90 
                               Private f32* %91 = OpAccessChain %82 %23 
                                                    OpStore %91 %77 
                                      f32_4 %93 = OpLoad %82 
                                                    OpStore %92 %93 
                                Output f32* %94 = OpAccessChain %69 %23 
                                                    OpStore %94 %77 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
}
}
 Pass {
  Name "META"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
  Cull Off
  GpuProgramID 328026
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
float u_xlat3;
bool u_xlatb3;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3 = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlatb3 = u_xlat3<0.0;
    if((int(u_xlatb3) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = unity_OneOverOutputBoost;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
    u_xlat0.w = 1.0;
    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 237
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %177 %178 %221 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %221 Location 221 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                             %176 = OpTypePointer Output %33 
                               Output f32_2* %177 = OpVariable Output 
                                Input f32_4* %178 = OpVariable Input 
                                         i32 %181 = OpConstant 5 
                                             %220 = OpTypePointer Output %56 
                               Output f32_3* %221 = OpVariable Output 
                                             %231 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                              Uniform f32_4* %182 = OpAccessChain %42 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFMul %180 %184 
                              Uniform f32_4* %186 = OpAccessChain %42 %181 
                                       f32_4 %187 = OpLoad %186 
                                       f32_2 %188 = OpVectorShuffle %187 %187 2 3 
                                       f32_2 %189 = OpFAdd %185 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %13 
                                       f32_3 %191 = OpVectorShuffle %190 %190 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %42 %120 %121 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFMul %191 %194 
                                       f32_4 %196 = OpLoad %21 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %21 %197 
                              Uniform f32_4* %198 = OpAccessChain %42 %120 %120 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %13 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %21 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFAdd %203 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %21 %208 
                              Uniform f32_4* %209 = OpAccessChain %42 %120 %44 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_4 %212 = OpLoad %13 
                                       f32_3 %213 = OpVectorShuffle %212 %212 2 2 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %21 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %21 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %21 %219 
                              Uniform f32_4* %222 = OpAccessChain %42 %120 %92 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_4 %225 = OpLoad %13 
                                       f32_3 %226 = OpVectorShuffle %225 %225 3 3 3 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %21 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFAdd %227 %229 
                                                      OpStore %221 %230 
                                 Output f32* %232 = OpAccessChain %166 %120 %162 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFNegate %233 
                                 Output f32* %235 = OpAccessChain %166 %120 %162 
                                                      OpStore %235 %234 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 145
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %131 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %21 RelaxedPrecision 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 RelaxedPrecision 
                                                      OpMemberDecorate %27 0 Offset 27 
                                                      OpMemberDecorate %27 1 Offset 27 
                                                      OpMemberDecorate %27 2 Offset 27 
                                                      OpMemberDecorate %27 3 Offset 27 
                                                      OpMemberDecorate %27 4 RelaxedPrecision 
                                                      OpMemberDecorate %27 4 Offset 27 
                                                      OpDecorate %27 Block 
                                                      OpDecorate %29 DescriptorSet 29 
                                                      OpDecorate %29 Binding 29 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %38 RelaxedPrecision 
                                                      OpDecorate %39 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %41 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %52 RelaxedPrecision 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %81 RelaxedPrecision 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %84 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %128 RelaxedPrecision 
                                                      OpDecorate %131 RelaxedPrecision 
                                                      OpDecorate %131 Location 131 
                                                      OpDecorate %142 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeInt 32 0 
                                          u32 %23 = OpConstant 3 
                                              %26 = OpTypeVector %22 4 
                                              %27 = OpTypeStruct %7 %26 %6 %6 %6 
                                              %28 = OpTypePointer Uniform %27 
Uniform struct {f32_4; u32_4; f32; f32; f32;}* %29 = OpVariable Uniform 
                                              %30 = OpTypeInt 32 1 
                                          i32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Uniform %6 
                                          i32 %36 = OpConstant 4 
                               Private f32_4* %41 = OpVariable Private 
                                              %42 = OpTypeVector %6 3 
                                              %45 = OpTypePointer Uniform %7 
                                              %57 = OpTypeBool 
                                              %58 = OpTypePointer Private %57 
                                Private bool* %59 = OpVariable Private 
                                          f32 %61 = OpConstant 3.674022E-40 
                                          i32 %64 = OpConstant 1 
                                          i32 %66 = OpConstant -1 
                                 Private f32* %72 = OpVariable Private 
                                          i32 %73 = OpConstant 2 
                                          f32 %77 = OpConstant 3.674022E-40 
                                              %79 = OpTypePointer Private %42 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %89 = OpConstant 3 
                                             %102 = OpTypePointer Function %42 
                                             %104 = OpTypeVector %57 4 
                                             %105 = OpTypePointer Uniform %26 
                                         u32 %109 = OpConstant 0 
                                       f32_3 %115 = OpConstantComposite %61 %61 %61 
                                             %119 = OpTypePointer Function %6 
                                             %130 = OpTypePointer Output %7 
                               Output f32_4* %131 = OpVariable Output 
                                             %132 = OpTypePointer Function %7 
                                       f32_4 %140 = OpConstantComposite %61 %61 %61 %77 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %103 = OpVariable Function 
                               Function f32* %120 = OpVariable Function 
                             Function f32_4* %133 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                 Private f32* %24 = OpAccessChain %9 %23 
                                          f32 %25 = OpLoad %24 
                                 Uniform f32* %33 = OpAccessChain %29 %31 %23 
                                          f32 %34 = OpLoad %33 
                                          f32 %35 = OpFMul %25 %34 
                                 Uniform f32* %37 = OpAccessChain %29 %36 
                                          f32 %38 = OpLoad %37 
                                          f32 %39 = OpFNegate %38 
                                          f32 %40 = OpFAdd %35 %39 
                                                      OpStore %21 %40 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                               Uniform f32_4* %46 = OpAccessChain %29 %31 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_3 %49 = OpFMul %44 %48 
                                        f32_4 %50 = OpLoad %41 
                                        f32_4 %51 = OpVectorShuffle %50 %49 4 5 6 3 
                                                      OpStore %41 %51 
                                        f32_4 %52 = OpLoad %41 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpExtInst %1 30 %53 
                                        f32_4 %55 = OpLoad %41 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %41 %56 
                                          f32 %60 = OpLoad %21 
                                         bool %62 = OpFOrdLessThan %60 %61 
                                                      OpStore %59 %62 
                                         bool %63 = OpLoad %59 
                                          i32 %65 = OpSelect %63 %64 %31 
                                          i32 %67 = OpIMul %65 %66 
                                         bool %68 = OpINotEqual %67 %31 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %70 
                                              %69 = OpLabel 
                                                      OpKill
                                              %70 = OpLabel 
                                 Uniform f32* %74 = OpAccessChain %29 %73 
                                          f32 %75 = OpLoad %74 
                                                      OpStore %72 %75 
                                          f32 %76 = OpLoad %72 
                                          f32 %78 = OpExtInst %1 43 %76 %61 %77 
                                                      OpStore %72 %78 
                                        f32_4 %81 = OpLoad %41 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                          f32 %83 = OpLoad %72 
                                        f32_3 %84 = OpCompositeConstruct %83 %83 %83 
                                        f32_3 %85 = OpFMul %82 %84 
                                                      OpStore %80 %85 
                                        f32_3 %86 = OpLoad %80 
                                        f32_3 %87 = OpExtInst %1 29 %86 
                                                      OpStore %80 %87 
                                        f32_3 %88 = OpLoad %80 
                                 Uniform f32* %90 = OpAccessChain %29 %89 
                                          f32 %91 = OpLoad %90 
                                 Uniform f32* %92 = OpAccessChain %29 %89 
                                          f32 %93 = OpLoad %92 
                                 Uniform f32* %94 = OpAccessChain %29 %89 
                                          f32 %95 = OpLoad %94 
                                        f32_3 %96 = OpCompositeConstruct %91 %93 %95 
                                          f32 %97 = OpCompositeExtract %96 0 
                                          f32 %98 = OpCompositeExtract %96 1 
                                          f32 %99 = OpCompositeExtract %96 2 
                                       f32_3 %100 = OpCompositeConstruct %97 %98 %99 
                                       f32_3 %101 = OpExtInst %1 37 %88 %100 
                                                      OpStore %80 %101 
                              Uniform u32_4* %106 = OpAccessChain %29 %64 
                                       u32_4 %107 = OpLoad %106 
                                         u32 %108 = OpCompositeExtract %107 0 
                                        bool %110 = OpINotEqual %108 %109 
                                                      OpSelectionMerge %112 None 
                                                      OpBranchConditional %110 %111 %114 
                                             %111 = OpLabel 
                                       f32_3 %113 = OpLoad %80 
                                                      OpStore %103 %113 
                                                      OpBranch %112 
                                             %114 = OpLabel 
                                                      OpStore %103 %115 
                                                      OpBranch %112 
                                             %112 = OpLabel 
                                       f32_3 %116 = OpLoad %103 
                                       f32_4 %117 = OpLoad %41 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %41 %118 
                              Uniform u32_4* %121 = OpAccessChain %29 %64 
                                       u32_4 %122 = OpLoad %121 
                                         u32 %123 = OpCompositeExtract %122 0 
                                        bool %124 = OpINotEqual %123 %109 
                                                      OpSelectionMerge %126 None 
                                                      OpBranchConditional %124 %125 %127 
                                             %125 = OpLabel 
                                                      OpStore %120 %77 
                                                      OpBranch %126 
                                             %127 = OpLabel 
                                                      OpStore %120 %61 
                                                      OpBranch %126 
                                             %126 = OpLabel 
                                         f32 %128 = OpLoad %120 
                                Private f32* %129 = OpAccessChain %41 %23 
                                                      OpStore %129 %128 
                              Uniform u32_4* %134 = OpAccessChain %29 %64 
                                       u32_4 %135 = OpLoad %134 
                                         u32 %136 = OpCompositeExtract %135 1 
                                        bool %137 = OpINotEqual %136 %109 
                                                      OpSelectionMerge %139 None 
                                                      OpBranchConditional %137 %138 %141 
                                             %138 = OpLabel 
                                                      OpStore %133 %140 
                                                      OpBranch %139 
                                             %141 = OpLabel 
                                       f32_4 %142 = OpLoad %41 
                                                      OpStore %133 %142 
                                                      OpBranch %139 
                                             %139 = OpLabel 
                                       f32_4 %143 = OpLoad %133 
                                                      OpStore %131 %143 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "EDITOR_VISUALIZATION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "EDITOR_VISUALIZATION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec4 in_TEXCOORD0;
in  vec4 in_TEXCOORD1;
in  vec4 in_TEXCOORD2;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bool u_xlatb6;
void main()
{
    u_xlatb0 = 0.0<in_POSITION0.z;
    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
    u_xlatb6 = 0.0<u_xlat0.z;
    u_xlat1.z = u_xlatb6 ? 9.99999975e-005 : float(0.0);
    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform 	int unity_VisualizationMode;
uniform 	int _CheckAlbedo;
uniform 	vec4 _AlbedoCompareColor;
uniform 	float _AlbedoMinLuminance;
uniform 	float _AlbedoMaxLuminance;
uniform 	float _AlbedoHueTolerance;
uniform 	float _AlbedoSaturationTolerance;
uniform 	vec4 unity_MaterialValidateLowColor;
uniform 	vec4 unity_MaterialValidateHighColor;
uniform 	float _Cutoff;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec4 u_xlat10_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
bvec3 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
float u_xlat9;
bool u_xlatb9;
vec2 u_xlat11;
vec2 u_xlat12;
vec2 u_xlat14;
bool u_xlatb14;
float u_xlat16;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat21 = u_xlat10_0.w * _Color.w + (-_Cutoff);
    u_xlatb21 = u_xlat21<0.0;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    if(unity_VisualizationMode == 0) {
        u_xlatb2.xyz = greaterThanEqual(vec4(0.0404499993, 0.0404499993, 0.0404499993, 0.0), u_xlat1.xyzx).xyz;
        u_xlat3.xyz = u_xlat1.xyz * vec3(0.0773993805, 0.0773993805, 0.0773993805);
        u_xlatb4.xyz = lessThan(u_xlat1.xyzx, vec4(1.0, 1.0, 1.0, 0.0)).xyz;
        u_xlat5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(0.0549999997, 0.0549999997, 0.0549999997);
        u_xlat5.xyz = u_xlat5.xyz * vec3(0.947867334, 0.947867334, 0.947867334);
        u_xlat5.xyz = log2(u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(2.4000001, 2.4000001, 2.4000001);
        u_xlat5.xyz = exp2(u_xlat5.xyz);
        u_xlat6.xyz = log2(u_xlat1.xyz);
        u_xlat6.xyz = u_xlat6.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
        u_xlat6.xyz = exp2(u_xlat6.xyz);
        u_xlat4.x = (u_xlatb4.x) ? u_xlat5.x : u_xlat6.x;
        u_xlat4.y = (u_xlatb4.y) ? u_xlat5.y : u_xlat6.y;
        u_xlat4.z = (u_xlatb4.z) ? u_xlat5.z : u_xlat6.z;
        u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat4.x;
        u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat4.y;
        u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat4.z;
        u_xlat3.x = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
        u_xlat21 = dot(u_xlat2.xyz, vec3(0.333299994, 0.333299994, 0.333299994));
        u_xlat21 = (_CheckAlbedo != 0) ? u_xlat3.x : u_xlat21;
        if(_CheckAlbedo == 0) {
            u_xlatb22 = u_xlat21<0.0120000001;
            u_xlatb2.x = 0.899999976<u_xlat21;
            u_xlat3.y = 0.0;
            u_xlat2 = (u_xlatb2.x) ? unity_MaterialValidateHighColor : u_xlat3.xxxy;
            SV_Target0 = (bool(u_xlatb22)) ? unity_MaterialValidateLowColor : u_xlat2;
        } else {
            u_xlatb22 = u_xlat21<_AlbedoMinLuminance;
            if(u_xlatb22){
                SV_Target0 = unity_MaterialValidateLowColor;
            } else {
                u_xlatb21 = _AlbedoMaxLuminance<u_xlat21;
                if(u_xlatb21){
                    SV_Target0 = unity_MaterialValidateHighColor;
                } else {
                    u_xlatb2.xy = lessThan(u_xlat1.yxyy, u_xlat1.zzzz).xy;
                    u_xlatb21 = u_xlatb2.y && u_xlatb2.x;
                    if(u_xlatb21){
                        u_xlatb21 = u_xlat1.z!=0.0;
                        u_xlatb22 = u_xlat1.y<u_xlat1.x;
                        u_xlat22 = (u_xlatb22) ? u_xlat1.y : u_xlat1.x;
                        u_xlat22 = u_xlat10_0.z * _Color.z + (-u_xlat22);
                        u_xlatb2.x = u_xlat22!=0.0;
                        u_xlat11.y = u_xlat22 / u_xlat1.z;
                        u_xlat16 = u_xlat10_0.x * _Color.x + (-u_xlat1.y);
                        u_xlat22 = u_xlat16 / u_xlat22;
                        u_xlat11.x = u_xlat22 + 4.0;
                        u_xlat12.x = u_xlat16 + 4.0;
                        u_xlat12.y = 0.0;
                        u_xlat4.yz = (u_xlatb2.x) ? u_xlat11.xy : u_xlat12.xy;
                        u_xlat22 = u_xlat4.y * 0.166666672;
                        u_xlatb2.x = u_xlat4.y<36.0;
                        u_xlat16 = u_xlat4.y * 0.166666672 + 1.0;
                        u_xlat4.x = (u_xlatb2.x) ? u_xlat16 : u_xlat22;
                        u_xlat2.xz = mix(vec2(0.0, 0.0), u_xlat4.xz, vec2(bvec2(u_xlatb21)));
                    } else {
                        u_xlatb21 = u_xlat1.x<u_xlat1.y;
                        if(u_xlatb21){
                            u_xlatb21 = u_xlat1.y!=0.0;
                            u_xlat22 = (u_xlatb2.y) ? u_xlat1.x : u_xlat1.z;
                            u_xlat22 = u_xlat10_0.y * _Color.y + (-u_xlat22);
                            u_xlatb9 = u_xlat22!=0.0;
                            u_xlat11.y = u_xlat22 / u_xlat1.y;
                            u_xlat14.x = u_xlat10_0.z * _Color.z + (-u_xlat1.x);
                            u_xlat22 = u_xlat14.x / u_xlat22;
                            u_xlat11.x = u_xlat22 + 2.0;
                            u_xlat12.x = u_xlat14.x + 2.0;
                            u_xlat12.y = 0.0;
                            u_xlat4.yz = (bool(u_xlatb9)) ? u_xlat11.xy : u_xlat12.xy;
                            u_xlat14.x = u_xlat4.y * 0.166666672;
                            u_xlatb22 = u_xlat4.y<36.0;
                            u_xlat9 = u_xlat4.y * 0.166666672 + 1.0;
                            u_xlat4.x = (u_xlatb22) ? u_xlat9 : u_xlat14.x;
                            u_xlat2.xz = mix(vec2(0.0, 0.0), u_xlat4.xz, vec2(bvec2(u_xlatb21)));
                        } else {
                            u_xlatb14 = u_xlat1.x!=0.0;
                            u_xlatb21 = u_xlat1.z<u_xlat1.y;
                            u_xlat21 = (u_xlatb21) ? u_xlat1.z : u_xlat1.y;
                            u_xlat0.x = u_xlat10_0.x * _Color.x + (-u_xlat21);
                            u_xlatb21 = u_xlat0.x!=0.0;
                            u_xlat11.y = u_xlat0.x / u_xlat1.x;
                            u_xlat8.x = u_xlat10_0.y * _Color.y + (-u_xlat1.z);
                            u_xlat11.x = u_xlat8.x / u_xlat0.x;
                            u_xlat8.y = 0.0;
                            u_xlat1.yz = (bool(u_xlatb21)) ? u_xlat11.xy : u_xlat8.xy;
                            u_xlat0.x = u_xlat1.y * 0.166666672;
                            u_xlatb7 = u_xlat1.y<36.0;
                            u_xlat21 = u_xlat1.y * 0.166666672 + 1.0;
                            u_xlat1.x = (u_xlatb7) ? u_xlat21 : u_xlat0.x;
                            u_xlat2.xz = mix(vec2(0.0, 0.0), u_xlat1.xz, vec2(bvec2(u_xlatb14)));
                        //ENDIF
                        }
                    //ENDIF
                    }
                    u_xlatb0.xy = lessThan(_AlbedoCompareColor.yxyy, _AlbedoCompareColor.zzzz).xy;
                    u_xlatb0.x = u_xlatb0.y && u_xlatb0.x;
                    if(u_xlatb0.x){
                        u_xlatb0.x = _AlbedoCompareColor.z!=0.0;
                        u_xlat7 = min(_AlbedoCompareColor.y, _AlbedoCompareColor.x);
                        u_xlat7 = (-u_xlat7) + _AlbedoCompareColor.z;
                        u_xlatb14 = u_xlat7!=0.0;
                        u_xlat8.y = u_xlat7 / _AlbedoCompareColor.z;
                        u_xlat21 = (-_AlbedoCompareColor.y) + _AlbedoCompareColor.x;
                        u_xlat7 = u_xlat21 / u_xlat7;
                        u_xlat8.x = u_xlat7 + 4.0;
                        u_xlat11.x = u_xlat21 + 4.0;
                        u_xlat11.y = 0.0;
                        u_xlat1.yz = (bool(u_xlatb14)) ? u_xlat8.xy : u_xlat11.xy;
                        u_xlat7 = u_xlat1.y * 0.166666672;
                        u_xlatb14 = u_xlat1.y<36.0;
                        u_xlat21 = u_xlat1.y * 0.166666672 + 1.0;
                        u_xlat1.x = (u_xlatb14) ? u_xlat21 : u_xlat7;
                        u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat1.xz, vec2(u_xlatb0.xx));
                    } else {
                        u_xlatb14 = _AlbedoCompareColor.x<_AlbedoCompareColor.y;
                        if(u_xlatb14){
                            u_xlatb14 = _AlbedoCompareColor.y!=0.0;
                            u_xlat21 = min(_AlbedoCompareColor.x, _AlbedoCompareColor.z);
                            u_xlat21 = (-u_xlat21) + _AlbedoCompareColor.y;
                            u_xlatb1.x = u_xlat21!=0.0;
                            u_xlat8.y = u_xlat21 / _AlbedoCompareColor.y;
                            u_xlat22 = (-_AlbedoCompareColor.x) + _AlbedoCompareColor.z;
                            u_xlat21 = u_xlat22 / u_xlat21;
                            u_xlat8.x = u_xlat21 + 2.0;
                            u_xlat11.x = u_xlat22 + 2.0;
                            u_xlat11.y = 0.0;
                            u_xlat1.yz = (u_xlatb1.x) ? u_xlat8.xy : u_xlat11.xy;
                            u_xlat21 = u_xlat1.y * 0.166666672;
                            u_xlatb22 = u_xlat1.y<36.0;
                            u_xlat8.x = u_xlat1.y * 0.166666672 + 1.0;
                            u_xlat1.x = (u_xlatb22) ? u_xlat8.x : u_xlat21;
                            u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat1.xz, vec2(bvec2(u_xlatb14)));
                        } else {
                            u_xlatb14 = _AlbedoCompareColor.x!=0.0;
                            u_xlat21 = min(_AlbedoCompareColor.z, _AlbedoCompareColor.y);
                            u_xlat21 = (-u_xlat21) + _AlbedoCompareColor.x;
                            u_xlatb1.x = u_xlat21!=0.0;
                            u_xlat8.y = u_xlat21 / _AlbedoCompareColor.x;
                            u_xlat11.x = (-_AlbedoCompareColor.z) + _AlbedoCompareColor.y;
                            u_xlat8.x = u_xlat11.x / u_xlat21;
                            u_xlat11.y = 0.0;
                            u_xlat1.yz = (u_xlatb1.x) ? u_xlat8.xy : u_xlat11.xy;
                            u_xlat21 = u_xlat1.y * 0.166666672;
                            u_xlatb22 = u_xlat1.y<36.0;
                            u_xlat8.x = u_xlat1.y * 0.166666672 + 1.0;
                            u_xlat1.x = (u_xlatb22) ? u_xlat8.x : u_xlat21;
                            u_xlat0.xy = mix(vec2(0.0, 0.0), u_xlat1.xz, vec2(bvec2(u_xlatb14)));
                        //ENDIF
                        }
                    //ENDIF
                    }
                    u_xlat14.xy = u_xlat0.yx + (-vec2(_AlbedoSaturationTolerance, _AlbedoHueTolerance));
                    u_xlatb1.xy = lessThan(u_xlat2.zxzz, u_xlat14.xyxx).xy;
                    u_xlat14.x = u_xlat14.y + 1.0;
                    u_xlatb14 = u_xlat2.x<u_xlat14.x;
                    u_xlatb14 = u_xlatb14 && u_xlatb1.y;
                    u_xlatb14 = u_xlatb14 || u_xlatb1.x;
                    u_xlat0.xy = u_xlat0.yx + vec2(_AlbedoSaturationTolerance, _AlbedoHueTolerance);
                    u_xlatb0.xw = lessThan(u_xlat0.xxxy, u_xlat2.zzzx).xw;
                    u_xlat7 = u_xlat0.y + -1.0;
                    u_xlatb7 = u_xlat7<u_xlat2.x;
                    u_xlatb7 = u_xlatb7 && u_xlatb0.w;
                    u_xlatb0.x = u_xlatb7 || u_xlatb0.x;
                    u_xlat3.z = 0.0;
                    u_xlat1 = (u_xlatb0.x) ? unity_MaterialValidateHighColor : u_xlat3.xxxz;
                    SV_Target0 = (bool(u_xlatb14)) ? unity_MaterialValidateLowColor : u_xlat1;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    } else {
        u_xlatb0.x = unity_VisualizationMode==1;
        SV_Target0 = mix(vec4(0.0, 0.0, 0.0, 0.0), unity_MaterialValidateLowColor, vec4(u_xlatb0.xxxx));
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "EDITOR_VISUALIZATION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 237
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %13 %32 %89 %166 %177 %178 %221 
                                                      OpDecorate %13 Location 13 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %89 Location 89 
                                                      OpMemberDecorate %164 0 BuiltIn 164 
                                                      OpMemberDecorate %164 1 BuiltIn 164 
                                                      OpMemberDecorate %164 2 BuiltIn 164 
                                                      OpDecorate %164 Block 
                                                      OpDecorate %177 Location 177 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate %221 Location 221 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeBool 
                                               %7 = OpTypePointer Private %6 
                                 Private bool* %8 = OpVariable Private 
                                               %9 = OpTypeFloat 32 
                                          f32 %10 = OpConstant 3.674022E-40 
                                              %11 = OpTypeVector %9 4 
                                              %12 = OpTypePointer Input %11 
                                 Input f32_4* %13 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 2 
                                              %16 = OpTypePointer Input %9 
                                              %20 = OpTypePointer Private %11 
                               Private f32_4* %21 = OpVariable Private 
                                              %22 = OpTypePointer Function %9 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %30 = OpTypePointer Private %9 
                                 Input f32_4* %32 = OpVariable Input 
                                              %33 = OpTypeVector %9 2 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %11 %36 
                                              %38 = OpTypeArray %11 %36 
                                              %39 = OpTypeVector %14 4 
                                              %40 = OpTypeStruct %37 %38 %11 %11 %39 %11 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 2 
                                              %45 = OpTypePointer Uniform %11 
                                              %56 = OpTypeVector %9 3 
                                              %57 = OpTypePointer Function %56 
                                          i32 %59 = OpConstant 4 
                                              %60 = OpTypeVector %6 4 
                                              %61 = OpTypePointer Uniform %39 
                                          u32 %65 = OpConstant 0 
                                Private bool* %77 = OpVariable Private 
                               Private f32_4* %81 = OpVariable Private 
                                 Input f32_4* %89 = OpVariable Input 
                                          i32 %92 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                         i32 %121 = OpConstant 1 
                                         u32 %162 = OpConstant 1 
                                             %163 = OpTypeArray %9 %162 
                                             %164 = OpTypeStruct %11 %9 %163 
                                             %165 = OpTypePointer Output %164 
        Output struct {f32_4; f32; f32[1];}* %166 = OpVariable Output 
                                             %174 = OpTypePointer Output %11 
                                             %176 = OpTypePointer Output %33 
                               Output f32_2* %177 = OpVariable Output 
                                Input f32_4* %178 = OpVariable Input 
                                         i32 %181 = OpConstant 5 
                                             %220 = OpTypePointer Output %56 
                               Output f32_3* %221 = OpVariable Output 
                                             %231 = OpTypePointer Output %9 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                Function f32* %23 = OpVariable Function 
                              Function f32_3* %58 = OpVariable Function 
                                Function f32* %82 = OpVariable Function 
                             Function f32_3* %103 = OpVariable Function 
                                   Input f32* %17 = OpAccessChain %13 %15 
                                          f32 %18 = OpLoad %17 
                                         bool %19 = OpFOrdLessThan %10 %18 
                                                      OpStore %8 %19 
                                         bool %24 = OpLoad %8 
                                                      OpSelectionMerge %26 None 
                                                      OpBranchConditional %24 %25 %28 
                                              %25 = OpLabel 
                                                      OpStore %23 %27 
                                                      OpBranch %26 
                                              %28 = OpLabel 
                                                      OpStore %23 %10 
                                                      OpBranch %26 
                                              %26 = OpLabel 
                                          f32 %29 = OpLoad %23 
                                 Private f32* %31 = OpAccessChain %21 %15 
                                                      OpStore %31 %29 
                                        f32_4 %34 = OpLoad %32 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                        f32_4 %54 = OpLoad %21 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 2 3 
                                                      OpStore %21 %55 
                               Uniform u32_4* %62 = OpAccessChain %42 %59 
                                        u32_4 %63 = OpLoad %62 
                                          u32 %64 = OpCompositeExtract %63 0 
                                         bool %66 = OpINotEqual %64 %65 
                                                      OpSelectionMerge %68 None 
                                                      OpBranchConditional %66 %67 %71 
                                              %67 = OpLabel 
                                        f32_4 %69 = OpLoad %21 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %58 %70 
                                                      OpBranch %68 
                                              %71 = OpLabel 
                                        f32_4 %72 = OpLoad %13 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                                      OpStore %58 %73 
                                                      OpBranch %68 
                                              %68 = OpLabel 
                                        f32_3 %74 = OpLoad %58 
                                        f32_4 %75 = OpLoad %21 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %21 %76 
                                 Private f32* %78 = OpAccessChain %21 %15 
                                          f32 %79 = OpLoad %78 
                                         bool %80 = OpFOrdLessThan %10 %79 
                                                      OpStore %77 %80 
                                         bool %83 = OpLoad %77 
                                                      OpSelectionMerge %85 None 
                                                      OpBranchConditional %83 %84 %86 
                                              %84 = OpLabel 
                                                      OpStore %82 %27 
                                                      OpBranch %85 
                                              %86 = OpLabel 
                                                      OpStore %82 %10 
                                                      OpBranch %85 
                                              %85 = OpLabel 
                                          f32 %87 = OpLoad %82 
                                 Private f32* %88 = OpAccessChain %81 %15 
                                                      OpStore %88 %87 
                                        f32_4 %90 = OpLoad %89 
                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
                               Uniform f32_4* %93 = OpAccessChain %42 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_2 %95 = OpVectorShuffle %94 %94 0 1 
                                        f32_2 %96 = OpFMul %91 %95 
                               Uniform f32_4* %97 = OpAccessChain %42 %92 
                                        f32_4 %98 = OpLoad %97 
                                        f32_2 %99 = OpVectorShuffle %98 %98 2 3 
                                       f32_2 %100 = OpFAdd %96 %99 
                                       f32_4 %101 = OpLoad %81 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 3 
                                                      OpStore %81 %102 
                              Uniform u32_4* %104 = OpAccessChain %42 %59 
                                       u32_4 %105 = OpLoad %104 
                                         u32 %106 = OpCompositeExtract %105 1 
                                        bool %107 = OpINotEqual %106 %65 
                                                      OpSelectionMerge %109 None 
                                                      OpBranchConditional %107 %108 %112 
                                             %108 = OpLabel 
                                       f32_4 %110 = OpLoad %81 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                                      OpStore %103 %111 
                                                      OpBranch %109 
                                             %112 = OpLabel 
                                       f32_4 %113 = OpLoad %21 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                                      OpStore %103 %114 
                                                      OpBranch %109 
                                             %109 = OpLabel 
                                       f32_3 %115 = OpLoad %103 
                                       f32_4 %116 = OpLoad %21 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %21 %117 
                                       f32_4 %118 = OpLoad %21 
                                       f32_4 %119 = OpVectorShuffle %118 %118 1 1 1 1 
                              Uniform f32_4* %122 = OpAccessChain %42 %120 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_4 %124 = OpFMul %119 %123 
                                                      OpStore %81 %124 
                              Uniform f32_4* %125 = OpAccessChain %42 %120 %120 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %21 
                                       f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %81 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %81 %131 
                              Uniform f32_4* %132 = OpAccessChain %42 %120 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpLoad %21 
                                       f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
                                       f32_4 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %81 
                                       f32_4 %138 = OpFAdd %136 %137 
                                                      OpStore %21 %138 
                                       f32_4 %139 = OpLoad %21 
                              Uniform f32_4* %140 = OpAccessChain %42 %120 %92 
                                       f32_4 %141 = OpLoad %140 
                                       f32_4 %142 = OpFAdd %139 %141 
                                                      OpStore %21 %142 
                                       f32_4 %143 = OpLoad %21 
                                       f32_4 %144 = OpVectorShuffle %143 %143 1 1 1 1 
                              Uniform f32_4* %145 = OpAccessChain %42 %121 %121 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFMul %144 %146 
                                                      OpStore %81 %147 
                              Uniform f32_4* %148 = OpAccessChain %42 %121 %120 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpLoad %21 
                                       f32_4 %151 = OpVectorShuffle %150 %150 0 0 0 0 
                                       f32_4 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %81 
                                       f32_4 %154 = OpFAdd %152 %153 
                                                      OpStore %81 %154 
                              Uniform f32_4* %155 = OpAccessChain %42 %121 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpLoad %21 
                                       f32_4 %158 = OpVectorShuffle %157 %157 2 2 2 2 
                                       f32_4 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpFAdd %159 %160 
                                                      OpStore %81 %161 
                              Uniform f32_4* %167 = OpAccessChain %42 %121 %92 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %21 
                                       f32_4 %170 = OpVectorShuffle %169 %169 3 3 3 3 
                                       f32_4 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %81 
                                       f32_4 %173 = OpFAdd %171 %172 
                               Output f32_4* %175 = OpAccessChain %166 %120 
                                                      OpStore %175 %173 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                              Uniform f32_4* %182 = OpAccessChain %42 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 0 1 
                                       f32_2 %185 = OpFMul %180 %184 
                              Uniform f32_4* %186 = OpAccessChain %42 %181 
                                       f32_4 %187 = OpLoad %186 
                                       f32_2 %188 = OpVectorShuffle %187 %187 2 3 
                                       f32_2 %189 = OpFAdd %185 %188 
                                                      OpStore %177 %189 
                                       f32_4 %190 = OpLoad %13 
                                       f32_3 %191 = OpVectorShuffle %190 %190 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %42 %120 %121 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFMul %191 %194 
                                       f32_4 %196 = OpLoad %21 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %21 %197 
                              Uniform f32_4* %198 = OpAccessChain %42 %120 %120 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_4 %201 = OpLoad %13 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %21 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFAdd %203 %205 
                                       f32_4 %207 = OpLoad %21 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %21 %208 
                              Uniform f32_4* %209 = OpAccessChain %42 %120 %44 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_4 %212 = OpLoad %13 
                                       f32_3 %213 = OpVectorShuffle %212 %212 2 2 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %21 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %21 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %21 %219 
                              Uniform f32_4* %222 = OpAccessChain %42 %120 %92 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_4 %225 = OpLoad %13 
                                       f32_3 %226 = OpVectorShuffle %225 %225 3 3 3 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %21 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFAdd %227 %229 
                                                      OpStore %221 %230 
                                 Output f32* %232 = OpAccessChain %166 %120 %162 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFNegate %233 
                                 Output f32* %235 = OpAccessChain %166 %120 %162 
                                                      OpStore %235 %234 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 1121
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %17 %269 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %9 RelaxedPrecision 
                                                      OpDecorate %13 RelaxedPrecision 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate %14 RelaxedPrecision 
                                                      OpDecorate %17 Location 17 
                                                      OpDecorate %23 RelaxedPrecision 
                                                      OpDecorate %24 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 RelaxedPrecision 
                                                      OpMemberDecorate %26 0 Offset 26 
                                                      OpMemberDecorate %26 1 Offset 26 
                                                      OpMemberDecorate %26 2 Offset 26 
                                                      OpMemberDecorate %26 3 RelaxedPrecision 
                                                      OpMemberDecorate %26 3 Offset 26 
                                                      OpMemberDecorate %26 4 RelaxedPrecision 
                                                      OpMemberDecorate %26 4 Offset 26 
                                                      OpMemberDecorate %26 5 RelaxedPrecision 
                                                      OpMemberDecorate %26 5 Offset 26 
                                                      OpMemberDecorate %26 6 RelaxedPrecision 
                                                      OpMemberDecorate %26 6 Offset 26 
                                                      OpMemberDecorate %26 7 RelaxedPrecision 
                                                      OpMemberDecorate %26 7 Offset 26 
                                                      OpMemberDecorate %26 8 RelaxedPrecision 
                                                      OpMemberDecorate %26 8 Offset 26 
                                                      OpMemberDecorate %26 9 RelaxedPrecision 
                                                      OpMemberDecorate %26 9 Offset 26 
                                                      OpMemberDecorate %26 10 RelaxedPrecision 
                                                      OpMemberDecorate %26 10 Offset 26 
                                                      OpDecorate %26 Block 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %34 RelaxedPrecision 
                                                      OpDecorate %35 RelaxedPrecision 
                                                      OpDecorate %40 RelaxedPrecision 
                                                      OpDecorate %43 RelaxedPrecision 
                                                      OpDecorate %44 RelaxedPrecision 
                                                      OpDecorate %47 RelaxedPrecision 
                                                      OpDecorate %48 RelaxedPrecision 
                                                      OpDecorate %49 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %77 SpecId 77 
                                                      OpDecorate %103 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %109 RelaxedPrecision 
                                                      OpDecorate %112 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %124 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %243 SpecId 243 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %269 Location 269 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %343 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %464 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %468 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %472 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %477 RelaxedPrecision 
                                                      OpDecorate %482 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %486 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %494 RelaxedPrecision 
                                                      OpDecorate %496 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %501 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %507 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %539 RelaxedPrecision 
                                                      OpDecorate %540 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %601 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %655 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %664 RelaxedPrecision 
                                                      OpDecorate %665 RelaxedPrecision 
                                                      OpDecorate %667 RelaxedPrecision 
                                                      OpDecorate %672 RelaxedPrecision 
                                                      OpDecorate %673 RelaxedPrecision 
                                                      OpDecorate %675 RelaxedPrecision 
                                                      OpDecorate %676 RelaxedPrecision 
                                                      OpDecorate %677 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %698 RelaxedPrecision 
                                                      OpDecorate %699 RelaxedPrecision 
                                                      OpDecorate %702 RelaxedPrecision 
                                                      OpDecorate %703 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %722 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %728 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %734 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %760 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %769 RelaxedPrecision 
                                                      OpDecorate %770 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %779 RelaxedPrecision 
                                                      OpDecorate %782 RelaxedPrecision 
                                                      OpDecorate %783 RelaxedPrecision 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %798 RelaxedPrecision 
                                                      OpDecorate %800 RelaxedPrecision 
                                                      OpDecorate %810 SpecId 810 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %829 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %837 RelaxedPrecision 
                                                      OpDecorate %839 RelaxedPrecision 
                                                      OpDecorate %840 RelaxedPrecision 
                                                      OpDecorate %842 RelaxedPrecision 
                                                      OpDecorate %843 RelaxedPrecision 
                                                      OpDecorate %845 RelaxedPrecision 
                                                      OpDecorate %846 RelaxedPrecision 
                                                      OpDecorate %849 RelaxedPrecision 
                                                      OpDecorate %851 RelaxedPrecision 
                                                      OpDecorate %852 RelaxedPrecision 
                                                      OpDecorate %855 RelaxedPrecision 
                                                      OpDecorate %856 RelaxedPrecision 
                                                      OpDecorate %860 RelaxedPrecision 
                                                      OpDecorate %861 RelaxedPrecision 
                                                      OpDecorate %878 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %883 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %886 RelaxedPrecision 
                                                      OpDecorate %891 RelaxedPrecision 
                                                      OpDecorate %892 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %901 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %904 RelaxedPrecision 
                                                      OpDecorate %911 RelaxedPrecision 
                                                      OpDecorate %912 RelaxedPrecision 
                                                      OpDecorate %914 RelaxedPrecision 
                                                      OpDecorate %919 RelaxedPrecision 
                                                      OpDecorate %924 RelaxedPrecision 
                                                      OpDecorate %926 RelaxedPrecision 
                                                      OpDecorate %927 RelaxedPrecision 
                                                      OpDecorate %930 RelaxedPrecision 
                                                      OpDecorate %931 RelaxedPrecision 
                                                      OpDecorate %933 RelaxedPrecision 
                                                      OpDecorate %934 RelaxedPrecision 
                                                      OpDecorate %937 RelaxedPrecision 
                                                      OpDecorate %942 RelaxedPrecision 
                                                      OpDecorate %944 RelaxedPrecision 
                                                      OpDecorate %945 RelaxedPrecision 
                                                      OpDecorate %947 RelaxedPrecision 
                                                      OpDecorate %949 RelaxedPrecision 
                                                      OpDecorate %950 RelaxedPrecision 
                                                      OpDecorate %952 RelaxedPrecision 
                                                      OpDecorate %953 RelaxedPrecision 
                                                      OpDecorate %956 RelaxedPrecision 
                                                      OpDecorate %958 RelaxedPrecision 
                                                      OpDecorate %959 RelaxedPrecision 
                                                      OpDecorate %967 RelaxedPrecision 
                                                      OpDecorate %969 RelaxedPrecision 
                                                      OpDecorate %970 RelaxedPrecision 
                                                      OpDecorate %974 RelaxedPrecision 
                                                      OpDecorate %975 RelaxedPrecision 
                                                      OpDecorate %978 RelaxedPrecision 
                                                      OpDecorate %983 RelaxedPrecision 
                                                      OpDecorate %984 RelaxedPrecision 
                                                      OpDecorate %985 RelaxedPrecision 
                                                      OpDecorate %991 RelaxedPrecision 
                                                      OpDecorate %994 RelaxedPrecision 
                                                      OpDecorate %995 RelaxedPrecision 
                                                      OpDecorate %1002 RelaxedPrecision 
                                                      OpDecorate %1003 RelaxedPrecision 
                                                      OpDecorate %1005 RelaxedPrecision 
                                                      OpDecorate %1008 RelaxedPrecision 
                                                      OpDecorate %1009 RelaxedPrecision 
                                                      OpDecorate %1012 RelaxedPrecision 
                                                      OpDecorate %1015 RelaxedPrecision 
                                                      OpDecorate %1016 RelaxedPrecision 
                                                      OpDecorate %1017 RelaxedPrecision 
                                                      OpDecorate %1018 RelaxedPrecision 
                                                      OpDecorate %1019 RelaxedPrecision 
                                                      OpDecorate %1020 RelaxedPrecision 
                                                      OpDecorate %1021 RelaxedPrecision 
                                                      OpDecorate %1022 RelaxedPrecision 
                                                      OpDecorate %1023 RelaxedPrecision 
                                                      OpDecorate %1026 RelaxedPrecision 
                                                      OpDecorate %1027 RelaxedPrecision 
                                                      OpDecorate %1030 RelaxedPrecision 
                                                      OpDecorate %1032 RelaxedPrecision 
                                                      OpDecorate %1047 RelaxedPrecision 
                                                      OpDecorate %1048 RelaxedPrecision 
                                                      OpDecorate %1050 RelaxedPrecision 
                                                      OpDecorate %1052 RelaxedPrecision 
                                                      OpDecorate %1053 RelaxedPrecision 
                                                      OpDecorate %1054 RelaxedPrecision 
                                                      OpDecorate %1057 RelaxedPrecision 
                                                      OpDecorate %1058 RelaxedPrecision 
                                                      OpDecorate %1059 RelaxedPrecision 
                                                      OpDecorate %1060 RelaxedPrecision 
                                                      OpDecorate %1061 RelaxedPrecision 
                                                      OpDecorate %1064 RelaxedPrecision 
                                                      OpDecorate %1066 RelaxedPrecision 
                                                      OpDecorate %1067 RelaxedPrecision 
                                                      OpDecorate %1069 RelaxedPrecision 
                                                      OpDecorate %1082 RelaxedPrecision 
                                                      OpDecorate %1089 RelaxedPrecision 
                                                      OpDecorate %1091 RelaxedPrecision 
                                                      OpDecorate %1092 RelaxedPrecision 
                                                      OpDecorate %1093 RelaxedPrecision 
                                                      OpDecorate %1100 RelaxedPrecision 
                                                      OpDecorate %1102 RelaxedPrecision 
                                                      OpDecorate %1103 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1119 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypeSampledImage %10 
                                              %12 = OpTypePointer UniformConstant %11 
  UniformConstant read_only Texture2DSampled* %13 = OpVariable UniformConstant 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Input %15 
                                 Input f32_2* %17 = OpVariable Input 
                                              %20 = OpTypeVector %6 3 
                                              %21 = OpTypePointer Private %20 
                               Private f32_3* %22 = OpVariable Private 
                                              %25 = OpTypeInt 32 1 
                                              %26 = OpTypeStruct %7 %25 %25 %7 %6 %6 %6 %6 %7 %7 %6 
                                              %27 = OpTypePointer Uniform %26 
Uniform struct {f32_4; i32; i32; f32_4; f32; f32; f32; f32; f32_4; f32_4; f32;}* %28 = OpVariable Uniform 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %7 
                               Private f32_3* %35 = OpVariable Private 
                                              %36 = OpTypeInt 32 0 
                                          u32 %37 = OpConstant 3 
                                              %38 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Uniform %6 
                                          i32 %45 = OpConstant 10 
                                          u32 %50 = OpConstant 0 
                                              %52 = OpTypeBool 
                                              %53 = OpTypePointer Private %52 
                                Private bool* %54 = OpVariable Private 
                                          f32 %57 = OpConstant 3.674022E-40 
                                          i32 %60 = OpConstant 1 
                                          i32 %62 = OpConstant -1 
                                         bool %68 = OpConstantFalse 
                                              %71 = OpTypePointer Uniform %25 
                                         bool %77 = OpSpecConstantFalse 
                                         bool %78 = OpSpecConstantOp System.Collections.Generic.List`1[SpirV.ObjectReference] 
                                              %81 = OpTypeVector %52 3 
                                              %82 = OpTypePointer Private %81 
                              Private bool_3* %83 = OpVariable Private 
                                          f32 %84 = OpConstant 3.674022E-40 
                                        f32_4 %85 = OpConstantComposite %84 %84 %84 %57 
                                              %88 = OpTypeVector %52 4 
                               Private f32_3* %91 = OpVariable Private 
                                          f32 %93 = OpConstant 3.674022E-40 
                                        f32_3 %94 = OpConstantComposite %93 %93 %93 
                              Private bool_3* %96 = OpVariable Private 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_4 %100 = OpConstantComposite %99 %99 %99 %57 
                              Private f32_3* %103 = OpVariable Private 
                                         f32 %110 = OpConstant 3.674022E-40 
                                       f32_3 %111 = OpConstantComposite %110 %110 %110 
                                         f32 %114 = OpConstant 3.674022E-40 
                                       f32_3 %115 = OpConstantComposite %114 %114 %114 
                                         f32 %120 = OpConstant 3.674022E-40 
                                       f32_3 %121 = OpConstantComposite %120 %120 %120 
                              Private f32_3* %123 = OpVariable Private 
                              Private f32_3* %126 = OpVariable Private 
                                         f32 %130 = OpConstant 3.674022E-40 
                                       f32_3 %131 = OpConstantComposite %130 %130 %130 
                              Private f32_3* %135 = OpVariable Private 
                                             %136 = OpTypePointer Function %6 
                                         u32 %154 = OpConstant 1 
                                         u32 %167 = OpConstant 2 
                              Private f32_3* %175 = OpVariable Private 
                                         f32 %213 = OpConstant 3.674022E-40 
                                         f32 %214 = OpConstant 3.674022E-40 
                                         f32 %215 = OpConstant 3.674022E-40 
                                       f32_3 %216 = OpConstantComposite %213 %214 %215 
                                Private f32* %219 = OpVariable Private 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_3 %222 = OpConstantComposite %221 %221 %221 
                                         i32 %225 = OpConstant 2 
                                        bool %243 = OpSpecConstantFalse 
                                        bool %244 = OpSpecConstantOp System.Collections.Generic.List`1[SpirV.ObjectReference] 
                                         f32 %248 = OpConstant 3.674022E-40 
                               Private bool* %250 = OpVariable Private 
                                         f32 %251 = OpConstant 3.674022E-40 
                              Private f32_4* %255 = OpVariable Private 
                                             %256 = OpTypePointer Function %7 
                                         i32 %261 = OpConstant 9 
                                             %268 = OpTypePointer Output %7 
                               Output f32_4* %269 = OpVariable Output 
                                         i32 %274 = OpConstant 8 
                                         i32 %282 = OpConstant 4 
                                         i32 %292 = OpConstant 5 
                                             %303 = OpTypeVector %52 2 
                                             %304 = OpTypePointer Private %303 
                             Private bool_2* %305 = OpVariable Private 
                              Private f32_3* %328 = OpVariable Private 
                              Private f32_3* %358 = OpVariable Private 
                                         f32 %377 = OpConstant 3.674022E-40 
                                Private f32* %380 = OpVariable Private 
                                         f32 %404 = OpConstant 3.674022E-40 
                                         f32 %408 = OpConstant 3.674022E-40 
                                             %425 = OpTypePointer Function %15 
                                       f32_2 %433 = OpConstantComposite %57 %57 
                                             %474 = OpTypePointer Private %15 
                              Private f32_2* %475 = OpVariable Private 
                              Private f32_2* %482 = OpVariable Private 
                              Private f32_2* %499 = OpVariable Private 
                                         f32 %502 = OpConstant 3.674022E-40 
                              Private f32_3* %520 = OpVariable Private 
                               Private bool* %534 = OpVariable Private 
                             Private bool_2* %594 = OpVariable Private 
                              Private f32_2* %606 = OpVariable Private 
                                Private f32* %635 = OpVariable Private 
                                         i32 %670 = OpConstant 3 
                             Private bool_2* %708 = OpVariable Private 
                                       f32_2 %735 = OpConstantComposite %377 %377 
                                        bool %810 = OpSpecConstantFalse 
                                Private f32* %858 = OpVariable Private 
                              Private f32_2* %947 = OpVariable Private 
                                        i32 %1010 = OpConstant 7 
                                        i32 %1013 = OpConstant 6 
                                        f32 %1065 = OpConstant 3.674022E-40 
                             Private f32_4* %1082 = OpVariable Private 
                                      f32_4 %1118 = OpConstantComposite %57 %57 %57 %57 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %137 = OpVariable Function 
                               Function f32* %149 = OpVariable Function 
                               Function f32* %162 = OpVariable Function 
                               Function f32* %176 = OpVariable Function 
                               Function f32* %188 = OpVariable Function 
                               Function f32* %200 = OpVariable Function 
                               Function f32* %224 = OpVariable Function 
                             Function f32_4* %257 = OpVariable Function 
                             Function f32_4* %270 = OpVariable Function 
                               Function f32* %329 = OpVariable Function 
                               Function f32* %384 = OpVariable Function 
                               Function f32* %394 = OpVariable Function 
                               Function f32* %415 = OpVariable Function 
                             Function f32_2* %426 = OpVariable Function 
                               Function f32* %449 = OpVariable Function 
                               Function f32* %509 = OpVariable Function 
                               Function f32* %521 = OpVariable Function 
                               Function f32* %543 = OpVariable Function 
                             Function f32_2* %554 = OpVariable Function 
                               Function f32* %573 = OpVariable Function 
                             Function f32_2* %624 = OpVariable Function 
                               Function f32* %649 = OpVariable Function 
                             Function f32_2* %660 = OpVariable Function 
                               Function f32* %737 = OpVariable Function 
                               Function f32* %749 = OpVariable Function 
                               Function f32* %773 = OpVariable Function 
                             Function f32_2* %785 = OpVariable Function 
                               Function f32* %862 = OpVariable Function 
                               Function f32* %873 = OpVariable Function 
                               Function f32* %895 = OpVariable Function 
                             Function f32_2* %906 = OpVariable Function 
                             Function f32_2* %962 = OpVariable Function 
                               Function f32* %986 = OpVariable Function 
                             Function f32_2* %997 = OpVariable Function 
                            Function f32_4* %1083 = OpVariable Function 
                            Function f32_4* %1094 = OpVariable Function 
                            Function f32_4* %1110 = OpVariable Function 
                   read_only Texture2DSampled %14 = OpLoad %13 
                                        f32_2 %18 = OpLoad %17 
                                        f32_4 %19 = OpImageSampleImplicitLod %14 %18 
                                                      OpStore %9 %19 
                                        f32_4 %23 = OpLoad %9 
                                        f32_3 %24 = OpVectorShuffle %23 %23 0 1 2 
                               Uniform f32_4* %31 = OpAccessChain %28 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                        f32_3 %34 = OpFMul %24 %33 
                                                      OpStore %22 %34 
                                 Private f32* %39 = OpAccessChain %9 %37 
                                          f32 %40 = OpLoad %39 
                                 Uniform f32* %42 = OpAccessChain %28 %29 %37 
                                          f32 %43 = OpLoad %42 
                                          f32 %44 = OpFMul %40 %43 
                                 Uniform f32* %46 = OpAccessChain %28 %45 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFNegate %47 
                                          f32 %49 = OpFAdd %44 %48 
                                 Private f32* %51 = OpAccessChain %35 %50 
                                                      OpStore %51 %49 
                                 Private f32* %55 = OpAccessChain %35 %50 
                                          f32 %56 = OpLoad %55 
                                         bool %58 = OpFOrdLessThan %56 %57 
                                                      OpStore %54 %58 
                                         bool %59 = OpLoad %54 
                                          i32 %61 = OpSelect %59 %60 %29 
                                          i32 %63 = OpIMul %61 %62 
                                         bool %64 = OpINotEqual %63 %29 
                                                      OpSelectionMerge %66 None 
                                                      OpBranchConditional %64 %65 %66 
                                              %65 = OpLabel 
                                                      OpKill
                                              %66 = OpLabel 
                                                      OpSelectionMerge %70 None 
                                                      OpBranchConditional %68 %69 %70 
                                              %69 = OpLabel 
                                 Uniform i32* %72 = OpAccessChain %28 %60 
                                          i32 %73 = OpLoad %72 
                                         bool %74 = OpIEqual %73 %29 
                                                      OpSelectionMerge %76 None 
                                                      OpBranchConditional %74 %75 %76 
                                              %75 = OpLabel 
                                                      OpBranch %76 
                                              %76 = OpLabel 
                                                      OpBranch %70 
                                              %70 = OpLabel 
                                                      OpSelectionMerge %80 None 
                                                      OpBranchConditional %78 %79 %1104 
                                              %79 = OpLabel 
                                        f32_3 %86 = OpLoad %22 
                                        f32_4 %87 = OpVectorShuffle %86 %86 0 1 2 0 
                                       bool_4 %89 = OpFOrdGreaterThanEqual %85 %87 
                                       bool_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                      OpStore %83 %90 
                                        f32_3 %92 = OpLoad %22 
                                        f32_3 %95 = OpFMul %92 %94 
                                                      OpStore %91 %95 
                                        f32_3 %97 = OpLoad %22 
                                        f32_4 %98 = OpVectorShuffle %97 %97 0 1 2 0 
                                      bool_4 %101 = OpFOrdLessThan %98 %100 
                                      bool_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                                      OpStore %96 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                              Uniform f32_4* %106 = OpAccessChain %28 %29 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFMul %105 %108 
                                       f32_3 %112 = OpFAdd %109 %111 
                                                      OpStore %103 %112 
                                       f32_3 %113 = OpLoad %103 
                                       f32_3 %116 = OpFMul %113 %115 
                                                      OpStore %103 %116 
                                       f32_3 %117 = OpLoad %103 
                                       f32_3 %118 = OpExtInst %1 30 %117 
                                                      OpStore %103 %118 
                                       f32_3 %119 = OpLoad %103 
                                       f32_3 %122 = OpFMul %119 %121 
                                                      OpStore %103 %122 
                                       f32_3 %124 = OpLoad %103 
                                       f32_3 %125 = OpExtInst %1 29 %124 
                                                      OpStore %123 %125 
                                       f32_3 %127 = OpLoad %22 
                                       f32_3 %128 = OpExtInst %1 30 %127 
                                                      OpStore %126 %128 
                                       f32_3 %129 = OpLoad %126 
                                       f32_3 %132 = OpFMul %129 %131 
                                                      OpStore %126 %132 
                                       f32_3 %133 = OpLoad %126 
                                       f32_3 %134 = OpExtInst %1 29 %133 
                                                      OpStore %126 %134 
                                      bool_3 %138 = OpLoad %96 
                                        bool %139 = OpCompositeExtract %138 0 
                                                      OpSelectionMerge %141 None 
                                                      OpBranchConditional %139 %140 %144 
                                             %140 = OpLabel 
                                Private f32* %142 = OpAccessChain %123 %50 
                                         f32 %143 = OpLoad %142 
                                                      OpStore %137 %143 
                                                      OpBranch %141 
                                             %144 = OpLabel 
                                Private f32* %145 = OpAccessChain %126 %50 
                                         f32 %146 = OpLoad %145 
                                                      OpStore %137 %146 
                                                      OpBranch %141 
                                             %141 = OpLabel 
                                         f32 %147 = OpLoad %137 
                                Private f32* %148 = OpAccessChain %135 %50 
                                                      OpStore %148 %147 
                                      bool_3 %150 = OpLoad %96 
                                        bool %151 = OpCompositeExtract %150 1 
                                                      OpSelectionMerge %153 None 
                                                      OpBranchConditional %151 %152 %157 
                                             %152 = OpLabel 
                                Private f32* %155 = OpAccessChain %123 %154 
                                         f32 %156 = OpLoad %155 
                                                      OpStore %149 %156 
                                                      OpBranch %153 
                                             %157 = OpLabel 
                                Private f32* %158 = OpAccessChain %126 %154 
                                         f32 %159 = OpLoad %158 
                                                      OpStore %149 %159 
                                                      OpBranch %153 
                                             %153 = OpLabel 
                                         f32 %160 = OpLoad %149 
                                Private f32* %161 = OpAccessChain %135 %154 
                                                      OpStore %161 %160 
                                      bool_3 %163 = OpLoad %96 
                                        bool %164 = OpCompositeExtract %163 2 
                                                      OpSelectionMerge %166 None 
                                                      OpBranchConditional %164 %165 %170 
                                             %165 = OpLabel 
                                Private f32* %168 = OpAccessChain %123 %167 
                                         f32 %169 = OpLoad %168 
                                                      OpStore %162 %169 
                                                      OpBranch %166 
                                             %170 = OpLabel 
                                Private f32* %171 = OpAccessChain %126 %167 
                                         f32 %172 = OpLoad %171 
                                                      OpStore %162 %172 
                                                      OpBranch %166 
                                             %166 = OpLabel 
                                         f32 %173 = OpLoad %162 
                                Private f32* %174 = OpAccessChain %135 %167 
                                                      OpStore %174 %173 
                                      bool_3 %177 = OpLoad %83 
                                        bool %178 = OpCompositeExtract %177 0 
                                                      OpSelectionMerge %180 None 
                                                      OpBranchConditional %178 %179 %183 
                                             %179 = OpLabel 
                                Private f32* %181 = OpAccessChain %91 %50 
                                         f32 %182 = OpLoad %181 
                                                      OpStore %176 %182 
                                                      OpBranch %180 
                                             %183 = OpLabel 
                                Private f32* %184 = OpAccessChain %135 %50 
                                         f32 %185 = OpLoad %184 
                                                      OpStore %176 %185 
                                                      OpBranch %180 
                                             %180 = OpLabel 
                                         f32 %186 = OpLoad %176 
                                Private f32* %187 = OpAccessChain %175 %50 
                                                      OpStore %187 %186 
                                      bool_3 %189 = OpLoad %83 
                                        bool %190 = OpCompositeExtract %189 1 
                                                      OpSelectionMerge %192 None 
                                                      OpBranchConditional %190 %191 %195 
                                             %191 = OpLabel 
                                Private f32* %193 = OpAccessChain %91 %154 
                                         f32 %194 = OpLoad %193 
                                                      OpStore %188 %194 
                                                      OpBranch %192 
                                             %195 = OpLabel 
                                Private f32* %196 = OpAccessChain %135 %154 
                                         f32 %197 = OpLoad %196 
                                                      OpStore %188 %197 
                                                      OpBranch %192 
                                             %192 = OpLabel 
                                         f32 %198 = OpLoad %188 
                                Private f32* %199 = OpAccessChain %175 %154 
                                                      OpStore %199 %198 
                                      bool_3 %201 = OpLoad %83 
                                        bool %202 = OpCompositeExtract %201 2 
                                                      OpSelectionMerge %204 None 
                                                      OpBranchConditional %202 %203 %207 
                                             %203 = OpLabel 
                                Private f32* %205 = OpAccessChain %91 %167 
                                         f32 %206 = OpLoad %205 
                                                      OpStore %200 %206 
                                                      OpBranch %204 
                                             %207 = OpLabel 
                                Private f32* %208 = OpAccessChain %135 %167 
                                         f32 %209 = OpLoad %208 
                                                      OpStore %200 %209 
                                                      OpBranch %204 
                                             %204 = OpLabel 
                                         f32 %210 = OpLoad %200 
                                Private f32* %211 = OpAccessChain %175 %167 
                                                      OpStore %211 %210 
                                       f32_3 %212 = OpLoad %175 
                                         f32 %217 = OpDot %212 %216 
                                Private f32* %218 = OpAccessChain %35 %50 
                                                      OpStore %218 %217 
                                       f32_3 %220 = OpLoad %175 
                                         f32 %223 = OpDot %220 %222 
                                                      OpStore %219 %223 
                                Uniform i32* %226 = OpAccessChain %28 %225 
                                         i32 %227 = OpLoad %226 
                                        bool %228 = OpINotEqual %227 %29 
                                                      OpSelectionMerge %230 None 
                                                      OpBranchConditional %228 %229 %233 
                                             %229 = OpLabel 
                                Private f32* %231 = OpAccessChain %35 %50 
                                         f32 %232 = OpLoad %231 
                                                      OpStore %224 %232 
                                                      OpBranch %230 
                                             %233 = OpLabel 
                                         f32 %234 = OpLoad %219 
                                                      OpStore %224 %234 
                                                      OpBranch %230 
                                             %230 = OpLabel 
                                         f32 %235 = OpLoad %224 
                                                      OpStore %219 %235 
                                                      OpSelectionMerge %237 None 
                                                      OpBranchConditional %68 %236 %237 
                                             %236 = OpLabel 
                                Uniform i32* %238 = OpAccessChain %28 %225 
                                         i32 %239 = OpLoad %238 
                                        bool %240 = OpIEqual %239 %29 
                                                      OpSelectionMerge %242 None 
                                                      OpBranchConditional %240 %241 %242 
                                             %241 = OpLabel 
                                                      OpBranch %242 
                                             %242 = OpLabel 
                                                      OpBranch %237 
                                             %237 = OpLabel 
                                                      OpSelectionMerge %246 None 
                                                      OpBranchConditional %244 %245 %280 
                                             %245 = OpLabel 
                                         f32 %247 = OpLoad %219 
                                        bool %249 = OpFOrdLessThan %247 %248 
                                                      OpStore %54 %249 
                                         f32 %252 = OpLoad %219 
                                        bool %253 = OpFOrdLessThan %251 %252 
                                                      OpStore %250 %253 
                                Private f32* %254 = OpAccessChain %35 %154 
                                                      OpStore %254 %57 
                                        bool %258 = OpLoad %250 
                                                      OpSelectionMerge %260 None 
                                                      OpBranchConditional %258 %259 %264 
                                             %259 = OpLabel 
                              Uniform f32_4* %262 = OpAccessChain %28 %261 
                                       f32_4 %263 = OpLoad %262 
                                                      OpStore %257 %263 
                                                      OpBranch %260 
                                             %264 = OpLabel 
                                       f32_3 %265 = OpLoad %35 
                                       f32_4 %266 = OpVectorShuffle %265 %265 0 0 0 1 
                                                      OpStore %257 %266 
                                                      OpBranch %260 
                                             %260 = OpLabel 
                                       f32_4 %267 = OpLoad %257 
                                                      OpStore %255 %267 
                                        bool %271 = OpLoad %54 
                                                      OpSelectionMerge %273 None 
                                                      OpBranchConditional %271 %272 %277 
                                             %272 = OpLabel 
                              Uniform f32_4* %275 = OpAccessChain %28 %274 
                                       f32_4 %276 = OpLoad %275 
                                                      OpStore %270 %276 
                                                      OpBranch %273 
                                             %277 = OpLabel 
                                       f32_4 %278 = OpLoad %255 
                                                      OpStore %270 %278 
                                                      OpBranch %273 
                                             %273 = OpLabel 
                                       f32_4 %279 = OpLoad %270 
                                                      OpStore %269 %279 
                                                      OpBranch %246 
                                             %280 = OpLabel 
                                         f32 %281 = OpLoad %219 
                                Uniform f32* %283 = OpAccessChain %28 %282 
                                         f32 %284 = OpLoad %283 
                                        bool %285 = OpFOrdLessThan %281 %284 
                                                      OpStore %54 %285 
                                        bool %286 = OpLoad %54 
                                                      OpSelectionMerge %288 None 
                                                      OpBranchConditional %286 %287 %291 
                                             %287 = OpLabel 
                              Uniform f32_4* %289 = OpAccessChain %28 %274 
                                       f32_4 %290 = OpLoad %289 
                                                      OpStore %269 %290 
                                                      OpBranch %288 
                                             %291 = OpLabel 
                                Uniform f32* %293 = OpAccessChain %28 %292 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpLoad %219 
                                        bool %296 = OpFOrdLessThan %294 %295 
                                                      OpStore %54 %296 
                                        bool %297 = OpLoad %54 
                                                      OpSelectionMerge %299 None 
                                                      OpBranchConditional %297 %298 %302 
                                             %298 = OpLabel 
                              Uniform f32_4* %300 = OpAccessChain %28 %261 
                                       f32_4 %301 = OpLoad %300 
                                                      OpStore %269 %301 
                                                      OpBranch %299 
                                             %302 = OpLabel 
                                       f32_3 %306 = OpLoad %22 
                                       f32_4 %307 = OpVectorShuffle %306 %306 1 0 1 1 
                                       f32_3 %308 = OpLoad %22 
                                       f32_4 %309 = OpVectorShuffle %308 %308 2 2 2 2 
                                      bool_4 %310 = OpFOrdLessThan %307 %309 
                                      bool_2 %311 = OpVectorShuffle %310 %310 0 1 
                                                      OpStore %305 %311 
                                      bool_2 %312 = OpLoad %305 
                                        bool %313 = OpCompositeExtract %312 1 
                                      bool_2 %314 = OpLoad %305 
                                        bool %315 = OpCompositeExtract %314 0 
                                        bool %316 = OpLogicalAnd %313 %315 
                                                      OpStore %54 %316 
                                        bool %317 = OpLoad %54 
                                                      OpSelectionMerge %319 None 
                                                      OpBranchConditional %317 %318 %437 
                                             %318 = OpLabel 
                                Private f32* %320 = OpAccessChain %22 %167 
                                         f32 %321 = OpLoad %320 
                                        bool %322 = OpFOrdNotEqual %321 %57 
                                                      OpStore %54 %322 
                                Private f32* %323 = OpAccessChain %22 %154 
                                         f32 %324 = OpLoad %323 
                                Private f32* %325 = OpAccessChain %22 %50 
                                         f32 %326 = OpLoad %325 
                                        bool %327 = OpFOrdLessThan %324 %326 
                                                      OpStore %250 %327 
                                        bool %330 = OpLoad %250 
                                                      OpSelectionMerge %332 None 
                                                      OpBranchConditional %330 %331 %335 
                                             %331 = OpLabel 
                                Private f32* %333 = OpAccessChain %22 %154 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %329 %334 
                                                      OpBranch %332 
                                             %335 = OpLabel 
                                Private f32* %336 = OpAccessChain %22 %50 
                                         f32 %337 = OpLoad %336 
                                                      OpStore %329 %337 
                                                      OpBranch %332 
                                             %332 = OpLabel 
                                         f32 %338 = OpLoad %329 
                                Private f32* %339 = OpAccessChain %328 %50 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %9 %167 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %28 %29 %167 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                Private f32* %345 = OpAccessChain %328 %50 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFNegate %346 
                                         f32 %348 = OpFAdd %344 %347 
                                Private f32* %349 = OpAccessChain %328 %50 
                                                      OpStore %349 %348 
                                Private f32* %350 = OpAccessChain %328 %50 
                                         f32 %351 = OpLoad %350 
                                        bool %352 = OpFOrdNotEqual %351 %57 
                                                      OpStore %250 %352 
                                Private f32* %353 = OpAccessChain %328 %50 
                                         f32 %354 = OpLoad %353 
                                Private f32* %355 = OpAccessChain %22 %167 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpFDiv %354 %356 
                                                      OpStore %219 %357 
                                Private f32* %359 = OpAccessChain %9 %50 
                                         f32 %360 = OpLoad %359 
                                Uniform f32* %361 = OpAccessChain %28 %29 %50 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %360 %362 
                                Private f32* %364 = OpAccessChain %22 %154 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFNegate %365 
                                         f32 %367 = OpFAdd %363 %366 
                                Private f32* %368 = OpAccessChain %358 %50 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %358 %50 
                                         f32 %370 = OpLoad %369 
                                Private f32* %371 = OpAccessChain %328 %50 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpFDiv %370 %372 
                                Private f32* %374 = OpAccessChain %328 %50 
                                                      OpStore %374 %373 
                                Private f32* %375 = OpAccessChain %328 %50 
                                         f32 %376 = OpLoad %375 
                                         f32 %378 = OpFAdd %376 %377 
                                Private f32* %379 = OpAccessChain %91 %50 
                                                      OpStore %379 %378 
                                Private f32* %381 = OpAccessChain %358 %50 
                                         f32 %382 = OpLoad %381 
                                         f32 %383 = OpFAdd %382 %377 
                                                      OpStore %380 %383 
                                        bool %385 = OpLoad %250 
                                                      OpSelectionMerge %387 None 
                                                      OpBranchConditional %385 %386 %390 
                                             %386 = OpLabel 
                                Private f32* %388 = OpAccessChain %91 %50 
                                         f32 %389 = OpLoad %388 
                                                      OpStore %384 %389 
                                                      OpBranch %387 
                                             %390 = OpLabel 
                                         f32 %391 = OpLoad %380 
                                                      OpStore %384 %391 
                                                      OpBranch %387 
                                             %387 = OpLabel 
                                         f32 %392 = OpLoad %384 
                                Private f32* %393 = OpAccessChain %328 %50 
                                                      OpStore %393 %392 
                                        bool %395 = OpLoad %250 
                                                      OpSelectionMerge %397 None 
                                                      OpBranchConditional %395 %396 %399 
                                             %396 = OpLabel 
                                         f32 %398 = OpLoad %219 
                                                      OpStore %394 %398 
                                                      OpBranch %397 
                                             %399 = OpLabel 
                                                      OpStore %394 %57 
                                                      OpBranch %397 
                                             %397 = OpLabel 
                                         f32 %400 = OpLoad %394 
                                Private f32* %401 = OpAccessChain %358 %167 
                                                      OpStore %401 %400 
                                Private f32* %402 = OpAccessChain %328 %50 
                                         f32 %403 = OpLoad %402 
                                         f32 %405 = OpFMul %403 %404 
                                                      OpStore %219 %405 
                                Private f32* %406 = OpAccessChain %328 %50 
                                         f32 %407 = OpLoad %406 
                                        bool %409 = OpFOrdLessThan %407 %408 
                                                      OpStore %250 %409 
                                Private f32* %410 = OpAccessChain %328 %50 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFMul %411 %404 
                                         f32 %413 = OpFAdd %412 %99 
                                Private f32* %414 = OpAccessChain %328 %50 
                                                      OpStore %414 %413 
                                        bool %416 = OpLoad %250 
                                                      OpSelectionMerge %418 None 
                                                      OpBranchConditional %416 %417 %421 
                                             %417 = OpLabel 
                                Private f32* %419 = OpAccessChain %328 %50 
                                         f32 %420 = OpLoad %419 
                                                      OpStore %415 %420 
                                                      OpBranch %418 
                                             %421 = OpLabel 
                                         f32 %422 = OpLoad %219 
                                                      OpStore %415 %422 
                                                      OpBranch %418 
                                             %418 = OpLabel 
                                         f32 %423 = OpLoad %415 
                                Private f32* %424 = OpAccessChain %358 %50 
                                                      OpStore %424 %423 
                                        bool %427 = OpLoad %54 
                                                      OpSelectionMerge %429 None 
                                                      OpBranchConditional %427 %428 %432 
                                             %428 = OpLabel 
                                       f32_3 %430 = OpLoad %358 
                                       f32_2 %431 = OpVectorShuffle %430 %430 0 2 
                                                      OpStore %426 %431 
                                                      OpBranch %429 
                                             %432 = OpLabel 
                                                      OpStore %426 %433 
                                                      OpBranch %429 
                                             %429 = OpLabel 
                                       f32_2 %434 = OpLoad %426 
                                       f32_3 %435 = OpLoad %328 
                                       f32_3 %436 = OpVectorShuffle %435 %434 3 1 4 
                                                      OpStore %328 %436 
                                                      OpBranch %319 
                                             %437 = OpLabel 
                                Private f32* %438 = OpAccessChain %22 %50 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %22 %154 
                                         f32 %441 = OpLoad %440 
                                        bool %442 = OpFOrdLessThan %439 %441 
                                                      OpStore %54 %442 
                                        bool %443 = OpLoad %54 
                                                      OpSelectionMerge %445 None 
                                                      OpBranchConditional %443 %444 %564 
                                             %444 = OpLabel 
                                Private f32* %446 = OpAccessChain %22 %154 
                                         f32 %447 = OpLoad %446 
                                        bool %448 = OpFOrdNotEqual %447 %57 
                                                      OpStore %54 %448 
                                      bool_2 %450 = OpLoad %305 
                                        bool %451 = OpCompositeExtract %450 1 
                                                      OpSelectionMerge %453 None 
                                                      OpBranchConditional %451 %452 %456 
                                             %452 = OpLabel 
                                Private f32* %454 = OpAccessChain %22 %50 
                                         f32 %455 = OpLoad %454 
                                                      OpStore %449 %455 
                                                      OpBranch %453 
                                             %456 = OpLabel 
                                Private f32* %457 = OpAccessChain %22 %167 
                                         f32 %458 = OpLoad %457 
                                                      OpStore %449 %458 
                                                      OpBranch %453 
                                             %453 = OpLabel 
                                         f32 %459 = OpLoad %449 
                                Private f32* %460 = OpAccessChain %358 %50 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %9 %154 
                                         f32 %462 = OpLoad %461 
                                Uniform f32* %463 = OpAccessChain %28 %29 %154 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpFMul %462 %464 
                                Private f32* %466 = OpAccessChain %358 %50 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFNegate %467 
                                         f32 %469 = OpFAdd %465 %468 
                                Private f32* %470 = OpAccessChain %358 %50 
                                                      OpStore %470 %469 
                                Private f32* %471 = OpAccessChain %358 %50 
                                         f32 %472 = OpLoad %471 
                                        bool %473 = OpFOrdNotEqual %472 %57 
                                                      OpStore %250 %473 
                                Private f32* %476 = OpAccessChain %358 %50 
                                         f32 %477 = OpLoad %476 
                                Private f32* %478 = OpAccessChain %22 %154 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFDiv %477 %479 
                                Private f32* %481 = OpAccessChain %475 %50 
                                                      OpStore %481 %480 
                                Private f32* %483 = OpAccessChain %9 %167 
                                         f32 %484 = OpLoad %483 
                                Uniform f32* %485 = OpAccessChain %28 %29 %167 
                                         f32 %486 = OpLoad %485 
                                         f32 %487 = OpFMul %484 %486 
                                Private f32* %488 = OpAccessChain %22 %50 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFNegate %489 
                                         f32 %491 = OpFAdd %487 %490 
                                Private f32* %492 = OpAccessChain %482 %50 
                                                      OpStore %492 %491 
                                Private f32* %493 = OpAccessChain %482 %50 
                                         f32 %494 = OpLoad %493 
                                Private f32* %495 = OpAccessChain %358 %50 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFDiv %494 %496 
                                Private f32* %498 = OpAccessChain %358 %50 
                                                      OpStore %498 %497 
                                Private f32* %500 = OpAccessChain %358 %50 
                                         f32 %501 = OpLoad %500 
                                         f32 %503 = OpFAdd %501 %502 
                                Private f32* %504 = OpAccessChain %499 %50 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %482 %50 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFAdd %506 %502 
                                Private f32* %508 = OpAccessChain %91 %50 
                                                      OpStore %508 %507 
                                        bool %510 = OpLoad %250 
                                                      OpSelectionMerge %512 None 
                                                      OpBranchConditional %510 %511 %515 
                                             %511 = OpLabel 
                                Private f32* %513 = OpAccessChain %499 %50 
                                         f32 %514 = OpLoad %513 
                                                      OpStore %509 %514 
                                                      OpBranch %512 
                                             %515 = OpLabel 
                                Private f32* %516 = OpAccessChain %91 %50 
                                         f32 %517 = OpLoad %516 
                                                      OpStore %509 %517 
                                                      OpBranch %512 
                                             %512 = OpLabel 
                                         f32 %518 = OpLoad %509 
                                Private f32* %519 = OpAccessChain %358 %50 
                                                      OpStore %519 %518 
                                        bool %522 = OpLoad %250 
                                                      OpSelectionMerge %524 None 
                                                      OpBranchConditional %522 %523 %527 
                                             %523 = OpLabel 
                                Private f32* %525 = OpAccessChain %475 %50 
                                         f32 %526 = OpLoad %525 
                                                      OpStore %521 %526 
                                                      OpBranch %524 
                                             %527 = OpLabel 
                                                      OpStore %521 %57 
                                                      OpBranch %524 
                                             %524 = OpLabel 
                                         f32 %528 = OpLoad %521 
                                Private f32* %529 = OpAccessChain %520 %167 
                                                      OpStore %529 %528 
                                Private f32* %530 = OpAccessChain %358 %50 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpFMul %531 %404 
                                Private f32* %533 = OpAccessChain %475 %50 
                                                      OpStore %533 %532 
                                Private f32* %535 = OpAccessChain %358 %50 
                                         f32 %536 = OpLoad %535 
                                        bool %537 = OpFOrdLessThan %536 %408 
                                                      OpStore %534 %537 
                                Private f32* %538 = OpAccessChain %358 %50 
                                         f32 %539 = OpLoad %538 
                                         f32 %540 = OpFMul %539 %404 
                                         f32 %541 = OpFAdd %540 %99 
                                Private f32* %542 = OpAccessChain %358 %50 
                                                      OpStore %542 %541 
                                        bool %544 = OpLoad %534 
                                                      OpSelectionMerge %546 None 
                                                      OpBranchConditional %544 %545 %549 
                                             %545 = OpLabel 
                                Private f32* %547 = OpAccessChain %358 %50 
                                         f32 %548 = OpLoad %547 
                                                      OpStore %543 %548 
                                                      OpBranch %546 
                                             %549 = OpLabel 
                                Private f32* %550 = OpAccessChain %475 %50 
                                         f32 %551 = OpLoad %550 
                                                      OpStore %543 %551 
                                                      OpBranch %546 
                                             %546 = OpLabel 
                                         f32 %552 = OpLoad %543 
                                Private f32* %553 = OpAccessChain %520 %50 
                                                      OpStore %553 %552 
                                        bool %555 = OpLoad %54 
                                                      OpSelectionMerge %557 None 
                                                      OpBranchConditional %555 %556 %560 
                                             %556 = OpLabel 
                                       f32_3 %558 = OpLoad %520 
                                       f32_2 %559 = OpVectorShuffle %558 %558 0 2 
                                                      OpStore %554 %559 
                                                      OpBranch %557 
                                             %560 = OpLabel 
                                                      OpStore %554 %433 
                                                      OpBranch %557 
                                             %557 = OpLabel 
                                       f32_2 %561 = OpLoad %554 
                                       f32_3 %562 = OpLoad %328 
                                       f32_3 %563 = OpVectorShuffle %562 %561 3 1 4 
                                                      OpStore %328 %563 
                                                      OpBranch %445 
                                             %564 = OpLabel 
                                Private f32* %565 = OpAccessChain %22 %50 
                                         f32 %566 = OpLoad %565 
                                        bool %567 = OpFOrdNotEqual %566 %57 
                                                      OpStore %534 %567 
                                Private f32* %568 = OpAccessChain %22 %167 
                                         f32 %569 = OpLoad %568 
                                Private f32* %570 = OpAccessChain %22 %154 
                                         f32 %571 = OpLoad %570 
                                        bool %572 = OpFOrdLessThan %569 %571 
                                                      OpStore %54 %572 
                                        bool %574 = OpLoad %54 
                                                      OpSelectionMerge %576 None 
                                                      OpBranchConditional %574 %575 %579 
                                             %575 = OpLabel 
                                Private f32* %577 = OpAccessChain %22 %167 
                                         f32 %578 = OpLoad %577 
                                                      OpStore %573 %578 
                                                      OpBranch %576 
                                             %579 = OpLabel 
                                Private f32* %580 = OpAccessChain %22 %154 
                                         f32 %581 = OpLoad %580 
                                                      OpStore %573 %581 
                                                      OpBranch %576 
                                             %576 = OpLabel 
                                         f32 %582 = OpLoad %573 
                                Private f32* %583 = OpAccessChain %358 %50 
                                                      OpStore %583 %582 
                                Private f32* %584 = OpAccessChain %9 %50 
                                         f32 %585 = OpLoad %584 
                                Uniform f32* %586 = OpAccessChain %28 %29 %50 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpFMul %585 %587 
                                Private f32* %589 = OpAccessChain %358 %50 
                                         f32 %590 = OpLoad %589 
                                         f32 %591 = OpFNegate %590 
                                         f32 %592 = OpFAdd %588 %591 
                                Private f32* %593 = OpAccessChain %358 %50 
                                                      OpStore %593 %592 
                                Private f32* %595 = OpAccessChain %358 %50 
                                         f32 %596 = OpLoad %595 
                                        bool %597 = OpFOrdNotEqual %596 %57 
                                      bool_2 %598 = OpLoad %594 
                                      bool_2 %599 = OpCompositeInsert %597 %598 0 
                                                      OpStore %594 %599 
                                Private f32* %600 = OpAccessChain %358 %50 
                                         f32 %601 = OpLoad %600 
                                Private f32* %602 = OpAccessChain %22 %50 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpFDiv %601 %603 
                                Private f32* %605 = OpAccessChain %475 %154 
                                                      OpStore %605 %604 
                                Private f32* %607 = OpAccessChain %9 %154 
                                         f32 %608 = OpLoad %607 
                                Uniform f32* %609 = OpAccessChain %28 %29 %154 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpFMul %608 %610 
                                Private f32* %612 = OpAccessChain %22 %167 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpFNegate %613 
                                         f32 %615 = OpFAdd %611 %614 
                                Private f32* %616 = OpAccessChain %606 %50 
                                                      OpStore %616 %615 
                                Private f32* %617 = OpAccessChain %606 %50 
                                         f32 %618 = OpLoad %617 
                                Private f32* %619 = OpAccessChain %358 %50 
                                         f32 %620 = OpLoad %619 
                                         f32 %621 = OpFDiv %618 %620 
                                Private f32* %622 = OpAccessChain %475 %50 
                                                      OpStore %622 %621 
                                Private f32* %623 = OpAccessChain %606 %154 
                                                      OpStore %623 %57 
                                      bool_2 %625 = OpLoad %594 
                                        bool %626 = OpCompositeExtract %625 0 
                                                      OpSelectionMerge %628 None 
                                                      OpBranchConditional %626 %627 %630 
                                             %627 = OpLabel 
                                       f32_2 %629 = OpLoad %475 
                                                      OpStore %624 %629 
                                                      OpBranch %628 
                                             %630 = OpLabel 
                                       f32_2 %631 = OpLoad %606 
                                                      OpStore %624 %631 
                                                      OpBranch %628 
                                             %628 = OpLabel 
                                       f32_2 %632 = OpLoad %624 
                                       f32_3 %633 = OpLoad %358 
                                       f32_3 %634 = OpVectorShuffle %633 %632 0 3 4 
                                                      OpStore %358 %634 
                                Private f32* %636 = OpAccessChain %358 %154 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFMul %637 %404 
                                                      OpStore %635 %638 
                                Private f32* %639 = OpAccessChain %358 %154 
                                         f32 %640 = OpLoad %639 
                                        bool %641 = OpFOrdLessThan %640 %408 
                                      bool_2 %642 = OpLoad %594 
                                      bool_2 %643 = OpCompositeInsert %641 %642 0 
                                                      OpStore %594 %643 
                                Private f32* %644 = OpAccessChain %358 %154 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFMul %645 %404 
                                         f32 %647 = OpFAdd %646 %99 
                                Private f32* %648 = OpAccessChain %475 %50 
                                                      OpStore %648 %647 
                                      bool_2 %650 = OpLoad %594 
                                        bool %651 = OpCompositeExtract %650 0 
                                                      OpSelectionMerge %653 None 
                                                      OpBranchConditional %651 %652 %656 
                                             %652 = OpLabel 
                                Private f32* %654 = OpAccessChain %475 %50 
                                         f32 %655 = OpLoad %654 
                                                      OpStore %649 %655 
                                                      OpBranch %653 
                                             %656 = OpLabel 
                                         f32 %657 = OpLoad %635 
                                                      OpStore %649 %657 
                                                      OpBranch %653 
                                             %653 = OpLabel 
                                         f32 %658 = OpLoad %649 
                                Private f32* %659 = OpAccessChain %358 %50 
                                                      OpStore %659 %658 
                                        bool %661 = OpLoad %534 
                                                      OpSelectionMerge %663 None 
                                                      OpBranchConditional %661 %662 %666 
                                             %662 = OpLabel 
                                       f32_3 %664 = OpLoad %358 
                                       f32_2 %665 = OpVectorShuffle %664 %664 0 2 
                                                      OpStore %660 %665 
                                                      OpBranch %663 
                                             %666 = OpLabel 
                                                      OpStore %660 %433 
                                                      OpBranch %663 
                                             %663 = OpLabel 
                                       f32_2 %667 = OpLoad %660 
                                       f32_3 %668 = OpLoad %328 
                                       f32_3 %669 = OpVectorShuffle %668 %667 3 1 4 
                                                      OpStore %328 %669 
                                                      OpBranch %445 
                                             %445 = OpLabel 
                                                      OpBranch %319 
                                             %319 = OpLabel 
                              Uniform f32_4* %671 = OpAccessChain %28 %670 
                                       f32_4 %672 = OpLoad %671 
                                       f32_4 %673 = OpVectorShuffle %672 %672 1 0 1 1 
                              Uniform f32_4* %674 = OpAccessChain %28 %670 
                                       f32_4 %675 = OpLoad %674 
                                       f32_4 %676 = OpVectorShuffle %675 %675 2 2 2 2 
                                      bool_4 %677 = OpFOrdLessThan %673 %676 
                                      bool_2 %678 = OpVectorShuffle %677 %677 0 1 
                                                      OpStore %594 %678 
                                      bool_2 %679 = OpLoad %594 
                                        bool %680 = OpCompositeExtract %679 1 
                                      bool_2 %681 = OpLoad %594 
                                        bool %682 = OpCompositeExtract %681 0 
                                        bool %683 = OpLogicalAnd %680 %682 
                                      bool_2 %684 = OpLoad %594 
                                      bool_2 %685 = OpCompositeInsert %683 %684 0 
                                                      OpStore %594 %685 
                                      bool_2 %686 = OpLoad %594 
                                        bool %687 = OpCompositeExtract %686 0 
                                                      OpSelectionMerge %689 None 
                                                      OpBranchConditional %687 %688 %796 
                                             %688 = OpLabel 
                                Uniform f32* %690 = OpAccessChain %28 %670 %167 
                                         f32 %691 = OpLoad %690 
                                        bool %692 = OpFOrdNotEqual %691 %57 
                                      bool_2 %693 = OpLoad %594 
                                      bool_2 %694 = OpCompositeInsert %692 %693 0 
                                                      OpStore %594 %694 
                                Uniform f32* %695 = OpAccessChain %28 %670 %154 
                                         f32 %696 = OpLoad %695 
                                Uniform f32* %697 = OpAccessChain %28 %670 %50 
                                         f32 %698 = OpLoad %697 
                                         f32 %699 = OpExtInst %1 37 %696 %698 
                                Private f32* %700 = OpAccessChain %358 %50 
                                                      OpStore %700 %699 
                                Private f32* %701 = OpAccessChain %358 %50 
                                         f32 %702 = OpLoad %701 
                                         f32 %703 = OpFNegate %702 
                                Uniform f32* %704 = OpAccessChain %28 %670 %167 
                                         f32 %705 = OpLoad %704 
                                         f32 %706 = OpFAdd %703 %705 
                                Private f32* %707 = OpAccessChain %358 %50 
                                                      OpStore %707 %706 
                                Private f32* %709 = OpAccessChain %358 %50 
                                         f32 %710 = OpLoad %709 
                                        bool %711 = OpFOrdNotEqual %710 %57 
                                      bool_2 %712 = OpLoad %708 
                                      bool_2 %713 = OpCompositeInsert %711 %712 0 
                                                      OpStore %708 %713 
                                Private f32* %714 = OpAccessChain %358 %50 
                                         f32 %715 = OpLoad %714 
                                Uniform f32* %716 = OpAccessChain %28 %670 %167 
                                         f32 %717 = OpLoad %716 
                                         f32 %718 = OpFDiv %715 %717 
                                Private f32* %719 = OpAccessChain %475 %50 
                                                      OpStore %719 %718 
                                Uniform f32* %720 = OpAccessChain %28 %670 %154 
                                         f32 %721 = OpLoad %720 
                                         f32 %722 = OpFNegate %721 
                                Uniform f32* %723 = OpAccessChain %28 %670 %50 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpFAdd %722 %724 
                                Private f32* %726 = OpAccessChain %358 %167 
                                                      OpStore %726 %725 
                                Private f32* %727 = OpAccessChain %358 %167 
                                         f32 %728 = OpLoad %727 
                                Private f32* %729 = OpAccessChain %358 %50 
                                         f32 %730 = OpLoad %729 
                                         f32 %731 = OpFDiv %728 %730 
                                Private f32* %732 = OpAccessChain %358 %50 
                                                      OpStore %732 %731 
                                       f32_3 %733 = OpLoad %358 
                                       f32_2 %734 = OpVectorShuffle %733 %733 0 2 
                                       f32_2 %736 = OpFAdd %734 %735 
                                                      OpStore %499 %736 
                                      bool_2 %738 = OpLoad %708 
                                        bool %739 = OpCompositeExtract %738 0 
                                                      OpSelectionMerge %741 None 
                                                      OpBranchConditional %739 %740 %744 
                                             %740 = OpLabel 
                                Private f32* %742 = OpAccessChain %499 %50 
                                         f32 %743 = OpLoad %742 
                                                      OpStore %737 %743 
                                                      OpBranch %741 
                                             %744 = OpLabel 
                                Private f32* %745 = OpAccessChain %499 %154 
                                         f32 %746 = OpLoad %745 
                                                      OpStore %737 %746 
                                                      OpBranch %741 
                                             %741 = OpLabel 
                                         f32 %747 = OpLoad %737 
                                Private f32* %748 = OpAccessChain %358 %50 
                                                      OpStore %748 %747 
                                      bool_2 %750 = OpLoad %708 
                                        bool %751 = OpCompositeExtract %750 0 
                                                      OpSelectionMerge %753 None 
                                                      OpBranchConditional %751 %752 %756 
                                             %752 = OpLabel 
                                Private f32* %754 = OpAccessChain %475 %50 
                                         f32 %755 = OpLoad %754 
                                                      OpStore %749 %755 
                                                      OpBranch %753 
                                             %756 = OpLabel 
                                                      OpStore %749 %57 
                                                      OpBranch %753 
                                             %753 = OpLabel 
                                         f32 %757 = OpLoad %749 
                                Private f32* %758 = OpAccessChain %520 %167 
                                                      OpStore %758 %757 
                                Private f32* %759 = OpAccessChain %358 %50 
                                         f32 %760 = OpLoad %759 
                                         f32 %761 = OpFMul %760 %404 
                                Private f32* %762 = OpAccessChain %475 %50 
                                                      OpStore %762 %761 
                                Private f32* %763 = OpAccessChain %358 %50 
                                         f32 %764 = OpLoad %763 
                                        bool %765 = OpFOrdLessThan %764 %408 
                                      bool_2 %766 = OpLoad %708 
                                      bool_2 %767 = OpCompositeInsert %765 %766 0 
                                                      OpStore %708 %767 
                                Private f32* %768 = OpAccessChain %358 %50 
                                         f32 %769 = OpLoad %768 
                                         f32 %770 = OpFMul %769 %404 
                                         f32 %771 = OpFAdd %770 %99 
                                Private f32* %772 = OpAccessChain %358 %50 
                                                      OpStore %772 %771 
                                      bool_2 %774 = OpLoad %708 
                                        bool %775 = OpCompositeExtract %774 0 
                                                      OpSelectionMerge %777 None 
                                                      OpBranchConditional %775 %776 %780 
                                             %776 = OpLabel 
                                Private f32* %778 = OpAccessChain %358 %50 
                                         f32 %779 = OpLoad %778 
                                                      OpStore %773 %779 
                                                      OpBranch %777 
                                             %780 = OpLabel 
                                Private f32* %781 = OpAccessChain %475 %50 
                                         f32 %782 = OpLoad %781 
                                                      OpStore %773 %782 
                                                      OpBranch %777 
                                             %777 = OpLabel 
                                         f32 %783 = OpLoad %773 
                                Private f32* %784 = OpAccessChain %520 %50 
                                                      OpStore %784 %783 
                                      bool_2 %786 = OpLoad %594 
                                        bool %787 = OpCompositeExtract %786 0 
                                                      OpSelectionMerge %789 None 
                                                      OpBranchConditional %787 %788 %792 
                                             %788 = OpLabel 
                                       f32_3 %790 = OpLoad %520 
                                       f32_2 %791 = OpVectorShuffle %790 %790 0 2 
                                                      OpStore %785 %791 
                                                      OpBranch %789 
                                             %792 = OpLabel 
                                                      OpStore %785 %433 
                                                      OpBranch %789 
                                             %789 = OpLabel 
                                       f32_2 %793 = OpLoad %785 
                                       f32_3 %794 = OpLoad %358 
                                       f32_3 %795 = OpVectorShuffle %794 %793 3 4 2 
                                                      OpStore %358 %795 
                                                      OpBranch %689 
                                             %796 = OpLabel 
                                Uniform f32* %797 = OpAccessChain %28 %670 %50 
                                         f32 %798 = OpLoad %797 
                                Uniform f32* %799 = OpAccessChain %28 %670 %154 
                                         f32 %800 = OpLoad %799 
                                        bool %801 = OpFOrdLessThan %798 %800 
                                      bool_2 %802 = OpLoad %594 
                                      bool_2 %803 = OpCompositeInsert %801 %802 0 
                                                      OpStore %594 %803 
                                                      OpSelectionMerge %805 None 
                                                      OpBranchConditional %68 %804 %805 
                                             %804 = OpLabel 
                                      bool_2 %806 = OpLoad %594 
                                        bool %807 = OpCompositeExtract %806 0 
                                                      OpSelectionMerge %809 None 
                                                      OpBranchConditional %807 %808 %809 
                                             %808 = OpLabel 
                                                      OpBranch %809 
                                             %809 = OpLabel 
                                                      OpBranch %805 
                                             %805 = OpLabel 
                                                      OpSelectionMerge %812 None 
                                                      OpBranchConditional %810 %811 %917 
                                             %811 = OpLabel 
                                Uniform f32* %813 = OpAccessChain %28 %670 %154 
                                         f32 %814 = OpLoad %813 
                                        bool %815 = OpFOrdNotEqual %814 %57 
                                      bool_2 %816 = OpLoad %594 
                                      bool_2 %817 = OpCompositeInsert %815 %816 0 
                                                      OpStore %594 %817 
                                Uniform f32* %818 = OpAccessChain %28 %670 %50 
                                         f32 %819 = OpLoad %818 
                                Uniform f32* %820 = OpAccessChain %28 %670 %167 
                                         f32 %821 = OpLoad %820 
                                         f32 %822 = OpExtInst %1 37 %819 %821 
                                Private f32* %823 = OpAccessChain %482 %50 
                                                      OpStore %823 %822 
                                Private f32* %824 = OpAccessChain %482 %50 
                                         f32 %825 = OpLoad %824 
                                         f32 %826 = OpFNegate %825 
                                Uniform f32* %827 = OpAccessChain %28 %670 %154 
                                         f32 %828 = OpLoad %827 
                                         f32 %829 = OpFAdd %826 %828 
                                Private f32* %830 = OpAccessChain %482 %50 
                                                      OpStore %830 %829 
                                Private f32* %831 = OpAccessChain %482 %50 
                                         f32 %832 = OpLoad %831 
                                        bool %833 = OpFOrdNotEqual %832 %57 
                                      bool_2 %834 = OpLoad %708 
                                      bool_2 %835 = OpCompositeInsert %833 %834 0 
                                                      OpStore %708 %835 
                                Private f32* %836 = OpAccessChain %482 %50 
                                         f32 %837 = OpLoad %836 
                                Uniform f32* %838 = OpAccessChain %28 %670 %154 
                                         f32 %839 = OpLoad %838 
                                         f32 %840 = OpFDiv %837 %839 
                                                      OpStore %635 %840 
                                Uniform f32* %841 = OpAccessChain %28 %670 %50 
                                         f32 %842 = OpLoad %841 
                                         f32 %843 = OpFNegate %842 
                                Uniform f32* %844 = OpAccessChain %28 %670 %167 
                                         f32 %845 = OpLoad %844 
                                         f32 %846 = OpFAdd %843 %845 
                                Private f32* %847 = OpAccessChain %520 %50 
                                                      OpStore %847 %846 
                                Private f32* %848 = OpAccessChain %520 %50 
                                         f32 %849 = OpLoad %848 
                                Private f32* %850 = OpAccessChain %482 %50 
                                         f32 %851 = OpLoad %850 
                                         f32 %852 = OpFDiv %849 %851 
                                Private f32* %853 = OpAccessChain %482 %50 
                                                      OpStore %853 %852 
                                Private f32* %854 = OpAccessChain %482 %50 
                                         f32 %855 = OpLoad %854 
                                         f32 %856 = OpFAdd %855 %502 
                                Private f32* %857 = OpAccessChain %499 %50 
                                                      OpStore %857 %856 
                                Private f32* %859 = OpAccessChain %520 %50 
                                         f32 %860 = OpLoad %859 
                                         f32 %861 = OpFAdd %860 %502 
                                                      OpStore %858 %861 
                                      bool_2 %863 = OpLoad %708 
                                        bool %864 = OpCompositeExtract %863 0 
                                                      OpSelectionMerge %866 None 
                                                      OpBranchConditional %864 %865 %869 
                                             %865 = OpLabel 
                                Private f32* %867 = OpAccessChain %499 %50 
                                         f32 %868 = OpLoad %867 
                                                      OpStore %862 %868 
                                                      OpBranch %866 
                                             %869 = OpLabel 
                                         f32 %870 = OpLoad %858 
                                                      OpStore %862 %870 
                                                      OpBranch %866 
                                             %866 = OpLabel 
                                         f32 %871 = OpLoad %862 
                                Private f32* %872 = OpAccessChain %482 %50 
                                                      OpStore %872 %871 
                                      bool_2 %874 = OpLoad %708 
                                        bool %875 = OpCompositeExtract %874 0 
                                                      OpSelectionMerge %877 None 
                                                      OpBranchConditional %875 %876 %879 
                                             %876 = OpLabel 
                                         f32 %878 = OpLoad %635 
                                                      OpStore %873 %878 
                                                      OpBranch %877 
                                             %879 = OpLabel 
                                                      OpStore %873 %57 
                                                      OpBranch %877 
                                             %877 = OpLabel 
                                         f32 %880 = OpLoad %873 
                                Private f32* %881 = OpAccessChain %520 %167 
                                                      OpStore %881 %880 
                                Private f32* %882 = OpAccessChain %482 %50 
                                         f32 %883 = OpLoad %882 
                                         f32 %884 = OpFMul %883 %404 
                                                      OpStore %635 %884 
                                Private f32* %885 = OpAccessChain %482 %50 
                                         f32 %886 = OpLoad %885 
                                        bool %887 = OpFOrdLessThan %886 %408 
                                      bool_2 %888 = OpLoad %708 
                                      bool_2 %889 = OpCompositeInsert %887 %888 0 
                                                      OpStore %708 %889 
                                Private f32* %890 = OpAccessChain %482 %50 
                                         f32 %891 = OpLoad %890 
                                         f32 %892 = OpFMul %891 %404 
                                         f32 %893 = OpFAdd %892 %99 
                                Private f32* %894 = OpAccessChain %482 %50 
                                                      OpStore %894 %893 
                                      bool_2 %896 = OpLoad %708 
                                        bool %897 = OpCompositeExtract %896 0 
                                                      OpSelectionMerge %899 None 
                                                      OpBranchConditional %897 %898 %902 
                                             %898 = OpLabel 
                                Private f32* %900 = OpAccessChain %482 %50 
                                         f32 %901 = OpLoad %900 
                                                      OpStore %895 %901 
                                                      OpBranch %899 
                                             %902 = OpLabel 
                                         f32 %903 = OpLoad %635 
                                                      OpStore %895 %903 
                                                      OpBranch %899 
                                             %899 = OpLabel 
                                         f32 %904 = OpLoad %895 
                                Private f32* %905 = OpAccessChain %520 %50 
                                                      OpStore %905 %904 
                                      bool_2 %907 = OpLoad %594 
                                        bool %908 = OpCompositeExtract %907 0 
                                                      OpSelectionMerge %910 None 
                                                      OpBranchConditional %908 %909 %913 
                                             %909 = OpLabel 
                                       f32_3 %911 = OpLoad %520 
                                       f32_2 %912 = OpVectorShuffle %911 %911 0 2 
                                                      OpStore %906 %912 
                                                      OpBranch %910 
                                             %913 = OpLabel 
                                                      OpStore %906 %433 
                                                      OpBranch %910 
                                             %910 = OpLabel 
                                       f32_2 %914 = OpLoad %906 
                                       f32_3 %915 = OpLoad %358 
                                       f32_3 %916 = OpVectorShuffle %915 %914 3 4 2 
                                                      OpStore %358 %916 
                                                      OpBranch %812 
                                             %917 = OpLabel 
                                Uniform f32* %918 = OpAccessChain %28 %670 %50 
                                         f32 %919 = OpLoad %918 
                                        bool %920 = OpFOrdNotEqual %919 %57 
                                      bool_2 %921 = OpLoad %594 
                                      bool_2 %922 = OpCompositeInsert %920 %921 0 
                                                      OpStore %594 %922 
                                Uniform f32* %923 = OpAccessChain %28 %670 %167 
                                         f32 %924 = OpLoad %923 
                                Uniform f32* %925 = OpAccessChain %28 %670 %154 
                                         f32 %926 = OpLoad %925 
                                         f32 %927 = OpExtInst %1 37 %924 %926 
                                Private f32* %928 = OpAccessChain %482 %50 
                                                      OpStore %928 %927 
                                Private f32* %929 = OpAccessChain %482 %50 
                                         f32 %930 = OpLoad %929 
                                         f32 %931 = OpFNegate %930 
                                Uniform f32* %932 = OpAccessChain %28 %670 %50 
                                         f32 %933 = OpLoad %932 
                                         f32 %934 = OpFAdd %931 %933 
                                Private f32* %935 = OpAccessChain %482 %50 
                                                      OpStore %935 %934 
                                Private f32* %936 = OpAccessChain %482 %50 
                                         f32 %937 = OpLoad %936 
                                        bool %938 = OpFOrdNotEqual %937 %57 
                                      bool_2 %939 = OpLoad %708 
                                      bool_2 %940 = OpCompositeInsert %938 %939 0 
                                                      OpStore %708 %940 
                                Private f32* %941 = OpAccessChain %482 %50 
                                         f32 %942 = OpLoad %941 
                                Uniform f32* %943 = OpAccessChain %28 %670 %50 
                                         f32 %944 = OpLoad %943 
                                         f32 %945 = OpFDiv %942 %944 
                                Private f32* %946 = OpAccessChain %606 %154 
                                                      OpStore %946 %945 
                                Uniform f32* %948 = OpAccessChain %28 %670 %167 
                                         f32 %949 = OpLoad %948 
                                         f32 %950 = OpFNegate %949 
                                Uniform f32* %951 = OpAccessChain %28 %670 %154 
                                         f32 %952 = OpLoad %951 
                                         f32 %953 = OpFAdd %950 %952 
                                Private f32* %954 = OpAccessChain %947 %50 
                                                      OpStore %954 %953 
                                Private f32* %955 = OpAccessChain %947 %50 
                                         f32 %956 = OpLoad %955 
                                Private f32* %957 = OpAccessChain %482 %50 
                                         f32 %958 = OpLoad %957 
                                         f32 %959 = OpFDiv %956 %958 
                                Private f32* %960 = OpAccessChain %606 %50 
                                                      OpStore %960 %959 
                                Private f32* %961 = OpAccessChain %947 %154 
                                                      OpStore %961 %57 
                                      bool_2 %963 = OpLoad %708 
                                        bool %964 = OpCompositeExtract %963 0 
                                                      OpSelectionMerge %966 None 
                                                      OpBranchConditional %964 %965 %968 
                                             %965 = OpLabel 
                                       f32_2 %967 = OpLoad %606 
                                                      OpStore %962 %967 
                                                      OpBranch %966 
                                             %968 = OpLabel 
                                       f32_2 %969 = OpLoad %947 
                                                      OpStore %962 %969 
                                                      OpBranch %966 
                                             %966 = OpLabel 
                                       f32_2 %970 = OpLoad %962 
                                       f32_3 %971 = OpLoad %520 
                                       f32_3 %972 = OpVectorShuffle %971 %970 0 3 4 
                                                      OpStore %520 %972 
                                Private f32* %973 = OpAccessChain %520 %154 
                                         f32 %974 = OpLoad %973 
                                         f32 %975 = OpFMul %974 %404 
                                Private f32* %976 = OpAccessChain %482 %50 
                                                      OpStore %976 %975 
                                Private f32* %977 = OpAccessChain %520 %154 
                                         f32 %978 = OpLoad %977 
                                        bool %979 = OpFOrdLessThan %978 %408 
                                      bool_2 %980 = OpLoad %708 
                                      bool_2 %981 = OpCompositeInsert %979 %980 0 
                                                      OpStore %708 %981 
                                Private f32* %982 = OpAccessChain %520 %154 
                                         f32 %983 = OpLoad %982 
                                         f32 %984 = OpFMul %983 %404 
                                         f32 %985 = OpFAdd %984 %99 
                                                      OpStore %635 %985 
                                      bool_2 %987 = OpLoad %708 
                                        bool %988 = OpCompositeExtract %987 0 
                                                      OpSelectionMerge %990 None 
                                                      OpBranchConditional %988 %989 %992 
                                             %989 = OpLabel 
                                         f32 %991 = OpLoad %635 
                                                      OpStore %986 %991 
                                                      OpBranch %990 
                                             %992 = OpLabel 
                                Private f32* %993 = OpAccessChain %482 %50 
                                         f32 %994 = OpLoad %993 
                                                      OpStore %986 %994 
                                                      OpBranch %990 
                                             %990 = OpLabel 
                                         f32 %995 = OpLoad %986 
                                Private f32* %996 = OpAccessChain %520 %50 
                                                      OpStore %996 %995 
                                      bool_2 %998 = OpLoad %594 
                                        bool %999 = OpCompositeExtract %998 0 
                                                      OpSelectionMerge %1001 None 
                                                      OpBranchConditional %999 %1000 %1004 
                                            %1000 = OpLabel 
                                      f32_3 %1002 = OpLoad %520 
                                      f32_2 %1003 = OpVectorShuffle %1002 %1002 0 2 
                                                      OpStore %997 %1003 
                                                      OpBranch %1001 
                                            %1004 = OpLabel 
                                                      OpStore %997 %433 
                                                      OpBranch %1001 
                                            %1001 = OpLabel 
                                      f32_2 %1005 = OpLoad %997 
                                      f32_3 %1006 = OpLoad %358 
                                      f32_3 %1007 = OpVectorShuffle %1006 %1005 3 4 2 
                                                      OpStore %358 %1007 
                                                      OpBranch %812 
                                             %812 = OpLabel 
                                                      OpBranch %689 
                                             %689 = OpLabel 
                                      f32_3 %1008 = OpLoad %358 
                                      f32_2 %1009 = OpVectorShuffle %1008 %1008 1 0 
                               Uniform f32* %1011 = OpAccessChain %28 %1010 
                                        f32 %1012 = OpLoad %1011 
                               Uniform f32* %1014 = OpAccessChain %28 %1013 
                                        f32 %1015 = OpLoad %1014 
                                      f32_2 %1016 = OpCompositeConstruct %1012 %1015 
                                      f32_2 %1017 = OpFNegate %1016 
                                      f32_2 %1018 = OpFAdd %1009 %1017 
                                                      OpStore %482 %1018 
                                      f32_3 %1019 = OpLoad %328 
                                      f32_4 %1020 = OpVectorShuffle %1019 %1019 2 0 2 2 
                                      f32_2 %1021 = OpLoad %482 
                                      f32_4 %1022 = OpVectorShuffle %1021 %1021 0 1 0 0 
                                     bool_4 %1023 = OpFOrdLessThan %1020 %1022 
                                     bool_2 %1024 = OpVectorShuffle %1023 %1023 0 1 
                                                      OpStore %594 %1024 
                               Private f32* %1025 = OpAccessChain %482 %154 
                                        f32 %1026 = OpLoad %1025 
                                        f32 %1027 = OpFAdd %1026 %99 
                               Private f32* %1028 = OpAccessChain %482 %50 
                                                      OpStore %1028 %1027 
                               Private f32* %1029 = OpAccessChain %328 %50 
                                        f32 %1030 = OpLoad %1029 
                               Private f32* %1031 = OpAccessChain %482 %50 
                                        f32 %1032 = OpLoad %1031 
                                       bool %1033 = OpFOrdLessThan %1030 %1032 
                                                      OpStore %534 %1033 
                                       bool %1034 = OpLoad %534 
                                     bool_2 %1035 = OpLoad %594 
                                       bool %1036 = OpCompositeExtract %1035 1 
                                       bool %1037 = OpLogicalAnd %1034 %1036 
                                     bool_2 %1038 = OpLoad %708 
                                     bool_2 %1039 = OpCompositeInsert %1037 %1038 0 
                                                      OpStore %708 %1039 
                                     bool_2 %1040 = OpLoad %708 
                                       bool %1041 = OpCompositeExtract %1040 0 
                                     bool_2 %1042 = OpLoad %594 
                                       bool %1043 = OpCompositeExtract %1042 0 
                                       bool %1044 = OpLogicalOr %1041 %1043 
                                     bool_2 %1045 = OpLoad %594 
                                     bool_2 %1046 = OpCompositeInsert %1044 %1045 0 
                                                      OpStore %594 %1046 
                                      f32_3 %1047 = OpLoad %358 
                                      f32_2 %1048 = OpVectorShuffle %1047 %1047 1 0 
                               Uniform f32* %1049 = OpAccessChain %28 %1010 
                                        f32 %1050 = OpLoad %1049 
                               Uniform f32* %1051 = OpAccessChain %28 %1013 
                                        f32 %1052 = OpLoad %1051 
                                      f32_2 %1053 = OpCompositeConstruct %1050 %1052 
                                      f32_2 %1054 = OpFAdd %1048 %1053 
                                      f32_3 %1055 = OpLoad %358 
                                      f32_3 %1056 = OpVectorShuffle %1055 %1054 3 4 2 
                                                      OpStore %358 %1056 
                                      f32_3 %1057 = OpLoad %358 
                                      f32_4 %1058 = OpVectorShuffle %1057 %1057 0 1 0 0 
                                      f32_3 %1059 = OpLoad %328 
                                      f32_4 %1060 = OpVectorShuffle %1059 %1059 2 0 2 2 
                                     bool_4 %1061 = OpFOrdLessThan %1058 %1060 
                                     bool_2 %1062 = OpVectorShuffle %1061 %1061 0 1 
                                                      OpStore %708 %1062 
                               Private f32* %1063 = OpAccessChain %358 %154 
                                        f32 %1064 = OpLoad %1063 
                                        f32 %1066 = OpFAdd %1064 %1065 
                                                      OpStore %219 %1066 
                                        f32 %1067 = OpLoad %219 
                               Private f32* %1068 = OpAccessChain %328 %50 
                                        f32 %1069 = OpLoad %1068 
                                       bool %1070 = OpFOrdLessThan %1067 %1069 
                                                      OpStore %54 %1070 
                                       bool %1071 = OpLoad %54 
                                     bool_2 %1072 = OpLoad %708 
                                       bool %1073 = OpCompositeExtract %1072 1 
                                       bool %1074 = OpLogicalAnd %1071 %1073 
                                                      OpStore %534 %1074 
                                       bool %1075 = OpLoad %534 
                                     bool_2 %1076 = OpLoad %708 
                                       bool %1077 = OpCompositeExtract %1076 0 
                                       bool %1078 = OpLogicalOr %1075 %1077 
                                     bool_2 %1079 = OpLoad %708 
                                     bool_2 %1080 = OpCompositeInsert %1078 %1079 0 
                                                      OpStore %708 %1080 
                               Private f32* %1081 = OpAccessChain %35 %167 
                                                      OpStore %1081 %57 
                                     bool_2 %1084 = OpLoad %708 
                                       bool %1085 = OpCompositeExtract %1084 0 
                                                      OpSelectionMerge %1087 None 
                                                      OpBranchConditional %1085 %1086 %1090 
                                            %1086 = OpLabel 
                             Uniform f32_4* %1088 = OpAccessChain %28 %261 
                                      f32_4 %1089 = OpLoad %1088 
                                                      OpStore %1083 %1089 
                                                      OpBranch %1087 
                                            %1090 = OpLabel 
                                      f32_3 %1091 = OpLoad %35 
                                      f32_4 %1092 = OpVectorShuffle %1091 %1091 0 0 0 2 
                                                      OpStore %1083 %1092 
                                                      OpBranch %1087 
                                            %1087 = OpLabel 
                                      f32_4 %1093 = OpLoad %1083 
                                                      OpStore %1082 %1093 
                                     bool_2 %1095 = OpLoad %594 
                                       bool %1096 = OpCompositeExtract %1095 0 
                                                      OpSelectionMerge %1098 None 
                                                      OpBranchConditional %1096 %1097 %1101 
                                            %1097 = OpLabel 
                             Uniform f32_4* %1099 = OpAccessChain %28 %274 
                                      f32_4 %1100 = OpLoad %1099 
                                                      OpStore %1094 %1100 
                                                      OpBranch %1098 
                                            %1101 = OpLabel 
                                      f32_4 %1102 = OpLoad %1082 
                                                      OpStore %1094 %1102 
                                                      OpBranch %1098 
                                            %1098 = OpLabel 
                                      f32_4 %1103 = OpLoad %1094 
                                                      OpStore %269 %1103 
                                                      OpBranch %299 
                                             %299 = OpLabel 
                                                      OpBranch %288 
                                             %288 = OpLabel 
                                                      OpBranch %246 
                                             %246 = OpLabel 
                                                      OpBranch %80 
                                            %1104 = OpLabel 
                               Uniform i32* %1105 = OpAccessChain %28 %60 
                                        i32 %1106 = OpLoad %1105 
                                       bool %1107 = OpIEqual %1106 %60 
                                     bool_2 %1108 = OpLoad %594 
                                     bool_2 %1109 = OpCompositeInsert %1107 %1108 0 
                                                      OpStore %594 %1109 
                                     bool_2 %1111 = OpLoad %594 
                                       bool %1112 = OpCompositeExtract %1111 0 
                                                      OpSelectionMerge %1114 None 
                                                      OpBranchConditional %1112 %1113 %1117 
                                            %1113 = OpLabel 
                             Uniform f32_4* %1115 = OpAccessChain %28 %274 
                                      f32_4 %1116 = OpLoad %1115 
                                                      OpStore %1110 %1116 
                                                      OpBranch %1114 
                                            %1117 = OpLabel 
                                                      OpStore %1110 %1118 
                                                      OpBranch %1114 
                                            %1114 = OpLabel 
                                      f32_4 %1119 = OpLoad %1110 
                                                      OpStore %269 %1119 
                                                      OpBranch %80 
                                              %80 = OpLabel 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "EDITOR_VISUALIZATION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "EDITOR_VISUALIZATION" }
""
}
SubProgram "vulkan " {
Keywords { "EDITOR_VISUALIZATION" }
""
}
}
}
}
Fallback "Legacy Shaders/Transparent/Cutout/VertexLit"
}