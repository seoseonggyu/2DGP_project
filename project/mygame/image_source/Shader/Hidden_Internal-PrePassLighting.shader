//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/Internal-PrePassLighting" {
Properties {
_LightTexture0 ("", any) = "" { }
_LightTextureB0 ("", 2D) = "" { }
_ShadowMapTexture ("", any) = "" { }
}
SubShader {
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  Blend DstColor Zero, DstColor Zero
  ZWrite Off
  GpuProgramID 60282
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
float u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat11;
float u_xlat16_15;
float u_xlat16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat1 = (-u_xlat6.z) * u_xlat1 + u_xlat11;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = inversesqrt(u_xlat11);
    u_xlat11 = u_xlat11 * _LightPos.w;
    u_xlat10_2 = texture(_LightTextureB0, vec2(u_xlat11)).wxyz;
    u_xlat7.xyz = vec3(u_xlat16) * u_xlat4.xyz;
    u_xlat6.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + (-u_xlat7.xyz);
    u_xlat3.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_15 = u_xlat10_0.w * 128.0;
    u_xlat16_3 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_3 = inversesqrt(u_xlat16_3);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_3);
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat10_2.x * u_xlat0.x;
    u_xlat16_2 = u_xlat10_2.x;
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat6.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat16_2 * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    u_xlat0 = vec4(u_xlat1) * u_xlat3;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 362
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %83 %357 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %228 DescriptorSet 228 
                                                      OpDecorate %228 Binding 228 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %357 Location 357 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %7 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 8 
                                              %43 = OpTypePointer Uniform %7 
                               Private f32_4* %54 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %55 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                              %61 = OpTypePointer Uniform %6 
                                          u32 %66 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Private %35 
                               Private f32_3* %77 = OpVariable Private 
                                          i32 %78 = OpConstant 1 
                                          u32 %79 = OpConstant 2 
                                              %82 = OpTypePointer Input %35 
                                 Input f32_3* %83 = OpVariable Input 
                                              %84 = OpTypePointer Input %6 
                               Private f32_4* %93 = OpVariable Private 
                              Private f32_3* %100 = OpVariable Private 
                                         i32 %103 = OpConstant 3 
                                         i32 %108 = OpConstant 0 
                                             %140 = OpTypePointer Uniform %35 
                              Private f32_3* %153 = OpVariable Private 
                                         i32 %156 = OpConstant 5 
                                         i32 %164 = OpConstant 4 
                                         u32 %188 = OpConstant 3 
                                         i32 %200 = OpConstant 7 
                                         f32 %215 = OpConstant 3.674022E-40 
                                Private f32* %221 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %228 = OpVariable UniformConstant 
                              Private f32_3* %261 = OpVariable Private 
                                         f32 %264 = OpConstant 3.674022E-40 
                                       f32_3 %265 = OpConstantComposite %264 %264 %264 
                                         f32 %267 = OpConstant 3.674022E-40 
                                       f32_3 %268 = OpConstantComposite %267 %267 %267 
                                Private f32* %270 = OpVariable Private 
                                         f32 %273 = OpConstant 3.674022E-40 
                                Private f32* %275 = OpVariable Private 
                              Private f32_4* %306 = OpVariable Private 
                                         i32 %309 = OpConstant 6 
                                         f32 %340 = OpConstant 3.674022E-40 
                                         f32 %341 = OpConstant 3.674022E-40 
                                         f32 %342 = OpConstant 3.674022E-40 
                                       f32_3 %343 = OpConstantComposite %340 %341 %342 
                                             %356 = OpTypePointer Output %7 
                               Output f32_4* %357 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %44 = OpAccessChain %40 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_2 %47 = OpFMul %34 %46 
                               Uniform f32_4* %48 = OpAccessChain %40 %42 
                                        f32_4 %49 = OpLoad %48 
                                        f32_2 %50 = OpVectorShuffle %49 %49 2 3 
                                        f32_2 %51 = OpFAdd %47 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                   read_only Texture2DSampled %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_2 %58 = OpVectorShuffle %57 %57 0 1 
                                        f32_4 %59 = OpImageSampleImplicitLod %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %40 %60 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %21 
                                          f32 %65 = OpFMul %63 %64 
                                 Uniform f32* %67 = OpAccessChain %40 %60 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFAdd %65 %68 
                                 Private f32* %70 = OpAccessChain %9 %31 
                                                      OpStore %70 %69 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFDiv %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %31 
                                                      OpStore %75 %74 
                                 Uniform f32* %80 = OpAccessChain %40 %78 %79 
                                          f32 %81 = OpLoad %80 
                                   Input f32* %85 = OpAccessChain %83 %79 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFDiv %81 %86 
                                 Private f32* %88 = OpAccessChain %77 %31 
                                                      OpStore %88 %87 
                                        f32_3 %89 = OpLoad %77 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 0 0 
                                        f32_3 %91 = OpLoad %83 
                                        f32_3 %92 = OpFMul %90 %91 
                                                      OpStore %77 %92 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpLoad %77 
                                        f32_3 %97 = OpFMul %95 %96 
                                        f32_4 %98 = OpLoad %93 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
                                                      OpStore %93 %99 
                                       f32_4 %101 = OpLoad %93 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %104 = OpAccessChain %40 %103 %78 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFMul %102 %106 
                                                      OpStore %100 %107 
                              Uniform f32_4* %109 = OpAccessChain %40 %103 %108 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %93 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %100 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %93 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %93 %118 
                              Uniform f32_4* %119 = OpAccessChain %40 %103 %60 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %93 
                                       f32_3 %123 = OpVectorShuffle %122 %122 2 2 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %93 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 2 6 
                                                      OpStore %93 %129 
                                       f32_4 %130 = OpLoad %93 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 3 
                              Uniform f32_4* %132 = OpAccessChain %40 %103 %103 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFAdd %131 %134 
                                       f32_4 %136 = OpLoad %93 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %93 %137 
                                       f32_4 %138 = OpLoad %93 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                              Uniform f32_3* %141 = OpAccessChain %40 %108 
                                       f32_3 %142 = OpLoad %141 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                                      OpStore %100 %144 
                                       f32_3 %145 = OpLoad %100 
                                       f32_3 %146 = OpLoad %100 
                                         f32 %147 = OpDot %145 %146 
                                Private f32* %148 = OpAccessChain %77 %31 
                                                      OpStore %148 %147 
                                Private f32* %149 = OpAccessChain %77 %31 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpExtInst %1 32 %150 
                                Private f32* %152 = OpAccessChain %77 %31 
                                                      OpStore %152 %151 
                                       f32_4 %154 = OpLoad %93 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 3 
                              Uniform f32_4* %157 = OpAccessChain %40 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFNegate %159 
                                       f32_3 %161 = OpFAdd %155 %160 
                                                      OpStore %153 %161 
                                       f32_4 %162 = OpLoad %93 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 3 
                              Uniform f32_4* %165 = OpAccessChain %40 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFNegate %167 
                                       f32_3 %169 = OpFAdd %163 %168 
                                       f32_4 %170 = OpLoad %93 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 2 6 
                                                      OpStore %93 %171 
                                       f32_4 %172 = OpLoad %93 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 3 
                                       f32_4 %174 = OpLoad %93 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 3 
                                         f32 %176 = OpDot %173 %175 
                                                      OpStore %21 %176 
                                         f32 %177 = OpLoad %21 
                                         f32 %178 = OpExtInst %1 31 %177 
                                                      OpStore %21 %178 
                                Private f32* %179 = OpAccessChain %77 %79 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFNegate %180 
                                Private f32* %182 = OpAccessChain %9 %31 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                         f32 %185 = OpLoad %21 
                                         f32 %186 = OpFAdd %184 %185 
                                Private f32* %187 = OpAccessChain %9 %31 
                                                      OpStore %187 %186 
                                Uniform f32* %189 = OpAccessChain %40 %164 %188 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %31 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %93 %79 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFAdd %193 %195 
                                Private f32* %197 = OpAccessChain %9 %31 
                                                      OpStore %197 %196 
                                Private f32* %198 = OpAccessChain %9 %31 
                                         f32 %199 = OpLoad %198 
                                Uniform f32* %201 = OpAccessChain %40 %200 %79 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFMul %199 %202 
                                Uniform f32* %204 = OpAccessChain %40 %200 %188 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFAdd %203 %205 
                                Private f32* %207 = OpAccessChain %9 %31 
                                                      OpStore %207 %206 
                                Private f32* %208 = OpAccessChain %9 %31 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %210 %71 
                                Private f32* %212 = OpAccessChain %9 %31 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %9 %31 
                                         f32 %214 = OpLoad %213 
                                         f32 %216 = OpExtInst %1 43 %214 %215 %71 
                                Private f32* %217 = OpAccessChain %9 %31 
                                                      OpStore %217 %216 
                                       f32_3 %218 = OpLoad %153 
                                       f32_3 %219 = OpLoad %153 
                                         f32 %220 = OpDot %218 %219 
                                                      OpStore %21 %220 
                                         f32 %222 = OpLoad %21 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %221 %223 
                                         f32 %224 = OpLoad %21 
                                Uniform f32* %225 = OpAccessChain %40 %156 %188 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFMul %224 %226 
                                                      OpStore %21 %227 
                  read_only Texture2DSampled %229 = OpLoad %228 
                                         f32 %230 = OpLoad %21 
                                       f32_2 %231 = OpCompositeConstruct %230 %230 
                                       f32_4 %232 = OpImageSampleImplicitLod %229 %231 
                                         f32 %233 = OpCompositeExtract %232 3 
                                                      OpStore %21 %233 
                                         f32 %234 = OpLoad %221 
                                       f32_3 %235 = OpCompositeConstruct %234 %234 %234 
                                       f32_3 %236 = OpLoad %153 
                                       f32_3 %237 = OpFMul %235 %236 
                                       f32_4 %238 = OpLoad %93 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                                      OpStore %93 %239 
                                       f32_3 %240 = OpLoad %100 
                                       f32_3 %241 = OpFNegate %240 
                                       f32_3 %242 = OpLoad %77 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 0 0 
                                       f32_3 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %93 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFNegate %246 
                                       f32_3 %248 = OpFAdd %244 %247 
                                                      OpStore %100 %248 
                                       f32_3 %249 = OpLoad %100 
                                       f32_3 %250 = OpLoad %100 
                                         f32 %251 = OpDot %249 %250 
                                Private f32* %252 = OpAccessChain %77 %31 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %77 %31 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 32 %254 
                                Private f32* %256 = OpAccessChain %77 %31 
                                                      OpStore %256 %255 
                                       f32_3 %257 = OpLoad %77 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpLoad %100 
                                       f32_3 %260 = OpFMul %258 %259 
                                                      OpStore %100 %260 
                                       f32_4 %262 = OpLoad %54 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %269 = OpFAdd %266 %268 
                                                      OpStore %261 %269 
                                Private f32* %271 = OpAccessChain %54 %188 
                                         f32 %272 = OpLoad %271 
                                         f32 %274 = OpFMul %272 %273 
                                                      OpStore %270 %274 
                                       f32_3 %276 = OpLoad %261 
                                       f32_3 %277 = OpLoad %261 
                                         f32 %278 = OpDot %276 %277 
                                                      OpStore %275 %278 
                                         f32 %279 = OpLoad %275 
                                         f32 %280 = OpExtInst %1 32 %279 
                                                      OpStore %275 %280 
                                       f32_3 %281 = OpLoad %261 
                                         f32 %282 = OpLoad %275 
                                       f32_3 %283 = OpCompositeConstruct %282 %282 %282 
                                       f32_3 %284 = OpFMul %281 %283 
                                                      OpStore %261 %284 
                                       f32_3 %285 = OpLoad %100 
                                       f32_3 %286 = OpLoad %261 
                                         f32 %287 = OpDot %285 %286 
                                                      OpStore %275 %287 
                                       f32_4 %288 = OpLoad %93 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFNegate %289 
                                       f32_3 %291 = OpLoad %261 
                                         f32 %292 = OpDot %290 %291 
                                Private f32* %293 = OpAccessChain %261 %31 
                                                      OpStore %293 %292 
                                Private f32* %294 = OpAccessChain %261 %31 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 40 %295 %215 
                                Private f32* %297 = OpAccessChain %261 %31 
                                                      OpStore %297 %296 
                                         f32 %298 = OpLoad %21 
                                Private f32* %299 = OpAccessChain %261 %31 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFMul %298 %300 
                                Private f32* %302 = OpAccessChain %77 %31 
                                                      OpStore %302 %301 
                                         f32 %303 = OpLoad %21 
                                                      OpStore %21 %303 
                                         f32 %304 = OpLoad %21 
                                         f32 %305 = OpExtInst %1 43 %304 %215 %71 
                                                      OpStore %21 %305 
                                       f32_3 %307 = OpLoad %77 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 0 0 
                              Uniform f32_4* %310 = OpAccessChain %40 %309 
                                       f32_4 %311 = OpLoad %310 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %313 = OpFMul %308 %312 
                                       f32_4 %314 = OpLoad %306 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %306 %315 
                                         f32 %316 = OpLoad %275 
                                         f32 %317 = OpExtInst %1 40 %316 %215 
                                Private f32* %318 = OpAccessChain %261 %31 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %261 %31 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpExtInst %1 30 %320 
                                Private f32* %322 = OpAccessChain %261 %31 
                                                      OpStore %322 %321 
                                Private f32* %323 = OpAccessChain %261 %31 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpLoad %270 
                                         f32 %326 = OpFMul %324 %325 
                                Private f32* %327 = OpAccessChain %261 %31 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %261 %31 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 29 %329 
                                Private f32* %331 = OpAccessChain %261 %31 
                                                      OpStore %331 %330 
                                         f32 %332 = OpLoad %21 
                                Private f32* %333 = OpAccessChain %261 %31 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                Private f32* %336 = OpAccessChain %77 %31 
                                                      OpStore %336 %335 
                              Uniform f32_4* %337 = OpAccessChain %40 %309 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                         f32 %344 = OpDot %339 %343 
                                Private f32* %345 = OpAccessChain %261 %31 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %77 %31 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %261 %31 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFMul %347 %349 
                                Private f32* %351 = OpAccessChain %306 %188 
                                                      OpStore %351 %350 
                                       f32_4 %352 = OpLoad %9 
                                       f32_4 %353 = OpVectorShuffle %352 %352 0 0 0 0 
                                       f32_4 %354 = OpLoad %306 
                                       f32_4 %355 = OpFMul %353 %354 
                                                      OpStore %9 %355 
                                       f32_4 %358 = OpLoad %9 
                                       f32_4 %359 = OpFNegate %358 
                                       f32_4 %360 = OpExtInst %1 29 %359 
                                                      OpStore %357 %360 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
float u_xlat16_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat16_12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat5.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat5.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat1 = (-u_xlat5.z) * u_xlat1 + u_xlat5.x;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat5.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = (-u_xlat2.xyw) * u_xlat5.xxx + (-_LightDir.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_12 = u_xlat10_0.w * 128.0;
    u_xlat16_2 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_2 = inversesqrt(u_xlat16_2);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-_LightDir.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat5.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_12;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat4 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat4 * u_xlat0.x;
    u_xlat0 = vec4(u_xlat1) * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 325
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %83 %320 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %320 Location 320 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %7 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 8 
                                              %43 = OpTypePointer Uniform %7 
                               Private f32_4* %54 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %55 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                              %61 = OpTypePointer Uniform %6 
                                          u32 %66 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Private %35 
                               Private f32_3* %77 = OpVariable Private 
                                          i32 %78 = OpConstant 1 
                                          u32 %79 = OpConstant 2 
                                              %82 = OpTypePointer Input %35 
                                 Input f32_3* %83 = OpVariable Input 
                                              %84 = OpTypePointer Input %6 
                               Private f32_4* %93 = OpVariable Private 
                              Private f32_3* %100 = OpVariable Private 
                                         i32 %103 = OpConstant 3 
                                         i32 %108 = OpConstant 0 
                                         i32 %140 = OpConstant 4 
                                             %148 = OpTypePointer Uniform %35 
                                         u32 %173 = OpConstant 3 
                                         i32 %185 = OpConstant 7 
                                         f32 %200 = OpConstant 3.674022E-40 
                                         i32 %219 = OpConstant 5 
                              Private f32_3* %237 = OpVariable Private 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_3 %241 = OpConstantComposite %240 %240 %240 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_3 %244 = OpConstantComposite %243 %243 %243 
                                Private f32* %246 = OpVariable Private 
                                         f32 %249 = OpConstant 3.674022E-40 
                                Private f32* %251 = OpVariable Private 
                              Private f32_4* %275 = OpVariable Private 
                                         i32 %278 = OpConstant 6 
                                Private f32* %301 = OpVariable Private 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_3 %308 = OpConstantComposite %305 %306 %307 
                                             %319 = OpTypePointer Output %7 
                               Output f32_4* %320 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %44 = OpAccessChain %40 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_2 %47 = OpFMul %34 %46 
                               Uniform f32_4* %48 = OpAccessChain %40 %42 
                                        f32_4 %49 = OpLoad %48 
                                        f32_2 %50 = OpVectorShuffle %49 %49 2 3 
                                        f32_2 %51 = OpFAdd %47 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                   read_only Texture2DSampled %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_2 %58 = OpVectorShuffle %57 %57 0 1 
                                        f32_4 %59 = OpImageSampleImplicitLod %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %40 %60 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %21 
                                          f32 %65 = OpFMul %63 %64 
                                 Uniform f32* %67 = OpAccessChain %40 %60 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFAdd %65 %68 
                                 Private f32* %70 = OpAccessChain %9 %31 
                                                      OpStore %70 %69 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFDiv %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %31 
                                                      OpStore %75 %74 
                                 Uniform f32* %80 = OpAccessChain %40 %78 %79 
                                          f32 %81 = OpLoad %80 
                                   Input f32* %85 = OpAccessChain %83 %79 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFDiv %81 %86 
                                 Private f32* %88 = OpAccessChain %77 %31 
                                                      OpStore %88 %87 
                                        f32_3 %89 = OpLoad %77 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 0 0 
                                        f32_3 %91 = OpLoad %83 
                                        f32_3 %92 = OpFMul %90 %91 
                                                      OpStore %77 %92 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpLoad %77 
                                        f32_3 %97 = OpFMul %95 %96 
                                        f32_4 %98 = OpLoad %93 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
                                                      OpStore %93 %99 
                                       f32_4 %101 = OpLoad %93 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %104 = OpAccessChain %40 %103 %78 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFMul %102 %106 
                                                      OpStore %100 %107 
                              Uniform f32_4* %109 = OpAccessChain %40 %103 %108 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %93 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %100 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %93 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %93 %118 
                              Uniform f32_4* %119 = OpAccessChain %40 %103 %60 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %93 
                                       f32_3 %123 = OpVectorShuffle %122 %122 2 2 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %93 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 2 6 
                                                      OpStore %93 %129 
                                       f32_4 %130 = OpLoad %93 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 3 
                              Uniform f32_4* %132 = OpAccessChain %40 %103 %103 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFAdd %131 %134 
                                       f32_4 %136 = OpLoad %93 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %93 %137 
                                       f32_4 %138 = OpLoad %93 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                              Uniform f32_4* %141 = OpAccessChain %40 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %139 %144 
                                                      OpStore %100 %145 
                                       f32_4 %146 = OpLoad %93 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 3 
                              Uniform f32_3* %149 = OpAccessChain %40 %108 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %147 %151 
                                       f32_4 %153 = OpLoad %93 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 2 6 
                                                      OpStore %93 %154 
                                       f32_3 %155 = OpLoad %100 
                                       f32_3 %156 = OpLoad %100 
                                         f32 %157 = OpDot %155 %156 
                                Private f32* %158 = OpAccessChain %77 %31 
                                                      OpStore %158 %157 
                                Private f32* %159 = OpAccessChain %77 %31 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpExtInst %1 31 %160 
                                Private f32* %162 = OpAccessChain %77 %31 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %77 %79 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFNegate %164 
                                Private f32* %166 = OpAccessChain %9 %31 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFMul %165 %167 
                                Private f32* %169 = OpAccessChain %77 %31 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %31 
                                                      OpStore %172 %171 
                                Uniform f32* %174 = OpAccessChain %40 %140 %173 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %9 %31 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFMul %175 %177 
                                Private f32* %179 = OpAccessChain %93 %79 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFAdd %178 %180 
                                Private f32* %182 = OpAccessChain %9 %31 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %9 %31 
                                         f32 %184 = OpLoad %183 
                                Uniform f32* %186 = OpAccessChain %40 %185 %79 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %184 %187 
                                Uniform f32* %189 = OpAccessChain %40 %185 %173 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFAdd %188 %190 
                                Private f32* %192 = OpAccessChain %9 %31 
                                                      OpStore %192 %191 
                                Private f32* %193 = OpAccessChain %9 %31 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFNegate %194 
                                         f32 %196 = OpFAdd %195 %71 
                                Private f32* %197 = OpAccessChain %9 %31 
                                                      OpStore %197 %196 
                                Private f32* %198 = OpAccessChain %9 %31 
                                         f32 %199 = OpLoad %198 
                                         f32 %201 = OpExtInst %1 43 %199 %200 %71 
                                Private f32* %202 = OpAccessChain %9 %31 
                                                      OpStore %202 %201 
                                       f32_4 %203 = OpLoad %93 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 3 
                                       f32_4 %205 = OpLoad %93 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 3 
                                         f32 %207 = OpDot %204 %206 
                                Private f32* %208 = OpAccessChain %77 %31 
                                                      OpStore %208 %207 
                                Private f32* %209 = OpAccessChain %77 %31 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpExtInst %1 32 %210 
                                Private f32* %212 = OpAccessChain %77 %31 
                                                      OpStore %212 %211 
                                       f32_4 %213 = OpLoad %93 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 3 
                                       f32_3 %215 = OpFNegate %214 
                                       f32_3 %216 = OpLoad %77 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 0 0 
                                       f32_3 %218 = OpFMul %215 %217 
                              Uniform f32_4* %220 = OpAccessChain %40 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpFAdd %218 %223 
                                                      OpStore %77 %224 
                                       f32_3 %225 = OpLoad %77 
                                       f32_3 %226 = OpLoad %77 
                                         f32 %227 = OpDot %225 %226 
                                Private f32* %228 = OpAccessChain %93 %31 
                                                      OpStore %228 %227 
                                Private f32* %229 = OpAccessChain %93 %31 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpExtInst %1 32 %230 
                                Private f32* %232 = OpAccessChain %93 %31 
                                                      OpStore %232 %231 
                                       f32_3 %233 = OpLoad %77 
                                       f32_4 %234 = OpLoad %93 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpFMul %233 %235 
                                                      OpStore %77 %236 
                                       f32_4 %238 = OpLoad %54 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %242 = OpFMul %239 %241 
                                       f32_3 %245 = OpFAdd %242 %244 
                                                      OpStore %237 %245 
                                Private f32* %247 = OpAccessChain %54 %173 
                                         f32 %248 = OpLoad %247 
                                         f32 %250 = OpFMul %248 %249 
                                                      OpStore %246 %250 
                                       f32_3 %252 = OpLoad %237 
                                       f32_3 %253 = OpLoad %237 
                                         f32 %254 = OpDot %252 %253 
                                                      OpStore %251 %254 
                                         f32 %255 = OpLoad %251 
                                         f32 %256 = OpExtInst %1 32 %255 
                                                      OpStore %251 %256 
                                       f32_3 %257 = OpLoad %237 
                                         f32 %258 = OpLoad %251 
                                       f32_3 %259 = OpCompositeConstruct %258 %258 %258 
                                       f32_3 %260 = OpFMul %257 %259 
                                                      OpStore %237 %260 
                                       f32_3 %261 = OpLoad %77 
                                       f32_3 %262 = OpLoad %237 
                                         f32 %263 = OpDot %261 %262 
                                                      OpStore %251 %263 
                              Uniform f32_4* %264 = OpAccessChain %40 %219 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFNegate %266 
                                       f32_3 %268 = OpLoad %237 
                                         f32 %269 = OpDot %267 %268 
                                Private f32* %270 = OpAccessChain %237 %31 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %237 %31 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 40 %272 %200 
                                Private f32* %274 = OpAccessChain %237 %31 
                                                      OpStore %274 %273 
                                       f32_3 %276 = OpLoad %237 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 0 0 
                              Uniform f32_4* %279 = OpAccessChain %40 %278 
                                       f32_4 %280 = OpLoad %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpFMul %277 %281 
                                       f32_4 %283 = OpLoad %275 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %275 %284 
                                         f32 %285 = OpLoad %251 
                                         f32 %286 = OpExtInst %1 40 %285 %200 
                                Private f32* %287 = OpAccessChain %237 %31 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %237 %31 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 30 %289 
                                Private f32* %291 = OpAccessChain %237 %31 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %237 %31 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpLoad %246 
                                         f32 %295 = OpFMul %293 %294 
                                Private f32* %296 = OpAccessChain %237 %31 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %237 %31 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpExtInst %1 29 %298 
                                Private f32* %300 = OpAccessChain %237 %31 
                                                      OpStore %300 %299 
                              Uniform f32_4* %302 = OpAccessChain %40 %278 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                         f32 %309 = OpDot %304 %308 
                                                      OpStore %301 %309 
                                         f32 %310 = OpLoad %301 
                                Private f32* %311 = OpAccessChain %237 %31 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %310 %312 
                                Private f32* %314 = OpAccessChain %275 %173 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %9 
                                       f32_4 %316 = OpVectorShuffle %315 %315 0 0 0 0 
                                       f32_4 %317 = OpLoad %275 
                                       f32_4 %318 = OpFMul %316 %317 
                                                      OpStore %9 %318 
                                       f32_4 %321 = OpLoad %9 
                                       f32_4 %322 = OpFNegate %321 
                                       f32_4 %323 = OpExtInst %1 29 %322 
                                                      OpStore %320 %323 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat16_7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
float u_xlat16_18;
bool u_xlatb18;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat4.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat10_5 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat7.xxx + u_xlat4.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = u_xlat10_0.w * 128.0;
    u_xlat16_7 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_7);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat6 = max(u_xlat7.x, 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * u_xlat16_18;
    u_xlat6 = exp2(u_xlat6);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat7.z) * u_xlat1.x + u_xlat12;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.z;
    u_xlat12 = u_xlat12 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlatb18 = u_xlat1.z<0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xy, -8.0);
    u_xlat18 = u_xlat18 * u_xlat10_1.w;
    u_xlat18 = u_xlat10_5.w * u_xlat18;
    u_xlat1.x = u_xlat18;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = u_xlat18 * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat6 * u_xlat1.x;
    u_xlat6 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat6 * u_xlat0.x;
    u_xlat0 = vec4(u_xlat12) * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 435
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %84 %430 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpMemberDecorate %39 9 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %368 DescriptorSet 368 
                                                      OpDecorate %368 Binding 368 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %430 Location 430 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeArray %7 %36 
                                              %39 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %38 %7 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 9 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_4* %55 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %56 = OpVariable UniformConstant 
                                          i32 %61 = OpConstant 2 
                                              %62 = OpTypePointer Uniform %6 
                                          u32 %67 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %35 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %79 = OpConstant 1 
                                          u32 %80 = OpConstant 2 
                                              %83 = OpTypePointer Input %35 
                                 Input f32_3* %84 = OpVariable Input 
                                              %85 = OpTypePointer Input %6 
                               Private f32_4* %94 = OpVariable Private 
                              Private f32_3* %101 = OpVariable Private 
                                         i32 %104 = OpConstant 3 
                                         i32 %109 = OpConstant 0 
                                             %141 = OpTypePointer Uniform %35 
                              Private f32_3* %154 = OpVariable Private 
                                         i32 %158 = OpConstant 5 
                                Private f32* %166 = OpVariable Private 
                                         u32 %170 = OpConstant 3 
 UniformConstant read_only Texture2DSampled* %174 = OpVariable UniformConstant 
                              Private f32_3* %203 = OpVariable Private 
                                         f32 %206 = OpConstant 3.674022E-40 
                                       f32_3 %207 = OpConstantComposite %206 %206 %206 
                                         f32 %209 = OpConstant 3.674022E-40 
                                       f32_3 %210 = OpConstantComposite %209 %209 %209 
                                Private f32* %212 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
                                Private f32* %217 = OpVariable Private 
                                         f32 %236 = OpConstant 3.674022E-40 
                                Private f32* %239 = OpVariable Private 
                              Private f32_4* %249 = OpVariable Private 
                                         i32 %252 = OpConstant 8 
                                         i32 %283 = OpConstant 4 
                                         i32 %322 = OpConstant 7 
                                             %354 = OpTypeBool 
                                             %355 = OpTypePointer Private %354 
                               Private bool* %356 = OpVariable Private 
                                             %360 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %368 = OpVariable UniformConstant 
                                         f32 %372 = OpConstant 3.674022E-40 
                                         i32 %399 = OpConstant 6 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         f32 %414 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_3 %416 = OpConstantComposite %413 %414 %415 
                                             %429 = OpTypePointer Output %7 
                               Output f32_4* %430 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %361 = OpVariable Function 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %34 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                        f32_4 %53 = OpLoad %9 
                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 2 3 
                                                      OpStore %9 %54 
                   read_only Texture2DSampled %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %41 %61 %31 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %21 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %41 %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Private f32* %73 = OpAccessChain %9 %31 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFDiv %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                                      OpStore %76 %75 
                                 Uniform f32* %81 = OpAccessChain %41 %79 %80 
                                          f32 %82 = OpLoad %81 
                                   Input f32* %86 = OpAccessChain %84 %80 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFDiv %82 %87 
                                 Private f32* %89 = OpAccessChain %78 %31 
                                                      OpStore %89 %88 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpLoad %84 
                                        f32_3 %93 = OpFMul %91 %92 
                                                      OpStore %78 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpLoad %78 
                                        f32_3 %98 = OpFMul %96 %97 
                                        f32_4 %99 = OpLoad %94 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %94 %100 
                                       f32_4 %102 = OpLoad %94 
                                       f32_3 %103 = OpVectorShuffle %102 %102 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %41 %104 %79 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %103 %107 
                                                      OpStore %101 %108 
                              Uniform f32_4* %110 = OpAccessChain %41 %104 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %94 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %101 
                                       f32_3 %117 = OpFAdd %115 %116 
                                       f32_4 %118 = OpLoad %94 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %41 %104 %61 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_4 %123 = OpLoad %94 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %94 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                                       f32_3 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %94 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 6 
                                                      OpStore %94 %130 
                                       f32_4 %131 = OpLoad %94 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 3 
                              Uniform f32_4* %133 = OpAccessChain %41 %104 %104 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFAdd %132 %135 
                                       f32_4 %137 = OpLoad %94 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %94 %138 
                                       f32_4 %139 = OpLoad %94 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_3* %142 = OpAccessChain %41 %109 
                                       f32_3 %143 = OpLoad %142 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %140 %144 
                                                      OpStore %101 %145 
                                       f32_3 %146 = OpLoad %101 
                                       f32_3 %147 = OpLoad %101 
                                         f32 %148 = OpDot %146 %147 
                                Private f32* %149 = OpAccessChain %78 %31 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %78 %31 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpExtInst %1 32 %151 
                                Private f32* %153 = OpAccessChain %78 %31 
                                                      OpStore %153 %152 
                                       f32_4 %155 = OpLoad %94 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 3 
                                       f32_3 %157 = OpFNegate %156 
                              Uniform f32_4* %159 = OpAccessChain %41 %158 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %157 %161 
                                                      OpStore %154 %162 
                                       f32_3 %163 = OpLoad %154 
                                       f32_3 %164 = OpLoad %154 
                                         f32 %165 = OpDot %163 %164 
                                                      OpStore %21 %165 
                                         f32 %167 = OpLoad %21 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %166 %168 
                                         f32 %169 = OpLoad %21 
                                Uniform f32* %171 = OpAccessChain %41 %158 %170 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %169 %172 
                                                      OpStore %21 %173 
                  read_only Texture2DSampled %175 = OpLoad %174 
                                         f32 %176 = OpLoad %21 
                                       f32_2 %177 = OpCompositeConstruct %176 %176 
                                       f32_4 %178 = OpImageSampleImplicitLod %175 %177 
                                         f32 %179 = OpCompositeExtract %178 3 
                                                      OpStore %21 %179 
                                         f32 %180 = OpLoad %166 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %154 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %154 %183 
                                       f32_3 %184 = OpLoad %101 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpLoad %78 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 0 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                       f32_3 %189 = OpLoad %154 
                                       f32_3 %190 = OpFAdd %188 %189 
                                                      OpStore %101 %190 
                                       f32_3 %191 = OpLoad %101 
                                       f32_3 %192 = OpLoad %101 
                                         f32 %193 = OpDot %191 %192 
                                Private f32* %194 = OpAccessChain %78 %31 
                                                      OpStore %194 %193 
                                Private f32* %195 = OpAccessChain %78 %31 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 32 %196 
                                Private f32* %198 = OpAccessChain %78 %31 
                                                      OpStore %198 %197 
                                       f32_3 %199 = OpLoad %78 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 0 0 
                                       f32_3 %201 = OpLoad %101 
                                       f32_3 %202 = OpFMul %200 %201 
                                                      OpStore %101 %202 
                                       f32_4 %204 = OpLoad %55 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_3 %211 = OpFAdd %208 %210 
                                                      OpStore %203 %211 
                                Private f32* %213 = OpAccessChain %55 %170 
                                         f32 %214 = OpLoad %213 
                                         f32 %216 = OpFMul %214 %215 
                                                      OpStore %212 %216 
                                       f32_3 %218 = OpLoad %203 
                                       f32_3 %219 = OpLoad %203 
                                         f32 %220 = OpDot %218 %219 
                                                      OpStore %217 %220 
                                         f32 %221 = OpLoad %217 
                                         f32 %222 = OpExtInst %1 32 %221 
                                                      OpStore %217 %222 
                                       f32_3 %223 = OpLoad %203 
                                         f32 %224 = OpLoad %217 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_3 %226 = OpFMul %223 %225 
                                                      OpStore %203 %226 
                                       f32_3 %227 = OpLoad %101 
                                       f32_3 %228 = OpLoad %203 
                                         f32 %229 = OpDot %227 %228 
                                                      OpStore %217 %229 
                                       f32_3 %230 = OpLoad %154 
                                       f32_3 %231 = OpLoad %203 
                                         f32 %232 = OpDot %230 %231 
                                Private f32* %233 = OpAccessChain %203 %31 
                                                      OpStore %233 %232 
                                Private f32* %234 = OpAccessChain %203 %31 
                                         f32 %235 = OpLoad %234 
                                         f32 %237 = OpExtInst %1 40 %235 %236 
                                Private f32* %238 = OpAccessChain %203 %31 
                                                      OpStore %238 %237 
                                         f32 %240 = OpLoad %217 
                                         f32 %241 = OpExtInst %1 40 %240 %236 
                                                      OpStore %239 %241 
                                         f32 %242 = OpLoad %239 
                                         f32 %243 = OpExtInst %1 30 %242 
                                                      OpStore %239 %243 
                                         f32 %244 = OpLoad %239 
                                         f32 %245 = OpLoad %212 
                                         f32 %246 = OpFMul %244 %245 
                                                      OpStore %239 %246 
                                         f32 %247 = OpLoad %239 
                                         f32 %248 = OpExtInst %1 29 %247 
                                                      OpStore %239 %248 
                                       f32_4 %250 = OpLoad %94 
                                       f32_3 %251 = OpVectorShuffle %250 %250 1 1 1 
                              Uniform f32_4* %253 = OpAccessChain %41 %252 %79 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 3 
                                       f32_3 %256 = OpFMul %251 %255 
                                       f32_4 %257 = OpLoad %249 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %249 %258 
                              Uniform f32_4* %259 = OpAccessChain %41 %252 %109 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 3 
                                       f32_4 %262 = OpLoad %94 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpFMul %261 %263 
                                       f32_4 %265 = OpLoad %249 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFAdd %264 %266 
                                       f32_4 %268 = OpLoad %249 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %249 %269 
                              Uniform f32_4* %270 = OpAccessChain %41 %252 %61 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 3 
                                       f32_4 %273 = OpLoad %94 
                                       f32_3 %274 = OpVectorShuffle %273 %273 3 3 3 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %249 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %249 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %249 %280 
                                       f32_4 %281 = OpLoad %94 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 3 
                              Uniform f32_4* %284 = OpAccessChain %41 %283 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFNegate %286 
                                       f32_3 %288 = OpFAdd %282 %287 
                                       f32_4 %289 = OpLoad %94 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 6 
                                                      OpStore %94 %290 
                                       f32_4 %291 = OpLoad %94 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 3 
                                       f32_4 %293 = OpLoad %94 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 3 
                                         f32 %295 = OpDot %292 %294 
                                Private f32* %296 = OpAccessChain %78 %31 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %78 %31 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpExtInst %1 31 %298 
                                Private f32* %300 = OpAccessChain %78 %31 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %78 %80 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFNegate %302 
                                Private f32* %304 = OpAccessChain %9 %31 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                Private f32* %307 = OpAccessChain %78 %31 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFAdd %306 %308 
                                Private f32* %310 = OpAccessChain %9 %31 
                                                      OpStore %310 %309 
                                Uniform f32* %311 = OpAccessChain %41 %283 %170 
                                         f32 %312 = OpLoad %311 
                                Private f32* %313 = OpAccessChain %9 %31 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %94 %80 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFAdd %315 %317 
                                Private f32* %319 = OpAccessChain %9 %31 
                                                      OpStore %319 %318 
                                Private f32* %320 = OpAccessChain %9 %31 
                                         f32 %321 = OpLoad %320 
                                Uniform f32* %323 = OpAccessChain %41 %322 %80 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFMul %321 %324 
                                Uniform f32* %326 = OpAccessChain %41 %322 %170 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFAdd %325 %327 
                                Private f32* %329 = OpAccessChain %9 %31 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %9 %31 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFNegate %331 
                                         f32 %333 = OpFAdd %332 %72 
                                Private f32* %334 = OpAccessChain %9 %31 
                                                      OpStore %334 %333 
                                Private f32* %335 = OpAccessChain %9 %31 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 43 %336 %236 %72 
                                Private f32* %338 = OpAccessChain %9 %31 
                                                      OpStore %338 %337 
                                       f32_4 %339 = OpLoad %249 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                              Uniform f32_4* %341 = OpAccessChain %41 %252 %104 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 3 
                                       f32_3 %344 = OpFAdd %340 %343 
                                       f32_4 %345 = OpLoad %249 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %249 %346 
                                       f32_4 %347 = OpLoad %249 
                                       f32_2 %348 = OpVectorShuffle %347 %347 0 1 
                                       f32_4 %349 = OpLoad %249 
                                       f32_2 %350 = OpVectorShuffle %349 %349 2 2 
                                       f32_2 %351 = OpFDiv %348 %350 
                                       f32_3 %352 = OpLoad %78 
                                       f32_3 %353 = OpVectorShuffle %352 %351 3 1 4 
                                                      OpStore %78 %353 
                                Private f32* %357 = OpAccessChain %249 %80 
                                         f32 %358 = OpLoad %357 
                                        bool %359 = OpFOrdLessThan %358 %236 
                                                      OpStore %356 %359 
                                        bool %362 = OpLoad %356 
                                                      OpSelectionMerge %364 None 
                                                      OpBranchConditional %362 %363 %365 
                                             %363 = OpLabel 
                                                      OpStore %361 %72 
                                                      OpBranch %364 
                                             %365 = OpLabel 
                                                      OpStore %361 %236 
                                                      OpBranch %364 
                                             %364 = OpLabel 
                                         f32 %366 = OpLoad %361 
                                Private f32* %367 = OpAccessChain %249 %31 
                                                      OpStore %367 %366 
                  read_only Texture2DSampled %369 = OpLoad %368 
                                       f32_3 %370 = OpLoad %78 
                                       f32_2 %371 = OpVectorShuffle %370 %370 0 2 
                                       f32_4 %373 = OpImageSampleImplicitLod %369 %371 Bias %7 
                                         f32 %374 = OpCompositeExtract %373 3 
                                Private f32* %375 = OpAccessChain %78 %31 
                                                      OpStore %375 %374 
                                Private f32* %376 = OpAccessChain %249 %31 
                                         f32 %377 = OpLoad %376 
                                Private f32* %378 = OpAccessChain %78 %31 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                Private f32* %381 = OpAccessChain %78 %31 
                                                      OpStore %381 %380 
                                         f32 %382 = OpLoad %21 
                                Private f32* %383 = OpAccessChain %78 %31 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFMul %382 %384 
                                Private f32* %386 = OpAccessChain %78 %31 
                                                      OpStore %386 %385 
                                Private f32* %387 = OpAccessChain %78 %31 
                                         f32 %388 = OpLoad %387 
                                                      OpStore %21 %388 
                                         f32 %389 = OpLoad %21 
                                         f32 %390 = OpExtInst %1 43 %389 %236 %72 
                                                      OpStore %21 %390 
                                Private f32* %391 = OpAccessChain %78 %31 
                                         f32 %392 = OpLoad %391 
                                Private f32* %393 = OpAccessChain %203 %31 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFMul %392 %394 
                                Private f32* %396 = OpAccessChain %78 %31 
                                                      OpStore %396 %395 
                                       f32_3 %397 = OpLoad %78 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 0 0 
                              Uniform f32_4* %400 = OpAccessChain %41 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %398 %402 
                                       f32_4 %404 = OpLoad %249 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %249 %405 
                                         f32 %406 = OpLoad %21 
                                         f32 %407 = OpLoad %239 
                                         f32 %408 = OpFMul %406 %407 
                                Private f32* %409 = OpAccessChain %78 %31 
                                                      OpStore %409 %408 
                              Uniform f32_4* %410 = OpAccessChain %41 %399 
                                       f32_4 %411 = OpLoad %410 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                         f32 %417 = OpDot %412 %416 
                                Private f32* %418 = OpAccessChain %203 %31 
                                                      OpStore %418 %417 
                                Private f32* %419 = OpAccessChain %78 %31 
                                         f32 %420 = OpLoad %419 
                                Private f32* %421 = OpAccessChain %203 %31 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFMul %420 %422 
                                Private f32* %424 = OpAccessChain %249 %170 
                                                      OpStore %424 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_4 %426 = OpVectorShuffle %425 %425 0 0 0 0 
                                       f32_4 %427 = OpLoad %249 
                                       f32_4 %428 = OpFMul %426 %427 
                                                      OpStore %9 %428 
                                       f32_4 %431 = OpLoad %9 
                                       f32_4 %432 = OpFNegate %431 
                                       f32_4 %433 = OpExtInst %1 29 %432 
                                                      OpStore %430 %433 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat16_7;
float u_xlat12;
float u_xlat13;
float u_xlat16_18;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat10_5 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat7.xxx + (-u_xlat4.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = u_xlat10_0.w * 128.0;
    u_xlat16_7 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_7);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-u_xlat4.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat6 = max(u_xlat7.x, 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * u_xlat16_18;
    u_xlat6 = exp2(u_xlat6);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat7.z) * u_xlat1.x + u_xlat12;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.z;
    u_xlat12 = u_xlat12 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xyz, -8.0);
    u_xlat16_18 = u_xlat10_1.w * u_xlat10_5.w;
    u_xlat16_1 = u_xlat16_18;
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat6 * u_xlat16_1;
    u_xlat6 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat6 * u_xlat0.x;
    u_xlat0 = vec4(u_xlat12) * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 413
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %84 %408 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpMemberDecorate %39 9 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %352 DescriptorSet 352 
                                                      OpDecorate %352 Binding 352 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %408 Location 408 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeArray %7 %36 
                                              %39 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %38 %7 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 9 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_4* %55 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %56 = OpVariable UniformConstant 
                                          i32 %61 = OpConstant 2 
                                              %62 = OpTypePointer Uniform %6 
                                          u32 %67 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %35 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %79 = OpConstant 1 
                                          u32 %80 = OpConstant 2 
                                              %83 = OpTypePointer Input %35 
                                 Input f32_3* %84 = OpVariable Input 
                                              %85 = OpTypePointer Input %6 
                               Private f32_4* %94 = OpVariable Private 
                              Private f32_3* %101 = OpVariable Private 
                                         i32 %104 = OpConstant 3 
                                         i32 %109 = OpConstant 0 
                                             %141 = OpTypePointer Uniform %35 
                              Private f32_3* %154 = OpVariable Private 
                                         i32 %157 = OpConstant 5 
                                Private f32* %166 = OpVariable Private 
                                         u32 %170 = OpConstant 3 
 UniformConstant read_only Texture2DSampled* %174 = OpVariable UniformConstant 
                              Private f32_3* %204 = OpVariable Private 
                                         f32 %207 = OpConstant 3.674022E-40 
                                       f32_3 %208 = OpConstantComposite %207 %207 %207 
                                         f32 %210 = OpConstant 3.674022E-40 
                                       f32_3 %211 = OpConstantComposite %210 %210 %210 
                                Private f32* %213 = OpVariable Private 
                                         f32 %216 = OpConstant 3.674022E-40 
                                Private f32* %218 = OpVariable Private 
                                         f32 %238 = OpConstant 3.674022E-40 
                                Private f32* %241 = OpVariable Private 
                              Private f32_4* %251 = OpVariable Private 
                                         i32 %254 = OpConstant 8 
                                         i32 %285 = OpConstant 4 
                                         i32 %324 = OpConstant 7 
                                             %349 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %350 = OpTypeSampledImage %349 
                                             %351 = OpTypePointer UniformConstant %350 
UniformConstant read_only TextureCubeSampled* %352 = OpVariable UniformConstant 
                                         f32 %356 = OpConstant 3.674022E-40 
                                         i32 %377 = OpConstant 6 
                                         f32 %391 = OpConstant 3.674022E-40 
                                         f32 %392 = OpConstant 3.674022E-40 
                                         f32 %393 = OpConstant 3.674022E-40 
                                       f32_3 %394 = OpConstantComposite %391 %392 %393 
                                             %407 = OpTypePointer Output %7 
                               Output f32_4* %408 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %34 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                        f32_4 %53 = OpLoad %9 
                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 2 3 
                                                      OpStore %9 %54 
                   read_only Texture2DSampled %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %41 %61 %31 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %21 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %41 %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Private f32* %73 = OpAccessChain %9 %31 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFDiv %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                                      OpStore %76 %75 
                                 Uniform f32* %81 = OpAccessChain %41 %79 %80 
                                          f32 %82 = OpLoad %81 
                                   Input f32* %86 = OpAccessChain %84 %80 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFDiv %82 %87 
                                 Private f32* %89 = OpAccessChain %78 %31 
                                                      OpStore %89 %88 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpLoad %84 
                                        f32_3 %93 = OpFMul %91 %92 
                                                      OpStore %78 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpLoad %78 
                                        f32_3 %98 = OpFMul %96 %97 
                                        f32_4 %99 = OpLoad %94 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %94 %100 
                                       f32_4 %102 = OpLoad %94 
                                       f32_3 %103 = OpVectorShuffle %102 %102 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %41 %104 %79 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %103 %107 
                                                      OpStore %101 %108 
                              Uniform f32_4* %110 = OpAccessChain %41 %104 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %94 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %101 
                                       f32_3 %117 = OpFAdd %115 %116 
                                       f32_4 %118 = OpLoad %94 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %41 %104 %61 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_4 %123 = OpLoad %94 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %94 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                                       f32_3 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %94 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 6 
                                                      OpStore %94 %130 
                                       f32_4 %131 = OpLoad %94 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 3 
                              Uniform f32_4* %133 = OpAccessChain %41 %104 %104 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFAdd %132 %135 
                                       f32_4 %137 = OpLoad %94 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %94 %138 
                                       f32_4 %139 = OpLoad %94 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_3* %142 = OpAccessChain %41 %109 
                                       f32_3 %143 = OpLoad %142 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %140 %144 
                                                      OpStore %101 %145 
                                       f32_3 %146 = OpLoad %101 
                                       f32_3 %147 = OpLoad %101 
                                         f32 %148 = OpDot %146 %147 
                                Private f32* %149 = OpAccessChain %78 %31 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %78 %31 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpExtInst %1 32 %151 
                                Private f32* %153 = OpAccessChain %78 %31 
                                                      OpStore %153 %152 
                                       f32_4 %155 = OpLoad %94 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 3 
                              Uniform f32_4* %158 = OpAccessChain %41 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFNegate %160 
                                       f32_3 %162 = OpFAdd %156 %161 
                                                      OpStore %154 %162 
                                       f32_3 %163 = OpLoad %154 
                                       f32_3 %164 = OpLoad %154 
                                         f32 %165 = OpDot %163 %164 
                                                      OpStore %21 %165 
                                         f32 %167 = OpLoad %21 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %166 %168 
                                         f32 %169 = OpLoad %21 
                                Uniform f32* %171 = OpAccessChain %41 %157 %170 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %169 %172 
                                                      OpStore %21 %173 
                  read_only Texture2DSampled %175 = OpLoad %174 
                                         f32 %176 = OpLoad %21 
                                       f32_2 %177 = OpCompositeConstruct %176 %176 
                                       f32_4 %178 = OpImageSampleImplicitLod %175 %177 
                                         f32 %179 = OpCompositeExtract %178 3 
                                                      OpStore %21 %179 
                                         f32 %180 = OpLoad %166 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %154 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %154 %183 
                                       f32_3 %184 = OpLoad %101 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpLoad %78 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 0 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                       f32_3 %189 = OpLoad %154 
                                       f32_3 %190 = OpFNegate %189 
                                       f32_3 %191 = OpFAdd %188 %190 
                                                      OpStore %101 %191 
                                       f32_3 %192 = OpLoad %101 
                                       f32_3 %193 = OpLoad %101 
                                         f32 %194 = OpDot %192 %193 
                                Private f32* %195 = OpAccessChain %78 %31 
                                                      OpStore %195 %194 
                                Private f32* %196 = OpAccessChain %78 %31 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpExtInst %1 32 %197 
                                Private f32* %199 = OpAccessChain %78 %31 
                                                      OpStore %199 %198 
                                       f32_3 %200 = OpLoad %78 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpLoad %101 
                                       f32_3 %203 = OpFMul %201 %202 
                                                      OpStore %101 %203 
                                       f32_4 %205 = OpLoad %55 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_3 %212 = OpFAdd %209 %211 
                                                      OpStore %204 %212 
                                Private f32* %214 = OpAccessChain %55 %170 
                                         f32 %215 = OpLoad %214 
                                         f32 %217 = OpFMul %215 %216 
                                                      OpStore %213 %217 
                                       f32_3 %219 = OpLoad %204 
                                       f32_3 %220 = OpLoad %204 
                                         f32 %221 = OpDot %219 %220 
                                                      OpStore %218 %221 
                                         f32 %222 = OpLoad %218 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %218 %223 
                                       f32_3 %224 = OpLoad %204 
                                         f32 %225 = OpLoad %218 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_3 %227 = OpFMul %224 %226 
                                                      OpStore %204 %227 
                                       f32_3 %228 = OpLoad %101 
                                       f32_3 %229 = OpLoad %204 
                                         f32 %230 = OpDot %228 %229 
                                                      OpStore %218 %230 
                                       f32_3 %231 = OpLoad %154 
                                       f32_3 %232 = OpFNegate %231 
                                       f32_3 %233 = OpLoad %204 
                                         f32 %234 = OpDot %232 %233 
                                Private f32* %235 = OpAccessChain %204 %31 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %204 %31 
                                         f32 %237 = OpLoad %236 
                                         f32 %239 = OpExtInst %1 40 %237 %238 
                                Private f32* %240 = OpAccessChain %204 %31 
                                                      OpStore %240 %239 
                                         f32 %242 = OpLoad %218 
                                         f32 %243 = OpExtInst %1 40 %242 %238 
                                                      OpStore %241 %243 
                                         f32 %244 = OpLoad %241 
                                         f32 %245 = OpExtInst %1 30 %244 
                                                      OpStore %241 %245 
                                         f32 %246 = OpLoad %241 
                                         f32 %247 = OpLoad %213 
                                         f32 %248 = OpFMul %246 %247 
                                                      OpStore %241 %248 
                                         f32 %249 = OpLoad %241 
                                         f32 %250 = OpExtInst %1 29 %249 
                                                      OpStore %241 %250 
                                       f32_4 %252 = OpLoad %94 
                                       f32_3 %253 = OpVectorShuffle %252 %252 1 1 1 
                              Uniform f32_4* %255 = OpAccessChain %41 %254 %79 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpFMul %253 %257 
                                       f32_4 %259 = OpLoad %251 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %251 %260 
                              Uniform f32_4* %261 = OpAccessChain %41 %254 %109 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %94 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %251 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %266 %268 
                                       f32_4 %270 = OpLoad %251 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %251 %271 
                              Uniform f32_4* %272 = OpAccessChain %41 %254 %61 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_4 %275 = OpLoad %94 
                                       f32_3 %276 = OpVectorShuffle %275 %275 3 3 3 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_4 %278 = OpLoad %251 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %251 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %251 %282 
                                       f32_4 %283 = OpLoad %94 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 3 
                              Uniform f32_4* %286 = OpAccessChain %41 %285 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFNegate %288 
                                       f32_3 %290 = OpFAdd %284 %289 
                                       f32_4 %291 = OpLoad %94 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 2 6 
                                                      OpStore %94 %292 
                                       f32_4 %293 = OpLoad %94 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 3 
                                       f32_4 %295 = OpLoad %94 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 3 
                                         f32 %297 = OpDot %294 %296 
                                Private f32* %298 = OpAccessChain %78 %31 
                                                      OpStore %298 %297 
                                Private f32* %299 = OpAccessChain %78 %31 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpExtInst %1 31 %300 
                                Private f32* %302 = OpAccessChain %78 %31 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %78 %80 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpFNegate %304 
                                Private f32* %306 = OpAccessChain %9 %31 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                Private f32* %309 = OpAccessChain %78 %31 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFAdd %308 %310 
                                Private f32* %312 = OpAccessChain %9 %31 
                                                      OpStore %312 %311 
                                Uniform f32* %313 = OpAccessChain %41 %285 %170 
                                         f32 %314 = OpLoad %313 
                                Private f32* %315 = OpAccessChain %9 %31 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFMul %314 %316 
                                Private f32* %318 = OpAccessChain %94 %80 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFAdd %317 %319 
                                Private f32* %321 = OpAccessChain %9 %31 
                                                      OpStore %321 %320 
                                Private f32* %322 = OpAccessChain %9 %31 
                                         f32 %323 = OpLoad %322 
                                Uniform f32* %325 = OpAccessChain %41 %324 %80 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFMul %323 %326 
                                Uniform f32* %328 = OpAccessChain %41 %324 %170 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFAdd %327 %329 
                                Private f32* %331 = OpAccessChain %9 %31 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %9 %31 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpFNegate %333 
                                         f32 %335 = OpFAdd %334 %72 
                                Private f32* %336 = OpAccessChain %9 %31 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %9 %31 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpExtInst %1 43 %338 %238 %72 
                                Private f32* %340 = OpAccessChain %9 %31 
                                                      OpStore %340 %339 
                                       f32_4 %341 = OpLoad %251 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                              Uniform f32_4* %343 = OpAccessChain %41 %254 %104 
                                       f32_4 %344 = OpLoad %343 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_3 %346 = OpFAdd %342 %345 
                                       f32_4 %347 = OpLoad %251 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 6 3 
                                                      OpStore %251 %348 
                read_only TextureCubeSampled %353 = OpLoad %352 
                                       f32_4 %354 = OpLoad %251 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %357 = OpImageSampleImplicitLod %353 %355 Bias %7 
                                         f32 %358 = OpCompositeExtract %357 3 
                                Private f32* %359 = OpAccessChain %78 %31 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %78 %31 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpLoad %21 
                                         f32 %363 = OpFMul %361 %362 
                                Private f32* %364 = OpAccessChain %78 %31 
                                                      OpStore %364 %363 
                                Private f32* %365 = OpAccessChain %78 %31 
                                         f32 %366 = OpLoad %365 
                                                      OpStore %21 %366 
                                         f32 %367 = OpLoad %21 
                                         f32 %368 = OpExtInst %1 43 %367 %238 %72 
                                                      OpStore %21 %368 
                                Private f32* %369 = OpAccessChain %78 %31 
                                         f32 %370 = OpLoad %369 
                                Private f32* %371 = OpAccessChain %204 %31 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpFMul %370 %372 
                                Private f32* %374 = OpAccessChain %78 %31 
                                                      OpStore %374 %373 
                                       f32_3 %375 = OpLoad %78 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 0 0 
                              Uniform f32_4* %378 = OpAccessChain %41 %377 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFMul %376 %380 
                                       f32_4 %382 = OpLoad %251 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %251 %383 
                                         f32 %384 = OpLoad %21 
                                         f32 %385 = OpLoad %241 
                                         f32 %386 = OpFMul %384 %385 
                                Private f32* %387 = OpAccessChain %78 %31 
                                                      OpStore %387 %386 
                              Uniform f32_4* %388 = OpAccessChain %41 %377 
                                       f32_4 %389 = OpLoad %388 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                         f32 %395 = OpDot %390 %394 
                                Private f32* %396 = OpAccessChain %204 %31 
                                                      OpStore %396 %395 
                                Private f32* %397 = OpAccessChain %78 %31 
                                         f32 %398 = OpLoad %397 
                                Private f32* %399 = OpAccessChain %204 %31 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFMul %398 %400 
                                Private f32* %402 = OpAccessChain %251 %170 
                                                      OpStore %402 %401 
                                       f32_4 %403 = OpLoad %9 
                                       f32_4 %404 = OpVectorShuffle %403 %403 0 0 0 0 
                                       f32_4 %405 = OpLoad %251 
                                       f32_4 %406 = OpFMul %404 %405 
                                                      OpStore %9 %406 
                                       f32_4 %409 = OpLoad %9 
                                       f32_4 %410 = OpFNegate %409 
                                       f32_4 %411 = OpExtInst %1 29 %410 
                                                      OpStore %408 %411 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat16_5;
vec2 u_xlat8;
float u_xlat16_8;
float u_xlat16_12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat5.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat5.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat5.xxx + (-_LightDir.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat3.xyz = u_xlat5.xxx * u_xlat3.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_12 = u_xlat10_0.w * 128.0;
    u_xlat16_5 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_5 = inversesqrt(u_xlat16_5);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_5);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-_LightDir.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4 = max(u_xlat5.x, 0.0);
    u_xlat4 = log2(u_xlat4);
    u_xlat4 = u_xlat4 * u_xlat16_12;
    u_xlat4 = exp2(u_xlat4);
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat1 = (-u_xlat5.z) * u_xlat1 + u_xlat5.x;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat10_2 = texture(_LightTexture0, u_xlat8.xy, -8.0);
    u_xlat16_8 = u_xlat10_2.w;
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_2.w;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat16_8 * u_xlat4;
    u_xlat4 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat4 * u_xlat0.x;
    u_xlat0 = vec4(u_xlat1) * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 381
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %84 %376 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpMemberDecorate %39 9 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %325 DescriptorSet 325 
                                                      OpDecorate %325 Binding 325 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %376 Location 376 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeArray %7 %36 
                                              %39 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %38 %7 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 9 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_4* %55 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %56 = OpVariable UniformConstant 
                                          i32 %61 = OpConstant 2 
                                              %62 = OpTypePointer Uniform %6 
                                          u32 %67 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %35 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %79 = OpConstant 1 
                                          u32 %80 = OpConstant 2 
                                              %83 = OpTypePointer Input %35 
                                 Input f32_3* %84 = OpVariable Input 
                                              %85 = OpTypePointer Input %6 
                               Private f32_4* %94 = OpVariable Private 
                              Private f32_3* %101 = OpVariable Private 
                                         i32 %104 = OpConstant 3 
                                         i32 %109 = OpConstant 0 
                                             %141 = OpTypePointer Uniform %35 
                                         i32 %159 = OpConstant 5 
                              Private f32_3* %177 = OpVariable Private 
                                         f32 %180 = OpConstant 3.674022E-40 
                                       f32_3 %181 = OpConstantComposite %180 %180 %180 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_3 %184 = OpConstantComposite %183 %183 %183 
                                Private f32* %186 = OpVariable Private 
                                         u32 %187 = OpConstant 3 
                                         f32 %190 = OpConstant 3.674022E-40 
                                Private f32* %192 = OpVariable Private 
                                         f32 %214 = OpConstant 3.674022E-40 
                                Private f32* %217 = OpVariable Private 
                                         i32 %229 = OpConstant 8 
                              Private f32_4* %258 = OpVariable Private 
                                         i32 %261 = OpConstant 4 
                                         i32 %300 = OpConstant 7 
 UniformConstant read_only Texture2DSampled* %325 = OpVariable UniformConstant 
                                         f32 %329 = OpConstant 3.674022E-40 
                                         i32 %345 = OpConstant 6 
                                         f32 %359 = OpConstant 3.674022E-40 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         f32 %361 = OpConstant 3.674022E-40 
                                       f32_3 %362 = OpConstantComposite %359 %360 %361 
                                             %375 = OpTypePointer Output %7 
                               Output f32_4* %376 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %34 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                        f32_4 %53 = OpLoad %9 
                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 2 3 
                                                      OpStore %9 %54 
                   read_only Texture2DSampled %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %41 %61 %31 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %21 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %41 %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Private f32* %73 = OpAccessChain %9 %31 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFDiv %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                                      OpStore %76 %75 
                                 Uniform f32* %81 = OpAccessChain %41 %79 %80 
                                          f32 %82 = OpLoad %81 
                                   Input f32* %86 = OpAccessChain %84 %80 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFDiv %82 %87 
                                 Private f32* %89 = OpAccessChain %78 %31 
                                                      OpStore %89 %88 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpLoad %84 
                                        f32_3 %93 = OpFMul %91 %92 
                                                      OpStore %78 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpLoad %78 
                                        f32_3 %98 = OpFMul %96 %97 
                                        f32_4 %99 = OpLoad %94 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %94 %100 
                                       f32_4 %102 = OpLoad %94 
                                       f32_3 %103 = OpVectorShuffle %102 %102 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %41 %104 %79 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %103 %107 
                                                      OpStore %101 %108 
                              Uniform f32_4* %110 = OpAccessChain %41 %104 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %94 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %101 
                                       f32_3 %117 = OpFAdd %115 %116 
                                       f32_4 %118 = OpLoad %94 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %41 %104 %61 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_4 %123 = OpLoad %94 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %94 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                                       f32_3 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %94 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 6 
                                                      OpStore %94 %130 
                                       f32_4 %131 = OpLoad %94 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 3 
                              Uniform f32_4* %133 = OpAccessChain %41 %104 %104 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFAdd %132 %135 
                                       f32_4 %137 = OpLoad %94 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %94 %138 
                                       f32_4 %139 = OpLoad %94 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_3* %142 = OpAccessChain %41 %109 
                                       f32_3 %143 = OpLoad %142 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %140 %144 
                                                      OpStore %101 %145 
                                       f32_3 %146 = OpLoad %101 
                                       f32_3 %147 = OpLoad %101 
                                         f32 %148 = OpDot %146 %147 
                                Private f32* %149 = OpAccessChain %78 %31 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %78 %31 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpExtInst %1 32 %151 
                                Private f32* %153 = OpAccessChain %78 %31 
                                                      OpStore %153 %152 
                                       f32_3 %154 = OpLoad %101 
                                       f32_3 %155 = OpFNegate %154 
                                       f32_3 %156 = OpLoad %78 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 0 0 
                                       f32_3 %158 = OpFMul %155 %157 
                              Uniform f32_4* %160 = OpAccessChain %41 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %101 %164 
                                       f32_3 %165 = OpLoad %101 
                                       f32_3 %166 = OpLoad %101 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %168 = OpAccessChain %78 %31 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %78 %31 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 32 %170 
                                Private f32* %172 = OpAccessChain %78 %31 
                                                      OpStore %172 %171 
                                       f32_3 %173 = OpLoad %78 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 0 0 
                                       f32_3 %175 = OpLoad %101 
                                       f32_3 %176 = OpFMul %174 %175 
                                                      OpStore %101 %176 
                                       f32_4 %178 = OpLoad %55 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %177 %185 
                                Private f32* %188 = OpAccessChain %55 %187 
                                         f32 %189 = OpLoad %188 
                                         f32 %191 = OpFMul %189 %190 
                                                      OpStore %186 %191 
                                       f32_3 %193 = OpLoad %177 
                                       f32_3 %194 = OpLoad %177 
                                         f32 %195 = OpDot %193 %194 
                                                      OpStore %192 %195 
                                         f32 %196 = OpLoad %192 
                                         f32 %197 = OpExtInst %1 32 %196 
                                                      OpStore %192 %197 
                                       f32_3 %198 = OpLoad %177 
                                         f32 %199 = OpLoad %192 
                                       f32_3 %200 = OpCompositeConstruct %199 %199 %199 
                                       f32_3 %201 = OpFMul %198 %200 
                                                      OpStore %177 %201 
                                       f32_3 %202 = OpLoad %101 
                                       f32_3 %203 = OpLoad %177 
                                         f32 %204 = OpDot %202 %203 
                                                      OpStore %192 %204 
                              Uniform f32_4* %205 = OpAccessChain %41 %159 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFNegate %207 
                                       f32_3 %209 = OpLoad %177 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %177 %31 
                                                      OpStore %211 %210 
                                Private f32* %212 = OpAccessChain %177 %31 
                                         f32 %213 = OpLoad %212 
                                         f32 %215 = OpExtInst %1 40 %213 %214 
                                Private f32* %216 = OpAccessChain %177 %31 
                                                      OpStore %216 %215 
                                         f32 %218 = OpLoad %192 
                                         f32 %219 = OpExtInst %1 40 %218 %214 
                                                      OpStore %217 %219 
                                         f32 %220 = OpLoad %217 
                                         f32 %221 = OpExtInst %1 30 %220 
                                                      OpStore %217 %221 
                                         f32 %222 = OpLoad %217 
                                         f32 %223 = OpLoad %186 
                                         f32 %224 = OpFMul %222 %223 
                                                      OpStore %217 %224 
                                         f32 %225 = OpLoad %217 
                                         f32 %226 = OpExtInst %1 29 %225 
                                                      OpStore %217 %226 
                                       f32_4 %227 = OpLoad %94 
                                       f32_2 %228 = OpVectorShuffle %227 %227 1 1 
                              Uniform f32_4* %230 = OpAccessChain %41 %229 %79 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFMul %228 %232 
                                       f32_3 %234 = OpLoad %78 
                                       f32_3 %235 = OpVectorShuffle %234 %233 3 4 2 
                                                      OpStore %78 %235 
                              Uniform f32_4* %236 = OpAccessChain %41 %229 %109 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpLoad %94 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 0 
                                       f32_2 %241 = OpFMul %238 %240 
                                       f32_3 %242 = OpLoad %78 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFAdd %241 %243 
                                       f32_3 %245 = OpLoad %78 
                                       f32_3 %246 = OpVectorShuffle %245 %244 3 4 2 
                                                      OpStore %78 %246 
                              Uniform f32_4* %247 = OpAccessChain %41 %229 %61 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                                       f32_4 %250 = OpLoad %94 
                                       f32_2 %251 = OpVectorShuffle %250 %250 3 3 
                                       f32_2 %252 = OpFMul %249 %251 
                                       f32_3 %253 = OpLoad %78 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_3 %256 = OpLoad %78 
                                       f32_3 %257 = OpVectorShuffle %256 %255 3 4 2 
                                                      OpStore %78 %257 
                                       f32_4 %259 = OpLoad %94 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 3 
                              Uniform f32_4* %262 = OpAccessChain %41 %261 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %260 %265 
                                       f32_4 %267 = OpLoad %258 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %258 %268 
                                       f32_4 %269 = OpLoad %258 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %258 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                Private f32* %274 = OpAccessChain %258 %31 
                                                      OpStore %274 %273 
                                Private f32* %275 = OpAccessChain %258 %31 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpExtInst %1 31 %276 
                                Private f32* %278 = OpAccessChain %258 %31 
                                                      OpStore %278 %277 
                                Private f32* %279 = OpAccessChain %78 %80 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFNegate %280 
                                Private f32* %282 = OpAccessChain %9 %31 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFMul %281 %283 
                                Private f32* %285 = OpAccessChain %258 %31 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFAdd %284 %286 
                                Private f32* %288 = OpAccessChain %9 %31 
                                                      OpStore %288 %287 
                                Uniform f32* %289 = OpAccessChain %41 %261 %187 
                                         f32 %290 = OpLoad %289 
                                Private f32* %291 = OpAccessChain %9 %31 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFMul %290 %292 
                                Private f32* %294 = OpAccessChain %94 %80 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFAdd %293 %295 
                                Private f32* %297 = OpAccessChain %9 %31 
                                                      OpStore %297 %296 
                                Private f32* %298 = OpAccessChain %9 %31 
                                         f32 %299 = OpLoad %298 
                                Uniform f32* %301 = OpAccessChain %41 %300 %80 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFMul %299 %302 
                                Uniform f32* %304 = OpAccessChain %41 %300 %187 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFAdd %303 %305 
                                Private f32* %307 = OpAccessChain %9 %31 
                                                      OpStore %307 %306 
                                Private f32* %308 = OpAccessChain %9 %31 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %310 %72 
                                Private f32* %312 = OpAccessChain %9 %31 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %9 %31 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpExtInst %1 43 %314 %214 %72 
                                Private f32* %316 = OpAccessChain %9 %31 
                                                      OpStore %316 %315 
                                       f32_3 %317 = OpLoad %78 
                                       f32_2 %318 = OpVectorShuffle %317 %317 0 1 
                              Uniform f32_4* %319 = OpAccessChain %41 %229 %104 
                                       f32_4 %320 = OpLoad %319 
                                       f32_2 %321 = OpVectorShuffle %320 %320 0 1 
                                       f32_2 %322 = OpFAdd %318 %321 
                                       f32_3 %323 = OpLoad %78 
                                       f32_3 %324 = OpVectorShuffle %323 %322 3 4 2 
                                                      OpStore %78 %324 
                  read_only Texture2DSampled %326 = OpLoad %325 
                                       f32_3 %327 = OpLoad %78 
                                       f32_2 %328 = OpVectorShuffle %327 %327 0 1 
                                       f32_4 %330 = OpImageSampleImplicitLod %326 %328 Bias %7 
                                         f32 %331 = OpCompositeExtract %330 3 
                                Private f32* %332 = OpAccessChain %78 %31 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %78 %31 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %21 %334 
                                         f32 %335 = OpLoad %21 
                                         f32 %336 = OpExtInst %1 43 %335 %214 %72 
                                                      OpStore %21 %336 
                                Private f32* %337 = OpAccessChain %78 %31 
                                         f32 %338 = OpLoad %337 
                                Private f32* %339 = OpAccessChain %177 %31 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %338 %340 
                                Private f32* %342 = OpAccessChain %78 %31 
                                                      OpStore %342 %341 
                                       f32_3 %343 = OpLoad %78 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 0 0 
                              Uniform f32_4* %346 = OpAccessChain %41 %345 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFMul %344 %348 
                                       f32_4 %350 = OpLoad %258 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %258 %351 
                                         f32 %352 = OpLoad %21 
                                         f32 %353 = OpLoad %217 
                                         f32 %354 = OpFMul %352 %353 
                                Private f32* %355 = OpAccessChain %78 %31 
                                                      OpStore %355 %354 
                              Uniform f32_4* %356 = OpAccessChain %41 %345 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                         f32 %363 = OpDot %358 %362 
                                Private f32* %364 = OpAccessChain %177 %31 
                                                      OpStore %364 %363 
                                Private f32* %365 = OpAccessChain %78 %31 
                                         f32 %366 = OpLoad %365 
                                Private f32* %367 = OpAccessChain %177 %31 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFMul %366 %368 
                                Private f32* %370 = OpAccessChain %258 %187 
                                                      OpStore %370 %369 
                                       f32_4 %371 = OpLoad %9 
                                       f32_4 %372 = OpVectorShuffle %371 %371 0 0 0 0 
                                       f32_4 %373 = OpLoad %258 
                                       f32_4 %374 = OpFMul %372 %373 
                                                      OpStore %9 %374 
                                       f32_4 %377 = OpLoad %9 
                                       f32_4 %378 = OpFNegate %377 
                                       f32_4 %379 = OpExtInst %1 29 %378 
                                                      OpStore %376 %379 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec2 u_xlat5;
vec2 u_xlat10;
float u_xlat10_10;
float u_xlat15;
float u_xlat16_15;
float u_xlat16;
float u_xlat16_16;
void main()
{
    u_xlat0.x = (-_LightShadowData.x) + 1.0;
    u_xlat5.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_2 = texture(_CameraNormalsTexture, u_xlat5.xy);
    u_xlat5.x = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat1.xyz = u_xlat10.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xyw = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat0.x = u_xlat10_10 * u_xlat0.x + _LightShadowData.x;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10.x = sqrt(u_xlat10.x);
    u_xlat5.x = (-u_xlat1.z) * u_xlat5.x + u_xlat10.x;
    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat1.w;
    u_xlat10.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat5.x = u_xlat5.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat0.x = u_xlat10.x + u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat10.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlatb1 = u_xlat1.z<0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat10_4 = texture(_LightTexture0, u_xlat10.xy, -8.0);
    u_xlat10.x = u_xlat1.x * u_xlat10_4.w;
    u_xlat1.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat10.x = u_xlat10.x * u_xlat10_4.w;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlat10.x = u_xlat0.x;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_15 = u_xlat10_2.w * 128.0;
    u_xlat16_16 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
    u_xlat16 = dot(u_xlat3.xyz, u_xlat16_2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat16, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat10.x * u_xlat0.x;
    u_xlat0 = u_xlat5.xxxx * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 512
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %33 %85 %506 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %8 RelaxedPrecision 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %43 DescriptorSet 43 
                                                      OpDecorate %43 Binding 43 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %85 Location 85 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %180 DescriptorSet 180 
                                                      OpDecorate %180 Binding 180 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %325 DescriptorSet 325 
                                                      OpDecorate %325 Binding 325 
                                                      OpDecorate %371 DescriptorSet 371 
                                                      OpDecorate %371 Binding 371 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %506 Location 506 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %511 DescriptorSet 511 
                                                      OpDecorate %511 Binding 511 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 3 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %10 %14 
                                              %16 = OpTypeArray %10 %12 
                                              %17 = OpTypeStruct %9 %10 %10 %13 %15 %10 %10 %10 %10 %10 %16 %10 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 5 
                                          u32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %6 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %29 = OpTypeVector %6 2 
                                              %30 = OpTypePointer Private %29 
                               Private f32_2* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %10 
                                 Input f32_4* %33 = OpVariable Input 
                                 Private f32* %39 = OpVariable Private 
                                              %40 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %41 = OpTypeSampledImage %40 
                                              %42 = OpTypePointer UniformConstant %41 
  UniformConstant read_only Texture2DSampled* %43 = OpVariable UniformConstant 
                                          i32 %49 = OpConstant 11 
                                              %50 = OpTypePointer Uniform %10 
                                              %59 = OpTypePointer Private %10 
                               Private f32_4* %60 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %61 = OpVariable UniformConstant 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                 Private f32* %79 = OpVariable Private 
                                          i32 %80 = OpConstant 1 
                                          u32 %81 = OpConstant 2 
                                              %84 = OpTypePointer Input %9 
                                 Input f32_3* %85 = OpVariable Input 
                                              %86 = OpTypePointer Input %6 
                               Private f32_4* %90 = OpVariable Private 
                                             %104 = OpTypePointer Private %9 
                              Private f32_3* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 3 
                                         i32 %113 = OpConstant 0 
                              Private f32_4* %135 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                             %167 = OpTypePointer Function %9 
                                Private f32* %176 = OpVariable Private 
                                             %177 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %178 = OpTypeSampledImage %177 
                                             %179 = OpTypePointer UniformConstant %178 
 UniformConstant read_only Texture2DSampled* %180 = OpVariable UniformConstant 
                                         f32 %183 = OpConstant 3.674022E-40 
                                         i32 %193 = OpConstant 6 
                                         u32 %217 = OpConstant 3 
                                         i32 %239 = OpConstant 9 
                              Private f32_3* %256 = OpVariable Private 
                              Private f32_4* %265 = OpVariable Private 
                                         i32 %268 = OpConstant 10 
                                             %312 = OpTypeBool 
                                             %313 = OpTypePointer Private %312 
                               Private bool* %314 = OpVariable Private 
                                             %318 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %325 = OpVariable UniformConstant 
                                         f32 %329 = OpConstant 3.674022E-40 
                                         i32 %340 = OpConstant 7 
                                             %348 = OpTypePointer Uniform %9 
 UniformConstant read_only Texture2DSampled* %371 = OpVariable UniformConstant 
                                         f32 %416 = OpConstant 3.674022E-40 
                                       f32_3 %417 = OpConstantComposite %416 %416 %416 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_3 %420 = OpConstantComposite %419 %419 %419 
                                Private f32* %422 = OpVariable Private 
                                         f32 %425 = OpConstant 3.674022E-40 
                                Private f32* %427 = OpVariable Private 
                              Private f32_4* %455 = OpVariable Private 
                                         i32 %458 = OpConstant 8 
                                         f32 %489 = OpConstant 3.674022E-40 
                                         f32 %490 = OpConstant 3.674022E-40 
                                         f32 %491 = OpConstant 3.674022E-40 
                                       f32_3 %492 = OpConstantComposite %489 %490 %491 
                                             %505 = OpTypePointer Output %10 
                               Output f32_4* %506 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %511 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %168 = OpVariable Function 
                               Function f32* %319 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                          f32 %28 = OpFAdd %26 %27 
                                                      OpStore %8 %28 
                                        f32_4 %34 = OpLoad %33 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                                        f32_4 %36 = OpLoad %33 
                                        f32_2 %37 = OpVectorShuffle %36 %36 3 3 
                                        f32_2 %38 = OpFDiv %35 %37 
                                                      OpStore %31 %38 
                   read_only Texture2DSampled %44 = OpLoad %43 
                                        f32_2 %45 = OpLoad %31 
                                        f32_4 %46 = OpImageSampleImplicitLod %44 %45 
                                          f32 %47 = OpCompositeExtract %46 0 
                                                      OpStore %39 %47 
                                        f32_2 %48 = OpLoad %31 
                               Uniform f32_4* %51 = OpAccessChain %19 %49 
                                        f32_4 %52 = OpLoad %51 
                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                        f32_2 %54 = OpFMul %48 %53 
                               Uniform f32_4* %55 = OpAccessChain %19 %49 
                                        f32_4 %56 = OpLoad %55 
                                        f32_2 %57 = OpVectorShuffle %56 %56 2 3 
                                        f32_2 %58 = OpFAdd %54 %57 
                                                      OpStore %31 %58 
                   read_only Texture2DSampled %62 = OpLoad %61 
                                        f32_2 %63 = OpLoad %31 
                                        f32_4 %64 = OpImageSampleImplicitLod %62 %63 
                                                      OpStore %60 %64 
                                 Uniform f32* %66 = OpAccessChain %19 %65 %22 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %39 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %19 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                 Private f32* %74 = OpAccessChain %31 %22 
                                                      OpStore %74 %73 
                                 Private f32* %75 = OpAccessChain %31 %22 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFDiv %27 %76 
                                 Private f32* %78 = OpAccessChain %31 %22 
                                                      OpStore %78 %77 
                                 Uniform f32* %82 = OpAccessChain %19 %80 %81 
                                          f32 %83 = OpLoad %82 
                                   Input f32* %87 = OpAccessChain %85 %81 
                                          f32 %88 = OpLoad %87 
                                          f32 %89 = OpFDiv %83 %88 
                                                      OpStore %79 %89 
                                          f32 %91 = OpLoad %79 
                                        f32_3 %92 = OpCompositeConstruct %91 %91 %91 
                                        f32_3 %93 = OpLoad %85 
                                        f32_3 %94 = OpFMul %92 %93 
                                        f32_4 %95 = OpLoad %90 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 6 3 
                                                      OpStore %90 %96 
                                        f32_2 %97 = OpLoad %31 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_4 %99 = OpLoad %90 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %90 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 6 
                                                      OpStore %90 %103 
                                       f32_4 %106 = OpLoad %90 
                                       f32_3 %107 = OpVectorShuffle %106 %106 1 1 1 
                              Uniform f32_4* %109 = OpAccessChain %19 %108 %80 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_3 %112 = OpFMul %107 %111 
                                                      OpStore %105 %112 
                              Uniform f32_4* %114 = OpAccessChain %19 %108 %113 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_4 %117 = OpLoad %90 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 0 0 
                                       f32_3 %119 = OpFMul %116 %118 
                                       f32_3 %120 = OpLoad %105 
                                       f32_3 %121 = OpFAdd %119 %120 
                                                      OpStore %105 %121 
                              Uniform f32_4* %122 = OpAccessChain %19 %108 %65 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_4 %125 = OpLoad %90 
                                       f32_3 %126 = OpVectorShuffle %125 %125 3 3 3 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_3 %128 = OpLoad %105 
                                       f32_3 %129 = OpFAdd %127 %128 
                                                      OpStore %105 %129 
                                       f32_3 %130 = OpLoad %105 
                              Uniform f32_4* %131 = OpAccessChain %19 %108 %108 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFAdd %130 %133 
                                                      OpStore %105 %134 
                                       f32_3 %136 = OpLoad %105 
                                       f32_4 %137 = OpVectorShuffle %136 %136 1 1 1 1 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 %80 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %137 %140 
                                                      OpStore %135 %141 
                              Uniform f32_4* %142 = OpAccessChain %19 %138 %113 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpLoad %105 
                                       f32_4 %145 = OpVectorShuffle %144 %144 0 0 0 0 
                                       f32_4 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %135 
                                       f32_4 %148 = OpFAdd %146 %147 
                                                      OpStore %135 %148 
                              Uniform f32_4* %149 = OpAccessChain %19 %138 %65 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpLoad %105 
                                       f32_4 %152 = OpVectorShuffle %151 %151 2 2 2 2 
                                       f32_4 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %135 
                                       f32_4 %155 = OpFAdd %153 %154 
                                                      OpStore %135 %155 
                                       f32_4 %156 = OpLoad %135 
                              Uniform f32_4* %157 = OpAccessChain %19 %138 %108 
                                       f32_4 %158 = OpLoad %157 
                                       f32_4 %159 = OpFAdd %156 %158 
                                                      OpStore %135 %159 
                                       f32_4 %160 = OpLoad %135 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_4 %162 = OpLoad %135 
                                       f32_3 %163 = OpVectorShuffle %162 %162 3 3 3 
                                       f32_3 %164 = OpFDiv %161 %163 
                                       f32_4 %165 = OpLoad %135 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 5 6 3 
                                                      OpStore %135 %166 
                                       f32_4 %169 = OpLoad %135 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                Private f32* %171 = OpAccessChain %135 %81 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpCompositeExtract %170 0 
                                         f32 %174 = OpCompositeExtract %170 1 
                                       f32_3 %175 = OpCompositeConstruct %173 %174 %172 
                                                      OpStore %168 %175 
                  read_only Texture2DSampled %181 = OpLoad %180 
                                       f32_3 %182 = OpLoad %168 
                                         f32 %184 = OpCompositeExtract %182 2 
                                         f32 %185 = OpImageSampleDrefExplicitLod %181 %182 %184 Lod %6 
                                                      OpStore %176 %185 
                                         f32 %186 = OpLoad %176 
                                         f32 %187 = OpLoad %8 
                                         f32 %188 = OpFMul %186 %187 
                                Uniform f32* %189 = OpAccessChain %19 %21 %22 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFAdd %188 %190 
                                                      OpStore %8 %191 
                                       f32_3 %192 = OpLoad %105 
                              Uniform f32_4* %194 = OpAccessChain %19 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFNegate %196 
                                       f32_3 %198 = OpFAdd %192 %197 
                                       f32_4 %199 = OpLoad %135 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %135 %200 
                                       f32_4 %201 = OpLoad %135 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %135 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpDot %202 %204 
                                                      OpStore %79 %205 
                                         f32 %206 = OpLoad %79 
                                         f32 %207 = OpExtInst %1 31 %206 
                                                      OpStore %79 %207 
                                Private f32* %208 = OpAccessChain %90 %81 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                Private f32* %211 = OpAccessChain %31 %22 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                         f32 %214 = OpLoad %79 
                                         f32 %215 = OpFAdd %213 %214 
                                Private f32* %216 = OpAccessChain %31 %22 
                                                      OpStore %216 %215 
                                Uniform f32* %218 = OpAccessChain %19 %193 %217 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %31 %22 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFMul %219 %221 
                                Private f32* %223 = OpAccessChain %90 %217 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFAdd %222 %224 
                                Private f32* %226 = OpAccessChain %31 %22 
                                                      OpStore %226 %225 
                                Private f32* %227 = OpAccessChain %31 %22 
                                         f32 %228 = OpLoad %227 
                                Uniform f32* %229 = OpAccessChain %19 %21 %81 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Uniform f32* %232 = OpAccessChain %19 %21 %217 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                                      OpStore %79 %234 
                                         f32 %235 = OpLoad %79 
                                         f32 %236 = OpExtInst %1 43 %235 %183 %27 
                                                      OpStore %79 %236 
                                Private f32* %237 = OpAccessChain %31 %22 
                                         f32 %238 = OpLoad %237 
                                Uniform f32* %240 = OpAccessChain %19 %239 %81 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %238 %241 
                                Uniform f32* %243 = OpAccessChain %19 %239 %217 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFAdd %242 %244 
                                Private f32* %246 = OpAccessChain %31 %22 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %31 %22 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFNegate %248 
                                         f32 %250 = OpFAdd %249 %27 
                                Private f32* %251 = OpAccessChain %31 %22 
                                                      OpStore %251 %250 
                                Private f32* %252 = OpAccessChain %31 %22 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpExtInst %1 43 %253 %183 %27 
                                Private f32* %255 = OpAccessChain %31 %22 
                                                      OpStore %255 %254 
                                         f32 %257 = OpLoad %79 
                                         f32 %258 = OpLoad %8 
                                         f32 %259 = OpFAdd %257 %258 
                                Private f32* %260 = OpAccessChain %256 %22 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %256 %22 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpExtInst %1 43 %262 %183 %27 
                                Private f32* %264 = OpAccessChain %256 %22 
                                                      OpStore %264 %263 
                                       f32_3 %266 = OpLoad %105 
                                       f32_3 %267 = OpVectorShuffle %266 %266 1 1 1 
                              Uniform f32_4* %269 = OpAccessChain %19 %268 %80 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 3 
                                       f32_3 %272 = OpFMul %267 %271 
                                       f32_4 %273 = OpLoad %265 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 1 5 6 
                                                      OpStore %265 %274 
                              Uniform f32_4* %275 = OpAccessChain %19 %268 %113 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 3 
                                       f32_3 %278 = OpLoad %105 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 0 0 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %265 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 2 3 
                                       f32_3 %283 = OpFAdd %280 %282 
                                       f32_4 %284 = OpLoad %265 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 1 5 6 
                                                      OpStore %265 %285 
                              Uniform f32_4* %286 = OpAccessChain %19 %268 %65 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 3 
                                       f32_3 %289 = OpLoad %105 
                                       f32_3 %290 = OpVectorShuffle %289 %289 2 2 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %265 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 2 3 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %265 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 1 5 6 
                                                      OpStore %265 %296 
                                       f32_4 %297 = OpLoad %265 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 2 3 
                              Uniform f32_4* %299 = OpAccessChain %19 %268 %108 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 3 
                                       f32_3 %302 = OpFAdd %298 %301 
                                       f32_4 %303 = OpLoad %265 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 1 5 6 
                                                      OpStore %265 %304 
                                       f32_4 %305 = OpLoad %265 
                                       f32_2 %306 = OpVectorShuffle %305 %305 0 2 
                                       f32_4 %307 = OpLoad %265 
                                       f32_2 %308 = OpVectorShuffle %307 %307 3 3 
                                       f32_2 %309 = OpFDiv %306 %308 
                                       f32_4 %310 = OpLoad %265 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 1 5 3 
                                                      OpStore %265 %311 
                                Private f32* %315 = OpAccessChain %265 %217 
                                         f32 %316 = OpLoad %315 
                                        bool %317 = OpFOrdLessThan %316 %183 
                                                      OpStore %314 %317 
                                        bool %320 = OpLoad %314 
                                                      OpSelectionMerge %322 None 
                                                      OpBranchConditional %320 %321 %323 
                                             %321 = OpLabel 
                                                      OpStore %319 %27 
                                                      OpBranch %322 
                                             %323 = OpLabel 
                                                      OpStore %319 %183 
                                                      OpBranch %322 
                                             %322 = OpLabel 
                                         f32 %324 = OpLoad %319 
                                                      OpStore %39 %324 
                  read_only Texture2DSampled %326 = OpLoad %325 
                                       f32_4 %327 = OpLoad %265 
                                       f32_2 %328 = OpVectorShuffle %327 %327 0 2 
                                       f32_4 %330 = OpImageSampleImplicitLod %326 %328 Bias %10 
                                         f32 %331 = OpCompositeExtract %330 3 
                                Private f32* %332 = OpAccessChain %265 %22 
                                                      OpStore %332 %331 
                                         f32 %333 = OpLoad %39 
                                Private f32* %334 = OpAccessChain %265 %22 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFMul %333 %335 
                                Private f32* %337 = OpAccessChain %265 %22 
                                                      OpStore %337 %336 
                                       f32_3 %338 = OpLoad %105 
                                       f32_3 %339 = OpFNegate %338 
                              Uniform f32_4* %341 = OpAccessChain %19 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpFAdd %339 %343 
                                       f32_4 %345 = OpLoad %90 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %90 %346 
                                       f32_3 %347 = OpLoad %105 
                              Uniform f32_3* %349 = OpAccessChain %19 %113 
                                       f32_3 %350 = OpLoad %349 
                                       f32_3 %351 = OpFNegate %350 
                                       f32_3 %352 = OpFAdd %347 %351 
                                                      OpStore %105 %352 
                                       f32_4 %353 = OpLoad %90 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_4 %355 = OpLoad %90 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                         f32 %357 = OpDot %354 %356 
                                                      OpStore %79 %357 
                                         f32 %358 = OpLoad %79 
                                Uniform f32* %359 = OpAccessChain %19 %340 %217 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFMul %358 %360 
                                                      OpStore %39 %361 
                                         f32 %362 = OpLoad %79 
                                         f32 %363 = OpExtInst %1 32 %362 
                                                      OpStore %79 %363 
                                         f32 %364 = OpLoad %79 
                                       f32_3 %365 = OpCompositeConstruct %364 %364 %364 
                                       f32_4 %366 = OpLoad %90 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpFMul %365 %367 
                                       f32_4 %369 = OpLoad %90 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %90 %370 
                  read_only Texture2DSampled %372 = OpLoad %371 
                                         f32 %373 = OpLoad %39 
                                       f32_2 %374 = OpCompositeConstruct %373 %373 
                                       f32_4 %375 = OpImageSampleImplicitLod %372 %374 
                                         f32 %376 = OpCompositeExtract %375 3 
                                                      OpStore %79 %376 
                                         f32 %377 = OpLoad %79 
                                Private f32* %378 = OpAccessChain %265 %22 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                Private f32* %381 = OpAccessChain %265 %22 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %256 %22 
                                         f32 %383 = OpLoad %382 
                                Private f32* %384 = OpAccessChain %265 %22 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                Private f32* %387 = OpAccessChain %265 %22 
                                                      OpStore %387 %386 
                                Private f32* %388 = OpAccessChain %265 %22 
                                         f32 %389 = OpLoad %388 
                                                      OpStore %79 %389 
                                         f32 %390 = OpLoad %79 
                                         f32 %391 = OpExtInst %1 43 %390 %183 %27 
                                                      OpStore %79 %391 
                                       f32_3 %392 = OpLoad %105 
                                       f32_3 %393 = OpLoad %105 
                                         f32 %394 = OpDot %392 %393 
                                                      OpStore %39 %394 
                                         f32 %395 = OpLoad %39 
                                         f32 %396 = OpExtInst %1 32 %395 
                                                      OpStore %39 %396 
                                       f32_3 %397 = OpLoad %105 
                                       f32_3 %398 = OpFNegate %397 
                                         f32 %399 = OpLoad %39 
                                       f32_3 %400 = OpCompositeConstruct %399 %399 %399 
                                       f32_3 %401 = OpFMul %398 %400 
                                       f32_4 %402 = OpLoad %90 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_3 %404 = OpFAdd %401 %403 
                                                      OpStore %105 %404 
                                       f32_3 %405 = OpLoad %105 
                                       f32_3 %406 = OpLoad %105 
                                         f32 %407 = OpDot %405 %406 
                                                      OpStore %39 %407 
                                         f32 %408 = OpLoad %39 
                                         f32 %409 = OpExtInst %1 32 %408 
                                                      OpStore %39 %409 
                                         f32 %410 = OpLoad %39 
                                       f32_3 %411 = OpCompositeConstruct %410 %410 %410 
                                       f32_3 %412 = OpLoad %105 
                                       f32_3 %413 = OpFMul %411 %412 
                                                      OpStore %105 %413 
                                       f32_4 %414 = OpLoad %60 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_3 %418 = OpFMul %415 %417 
                                       f32_3 %421 = OpFAdd %418 %420 
                                                      OpStore %256 %421 
                                Private f32* %423 = OpAccessChain %60 %217 
                                         f32 %424 = OpLoad %423 
                                         f32 %426 = OpFMul %424 %425 
                                                      OpStore %422 %426 
                                       f32_3 %428 = OpLoad %256 
                                       f32_3 %429 = OpLoad %256 
                                         f32 %430 = OpDot %428 %429 
                                                      OpStore %427 %430 
                                         f32 %431 = OpLoad %427 
                                         f32 %432 = OpExtInst %1 32 %431 
                                                      OpStore %427 %432 
                                       f32_3 %433 = OpLoad %256 
                                         f32 %434 = OpLoad %427 
                                       f32_3 %435 = OpCompositeConstruct %434 %434 %434 
                                       f32_3 %436 = OpFMul %433 %435 
                                                      OpStore %256 %436 
                                       f32_3 %437 = OpLoad %105 
                                       f32_3 %438 = OpLoad %256 
                                         f32 %439 = OpDot %437 %438 
                                                      OpStore %427 %439 
                                       f32_4 %440 = OpLoad %90 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpLoad %256 
                                         f32 %443 = OpDot %441 %442 
                                Private f32* %444 = OpAccessChain %256 %22 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %256 %22 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpExtInst %1 40 %446 %183 
                                Private f32* %448 = OpAccessChain %256 %22 
                                                      OpStore %448 %447 
                                Private f32* %449 = OpAccessChain %265 %22 
                                         f32 %450 = OpLoad %449 
                                Private f32* %451 = OpAccessChain %256 %22 
                                         f32 %452 = OpLoad %451 
                                         f32 %453 = OpFMul %450 %452 
                                Private f32* %454 = OpAccessChain %265 %22 
                                                      OpStore %454 %453 
                                       f32_4 %456 = OpLoad %265 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 0 0 
                              Uniform f32_4* %459 = OpAccessChain %19 %458 
                                       f32_4 %460 = OpLoad %459 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 1 2 
                                       f32_3 %462 = OpFMul %457 %461 
                                       f32_4 %463 = OpLoad %455 
                                       f32_4 %464 = OpVectorShuffle %463 %462 4 5 6 3 
                                                      OpStore %455 %464 
                                         f32 %465 = OpLoad %427 
                                         f32 %466 = OpExtInst %1 40 %465 %183 
                                Private f32* %467 = OpAccessChain %256 %22 
                                                      OpStore %467 %466 
                                Private f32* %468 = OpAccessChain %256 %22 
                                         f32 %469 = OpLoad %468 
                                         f32 %470 = OpExtInst %1 30 %469 
                                Private f32* %471 = OpAccessChain %256 %22 
                                                      OpStore %471 %470 
                                Private f32* %472 = OpAccessChain %256 %22 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpLoad %422 
                                         f32 %475 = OpFMul %473 %474 
                                Private f32* %476 = OpAccessChain %256 %22 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %256 %22 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpExtInst %1 29 %478 
                                Private f32* %480 = OpAccessChain %256 %22 
                                                      OpStore %480 %479 
                                         f32 %481 = OpLoad %79 
                                Private f32* %482 = OpAccessChain %256 %22 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFMul %481 %483 
                                Private f32* %485 = OpAccessChain %265 %22 
                                                      OpStore %485 %484 
                              Uniform f32_4* %486 = OpAccessChain %19 %458 
                                       f32_4 %487 = OpLoad %486 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                         f32 %493 = OpDot %488 %492 
                                Private f32* %494 = OpAccessChain %256 %22 
                                                      OpStore %494 %493 
                                Private f32* %495 = OpAccessChain %265 %22 
                                         f32 %496 = OpLoad %495 
                                Private f32* %497 = OpAccessChain %256 %22 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpFMul %496 %498 
                                Private f32* %500 = OpAccessChain %455 %217 
                                                      OpStore %500 %499 
                                       f32_2 %501 = OpLoad %31 
                                       f32_4 %502 = OpVectorShuffle %501 %501 0 0 0 0 
                                       f32_4 %503 = OpLoad %455 
                                       f32_4 %504 = OpFMul %502 %503 
                                                      OpStore %265 %504 
                                       f32_4 %507 = OpLoad %265 
                                       f32_4 %508 = OpFNegate %507 
                                       f32_4 %509 = OpExtInst %1 29 %508 
                                                      OpStore %506 %509 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
float u_xlat18;
float u_xlat16_18;
float u_xlat19;
float u_xlat20;
float u_xlat16_20;
float u_xlat10_20;
bool u_xlatb20;
vec2 u_xlat22;
float u_xlat27;
float u_xlat28;
bool u_xlatb28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat10_4 = texture(_LightTexture0, u_xlat3.xy, -8.0);
    u_xlatb28 = u_xlat3.z<0.0;
    u_xlat28 = u_xlatb28 ? 1.0 : float(0.0);
    u_xlat28 = u_xlat28 * u_xlat10_4.w;
    u_xlat19 = u_xlat19 * _LightPos.w;
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat19));
    u_xlat19 = u_xlat28 * u_xlat10_3.w;
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlatb20 = u_xlat28<0.99000001;
    if(u_xlatb20){
        u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
        u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
        u_xlat4.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
        u_xlat4.xy = floor(u_xlat4.xy);
        u_xlat3.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat4.xy);
        u_xlat5 = u_xlat3.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat6.xw = u_xlat5.xz * u_xlat5.xz;
        u_xlat22.xy = u_xlat6.xw * vec2(0.5, 0.5) + (-u_xlat3.xy);
        u_xlat5.xz = (-u_xlat3.xy) + vec2(1.0, 1.0);
        u_xlat7.xy = min(u_xlat3.xy, vec2(0.0, 0.0));
        u_xlat5.xz = (-u_xlat7.xy) * u_xlat7.xy + u_xlat5.xz;
        u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
        u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat5.yw;
        u_xlat7.x = u_xlat22.x;
        u_xlat7.y = u_xlat5.x;
        u_xlat7.z = u_xlat3.x;
        u_xlat7.w = u_xlat6.x;
        u_xlat7 = u_xlat7 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat6.x = u_xlat22.y;
        u_xlat6.y = u_xlat5.z;
        u_xlat6.z = u_xlat3.y;
        u_xlat5 = u_xlat6 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat6 = u_xlat7.ywyw + u_xlat7.xzxz;
        u_xlat8 = u_xlat5.yyww + u_xlat5.xxzz;
        u_xlat3.xy = u_xlat7.yw / u_xlat6.zw;
        u_xlat3.xy = u_xlat3.xy + vec2(-1.5, 0.5);
        u_xlat22.xy = u_xlat5.yw / u_xlat8.yw;
        u_xlat22.xy = u_xlat22.xy + vec2(-1.5, 0.5);
        u_xlat5.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.xx;
        u_xlat5.zw = u_xlat22.xy * _ShadowMapTexture_TexelSize.yy;
        u_xlat6 = u_xlat6 * u_xlat8;
        u_xlat7 = u_xlat4.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xzyz;
        vec3 txVec0 = vec3(u_xlat7.xy,u_xlat3.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
        vec3 txVec1 = vec3(u_xlat7.zw,u_xlat3.z);
        u_xlat10_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
        u_xlat3.x = u_xlat10_3.x * u_xlat6.y;
        u_xlat20 = u_xlat6.x * u_xlat10_20 + u_xlat3.x;
        u_xlat4 = u_xlat4.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwyw;
        vec3 txVec2 = vec3(u_xlat4.xy,u_xlat3.z);
        u_xlat10_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
        u_xlat20 = u_xlat6.z * u_xlat10_3.x + u_xlat20;
        vec3 txVec3 = vec3(u_xlat4.zw,u_xlat3.z);
        u_xlat10_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
        u_xlat20 = u_xlat6.w * u_xlat10_3.x + u_xlat20;
        u_xlat3.x = (-_LightShadowData.x) + 1.0;
        u_xlat20 = u_xlat20 * u_xlat3.x + _LightShadowData.x;
    } else {
        u_xlat20 = 1.0;
    //ENDIF
    }
    u_xlat28 = u_xlat28 + u_xlat20;
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat19 = u_xlat28 * u_xlat19;
    u_xlat1.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_3 = texture(_CameraNormalsTexture, u_xlat1.xy);
    u_xlat16_1.xyw = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = dot(u_xlat16_1.xyw, u_xlat16_1.xyw);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_20);
    u_xlat20 = dot(u_xlat9.xyz, u_xlat16_1.xyw);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlat2.xyw = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat9.xyz = (-u_xlat2.xyw) * u_xlat3.xxx + u_xlat9.xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat2.xxx;
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_1.xyw);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlat16_18 = u_xlat10_3.w * 128.0;
    u_xlat9.x = log2(u_xlat9.x);
    u_xlat9.x = u_xlat9.x * u_xlat16_18;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat18 = u_xlat19;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat9.x = u_xlat18 * u_xlat9.x;
    u_xlat18 = u_xlat19 * u_xlat20;
    u_xlat1.xyz = vec3(u_xlat18) * _LightColor.xyz;
    u_xlat18 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.w = u_xlat18 * u_xlat9.x;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 803
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %43 %797 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %27 Location 27 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %230 DescriptorSet 230 
                                                      OpDecorate %230 Binding 230 
                                                      OpDecorate %259 DescriptorSet 259 
                                                      OpDecorate %259 Binding 259 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %509 DescriptorSet 509 
                                                      OpDecorate %509 Binding 509 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %601 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %630 DescriptorSet 630 
                                                      OpDecorate %630 Binding 630 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %650 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %654 RelaxedPrecision 
                                                      OpDecorate %655 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %709 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %770 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %797 Location 797 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %802 DescriptorSet 802 
                                                      OpDecorate %802 Binding 802 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %12 
                                              %17 = OpTypeStruct %10 %7 %7 %13 %15 %7 %7 %7 %7 %7 %16 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 1 
                                          u32 %22 = OpConstant 2 
                                              %23 = OpTypePointer Uniform %6 
                                              %26 = OpTypePointer Input %10 
                                 Input f32_3* %27 = OpVariable Input 
                                              %28 = OpTypePointer Input %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                               Private f32_4* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                                 Input f32_4* %43 = OpVariable Input 
                                              %44 = OpTypeVector %6 2 
                                 Private f32* %52 = OpVariable Private 
                                              %53 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %54 = OpTypeSampledImage %53 
                                              %55 = OpTypePointer UniformConstant %54 
  UniformConstant read_only Texture2DSampled* %56 = OpVariable UniformConstant 
                                          i32 %62 = OpConstant 2 
                                          u32 %67 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                               Private f32_4* %74 = OpVariable Private 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %85 = OpConstant 3 
                                              %86 = OpTypePointer Uniform %7 
                                          i32 %93 = OpConstant 0 
                                         i32 %126 = OpConstant 6 
                                         u32 %153 = OpConstant 3 
                                             %163 = OpTypePointer Private %10 
                              Private f32_3* %164 = OpVariable Private 
                                         i32 %168 = OpConstant 7 
                                Private f32* %173 = OpVariable Private 
                                Private f32* %177 = OpVariable Private 
                                         i32 %186 = OpConstant 10 
 UniformConstant read_only Texture2DSampled* %230 = OpVariable UniformConstant 
                                         f32 %234 = OpConstant 3.674022E-40 
                                             %237 = OpTypeBool 
                                             %238 = OpTypePointer Private %237 
                               Private bool* %239 = OpVariable Private 
                                         f32 %242 = OpConstant 3.674022E-40 
                                Private f32* %244 = OpVariable Private 
                                             %245 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %259 = OpVariable UniformConstant 
                                         i32 %270 = OpConstant 5 
                                         f32 %280 = OpConstant 3.674022E-40 
                                         i32 %287 = OpConstant 4 
                              Private f32_4* %316 = OpVariable Private 
                                         i32 %319 = OpConstant 11 
                                         f32 %324 = OpConstant 3.674022E-40 
                                       f32_2 %325 = OpConstantComposite %324 %324 
                              Private f32_4* %346 = OpVariable Private 
                                       f32_4 %349 = OpConstantComposite %324 %71 %324 %71 
                              Private f32_4* %351 = OpVariable Private 
                                             %359 = OpTypePointer Private %44 
                              Private f32_2* %360 = OpVariable Private 
                                       f32_2 %371 = OpConstantComposite %71 %71 
                              Private f32_4* %375 = OpVariable Private 
                                       f32_2 %378 = OpConstantComposite %242 %242 
                                         f32 %422 = OpConstant 3.674022E-40 
                                         f32 %423 = OpConstant 3.674022E-40 
                                       f32_4 %424 = OpConstantComposite %422 %422 %422 %423 
                              Private f32_4* %442 = OpVariable Private 
                                         f32 %457 = OpConstant 3.674022E-40 
                                       f32_2 %458 = OpConstantComposite %457 %324 
                                             %496 = OpTypePointer Function %10 
                                Private f32* %505 = OpVariable Private 
                                             %506 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %507 = OpTypeSampledImage %506 
                                             %508 = OpTypePointer UniformConstant %507 
 UniformConstant read_only Texture2DSampled* %509 = OpVariable UniformConstant 
                              Private f32_4* %522 = OpVariable Private 
                                Private f32* %590 = OpVariable Private 
                                Private f32* %601 = OpVariable Private 
                              Private f32_4* %604 = OpVariable Private 
                                         i32 %619 = OpConstant 12 
 UniformConstant read_only Texture2DSampled* %630 = OpVariable UniformConstant 
                                         f32 %637 = OpConstant 3.674022E-40 
                                       f32_3 %638 = OpConstantComposite %637 %637 %637 
                                         f32 %640 = OpConstant 3.674022E-40 
                                       f32_3 %641 = OpConstantComposite %640 %640 %640 
                                Private f32* %645 = OpVariable Private 
                                             %667 = OpTypePointer Uniform %10 
                                Private f32* %714 = OpVariable Private 
                                         f32 %717 = OpConstant 3.674022E-40 
                                Private f32* %744 = OpVariable Private 
                                         i32 %751 = OpConstant 8 
                                         f32 %761 = OpConstant 3.674022E-40 
                                         f32 %762 = OpConstant 3.674022E-40 
                                         f32 %763 = OpConstant 3.674022E-40 
                                       f32_3 %764 = OpConstantComposite %761 %762 %763 
                                         i32 %775 = OpConstant 9 
                                             %796 = OpTypePointer Output %7 
                               Output f32_4* %797 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %802 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %246 = OpVariable Function 
                             Function f32_3* %497 = OpVariable Function 
                             Function f32_3* %514 = OpVariable Function 
                             Function f32_3* %550 = OpVariable Function 
                             Function f32_3* %570 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                   Input f32* %29 = OpAccessChain %27 %22 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFDiv %25 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpLoad %27 
                                        f32_3 %38 = OpFMul %36 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %9 %40 
                                        f32_4 %45 = OpLoad %43 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_4 %47 = OpLoad %43 
                                        f32_2 %48 = OpVectorShuffle %47 %47 3 3 
                                        f32_2 %49 = OpFDiv %46 %48 
                                        f32_4 %50 = OpLoad %41 
                                        f32_4 %51 = OpVectorShuffle %50 %49 4 5 2 3 
                                                      OpStore %41 %51 
                   read_only Texture2DSampled %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %41 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                          f32 %61 = OpCompositeExtract %60 0 
                                                      OpStore %52 %61 
                                 Uniform f32* %63 = OpAccessChain %19 %62 %32 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %52 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %19 %62 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                                      OpStore %52 %70 
                                          f32 %72 = OpLoad %52 
                                          f32 %73 = OpFDiv %71 %72 
                                                      OpStore %52 %73 
                                          f32 %75 = OpLoad %52 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %74 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %74 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_3 %84 = OpVectorShuffle %83 %83 1 1 1 
                               Uniform f32_4* %87 = OpAccessChain %19 %85 %21 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %84 %89 
                                        f32_4 %91 = OpLoad %82 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %82 %92 
                               Uniform f32_4* %94 = OpAccessChain %19 %85 %93 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_4 %97 = OpLoad %74 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %82 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %74 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 2 6 
                                                      OpStore %74 %104 
                              Uniform f32_4* %105 = OpAccessChain %19 %85 %62 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_4 %108 = OpLoad %74 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %74 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %74 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 2 6 
                                                      OpStore %74 %115 
                                       f32_4 %116 = OpLoad %74 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %19 %85 %85 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %117 %120 
                                       f32_4 %122 = OpLoad %74 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 2 6 
                                                      OpStore %74 %123 
                                       f32_4 %124 = OpLoad %74 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 3 
                              Uniform f32_4* %127 = OpAccessChain %19 %126 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %125 %130 
                                       f32_4 %132 = OpLoad %82 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %82 %133 
                                       f32_4 %134 = OpLoad %82 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_4 %136 = OpLoad %82 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %135 %137 
                                Private f32* %139 = OpAccessChain %9 %32 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %32 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpExtInst %1 31 %141 
                                Private f32* %143 = OpAccessChain %9 %32 
                                                      OpStore %143 %142 
                                Private f32* %144 = OpAccessChain %9 %22 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFNegate %145 
                                         f32 %147 = OpLoad %52 
                                         f32 %148 = OpFMul %146 %147 
                                Private f32* %149 = OpAccessChain %9 %32 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFAdd %148 %150 
                                Private f32* %152 = OpAccessChain %9 %32 
                                                      OpStore %152 %151 
                                Uniform f32* %154 = OpAccessChain %19 %126 %153 
                                         f32 %155 = OpLoad %154 
                                Private f32* %156 = OpAccessChain %9 %32 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFMul %155 %157 
                                Private f32* %159 = OpAccessChain %74 %22 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %9 %32 
                                                      OpStore %162 %161 
                                       f32_4 %165 = OpLoad %74 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 3 
                                       f32_3 %167 = OpFNegate %166 
                              Uniform f32_4* %169 = OpAccessChain %19 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFAdd %167 %171 
                                                      OpStore %164 %172 
                                       f32_3 %174 = OpLoad %164 
                                       f32_3 %175 = OpLoad %164 
                                         f32 %176 = OpDot %174 %175 
                                                      OpStore %173 %176 
                                         f32 %178 = OpLoad %173 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %177 %179 
                                       f32_3 %180 = OpLoad %164 
                                         f32 %181 = OpLoad %177 
                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
                                       f32_3 %183 = OpFMul %180 %182 
                                                      OpStore %164 %183 
                                       f32_4 %184 = OpLoad %74 
                                       f32_3 %185 = OpVectorShuffle %184 %184 1 1 1 
                              Uniform f32_4* %187 = OpAccessChain %19 %186 %21 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 3 
                                       f32_3 %190 = OpFMul %185 %189 
                                       f32_4 %191 = OpLoad %82 
                                       f32_4 %192 = OpVectorShuffle %191 %190 4 5 6 3 
                                                      OpStore %82 %192 
                              Uniform f32_4* %193 = OpAccessChain %19 %186 %93 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 3 
                                       f32_4 %196 = OpLoad %74 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 0 0 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %82 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %82 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %82 %203 
                              Uniform f32_4* %204 = OpAccessChain %19 %186 %62 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 3 
                                       f32_4 %207 = OpLoad %74 
                                       f32_3 %208 = OpVectorShuffle %207 %207 3 3 3 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %82 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFAdd %209 %211 
                                       f32_4 %213 = OpLoad %82 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %82 %214 
                                       f32_4 %215 = OpLoad %82 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              Uniform f32_4* %217 = OpAccessChain %19 %186 %85 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 3 
                                       f32_3 %220 = OpFAdd %216 %219 
                                       f32_4 %221 = OpLoad %82 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %82 %222 
                                       f32_4 %223 = OpLoad %82 
                                       f32_2 %224 = OpVectorShuffle %223 %223 0 1 
                                       f32_4 %225 = OpLoad %82 
                                       f32_2 %226 = OpVectorShuffle %225 %225 2 2 
                                       f32_2 %227 = OpFDiv %224 %226 
                                       f32_4 %228 = OpLoad %82 
                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 2 3 
                                                      OpStore %82 %229 
                  read_only Texture2DSampled %231 = OpLoad %230 
                                       f32_4 %232 = OpLoad %82 
                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
                                       f32_4 %235 = OpImageSampleImplicitLod %231 %233 Bias %7 
                                         f32 %236 = OpCompositeExtract %235 3 
                                                      OpStore %177 %236 
                                Private f32* %240 = OpAccessChain %82 %22 
                                         f32 %241 = OpLoad %240 
                                        bool %243 = OpFOrdLessThan %241 %242 
                                                      OpStore %239 %243 
                                        bool %247 = OpLoad %239 
                                                      OpSelectionMerge %249 None 
                                                      OpBranchConditional %247 %248 %250 
                                             %248 = OpLabel 
                                                      OpStore %246 %71 
                                                      OpBranch %249 
                                             %250 = OpLabel 
                                                      OpStore %246 %242 
                                                      OpBranch %249 
                                             %249 = OpLabel 
                                         f32 %251 = OpLoad %246 
                                                      OpStore %244 %251 
                                         f32 %252 = OpLoad %177 
                                         f32 %253 = OpLoad %244 
                                         f32 %254 = OpFMul %252 %253 
                                                      OpStore %177 %254 
                                         f32 %255 = OpLoad %173 
                                Uniform f32* %256 = OpAccessChain %19 %168 %153 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                                      OpStore %173 %258 
                  read_only Texture2DSampled %260 = OpLoad %259 
                                         f32 %261 = OpLoad %173 
                                       f32_2 %262 = OpCompositeConstruct %261 %261 
                                       f32_4 %263 = OpImageSampleImplicitLod %260 %262 
                                         f32 %264 = OpCompositeExtract %263 3 
                                                      OpStore %173 %264 
                                         f32 %265 = OpLoad %173 
                                         f32 %266 = OpLoad %177 
                                         f32 %267 = OpFMul %265 %266 
                                                      OpStore %173 %267 
                                Private f32* %268 = OpAccessChain %9 %32 
                                         f32 %269 = OpLoad %268 
                                Uniform f32* %271 = OpAccessChain %19 %270 %22 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFMul %269 %272 
                                Uniform f32* %274 = OpAccessChain %19 %270 %153 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFAdd %273 %275 
                                                      OpStore %177 %276 
                                         f32 %277 = OpLoad %177 
                                         f32 %278 = OpExtInst %1 43 %277 %242 %71 
                                                      OpStore %177 %278 
                                         f32 %279 = OpLoad %177 
                                        bool %281 = OpFOrdLessThan %279 %280 
                                                      OpStore %239 %281 
                                        bool %282 = OpLoad %239 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %603 
                                             %283 = OpLabel 
                                       f32_4 %285 = OpLoad %74 
                                       f32_4 %286 = OpVectorShuffle %285 %285 1 1 1 1 
                              Uniform f32_4* %288 = OpAccessChain %19 %287 %21 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpFMul %286 %289 
                                                      OpStore %82 %290 
                              Uniform f32_4* %291 = OpAccessChain %19 %287 %93 
                                       f32_4 %292 = OpLoad %291 
                                       f32_4 %293 = OpLoad %74 
                                       f32_4 %294 = OpVectorShuffle %293 %293 0 0 0 0 
                                       f32_4 %295 = OpFMul %292 %294 
                                       f32_4 %296 = OpLoad %82 
                                       f32_4 %297 = OpFAdd %295 %296 
                                                      OpStore %82 %297 
                              Uniform f32_4* %298 = OpAccessChain %19 %287 %62 
                                       f32_4 %299 = OpLoad %298 
                                       f32_4 %300 = OpLoad %74 
                                       f32_4 %301 = OpVectorShuffle %300 %300 3 3 3 3 
                                       f32_4 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %82 
                                       f32_4 %304 = OpFAdd %302 %303 
                                                      OpStore %82 %304 
                                       f32_4 %305 = OpLoad %82 
                              Uniform f32_4* %306 = OpAccessChain %19 %287 %85 
                                       f32_4 %307 = OpLoad %306 
                                       f32_4 %308 = OpFAdd %305 %307 
                                                      OpStore %82 %308 
                                       f32_4 %309 = OpLoad %82 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_4 %311 = OpLoad %82 
                                       f32_3 %312 = OpVectorShuffle %311 %311 3 3 3 
                                       f32_3 %313 = OpFDiv %310 %312 
                                       f32_4 %314 = OpLoad %82 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %82 %315 
                                       f32_4 %317 = OpLoad %82 
                                       f32_2 %318 = OpVectorShuffle %317 %317 0 1 
                              Uniform f32_4* %320 = OpAccessChain %19 %319 
                                       f32_4 %321 = OpLoad %320 
                                       f32_2 %322 = OpVectorShuffle %321 %321 2 3 
                                       f32_2 %323 = OpFMul %318 %322 
                                       f32_2 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %316 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 2 3 
                                                      OpStore %316 %328 
                                       f32_4 %329 = OpLoad %316 
                                       f32_2 %330 = OpVectorShuffle %329 %329 0 1 
                                       f32_2 %331 = OpExtInst %1 8 %330 
                                       f32_4 %332 = OpLoad %316 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 2 3 
                                                      OpStore %316 %333 
                                       f32_4 %334 = OpLoad %82 
                                       f32_2 %335 = OpVectorShuffle %334 %334 0 1 
                              Uniform f32_4* %336 = OpAccessChain %19 %319 
                                       f32_4 %337 = OpLoad %336 
                                       f32_2 %338 = OpVectorShuffle %337 %337 2 3 
                                       f32_2 %339 = OpFMul %335 %338 
                                       f32_4 %340 = OpLoad %316 
                                       f32_2 %341 = OpVectorShuffle %340 %340 0 1 
                                       f32_2 %342 = OpFNegate %341 
                                       f32_2 %343 = OpFAdd %339 %342 
                                       f32_4 %344 = OpLoad %82 
                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 2 3 
                                                      OpStore %82 %345 
                                       f32_4 %347 = OpLoad %82 
                                       f32_4 %348 = OpVectorShuffle %347 %347 0 0 1 1 
                                       f32_4 %350 = OpFAdd %348 %349 
                                                      OpStore %346 %350 
                                       f32_4 %352 = OpLoad %346 
                                       f32_2 %353 = OpVectorShuffle %352 %352 0 2 
                                       f32_4 %354 = OpLoad %346 
                                       f32_2 %355 = OpVectorShuffle %354 %354 0 2 
                                       f32_2 %356 = OpFMul %353 %355 
                                       f32_4 %357 = OpLoad %351 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 1 2 5 
                                                      OpStore %351 %358 
                                       f32_4 %361 = OpLoad %351 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 3 
                                       f32_2 %363 = OpFMul %362 %325 
                                       f32_4 %364 = OpLoad %82 
                                       f32_2 %365 = OpVectorShuffle %364 %364 0 1 
                                       f32_2 %366 = OpFNegate %365 
                                       f32_2 %367 = OpFAdd %363 %366 
                                                      OpStore %360 %367 
                                       f32_4 %368 = OpLoad %82 
                                       f32_2 %369 = OpVectorShuffle %368 %368 0 1 
                                       f32_2 %370 = OpFNegate %369 
                                       f32_2 %372 = OpFAdd %370 %371 
                                       f32_4 %373 = OpLoad %346 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 1 5 3 
                                                      OpStore %346 %374 
                                       f32_4 %376 = OpLoad %82 
                                       f32_2 %377 = OpVectorShuffle %376 %376 0 1 
                                       f32_2 %379 = OpExtInst %1 37 %377 %378 
                                       f32_4 %380 = OpLoad %375 
                                       f32_4 %381 = OpVectorShuffle %380 %379 4 5 2 3 
                                                      OpStore %375 %381 
                                       f32_4 %382 = OpLoad %375 
                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
                                       f32_2 %384 = OpFNegate %383 
                                       f32_4 %385 = OpLoad %375 
                                       f32_2 %386 = OpVectorShuffle %385 %385 0 1 
                                       f32_2 %387 = OpFMul %384 %386 
                                       f32_4 %388 = OpLoad %346 
                                       f32_2 %389 = OpVectorShuffle %388 %388 0 2 
                                       f32_2 %390 = OpFAdd %387 %389 
                                       f32_4 %391 = OpLoad %346 
                                       f32_4 %392 = OpVectorShuffle %391 %390 4 1 5 3 
                                                      OpStore %346 %392 
                                       f32_4 %393 = OpLoad %82 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_2 %395 = OpExtInst %1 40 %394 %378 
                                       f32_4 %396 = OpLoad %82 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 5 2 3 
                                                      OpStore %82 %397 
                                       f32_4 %398 = OpLoad %82 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                       f32_2 %400 = OpFNegate %399 
                                       f32_4 %401 = OpLoad %82 
                                       f32_2 %402 = OpVectorShuffle %401 %401 0 1 
                                       f32_2 %403 = OpFMul %400 %402 
                                       f32_4 %404 = OpLoad %346 
                                       f32_2 %405 = OpVectorShuffle %404 %404 1 3 
                                       f32_2 %406 = OpFAdd %403 %405 
                                       f32_4 %407 = OpLoad %82 
                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
                                                      OpStore %82 %408 
                                Private f32* %409 = OpAccessChain %360 %32 
                                         f32 %410 = OpLoad %409 
                                Private f32* %411 = OpAccessChain %375 %32 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %346 %32 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %375 %67 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %82 %32 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %375 %22 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %351 %32 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %375 %153 
                                                      OpStore %420 %419 
                                       f32_4 %421 = OpLoad %375 
                                       f32_4 %425 = OpFMul %421 %424 
                                                      OpStore %375 %425 
                                Private f32* %426 = OpAccessChain %360 %67 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %351 %32 
                                                      OpStore %428 %427 
                                Private f32* %429 = OpAccessChain %346 %22 
                                         f32 %430 = OpLoad %429 
                                Private f32* %431 = OpAccessChain %351 %67 
                                                      OpStore %431 %430 
                                Private f32* %432 = OpAccessChain %82 %67 
                                         f32 %433 = OpLoad %432 
                                Private f32* %434 = OpAccessChain %351 %22 
                                                      OpStore %434 %433 
                                       f32_4 %435 = OpLoad %351 
                                       f32_4 %436 = OpFMul %435 %424 
                                                      OpStore %346 %436 
                                       f32_4 %437 = OpLoad %375 
                                       f32_4 %438 = OpVectorShuffle %437 %437 1 3 1 3 
                                       f32_4 %439 = OpLoad %375 
                                       f32_4 %440 = OpVectorShuffle %439 %439 0 2 0 2 
                                       f32_4 %441 = OpFAdd %438 %440 
                                                      OpStore %351 %441 
                                       f32_4 %443 = OpLoad %346 
                                       f32_4 %444 = OpVectorShuffle %443 %443 1 1 3 3 
                                       f32_4 %445 = OpLoad %346 
                                       f32_4 %446 = OpVectorShuffle %445 %445 0 0 2 2 
                                       f32_4 %447 = OpFAdd %444 %446 
                                                      OpStore %442 %447 
                                       f32_4 %448 = OpLoad %375 
                                       f32_2 %449 = OpVectorShuffle %448 %448 1 3 
                                       f32_4 %450 = OpLoad %351 
                                       f32_2 %451 = OpVectorShuffle %450 %450 2 3 
                                       f32_2 %452 = OpFDiv %449 %451 
                                       f32_4 %453 = OpLoad %82 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 2 3 
                                                      OpStore %82 %454 
                                       f32_4 %455 = OpLoad %82 
                                       f32_2 %456 = OpVectorShuffle %455 %455 0 1 
                                       f32_2 %459 = OpFAdd %456 %458 
                                       f32_4 %460 = OpLoad %82 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore %82 %461 
                                       f32_4 %462 = OpLoad %346 
                                       f32_2 %463 = OpVectorShuffle %462 %462 1 3 
                                       f32_4 %464 = OpLoad %442 
                                       f32_2 %465 = OpVectorShuffle %464 %464 1 3 
                                       f32_2 %466 = OpFDiv %463 %465 
                                                      OpStore %360 %466 
                                       f32_2 %467 = OpLoad %360 
                                       f32_2 %468 = OpFAdd %467 %458 
                                                      OpStore %360 %468 
                                       f32_4 %469 = OpLoad %82 
                                       f32_2 %470 = OpVectorShuffle %469 %469 0 1 
                              Uniform f32_4* %471 = OpAccessChain %19 %319 
                                       f32_4 %472 = OpLoad %471 
                                       f32_2 %473 = OpVectorShuffle %472 %472 0 0 
                                       f32_2 %474 = OpFMul %470 %473 
                                       f32_4 %475 = OpLoad %346 
                                       f32_4 %476 = OpVectorShuffle %475 %474 4 5 2 3 
                                                      OpStore %346 %476 
                                       f32_2 %477 = OpLoad %360 
                              Uniform f32_4* %478 = OpAccessChain %19 %319 
                                       f32_4 %479 = OpLoad %478 
                                       f32_2 %480 = OpVectorShuffle %479 %479 1 1 
                                       f32_2 %481 = OpFMul %477 %480 
                                       f32_4 %482 = OpLoad %346 
                                       f32_4 %483 = OpVectorShuffle %482 %481 0 1 4 5 
                                                      OpStore %346 %483 
                                       f32_4 %484 = OpLoad %351 
                                       f32_4 %485 = OpLoad %442 
                                       f32_4 %486 = OpFMul %484 %485 
                                                      OpStore %351 %486 
                                       f32_4 %487 = OpLoad %316 
                                       f32_4 %488 = OpVectorShuffle %487 %487 0 1 0 1 
                              Uniform f32_4* %489 = OpAccessChain %19 %319 
                                       f32_4 %490 = OpLoad %489 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 0 1 
                                       f32_4 %492 = OpFMul %488 %491 
                                       f32_4 %493 = OpLoad %346 
                                       f32_4 %494 = OpVectorShuffle %493 %493 0 2 1 2 
                                       f32_4 %495 = OpFAdd %492 %494 
                                                      OpStore %375 %495 
                                       f32_4 %498 = OpLoad %375 
                                       f32_2 %499 = OpVectorShuffle %498 %498 0 1 
                                Private f32* %500 = OpAccessChain %82 %22 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpCompositeExtract %499 0 
                                         f32 %503 = OpCompositeExtract %499 1 
                                       f32_3 %504 = OpCompositeConstruct %502 %503 %501 
                                                      OpStore %497 %504 
                  read_only Texture2DSampled %510 = OpLoad %509 
                                       f32_3 %511 = OpLoad %497 
                                         f32 %512 = OpCompositeExtract %511 2 
                                         f32 %513 = OpImageSampleDrefExplicitLod %510 %511 %512 Lod %6 
                                                      OpStore %505 %513 
                                       f32_4 %515 = OpLoad %375 
                                       f32_2 %516 = OpVectorShuffle %515 %515 2 3 
                                Private f32* %517 = OpAccessChain %82 %22 
                                         f32 %518 = OpLoad %517 
                                         f32 %519 = OpCompositeExtract %516 0 
                                         f32 %520 = OpCompositeExtract %516 1 
                                       f32_3 %521 = OpCompositeConstruct %519 %520 %518 
                                                      OpStore %514 %521 
                  read_only Texture2DSampled %523 = OpLoad %509 
                                       f32_3 %524 = OpLoad %514 
                                         f32 %525 = OpCompositeExtract %524 2 
                                         f32 %526 = OpImageSampleDrefExplicitLod %523 %524 %525 Lod %6 
                                Private f32* %527 = OpAccessChain %522 %32 
                                                      OpStore %527 %526 
                                Private f32* %528 = OpAccessChain %522 %32 
                                         f32 %529 = OpLoad %528 
                                Private f32* %530 = OpAccessChain %351 %67 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpFMul %529 %531 
                                Private f32* %533 = OpAccessChain %82 %32 
                                                      OpStore %533 %532 
                                Private f32* %534 = OpAccessChain %351 %32 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpLoad %505 
                                         f32 %537 = OpFMul %535 %536 
                                Private f32* %538 = OpAccessChain %82 %32 
                                         f32 %539 = OpLoad %538 
                                         f32 %540 = OpFAdd %537 %539 
                                                      OpStore %244 %540 
                                       f32_4 %541 = OpLoad %316 
                                       f32_4 %542 = OpVectorShuffle %541 %541 0 1 0 1 
                              Uniform f32_4* %543 = OpAccessChain %19 %319 
                                       f32_4 %544 = OpLoad %543 
                                       f32_4 %545 = OpVectorShuffle %544 %544 0 1 0 1 
                                       f32_4 %546 = OpFMul %542 %545 
                                       f32_4 %547 = OpLoad %346 
                                       f32_4 %548 = OpVectorShuffle %547 %547 0 3 1 3 
                                       f32_4 %549 = OpFAdd %546 %548 
                                                      OpStore %316 %549 
                                       f32_4 %551 = OpLoad %316 
                                       f32_2 %552 = OpVectorShuffle %551 %551 0 1 
                                Private f32* %553 = OpAccessChain %82 %22 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpCompositeExtract %552 0 
                                         f32 %556 = OpCompositeExtract %552 1 
                                       f32_3 %557 = OpCompositeConstruct %555 %556 %554 
                                                      OpStore %550 %557 
                  read_only Texture2DSampled %558 = OpLoad %509 
                                       f32_3 %559 = OpLoad %550 
                                         f32 %560 = OpCompositeExtract %559 2 
                                         f32 %561 = OpImageSampleDrefExplicitLod %558 %559 %560 Lod %6 
                                Private f32* %562 = OpAccessChain %522 %32 
                                                      OpStore %562 %561 
                                Private f32* %563 = OpAccessChain %351 %22 
                                         f32 %564 = OpLoad %563 
                                Private f32* %565 = OpAccessChain %522 %32 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %564 %566 
                                         f32 %568 = OpLoad %244 
                                         f32 %569 = OpFAdd %567 %568 
                                                      OpStore %244 %569 
                                       f32_4 %571 = OpLoad %316 
                                       f32_2 %572 = OpVectorShuffle %571 %571 2 3 
                                Private f32* %573 = OpAccessChain %82 %22 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpCompositeExtract %572 0 
                                         f32 %576 = OpCompositeExtract %572 1 
                                       f32_3 %577 = OpCompositeConstruct %575 %576 %574 
                                                      OpStore %570 %577 
                  read_only Texture2DSampled %578 = OpLoad %509 
                                       f32_3 %579 = OpLoad %570 
                                         f32 %580 = OpCompositeExtract %579 2 
                                         f32 %581 = OpImageSampleDrefExplicitLod %578 %579 %580 Lod %6 
                                Private f32* %582 = OpAccessChain %522 %32 
                                                      OpStore %582 %581 
                                Private f32* %583 = OpAccessChain %351 %153 
                                         f32 %584 = OpLoad %583 
                                Private f32* %585 = OpAccessChain %522 %32 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %584 %586 
                                         f32 %588 = OpLoad %244 
                                         f32 %589 = OpFAdd %587 %588 
                                                      OpStore %244 %589 
                                Uniform f32* %591 = OpAccessChain %19 %270 %32 
                                         f32 %592 = OpLoad %591 
                                         f32 %593 = OpFNegate %592 
                                         f32 %594 = OpFAdd %593 %71 
                                                      OpStore %590 %594 
                                         f32 %595 = OpLoad %244 
                                         f32 %596 = OpLoad %590 
                                         f32 %597 = OpFMul %595 %596 
                                Uniform f32* %598 = OpAccessChain %19 %270 %32 
                                         f32 %599 = OpLoad %598 
                                         f32 %600 = OpFAdd %597 %599 
                                                      OpStore %244 %600 
                                         f32 %602 = OpLoad %244 
                                                      OpStore %601 %602 
                                                      OpBranch %284 
                                             %603 = OpLabel 
                                                      OpStore %601 %71 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                         f32 %605 = OpLoad %177 
                                         f32 %606 = OpLoad %601 
                                         f32 %607 = OpFAdd %605 %606 
                                Private f32* %608 = OpAccessChain %604 %32 
                                                      OpStore %608 %607 
                                Private f32* %609 = OpAccessChain %604 %32 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpExtInst %1 43 %610 %242 %71 
                                Private f32* %612 = OpAccessChain %604 %32 
                                                      OpStore %612 %611 
                                         f32 %613 = OpLoad %173 
                                Private f32* %614 = OpAccessChain %604 %32 
                                         f32 %615 = OpLoad %614 
                                         f32 %616 = OpFMul %613 %615 
                                                      OpStore %173 %616 
                                       f32_4 %617 = OpLoad %41 
                                       f32_2 %618 = OpVectorShuffle %617 %617 0 1 
                              Uniform f32_4* %620 = OpAccessChain %19 %619 
                                       f32_4 %621 = OpLoad %620 
                                       f32_2 %622 = OpVectorShuffle %621 %621 0 1 
                                       f32_2 %623 = OpFMul %618 %622 
                              Uniform f32_4* %624 = OpAccessChain %19 %619 
                                       f32_4 %625 = OpLoad %624 
                                       f32_2 %626 = OpVectorShuffle %625 %625 2 3 
                                       f32_2 %627 = OpFAdd %623 %626 
                                       f32_4 %628 = OpLoad %41 
                                       f32_4 %629 = OpVectorShuffle %628 %627 4 5 2 3 
                                                      OpStore %41 %629 
                  read_only Texture2DSampled %631 = OpLoad %630 
                                       f32_4 %632 = OpLoad %41 
                                       f32_2 %633 = OpVectorShuffle %632 %632 0 1 
                                       f32_4 %634 = OpImageSampleImplicitLod %631 %633 
                                                      OpStore %522 %634 
                                       f32_4 %635 = OpLoad %522 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 1 2 
                                       f32_3 %639 = OpFMul %636 %638 
                                       f32_3 %642 = OpFAdd %639 %641 
                                       f32_4 %643 = OpLoad %604 
                                       f32_4 %644 = OpVectorShuffle %643 %642 4 5 6 3 
                                                      OpStore %604 %644 
                                       f32_4 %646 = OpLoad %604 
                                       f32_3 %647 = OpVectorShuffle %646 %646 0 1 2 
                                       f32_4 %648 = OpLoad %604 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                                         f32 %650 = OpDot %647 %649 
                                                      OpStore %645 %650 
                                         f32 %651 = OpLoad %645 
                                         f32 %652 = OpExtInst %1 32 %651 
                                                      OpStore %645 %652 
                                         f32 %653 = OpLoad %645 
                                       f32_3 %654 = OpCompositeConstruct %653 %653 %653 
                                       f32_4 %655 = OpLoad %604 
                                       f32_3 %656 = OpVectorShuffle %655 %655 0 1 2 
                                       f32_3 %657 = OpFMul %654 %656 
                                       f32_4 %658 = OpLoad %604 
                                       f32_4 %659 = OpVectorShuffle %658 %657 4 5 6 3 
                                                      OpStore %604 %659 
                                       f32_3 %660 = OpLoad %164 
                                       f32_4 %661 = OpLoad %604 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                                         f32 %663 = OpDot %660 %662 
                                Private f32* %664 = OpAccessChain %604 %153 
                                                      OpStore %664 %663 
                                       f32_4 %665 = OpLoad %74 
                                       f32_3 %666 = OpVectorShuffle %665 %665 0 1 3 
                              Uniform f32_3* %668 = OpAccessChain %19 %93 
                                       f32_3 %669 = OpLoad %668 
                                       f32_3 %670 = OpFNegate %669 
                                       f32_3 %671 = OpFAdd %666 %670 
                                       f32_4 %672 = OpLoad %41 
                                       f32_4 %673 = OpVectorShuffle %672 %671 4 5 2 6 
                                                      OpStore %41 %673 
                                       f32_4 %674 = OpLoad %41 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 3 
                                       f32_4 %676 = OpLoad %41 
                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 3 
                                         f32 %678 = OpDot %675 %677 
                                Private f32* %679 = OpAccessChain %82 %32 
                                                      OpStore %679 %678 
                                Private f32* %680 = OpAccessChain %82 %32 
                                         f32 %681 = OpLoad %680 
                                         f32 %682 = OpExtInst %1 32 %681 
                                Private f32* %683 = OpAccessChain %82 %32 
                                                      OpStore %683 %682 
                                       f32_4 %684 = OpLoad %41 
                                       f32_3 %685 = OpVectorShuffle %684 %684 0 1 3 
                                       f32_3 %686 = OpFNegate %685 
                                       f32_4 %687 = OpLoad %82 
                                       f32_3 %688 = OpVectorShuffle %687 %687 0 0 0 
                                       f32_3 %689 = OpFMul %686 %688 
                                       f32_3 %690 = OpLoad %164 
                                       f32_3 %691 = OpFAdd %689 %690 
                                                      OpStore %164 %691 
                                       f32_3 %692 = OpLoad %164 
                                       f32_3 %693 = OpLoad %164 
                                         f32 %694 = OpDot %692 %693 
                                Private f32* %695 = OpAccessChain %41 %32 
                                                      OpStore %695 %694 
                                Private f32* %696 = OpAccessChain %41 %32 
                                         f32 %697 = OpLoad %696 
                                         f32 %698 = OpExtInst %1 32 %697 
                                Private f32* %699 = OpAccessChain %41 %32 
                                                      OpStore %699 %698 
                                       f32_3 %700 = OpLoad %164 
                                       f32_4 %701 = OpLoad %41 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 0 0 
                                       f32_3 %703 = OpFMul %700 %702 
                                                      OpStore %164 %703 
                                       f32_3 %704 = OpLoad %164 
                                       f32_4 %705 = OpLoad %604 
                                       f32_3 %706 = OpVectorShuffle %705 %705 0 1 2 
                                         f32 %707 = OpDot %704 %706 
                                Private f32* %708 = OpAccessChain %604 %32 
                                                      OpStore %708 %707 
                                       f32_4 %709 = OpLoad %604 
                                       f32_2 %710 = OpVectorShuffle %709 %709 0 3 
                                       f32_2 %711 = OpExtInst %1 40 %710 %378 
                                       f32_4 %712 = OpLoad %604 
                                       f32_4 %713 = OpVectorShuffle %712 %711 4 1 2 5 
                                                      OpStore %604 %713 
                                Private f32* %715 = OpAccessChain %522 %153 
                                         f32 %716 = OpLoad %715 
                                         f32 %718 = OpFMul %716 %717 
                                                      OpStore %714 %718 
                                Private f32* %719 = OpAccessChain %604 %32 
                                         f32 %720 = OpLoad %719 
                                         f32 %721 = OpExtInst %1 30 %720 
                                Private f32* %722 = OpAccessChain %604 %32 
                                                      OpStore %722 %721 
                                Private f32* %723 = OpAccessChain %604 %32 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpLoad %714 
                                         f32 %726 = OpFMul %724 %725 
                                Private f32* %727 = OpAccessChain %604 %32 
                                                      OpStore %727 %726 
                                Private f32* %728 = OpAccessChain %604 %32 
                                         f32 %729 = OpLoad %728 
                                         f32 %730 = OpExtInst %1 29 %729 
                                Private f32* %731 = OpAccessChain %604 %32 
                                                      OpStore %731 %730 
                                         f32 %732 = OpLoad %173 
                                Private f32* %733 = OpAccessChain %164 %32 
                                                      OpStore %733 %732 
                                Private f32* %734 = OpAccessChain %164 %32 
                                         f32 %735 = OpLoad %734 
                                         f32 %736 = OpExtInst %1 43 %735 %242 %71 
                                Private f32* %737 = OpAccessChain %164 %32 
                                                      OpStore %737 %736 
                                Private f32* %738 = OpAccessChain %164 %32 
                                         f32 %739 = OpLoad %738 
                                Private f32* %740 = OpAccessChain %604 %32 
                                         f32 %741 = OpLoad %740 
                                         f32 %742 = OpFMul %739 %741 
                                Private f32* %743 = OpAccessChain %164 %32 
                                                      OpStore %743 %742 
                                         f32 %745 = OpLoad %173 
                                Private f32* %746 = OpAccessChain %604 %153 
                                         f32 %747 = OpLoad %746 
                                         f32 %748 = OpFMul %745 %747 
                                                      OpStore %744 %748 
                                         f32 %749 = OpLoad %744 
                                       f32_3 %750 = OpCompositeConstruct %749 %749 %749 
                              Uniform f32_4* %752 = OpAccessChain %19 %751 
                                       f32_4 %753 = OpLoad %752 
                                       f32_3 %754 = OpVectorShuffle %753 %753 0 1 2 
                                       f32_3 %755 = OpFMul %750 %754 
                                       f32_4 %756 = OpLoad %41 
                                       f32_4 %757 = OpVectorShuffle %756 %755 4 5 6 3 
                                                      OpStore %41 %757 
                              Uniform f32_4* %758 = OpAccessChain %19 %751 
                                       f32_4 %759 = OpLoad %758 
                                       f32_3 %760 = OpVectorShuffle %759 %759 0 1 2 
                                         f32 %765 = OpDot %760 %764 
                                Private f32* %766 = OpAccessChain %604 %32 
                                                      OpStore %766 %765 
                                Private f32* %767 = OpAccessChain %164 %32 
                                         f32 %768 = OpLoad %767 
                                Private f32* %769 = OpAccessChain %604 %32 
                                         f32 %770 = OpLoad %769 
                                         f32 %771 = OpFMul %768 %770 
                                Private f32* %772 = OpAccessChain %41 %153 
                                                      OpStore %772 %771 
                                Private f32* %773 = OpAccessChain %9 %32 
                                         f32 %774 = OpLoad %773 
                                Uniform f32* %776 = OpAccessChain %19 %775 %22 
                                         f32 %777 = OpLoad %776 
                                         f32 %778 = OpFMul %774 %777 
                                Uniform f32* %779 = OpAccessChain %19 %775 %153 
                                         f32 %780 = OpLoad %779 
                                         f32 %781 = OpFAdd %778 %780 
                                Private f32* %782 = OpAccessChain %9 %32 
                                                      OpStore %782 %781 
                                Private f32* %783 = OpAccessChain %9 %32 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpFNegate %784 
                                         f32 %786 = OpFAdd %785 %71 
                                Private f32* %787 = OpAccessChain %9 %32 
                                                      OpStore %787 %786 
                                Private f32* %788 = OpAccessChain %9 %32 
                                         f32 %789 = OpLoad %788 
                                         f32 %790 = OpExtInst %1 43 %789 %242 %71 
                                Private f32* %791 = OpAccessChain %9 %32 
                                                      OpStore %791 %790 
                                       f32_4 %792 = OpLoad %9 
                                       f32_4 %793 = OpVectorShuffle %792 %792 0 0 0 0 
                                       f32_4 %794 = OpLoad %41 
                                       f32_4 %795 = OpFMul %793 %794 
                                                      OpStore %9 %795 
                                       f32_4 %798 = OpLoad %9 
                                       f32_4 %799 = OpFNegate %798 
                                       f32_4 %800 = OpExtInst %1 29 %799 
                                                      OpStore %797 %800 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat16_6;
float u_xlat8;
vec2 u_xlat9;
float u_xlat12;
float u_xlat16_13;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat12 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat4.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = (-u_xlat3.xyz) * u_xlat4.xxx + (-_LightDir.xyz);
    u_xlat9.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat9.xxx;
    u_xlat9.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat10_1 = texture(_CameraNormalsTexture, u_xlat9.xy);
    u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = u_xlat10_1.w * 128.0;
    u_xlat16_6 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_6);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat16_1.xyz);
    u_xlat4.y = dot((-_LightDir.xyz), u_xlat16_1.xyz);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat16_13;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat12 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12 = u_xlat12 + u_xlat10_2.x;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat4.xy = vec2(u_xlat12) * u_xlat4.xy;
    u_xlat1.xyz = u_xlat4.yyy * _LightColor.xyz;
    u_xlat8 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.w = u_xlat8 * u_xlat4.x;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 352
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %347 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 RelaxedPrecision 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %40 Location 40 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %211 DescriptorSet 211 
                                                      OpDecorate %211 Binding 211 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %218 DescriptorSet 218 
                                                      OpDecorate %218 Binding 218 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %347 Location 347 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                                 Input f32_4* %40 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %59 = OpConstant 2 
                                          u32 %64 = OpConstant 1 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                              %79 = OpTypePointer Private %10 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 3 
                                              %84 = OpTypePointer Uniform %7 
                                          i32 %89 = OpConstant 0 
                                             %121 = OpTypePointer Uniform %10 
                                         i32 %128 = OpConstant 5 
                                         u32 %155 = OpConstant 3 
                              Private f32_3* %165 = OpVariable Private 
                                         i32 %179 = OpConstant 6 
                                             %185 = OpTypePointer Private %41 
                              Private f32_2* %186 = OpVariable Private 
                                         i32 %201 = OpConstant 9 
                                Private f32* %210 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %211 = OpVariable UniformConstant 
                              Private f32_4* %217 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %218 = OpVariable UniformConstant 
                              Private f32_3* %222 = OpVariable Private 
                                         f32 %225 = OpConstant 3.674022E-40 
                                       f32_3 %226 = OpConstantComposite %225 %225 %225 
                                         f32 %228 = OpConstant 3.674022E-40 
                                       f32_3 %229 = OpConstantComposite %228 %228 %228 
                                Private f32* %231 = OpVariable Private 
                                         f32 %234 = OpConstant 3.674022E-40 
                                Private f32* %236 = OpVariable Private 
                                         f32 %258 = OpConstant 3.674022E-40 
                                Private f32* %261 = OpVariable Private 
                                         i32 %274 = OpConstant 4 
                                         i32 %288 = OpConstant 8 
                                Private f32* %305 = OpVariable Private 
                              Private f32_2* %312 = OpVariable Private 
                                         i32 %320 = OpConstant 7 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         f32 %331 = OpConstant 3.674022E-40 
                                         f32 %332 = OpConstant 3.674022E-40 
                                       f32_3 %333 = OpConstantComposite %330 %331 %332 
                                             %346 = OpTypePointer Output %7 
                               Output f32_4* %347 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %42 = OpLoad %40 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad %40 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %38 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_4 %57 = OpImageSampleImplicitLod %54 %56 
                                          f32 %58 = OpCompositeExtract %57 0 
                                                      OpStore %49 %58 
                                 Uniform f32* %60 = OpAccessChain %16 %59 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpLoad %49 
                                          f32 %63 = OpFMul %61 %62 
                                 Uniform f32* %65 = OpAccessChain %16 %59 %64 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %63 %66 
                                                      OpStore %49 %67 
                                          f32 %69 = OpLoad %49 
                                          f32 %70 = OpFDiv %68 %69 
                                                      OpStore %49 %70 
                                          f32 %72 = OpLoad %49 
                                        f32_3 %73 = OpCompositeConstruct %72 %72 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %71 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %71 %78 
                                        f32_4 %81 = OpLoad %71 
                                        f32_3 %82 = OpVectorShuffle %81 %81 1 1 1 
                               Uniform f32_4* %85 = OpAccessChain %16 %83 %18 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %82 %87 
                                                      OpStore %80 %88 
                               Uniform f32_4* %90 = OpAccessChain %16 %83 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %71 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 0 0 
                                        f32_3 %95 = OpFMul %92 %94 
                                        f32_3 %96 = OpLoad %80 
                                        f32_3 %97 = OpFAdd %95 %96 
                                        f32_4 %98 = OpLoad %71 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 2 6 
                                                      OpStore %71 %99 
                              Uniform f32_4* %100 = OpAccessChain %16 %83 %59 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_4 %103 = OpLoad %71 
                                       f32_3 %104 = OpVectorShuffle %103 %103 2 2 2 
                                       f32_3 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %71 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 3 
                                       f32_3 %108 = OpFAdd %105 %107 
                                       f32_4 %109 = OpLoad %71 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 6 
                                                      OpStore %71 %110 
                                       f32_4 %111 = OpLoad %71 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                              Uniform f32_4* %113 = OpAccessChain %16 %83 %83 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFAdd %112 %115 
                                       f32_4 %117 = OpLoad %71 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %71 %118 
                                       f32_4 %119 = OpLoad %71 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_3* %122 = OpAccessChain %16 %89 
                                       f32_3 %123 = OpLoad %122 
                                       f32_3 %124 = OpFNegate %123 
                                       f32_3 %125 = OpFAdd %120 %124 
                                                      OpStore %80 %125 
                                       f32_4 %126 = OpLoad %71 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                              Uniform f32_4* %129 = OpAccessChain %16 %128 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFNegate %131 
                                       f32_3 %133 = OpFAdd %127 %132 
                                       f32_4 %134 = OpLoad %71 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 2 6 
                                                      OpStore %71 %135 
                                       f32_4 %136 = OpLoad %71 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 3 
                                       f32_4 %138 = OpLoad %71 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                                         f32 %140 = OpDot %137 %139 
                                Private f32* %141 = OpAccessChain %9 %29 
                                                      OpStore %141 %140 
                                Private f32* %142 = OpAccessChain %9 %29 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpExtInst %1 31 %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %9 %19 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFNegate %147 
                                         f32 %149 = OpLoad %49 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %9 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFAdd %150 %152 
                                Private f32* %154 = OpAccessChain %9 %29 
                                                      OpStore %154 %153 
                                Uniform f32* %156 = OpAccessChain %16 %128 %155 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %9 %29 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                Private f32* %161 = OpAccessChain %71 %19 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFAdd %160 %162 
                                Private f32* %164 = OpAccessChain %9 %29 
                                                      OpStore %164 %163 
                                       f32_3 %166 = OpLoad %80 
                                       f32_3 %167 = OpLoad %80 
                                         f32 %168 = OpDot %166 %167 
                                Private f32* %169 = OpAccessChain %165 %29 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %165 %29 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpExtInst %1 32 %171 
                                Private f32* %173 = OpAccessChain %165 %29 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %80 
                                       f32_3 %175 = OpFNegate %174 
                                       f32_3 %176 = OpLoad %165 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 0 0 
                                       f32_3 %178 = OpFMul %175 %177 
                              Uniform f32_4* %180 = OpAccessChain %16 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFNegate %182 
                                       f32_3 %184 = OpFAdd %178 %183 
                                                      OpStore %165 %184 
                                       f32_3 %187 = OpLoad %165 
                                       f32_3 %188 = OpLoad %165 
                                         f32 %189 = OpDot %187 %188 
                                Private f32* %190 = OpAccessChain %186 %29 
                                                      OpStore %190 %189 
                                Private f32* %191 = OpAccessChain %186 %29 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpExtInst %1 32 %192 
                                Private f32* %194 = OpAccessChain %186 %29 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %165 
                                       f32_2 %196 = OpLoad %186 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 0 0 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %165 %198 
                                       f32_4 %199 = OpLoad %38 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                              Uniform f32_4* %202 = OpAccessChain %16 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_2 %204 = OpVectorShuffle %203 %203 0 1 
                                       f32_2 %205 = OpFMul %200 %204 
                              Uniform f32_4* %206 = OpAccessChain %16 %201 
                                       f32_4 %207 = OpLoad %206 
                                       f32_2 %208 = OpVectorShuffle %207 %207 2 3 
                                       f32_2 %209 = OpFAdd %205 %208 
                                                      OpStore %186 %209 
                  read_only Texture2DSampled %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %38 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_4 %215 = OpImageSampleImplicitLod %212 %214 
                                         f32 %216 = OpCompositeExtract %215 0 
                                                      OpStore %210 %216 
                  read_only Texture2DSampled %219 = OpLoad %218 
                                       f32_2 %220 = OpLoad %186 
                                       f32_4 %221 = OpImageSampleImplicitLod %219 %220 
                                                      OpStore %217 %221 
                                       f32_4 %223 = OpLoad %217 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_3 %230 = OpFAdd %227 %229 
                                                      OpStore %222 %230 
                                Private f32* %232 = OpAccessChain %217 %155 
                                         f32 %233 = OpLoad %232 
                                         f32 %235 = OpFMul %233 %234 
                                                      OpStore %231 %235 
                                       f32_3 %237 = OpLoad %222 
                                       f32_3 %238 = OpLoad %222 
                                         f32 %239 = OpDot %237 %238 
                                                      OpStore %236 %239 
                                         f32 %240 = OpLoad %236 
                                         f32 %241 = OpExtInst %1 32 %240 
                                                      OpStore %236 %241 
                                       f32_3 %242 = OpLoad %222 
                                         f32 %243 = OpLoad %236 
                                       f32_3 %244 = OpCompositeConstruct %243 %243 %243 
                                       f32_3 %245 = OpFMul %242 %244 
                                                      OpStore %222 %245 
                                       f32_3 %246 = OpLoad %165 
                                       f32_3 %247 = OpLoad %222 
                                         f32 %248 = OpDot %246 %247 
                                                      OpStore %236 %248 
                              Uniform f32_4* %249 = OpAccessChain %16 %179 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFNegate %251 
                                       f32_3 %253 = OpLoad %222 
                                         f32 %254 = OpDot %252 %253 
                                Private f32* %255 = OpAccessChain %222 %29 
                                                      OpStore %255 %254 
                                Private f32* %256 = OpAccessChain %222 %29 
                                         f32 %257 = OpLoad %256 
                                         f32 %259 = OpExtInst %1 40 %257 %258 
                                Private f32* %260 = OpAccessChain %222 %29 
                                                      OpStore %260 %259 
                                         f32 %262 = OpLoad %236 
                                         f32 %263 = OpExtInst %1 40 %262 %258 
                                                      OpStore %261 %263 
                                         f32 %264 = OpLoad %261 
                                         f32 %265 = OpExtInst %1 30 %264 
                                                      OpStore %261 %265 
                                         f32 %266 = OpLoad %261 
                                         f32 %267 = OpLoad %231 
                                         f32 %268 = OpFMul %266 %267 
                                                      OpStore %261 %268 
                                         f32 %269 = OpLoad %261 
                                         f32 %270 = OpExtInst %1 29 %269 
                                Private f32* %271 = OpAccessChain %222 %64 
                                                      OpStore %271 %270 
                                Private f32* %272 = OpAccessChain %9 %29 
                                         f32 %273 = OpLoad %272 
                                Uniform f32* %275 = OpAccessChain %16 %274 %19 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFMul %273 %276 
                                Uniform f32* %278 = OpAccessChain %16 %274 %155 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFAdd %277 %279 
                                Private f32* %281 = OpAccessChain %165 %29 
                                                      OpStore %281 %280 
                                Private f32* %282 = OpAccessChain %165 %29 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpExtInst %1 43 %283 %258 %68 
                                Private f32* %285 = OpAccessChain %165 %29 
                                                      OpStore %285 %284 
                                Private f32* %286 = OpAccessChain %9 %29 
                                         f32 %287 = OpLoad %286 
                                Uniform f32* %289 = OpAccessChain %16 %288 %19 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %287 %290 
                                Uniform f32* %292 = OpAccessChain %16 %288 %155 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %9 %29 
                                                      OpStore %295 %294 
                                Private f32* %296 = OpAccessChain %9 %29 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFAdd %298 %68 
                                Private f32* %300 = OpAccessChain %9 %29 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %9 %29 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 43 %302 %258 %68 
                                Private f32* %304 = OpAccessChain %9 %29 
                                                      OpStore %304 %303 
                                Private f32* %306 = OpAccessChain %165 %29 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpLoad %210 
                                         f32 %309 = OpFAdd %307 %308 
                                                      OpStore %305 %309 
                                         f32 %310 = OpLoad %305 
                                         f32 %311 = OpExtInst %1 43 %310 %258 %68 
                                                      OpStore %305 %311 
                                         f32 %313 = OpLoad %305 
                                       f32_2 %314 = OpCompositeConstruct %313 %313 
                                       f32_3 %315 = OpLoad %222 
                                       f32_2 %316 = OpVectorShuffle %315 %315 1 0 
                                       f32_2 %317 = OpFMul %314 %316 
                                                      OpStore %312 %317 
                                       f32_2 %318 = OpLoad %312 
                                       f32_3 %319 = OpVectorShuffle %318 %318 1 1 1 
                              Uniform f32_4* %321 = OpAccessChain %16 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpFMul %319 %323 
                                       f32_4 %325 = OpLoad %38 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %38 %326 
                              Uniform f32_4* %327 = OpAccessChain %16 %320 
                                       f32_4 %328 = OpLoad %327 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                         f32 %334 = OpDot %329 %333 
                                Private f32* %335 = OpAccessChain %222 %29 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %312 %29 
                                         f32 %337 = OpLoad %336 
                                Private f32* %338 = OpAccessChain %222 %29 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %337 %339 
                                Private f32* %341 = OpAccessChain %38 %155 
                                                      OpStore %341 %340 
                                       f32_4 %342 = OpLoad %9 
                                       f32_4 %343 = OpVectorShuffle %342 %342 0 0 0 0 
                                       f32_4 %344 = OpLoad %38 
                                       f32_4 %345 = OpFMul %343 %344 
                                                      OpStore %9 %345 
                                       f32_4 %348 = OpLoad %9 
                                       f32_4 %349 = OpFNegate %348 
                                       f32_4 %350 = OpExtInst %1 29 %349 
                                                      OpStore %347 %350 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
float u_xlat4;
vec2 u_xlat8;
float u_xlat12;
float u_xlat16_12;
float u_xlat13;
float u_xlat16_13;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat12 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat4 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat8.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_1 = texture(_CameraNormalsTexture, u_xlat8.xy);
    u_xlat4 = u_xlat4 + u_xlat10_3.x;
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat10_3 = texture(_LightTexture0, u_xlat8.xy, -8.0);
    u_xlat4 = u_xlat4 * u_xlat10_3.w;
    u_xlat8.x = u_xlat4;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat12) + (-_LightDir.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_12 = u_xlat10_1.w * 128.0;
    u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_13 = inversesqrt(u_xlat16_13);
    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat16_1.xyz);
    u_xlat1.x = dot((-_LightDir.xyz), u_xlat16_1.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat4 = u_xlat4 * u_xlat1.x;
    u_xlat2.xyz = vec3(u_xlat4) * _LightColor.xyz;
    u_xlat4 = max(u_xlat13, 0.0);
    u_xlat4 = log2(u_xlat4);
    u_xlat4 = u_xlat4 * u_xlat16_12;
    u_xlat4 = exp2(u_xlat4);
    u_xlat4 = u_xlat8.x * u_xlat4;
    u_xlat8.x = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat8.x * u_xlat4;
    u_xlat0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 416
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %411 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 DescriptorSet 192 
                                                      OpDecorate %192 Binding 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 DescriptorSet 212 
                                                      OpDecorate %212 Binding 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %264 DescriptorSet 264 
                                                      OpDecorate %264 Binding 264 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 Location 411 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %14 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                                 Input f32_4* %41 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypeSampledImage %51 
                                              %53 = OpTypePointer UniformConstant %52 
  UniformConstant read_only Texture2DSampled* %54 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                          u32 %65 = OpConstant 1 
                                          f32 %69 = OpConstant 3.674022E-40 
                               Private f32_4* %72 = OpVariable Private 
                                              %80 = OpTypePointer Private %10 
                               Private f32_3* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                                              %85 = OpTypePointer Uniform %7 
                                          i32 %90 = OpConstant 0 
                                         i32 %122 = OpConstant 5 
                                         u32 %145 = OpConstant 3 
                                             %155 = OpTypePointer Private %42 
                              Private f32_2* %156 = OpVariable Private 
                                         i32 %159 = OpConstant 4 
                                         f32 %169 = OpConstant 3.674022E-40 
                                         i32 %174 = OpConstant 8 
                                Private f32* %191 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %192 = OpVariable UniformConstant 
                                         i32 %200 = OpConstant 10 
                              Private f32_4* %211 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %212 = OpVariable UniformConstant 
                              Private f32_3* %217 = OpVariable Private 
                                         i32 %229 = OpConstant 9 
                                             %252 = OpTypePointer Uniform %10 
 UniformConstant read_only Texture2DSampled* %264 = OpVariable UniformConstant 
                                         f32 %267 = OpConstant 3.674022E-40 
                                Private f32* %277 = OpVariable Private 
                                         i32 %295 = OpConstant 6 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_3 %320 = OpConstantComposite %319 %319 %319 
                                         f32 %322 = OpConstant 3.674022E-40 
                                       f32_3 %323 = OpConstantComposite %322 %322 %322 
                                Private f32* %325 = OpVariable Private 
                                         f32 %328 = OpConstant 3.674022E-40 
                                Private f32* %330 = OpVariable Private 
                                         i32 %363 = OpConstant 7 
                                         f32 %394 = OpConstant 3.674022E-40 
                                         f32 %395 = OpConstant 3.674022E-40 
                                         f32 %396 = OpConstant 3.674022E-40 
                                       f32_3 %397 = OpConstantComposite %394 %395 %396 
                                             %410 = OpTypePointer Output %7 
                               Output f32_4* %411 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad %41 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %41 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 2 3 
                                                      OpStore %39 %49 
                   read_only Texture2DSampled %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %39 
                                        f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                                        f32_4 %58 = OpImageSampleImplicitLod %55 %57 
                                          f32 %59 = OpCompositeExtract %58 0 
                                                      OpStore %50 %59 
                                 Uniform f32* %61 = OpAccessChain %17 %60 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpLoad %50 
                                          f32 %64 = OpFMul %62 %63 
                                 Uniform f32* %66 = OpAccessChain %17 %60 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFAdd %64 %67 
                                                      OpStore %50 %68 
                                          f32 %70 = OpLoad %50 
                                          f32 %71 = OpFDiv %69 %70 
                                                      OpStore %50 %71 
                                          f32 %73 = OpLoad %50 
                                        f32_3 %74 = OpCompositeConstruct %73 %73 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %72 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %72 %79 
                                        f32_4 %82 = OpLoad %72 
                                        f32_3 %83 = OpVectorShuffle %82 %82 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %17 %84 %19 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %83 %88 
                                                      OpStore %81 %89 
                               Uniform f32_4* %91 = OpAccessChain %17 %84 %90 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %72 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_3 %97 = OpLoad %81 
                                        f32_3 %98 = OpFAdd %96 %97 
                                        f32_4 %99 = OpLoad %72 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 2 6 
                                                      OpStore %72 %100 
                              Uniform f32_4* %101 = OpAccessChain %17 %84 %60 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %72 
                                       f32_3 %105 = OpVectorShuffle %104 %104 2 2 2 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 3 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %72 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 6 
                                                      OpStore %72 %111 
                                       f32_4 %112 = OpLoad %72 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                              Uniform f32_4* %114 = OpAccessChain %17 %84 %84 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %72 %119 
                                       f32_4 %120 = OpLoad %72 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 3 
                              Uniform f32_4* %123 = OpAccessChain %17 %122 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFNegate %125 
                                       f32_3 %127 = OpFAdd %121 %126 
                                                      OpStore %81 %127 
                                       f32_3 %128 = OpLoad %81 
                                       f32_3 %129 = OpLoad %81 
                                         f32 %130 = OpDot %128 %129 
                                Private f32* %131 = OpAccessChain %9 %30 
                                                      OpStore %131 %130 
                                Private f32* %132 = OpAccessChain %9 %30 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpExtInst %1 31 %133 
                                Private f32* %135 = OpAccessChain %9 %30 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %20 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFNegate %137 
                                         f32 %139 = OpLoad %50 
                                         f32 %140 = OpFMul %138 %139 
                                Private f32* %141 = OpAccessChain %9 %30 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFAdd %140 %142 
                                Private f32* %144 = OpAccessChain %9 %30 
                                                      OpStore %144 %143 
                                Uniform f32* %146 = OpAccessChain %17 %122 %145 
                                         f32 %147 = OpLoad %146 
                                Private f32* %148 = OpAccessChain %9 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFMul %147 %149 
                                Private f32* %151 = OpAccessChain %72 %20 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFAdd %150 %152 
                                Private f32* %154 = OpAccessChain %9 %30 
                                                      OpStore %154 %153 
                                Private f32* %157 = OpAccessChain %9 %30 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %17 %159 %20 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %158 %161 
                                Uniform f32* %163 = OpAccessChain %17 %159 %145 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %156 %30 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %156 %30 
                                         f32 %168 = OpLoad %167 
                                         f32 %170 = OpExtInst %1 43 %168 %169 %69 
                                Private f32* %171 = OpAccessChain %156 %30 
                                                      OpStore %171 %170 
                                Private f32* %172 = OpAccessChain %9 %30 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %17 %174 %20 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFMul %173 %176 
                                Uniform f32* %178 = OpAccessChain %17 %174 %145 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFAdd %177 %179 
                                Private f32* %181 = OpAccessChain %9 %30 
                                                      OpStore %181 %180 
                                Private f32* %182 = OpAccessChain %9 %30 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFNegate %183 
                                         f32 %185 = OpFAdd %184 %69 
                                Private f32* %186 = OpAccessChain %9 %30 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %9 %30 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 43 %188 %169 %69 
                                Private f32* %190 = OpAccessChain %9 %30 
                                                      OpStore %190 %189 
                  read_only Texture2DSampled %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %39 
                                       f32_2 %195 = OpVectorShuffle %194 %194 0 1 
                                       f32_4 %196 = OpImageSampleImplicitLod %193 %195 
                                         f32 %197 = OpCompositeExtract %196 0 
                                                      OpStore %191 %197 
                                       f32_4 %198 = OpLoad %39 
                                       f32_2 %199 = OpVectorShuffle %198 %198 0 1 
                              Uniform f32_4* %201 = OpAccessChain %17 %200 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_2 %204 = OpFMul %199 %203 
                              Uniform f32_4* %205 = OpAccessChain %17 %200 
                                       f32_4 %206 = OpLoad %205 
                                       f32_2 %207 = OpVectorShuffle %206 %206 2 3 
                                       f32_2 %208 = OpFAdd %204 %207 
                                       f32_4 %209 = OpLoad %39 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 2 3 
                                                      OpStore %39 %210 
                  read_only Texture2DSampled %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %39 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_4 %216 = OpImageSampleImplicitLod %213 %215 
                                                      OpStore %211 %216 
                                Private f32* %218 = OpAccessChain %156 %30 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpLoad %191 
                                         f32 %221 = OpFAdd %219 %220 
                                Private f32* %222 = OpAccessChain %217 %30 
                                                      OpStore %222 %221 
                                Private f32* %223 = OpAccessChain %217 %30 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpExtInst %1 43 %224 %169 %69 
                                Private f32* %226 = OpAccessChain %217 %30 
                                                      OpStore %226 %225 
                                       f32_4 %227 = OpLoad %72 
                                       f32_2 %228 = OpVectorShuffle %227 %227 1 1 
                              Uniform f32_4* %230 = OpAccessChain %17 %229 %19 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFMul %228 %232 
                                                      OpStore %156 %233 
                              Uniform f32_4* %234 = OpAccessChain %17 %229 %90 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_4 %237 = OpLoad %72 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 0 
                                       f32_2 %239 = OpFMul %236 %238 
                                       f32_2 %240 = OpLoad %156 
                                       f32_2 %241 = OpFAdd %239 %240 
                                                      OpStore %156 %241 
                              Uniform f32_4* %242 = OpAccessChain %17 %229 %60 
                                       f32_4 %243 = OpLoad %242 
                                       f32_2 %244 = OpVectorShuffle %243 %243 0 1 
                                       f32_4 %245 = OpLoad %72 
                                       f32_2 %246 = OpVectorShuffle %245 %245 3 3 
                                       f32_2 %247 = OpFMul %244 %246 
                                       f32_2 %248 = OpLoad %156 
                                       f32_2 %249 = OpFAdd %247 %248 
                                                      OpStore %156 %249 
                                       f32_4 %250 = OpLoad %72 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 3 
                              Uniform f32_3* %253 = OpAccessChain %17 %90 
                                       f32_3 %254 = OpLoad %253 
                                       f32_3 %255 = OpFNegate %254 
                                       f32_3 %256 = OpFAdd %251 %255 
                                       f32_4 %257 = OpLoad %72 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %72 %258 
                                       f32_2 %259 = OpLoad %156 
                              Uniform f32_4* %260 = OpAccessChain %17 %229 %84 
                                       f32_4 %261 = OpLoad %260 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_2 %263 = OpFAdd %259 %262 
                                                      OpStore %156 %263 
                  read_only Texture2DSampled %265 = OpLoad %264 
                                       f32_2 %266 = OpLoad %156 
                                       f32_4 %268 = OpImageSampleImplicitLod %265 %266 Bias %7 
                                         f32 %269 = OpCompositeExtract %268 3 
                                Private f32* %270 = OpAccessChain %156 %30 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %156 %30 
                                         f32 %272 = OpLoad %271 
                                Private f32* %273 = OpAccessChain %217 %30 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                Private f32* %276 = OpAccessChain %156 %30 
                                                      OpStore %276 %275 
                                Private f32* %278 = OpAccessChain %156 %30 
                                         f32 %279 = OpLoad %278 
                                                      OpStore %277 %279 
                                         f32 %280 = OpLoad %277 
                                         f32 %281 = OpExtInst %1 43 %280 %169 %69 
                                                      OpStore %277 %281 
                                       f32_4 %282 = OpLoad %72 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_4 %284 = OpLoad %72 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %50 %286 
                                         f32 %287 = OpLoad %50 
                                         f32 %288 = OpExtInst %1 32 %287 
                                                      OpStore %50 %288 
                                       f32_4 %289 = OpLoad %72 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFNegate %290 
                                         f32 %292 = OpLoad %50 
                                       f32_3 %293 = OpCompositeConstruct %292 %292 %292 
                                       f32_3 %294 = OpFMul %291 %293 
                              Uniform f32_4* %296 = OpAccessChain %17 %295 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFNegate %298 
                                       f32_3 %300 = OpFAdd %294 %299 
                                       f32_4 %301 = OpLoad %72 
                                       f32_4 %302 = OpVectorShuffle %301 %300 4 5 6 3 
                                                      OpStore %72 %302 
                                       f32_4 %303 = OpLoad %72 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_4 %305 = OpLoad %72 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                         f32 %307 = OpDot %304 %306 
                                                      OpStore %50 %307 
                                         f32 %308 = OpLoad %50 
                                         f32 %309 = OpExtInst %1 32 %308 
                                                      OpStore %50 %309 
                                         f32 %310 = OpLoad %50 
                                       f32_3 %311 = OpCompositeConstruct %310 %310 %310 
                                       f32_4 %312 = OpLoad %72 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_4 %315 = OpLoad %72 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %72 %316 
                                       f32_4 %317 = OpLoad %211 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_3 %321 = OpFMul %318 %320 
                                       f32_3 %324 = OpFAdd %321 %323 
                                                      OpStore %217 %324 
                                Private f32* %326 = OpAccessChain %211 %145 
                                         f32 %327 = OpLoad %326 
                                         f32 %329 = OpFMul %327 %328 
                                                      OpStore %325 %329 
                                       f32_3 %331 = OpLoad %217 
                                       f32_3 %332 = OpLoad %217 
                                         f32 %333 = OpDot %331 %332 
                                                      OpStore %330 %333 
                                         f32 %334 = OpLoad %330 
                                         f32 %335 = OpExtInst %1 32 %334 
                                                      OpStore %330 %335 
                                       f32_3 %336 = OpLoad %217 
                                         f32 %337 = OpLoad %330 
                                       f32_3 %338 = OpCompositeConstruct %337 %337 %337 
                                       f32_3 %339 = OpFMul %336 %338 
                                                      OpStore %217 %339 
                                       f32_4 %340 = OpLoad %72 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpLoad %217 
                                         f32 %343 = OpDot %341 %342 
                                                      OpStore %330 %343 
                              Uniform f32_4* %344 = OpAccessChain %17 %295 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_3 %347 = OpFNegate %346 
                                       f32_3 %348 = OpLoad %217 
                                         f32 %349 = OpDot %347 %348 
                                Private f32* %350 = OpAccessChain %217 %30 
                                                      OpStore %350 %349 
                                Private f32* %351 = OpAccessChain %217 %30 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpExtInst %1 40 %352 %169 
                                Private f32* %354 = OpAccessChain %217 %30 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %156 %30 
                                         f32 %356 = OpLoad %355 
                                Private f32* %357 = OpAccessChain %217 %30 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFMul %356 %358 
                                Private f32* %360 = OpAccessChain %156 %30 
                                                      OpStore %360 %359 
                                       f32_2 %361 = OpLoad %156 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 0 0 
                              Uniform f32_4* %364 = OpAccessChain %17 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFMul %362 %366 
                                       f32_4 %368 = OpLoad %39 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                                      OpStore %39 %369 
                                         f32 %370 = OpLoad %330 
                                         f32 %371 = OpExtInst %1 40 %370 %169 
                                Private f32* %372 = OpAccessChain %217 %30 
                                                      OpStore %372 %371 
                                Private f32* %373 = OpAccessChain %217 %30 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpExtInst %1 30 %374 
                                Private f32* %376 = OpAccessChain %217 %30 
                                                      OpStore %376 %375 
                                Private f32* %377 = OpAccessChain %217 %30 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpLoad %325 
                                         f32 %380 = OpFMul %378 %379 
                                Private f32* %381 = OpAccessChain %217 %30 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %217 %30 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpExtInst %1 29 %383 
                                Private f32* %385 = OpAccessChain %217 %30 
                                                      OpStore %385 %384 
                                         f32 %386 = OpLoad %277 
                                Private f32* %387 = OpAccessChain %217 %30 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %386 %388 
                                Private f32* %390 = OpAccessChain %156 %30 
                                                      OpStore %390 %389 
                              Uniform f32_4* %391 = OpAccessChain %17 %363 
                                       f32_4 %392 = OpLoad %391 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                         f32 %398 = OpDot %393 %397 
                                Private f32* %399 = OpAccessChain %217 %30 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %156 %30 
                                         f32 %401 = OpLoad %400 
                                Private f32* %402 = OpAccessChain %217 %30 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %39 %145 
                                                      OpStore %405 %404 
                                       f32_4 %406 = OpLoad %9 
                                       f32_4 %407 = OpVectorShuffle %406 %406 0 0 0 0 
                                       f32_4 %408 = OpLoad %39 
                                       f32_4 %409 = OpFMul %407 %408 
                                                      OpStore %9 %409 
                                       f32_4 %412 = OpLoad %9 
                                       f32_4 %413 = OpFNegate %412 
                                       f32_4 %414 = OpExtInst %1 29 %413 
                                                      OpStore %411 %414 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat10_4;
float u_xlat5;
vec3 u_xlat6;
float u_xlat11;
float u_xlat16_15;
float u_xlat16;
float u_xlat16_16;
bool u_xlatb16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat1 = (-u_xlat6.z) * u_xlat1 + u_xlat6.x;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat6.x = u_xlat1 * _LightShadowData.z + _LightShadowData.w;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat3.xyz);
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16 = sqrt(u_xlat11);
    u_xlat16 = u_xlat16 * _LightPositionRange.w;
    u_xlat16 = u_xlat16 * _LightProjectionParams.w;
    u_xlatb16 = u_xlat10_4.x<u_xlat16;
    u_xlat16 = (u_xlatb16) ? _LightShadowData.x : 1.0;
    u_xlat6.x = u_xlat6.x + u_xlat16;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat16 = u_xlat11 * _LightPos.w;
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat6.x = u_xlat6.x * u_xlat10_4.w;
    u_xlat11 = u_xlat6.x;
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16) + (-u_xlat3.xyz);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_15 = u_xlat10_0.w * 128.0;
    u_xlat16_16 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_16);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat16, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat11 * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat5 * u_xlat0.x;
    u_xlat0 = vec4(u_xlat1) * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 435
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %83 %430 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 RelaxedPrecision 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpMemberDecorate %38 9 Offset 38 
                                                      OpMemberDecorate %38 10 Offset 38 
                                                      OpMemberDecorate %38 11 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %228 DescriptorSet 228 
                                                      OpDecorate %228 Binding 228 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %288 DescriptorSet 288 
                                                      OpDecorate %288 Binding 288 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %430 Location 430 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 11 
                                              %43 = OpTypePointer Uniform %7 
                               Private f32_4* %54 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %55 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                              %61 = OpTypePointer Uniform %6 
                                          u32 %66 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Private %35 
                               Private f32_3* %77 = OpVariable Private 
                                          i32 %78 = OpConstant 1 
                                          u32 %79 = OpConstant 2 
                                              %82 = OpTypePointer Input %35 
                                 Input f32_3* %83 = OpVariable Input 
                                              %84 = OpTypePointer Input %6 
                               Private f32_4* %93 = OpVariable Private 
                              Private f32_3* %100 = OpVariable Private 
                                         i32 %103 = OpConstant 3 
                                         i32 %108 = OpConstant 0 
                                         i32 %140 = OpConstant 7 
                                         u32 %164 = OpConstant 3 
                                         i32 %176 = OpConstant 6 
                                         f32 %186 = OpConstant 3.674022E-40 
                                         i32 %191 = OpConstant 10 
                                         i32 %210 = OpConstant 8 
                                             %218 = OpTypePointer Uniform %35 
                                             %225 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %226 = OpTypeSampledImage %225 
                                             %227 = OpTypePointer UniformConstant %226 
UniformConstant read_only TextureCubeSampled* %228 = OpVariable UniformConstant 
                                Private f32* %233 = OpVariable Private 
                                Private f32* %237 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                         i32 %246 = OpConstant 5 
                                             %250 = OpTypeBool 
                                             %251 = OpTypePointer Private %250 
                               Private bool* %252 = OpVariable Private 
                              Private f32_3* %256 = OpVariable Private 
                                             %257 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %288 = OpVariable UniformConstant 
                                         f32 %339 = OpConstant 3.674022E-40 
                                       f32_3 %340 = OpConstantComposite %339 %339 %339 
                                         f32 %342 = OpConstant 3.674022E-40 
                                       f32_3 %343 = OpConstantComposite %342 %342 %342 
                                Private f32* %345 = OpVariable Private 
                                         f32 %348 = OpConstant 3.674022E-40 
                                Private f32* %350 = OpVariable Private 
                              Private f32_4* %379 = OpVariable Private 
                                         i32 %382 = OpConstant 9 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         f32 %414 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_3 %416 = OpConstantComposite %413 %414 %415 
                                             %429 = OpTypePointer Output %7 
                               Output f32_4* %430 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %258 = OpVariable Function 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %44 = OpAccessChain %40 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_2 %47 = OpFMul %34 %46 
                               Uniform f32_4* %48 = OpAccessChain %40 %42 
                                        f32_4 %49 = OpLoad %48 
                                        f32_2 %50 = OpVectorShuffle %49 %49 2 3 
                                        f32_2 %51 = OpFAdd %47 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                   read_only Texture2DSampled %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_2 %58 = OpVectorShuffle %57 %57 0 1 
                                        f32_4 %59 = OpImageSampleImplicitLod %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %40 %60 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %21 
                                          f32 %65 = OpFMul %63 %64 
                                 Uniform f32* %67 = OpAccessChain %40 %60 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFAdd %65 %68 
                                 Private f32* %70 = OpAccessChain %9 %31 
                                                      OpStore %70 %69 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFDiv %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %31 
                                                      OpStore %75 %74 
                                 Uniform f32* %80 = OpAccessChain %40 %78 %79 
                                          f32 %81 = OpLoad %80 
                                   Input f32* %85 = OpAccessChain %83 %79 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFDiv %81 %86 
                                 Private f32* %88 = OpAccessChain %77 %31 
                                                      OpStore %88 %87 
                                        f32_3 %89 = OpLoad %77 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 0 0 
                                        f32_3 %91 = OpLoad %83 
                                        f32_3 %92 = OpFMul %90 %91 
                                                      OpStore %77 %92 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpLoad %77 
                                        f32_3 %97 = OpFMul %95 %96 
                                        f32_4 %98 = OpLoad %93 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
                                                      OpStore %93 %99 
                                       f32_4 %101 = OpLoad %93 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %104 = OpAccessChain %40 %103 %78 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFMul %102 %106 
                                                      OpStore %100 %107 
                              Uniform f32_4* %109 = OpAccessChain %40 %103 %108 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %93 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %100 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %93 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %93 %118 
                              Uniform f32_4* %119 = OpAccessChain %40 %103 %60 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %93 
                                       f32_3 %123 = OpVectorShuffle %122 %122 2 2 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %93 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 2 6 
                                                      OpStore %93 %129 
                                       f32_4 %130 = OpLoad %93 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 3 
                              Uniform f32_4* %132 = OpAccessChain %40 %103 %103 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFAdd %131 %134 
                                       f32_4 %136 = OpLoad %93 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %93 %137 
                                       f32_4 %138 = OpLoad %93 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                              Uniform f32_4* %141 = OpAccessChain %40 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %139 %144 
                                                      OpStore %100 %145 
                                       f32_3 %146 = OpLoad %100 
                                       f32_3 %147 = OpLoad %100 
                                         f32 %148 = OpDot %146 %147 
                                Private f32* %149 = OpAccessChain %77 %31 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %77 %31 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpExtInst %1 31 %151 
                                Private f32* %153 = OpAccessChain %77 %31 
                                                      OpStore %153 %152 
                                Private f32* %154 = OpAccessChain %77 %79 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFNegate %155 
                                Private f32* %157 = OpAccessChain %9 %31 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                Private f32* %160 = OpAccessChain %77 %31 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFAdd %159 %161 
                                Private f32* %163 = OpAccessChain %9 %31 
                                                      OpStore %163 %162 
                                Uniform f32* %165 = OpAccessChain %40 %140 %164 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %31 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %93 %79 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFAdd %169 %171 
                                Private f32* %173 = OpAccessChain %9 %31 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %9 %31 
                                         f32 %175 = OpLoad %174 
                                Uniform f32* %177 = OpAccessChain %40 %176 %79 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpFMul %175 %178 
                                Uniform f32* %180 = OpAccessChain %40 %176 %164 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFAdd %179 %181 
                                Private f32* %183 = OpAccessChain %77 %31 
                                                      OpStore %183 %182 
                                Private f32* %184 = OpAccessChain %77 %31 
                                         f32 %185 = OpLoad %184 
                                         f32 %187 = OpExtInst %1 43 %185 %186 %71 
                                Private f32* %188 = OpAccessChain %77 %31 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %31 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %192 = OpAccessChain %40 %191 %79 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %190 %193 
                                Uniform f32* %195 = OpAccessChain %40 %191 %164 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFAdd %194 %196 
                                Private f32* %198 = OpAccessChain %9 %31 
                                                      OpStore %198 %197 
                                Private f32* %199 = OpAccessChain %9 %31 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                         f32 %202 = OpFAdd %201 %71 
                                Private f32* %203 = OpAccessChain %9 %31 
                                                      OpStore %203 %202 
                                Private f32* %204 = OpAccessChain %9 %31 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpExtInst %1 43 %205 %186 %71 
                                Private f32* %207 = OpAccessChain %9 %31 
                                                      OpStore %207 %206 
                                       f32_4 %208 = OpLoad %93 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 3 
                              Uniform f32_4* %211 = OpAccessChain %40 %210 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %214 = OpFNegate %213 
                                       f32_3 %215 = OpFAdd %209 %214 
                                                      OpStore %100 %215 
                                       f32_4 %216 = OpLoad %93 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 3 
                              Uniform f32_3* %219 = OpAccessChain %40 %108 
                                       f32_3 %220 = OpLoad %219 
                                       f32_3 %221 = OpFNegate %220 
                                       f32_3 %222 = OpFAdd %217 %221 
                                       f32_4 %223 = OpLoad %93 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %93 %224 
                read_only TextureCubeSampled %229 = OpLoad %228 
                                       f32_3 %230 = OpLoad %100 
                                       f32_4 %231 = OpImageSampleImplicitLod %229 %230 
                                         f32 %232 = OpCompositeExtract %231 0 
                                                      OpStore %21 %232 
                                       f32_3 %234 = OpLoad %100 
                                       f32_3 %235 = OpLoad %100 
                                         f32 %236 = OpDot %234 %235 
                                                      OpStore %233 %236 
                                         f32 %238 = OpLoad %233 
                                         f32 %239 = OpExtInst %1 31 %238 
                                                      OpStore %237 %239 
                                         f32 %240 = OpLoad %237 
                                Uniform f32* %242 = OpAccessChain %40 %241 %164 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %240 %243 
                                                      OpStore %237 %244 
                                         f32 %245 = OpLoad %237 
                                Uniform f32* %247 = OpAccessChain %40 %246 %164 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %245 %248 
                                                      OpStore %237 %249 
                                         f32 %253 = OpLoad %21 
                                         f32 %254 = OpLoad %237 
                                        bool %255 = OpFOrdLessThan %253 %254 
                                                      OpStore %252 %255 
                                        bool %259 = OpLoad %252 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %259 %260 %264 
                                             %260 = OpLabel 
                                Uniform f32* %262 = OpAccessChain %40 %176 %31 
                                         f32 %263 = OpLoad %262 
                                                      OpStore %258 %263 
                                                      OpBranch %261 
                                             %264 = OpLabel 
                                                      OpStore %258 %71 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                         f32 %265 = OpLoad %258 
                                Private f32* %266 = OpAccessChain %256 %31 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %77 %31 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %256 %31 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFAdd %268 %270 
                                Private f32* %272 = OpAccessChain %256 %31 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %256 %31 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %186 %71 
                                Private f32* %276 = OpAccessChain %256 %31 
                                                      OpStore %276 %275 
                                         f32 %277 = OpLoad %233 
                                Uniform f32* %278 = OpAccessChain %40 %210 %164 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFMul %277 %279 
                                Private f32* %281 = OpAccessChain %77 %31 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %233 
                                         f32 %283 = OpExtInst %1 32 %282 
                                                      OpStore %21 %283 
                                         f32 %284 = OpLoad %21 
                                       f32_3 %285 = OpCompositeConstruct %284 %284 %284 
                                       f32_3 %286 = OpLoad %100 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %100 %287 
                  read_only Texture2DSampled %289 = OpLoad %288 
                                       f32_3 %290 = OpLoad %77 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 0 
                                       f32_4 %292 = OpImageSampleImplicitLod %289 %291 
                                         f32 %293 = OpCompositeExtract %292 3 
                                Private f32* %294 = OpAccessChain %77 %31 
                                                      OpStore %294 %293 
                                Private f32* %295 = OpAccessChain %256 %31 
                                         f32 %296 = OpLoad %295 
                                Private f32* %297 = OpAccessChain %77 %31 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %77 %31 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %77 %31 
                                         f32 %302 = OpLoad %301 
                                                      OpStore %21 %302 
                                         f32 %303 = OpLoad %21 
                                         f32 %304 = OpExtInst %1 43 %303 %186 %71 
                                                      OpStore %21 %304 
                                       f32_4 %305 = OpLoad %93 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_4 %307 = OpLoad %93 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                         f32 %309 = OpDot %306 %308 
                                                      OpStore %233 %309 
                                         f32 %310 = OpLoad %233 
                                         f32 %311 = OpExtInst %1 32 %310 
                                                      OpStore %233 %311 
                                       f32_4 %312 = OpLoad %93 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFNegate %313 
                                         f32 %315 = OpLoad %233 
                                       f32_3 %316 = OpCompositeConstruct %315 %315 %315 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %318 = OpLoad %100 
                                       f32_3 %319 = OpFNegate %318 
                                       f32_3 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %93 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %93 %322 
                                       f32_4 %323 = OpLoad %93 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                       f32_4 %325 = OpLoad %93 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                         f32 %327 = OpDot %324 %326 
                                                      OpStore %233 %327 
                                         f32 %328 = OpLoad %233 
                                         f32 %329 = OpExtInst %1 32 %328 
                                                      OpStore %233 %329 
                                         f32 %330 = OpLoad %233 
                                       f32_3 %331 = OpCompositeConstruct %330 %330 %330 
                                       f32_4 %332 = OpLoad %93 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_3 %334 = OpFMul %331 %333 
                                       f32_4 %335 = OpLoad %93 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 6 3 
                                                      OpStore %93 %336 
                                       f32_4 %337 = OpLoad %54 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %341 = OpFMul %338 %340 
                                       f32_3 %344 = OpFAdd %341 %343 
                                                      OpStore %256 %344 
                                Private f32* %346 = OpAccessChain %54 %164 
                                         f32 %347 = OpLoad %346 
                                         f32 %349 = OpFMul %347 %348 
                                                      OpStore %345 %349 
                                       f32_3 %351 = OpLoad %256 
                                       f32_3 %352 = OpLoad %256 
                                         f32 %353 = OpDot %351 %352 
                                                      OpStore %350 %353 
                                         f32 %354 = OpLoad %350 
                                         f32 %355 = OpExtInst %1 32 %354 
                                                      OpStore %350 %355 
                                       f32_3 %356 = OpLoad %256 
                                         f32 %357 = OpLoad %350 
                                       f32_3 %358 = OpCompositeConstruct %357 %357 %357 
                                       f32_3 %359 = OpFMul %356 %358 
                                                      OpStore %256 %359 
                                       f32_4 %360 = OpLoad %93 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpLoad %256 
                                         f32 %363 = OpDot %361 %362 
                                                      OpStore %350 %363 
                                       f32_3 %364 = OpLoad %100 
                                       f32_3 %365 = OpFNegate %364 
                                       f32_3 %366 = OpLoad %256 
                                         f32 %367 = OpDot %365 %366 
                                Private f32* %368 = OpAccessChain %256 %31 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %256 %31 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpExtInst %1 40 %370 %186 
                                Private f32* %372 = OpAccessChain %256 %31 
                                                      OpStore %372 %371 
                                Private f32* %373 = OpAccessChain %77 %31 
                                         f32 %374 = OpLoad %373 
                                Private f32* %375 = OpAccessChain %256 %31 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                Private f32* %378 = OpAccessChain %77 %31 
                                                      OpStore %378 %377 
                                       f32_3 %380 = OpLoad %77 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
                              Uniform f32_4* %383 = OpAccessChain %40 %382 
                                       f32_4 %384 = OpLoad %383 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpFMul %381 %385 
                                       f32_4 %387 = OpLoad %379 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 6 3 
                                                      OpStore %379 %388 
                                         f32 %389 = OpLoad %350 
                                         f32 %390 = OpExtInst %1 40 %389 %186 
                                Private f32* %391 = OpAccessChain %256 %31 
                                                      OpStore %391 %390 
                                Private f32* %392 = OpAccessChain %256 %31 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpExtInst %1 30 %393 
                                Private f32* %395 = OpAccessChain %256 %31 
                                                      OpStore %395 %394 
                                Private f32* %396 = OpAccessChain %256 %31 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpLoad %345 
                                         f32 %399 = OpFMul %397 %398 
                                Private f32* %400 = OpAccessChain %256 %31 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %256 %31 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 29 %402 
                                Private f32* %404 = OpAccessChain %256 %31 
                                                      OpStore %404 %403 
                                         f32 %405 = OpLoad %21 
                                Private f32* %406 = OpAccessChain %256 %31 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpFMul %405 %407 
                                Private f32* %409 = OpAccessChain %77 %31 
                                                      OpStore %409 %408 
                              Uniform f32_4* %410 = OpAccessChain %40 %382 
                                       f32_4 %411 = OpLoad %410 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                         f32 %417 = OpDot %412 %416 
                                Private f32* %418 = OpAccessChain %256 %31 
                                                      OpStore %418 %417 
                                Private f32* %419 = OpAccessChain %77 %31 
                                         f32 %420 = OpLoad %419 
                                Private f32* %421 = OpAccessChain %256 %31 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFMul %420 %422 
                                Private f32* %424 = OpAccessChain %379 %164 
                                                      OpStore %424 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_4 %426 = OpVectorShuffle %425 %425 0 0 0 0 
                                       f32_4 %427 = OpLoad %379 
                                       f32_4 %428 = OpFMul %426 %427 
                                                      OpStore %9 %428 
                                       f32_4 %431 = OpLoad %9 
                                       f32_4 %432 = OpFNegate %431 
                                       f32_4 %433 = OpExtInst %1 29 %432 
                                                      OpStore %430 %433 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec4 u_xlat10_6;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec2 u_xlat18;
float u_xlat16_18;
float u_xlat19;
bool u_xlatb20;
float u_xlat27;
float u_xlat28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat28 = u_xlat19 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat28));
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlatb20 = u_xlat28<0.99000001;
    if(u_xlatb20){
        u_xlat19 = sqrt(u_xlat19);
        u_xlat19 = u_xlat19 * _LightPositionRange.w;
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_5 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_6 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat9.xyz = u_xlat9.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8 = textureLod(_ShadowMapTexture, u_xlat9.xyz, 0.0).yzwx;
        u_xlat8.x = u_xlat10_5.x;
        u_xlat8.y = u_xlat10_6.x;
        u_xlat8.z = u_xlat10_7.x;
        u_xlatb5 = lessThan(u_xlat8, vec4(u_xlat19));
        u_xlat5.x = (u_xlatb5.x) ? _LightShadowData.x : float(1.0);
        u_xlat5.y = (u_xlatb5.y) ? _LightShadowData.x : float(1.0);
        u_xlat5.z = (u_xlatb5.z) ? _LightShadowData.x : float(1.0);
        u_xlat5.w = (u_xlatb5.w) ? _LightShadowData.x : float(1.0);
        u_xlat9.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat9.x = 1.0;
    //ENDIF
    }
    u_xlat9.x = u_xlat28 + u_xlat9.x;
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat10_4.w;
    u_xlat18.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_1 = texture(_CameraNormalsTexture, u_xlat18.xy);
    u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz;
    u_xlat18.x = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat27) + (-u_xlat3.xyz);
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat18.y = dot(u_xlat2.xyz, u_xlat16_1.xyz);
    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
    u_xlat16_1.x = u_xlat10_1.w * 128.0;
    u_xlat27 = log2(u_xlat18.y);
    u_xlat27 = u_xlat27 * u_xlat16_1.x;
    u_xlat27 = exp2(u_xlat27);
    u_xlat1.x = u_xlat9.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat9.x = u_xlat9.x * u_xlat18.x;
    u_xlat1.xyz = u_xlat9.xxx * _LightColor.xyz;
    u_xlat9.x = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.w = u_xlat9.x * u_xlat27;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 529
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %524 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 RelaxedPrecision 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpMemberDecorate %14 10 Offset 14 
                                                      OpMemberDecorate %14 11 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %40 Location 40 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %228 DescriptorSet 228 
                                                      OpDecorate %228 Binding 228 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %345 DescriptorSet 345 
                                                      OpDecorate %345 Binding 345 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %524 Location 524 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                                 Input f32_4* %40 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %59 = OpConstant 2 
                                          u32 %64 = OpConstant 1 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                              %79 = OpTypePointer Private %10 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 3 
                                              %84 = OpTypePointer Uniform %7 
                                          i32 %89 = OpConstant 0 
                                         i32 %121 = OpConstant 7 
                                         u32 %144 = OpConstant 3 
                              Private f32_3* %154 = OpVariable Private 
                                         i32 %157 = OpConstant 8 
                                Private f32* %163 = OpVariable Private 
                                Private f32* %167 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %178 = OpVariable UniformConstant 
                                Private f32* %184 = OpVariable Private 
                                         i32 %187 = OpConstant 6 
                                         f32 %195 = OpConstant 3.674022E-40 
                                             %197 = OpTypeBool 
                                             %198 = OpTypePointer Private %197 
                               Private bool* %199 = OpVariable Private 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         i32 %209 = OpConstant 4 
                                         i32 %214 = OpConstant 5 
                              Private f32_4* %218 = OpVariable Private 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_3 %221 = OpConstantComposite %220 %220 %220 
                                             %225 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %226 = OpTypeSampledImage %225 
                                             %227 = OpTypePointer UniformConstant %226 
UniformConstant read_only TextureCubeSampled* %228 = OpVariable UniformConstant 
                              Private f32_3* %235 = OpVariable Private 
                                         f32 %237 = OpConstant 3.674022E-40 
                                       f32_3 %238 = OpConstantComposite %237 %237 %220 
                                       f32_3 %246 = OpConstantComposite %237 %220 %237 
                                       f32_3 %254 = OpConstantComposite %220 %237 %237 
                                             %261 = OpTypeVector %197 4 
                                             %262 = OpTypePointer Private %261 
                             Private bool_4* %263 = OpVariable Private 
                                             %268 = OpTypePointer Function %6 
                              Private f32_4* %309 = OpVariable Private 
                                         f32 %311 = OpConstant 3.674022E-40 
                                       f32_4 %312 = OpConstantComposite %311 %311 %311 %311 
                                             %331 = OpTypePointer Private %41 
                              Private f32_2* %332 = OpVariable Private 
                                         i32 %335 = OpConstant 11 
                              Private f32_4* %344 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %345 = OpVariable UniformConstant 
                                         f32 %351 = OpConstant 3.674022E-40 
                                       f32_3 %352 = OpConstantComposite %351 %351 %351 
                                         f32 %354 = OpConstant 3.674022E-40 
                                       f32_3 %355 = OpConstantComposite %354 %354 %354 
                                Private f32* %359 = OpVariable Private 
                                             %382 = OpTypePointer Uniform %10 
                                       f32_2 %435 = OpConstantComposite %195 %195 
                                Private f32* %439 = OpVariable Private 
                                         f32 %442 = OpConstant 3.674022E-40 
                                         i32 %478 = OpConstant 9 
                                         f32 %488 = OpConstant 3.674022E-40 
                                         f32 %489 = OpConstant 3.674022E-40 
                                         f32 %490 = OpConstant 3.674022E-40 
                                       f32_3 %491 = OpConstantComposite %488 %489 %490 
                                         i32 %502 = OpConstant 10 
                                             %523 = OpTypePointer Output %7 
                               Output f32_4* %524 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %269 = OpVariable Function 
                               Function f32* %279 = OpVariable Function 
                               Function f32* %289 = OpVariable Function 
                               Function f32* %299 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %42 = OpLoad %40 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad %40 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %38 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_4 %57 = OpImageSampleImplicitLod %54 %56 
                                          f32 %58 = OpCompositeExtract %57 0 
                                                      OpStore %49 %58 
                                 Uniform f32* %60 = OpAccessChain %16 %59 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpLoad %49 
                                          f32 %63 = OpFMul %61 %62 
                                 Uniform f32* %65 = OpAccessChain %16 %59 %64 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %63 %66 
                                                      OpStore %49 %67 
                                          f32 %69 = OpLoad %49 
                                          f32 %70 = OpFDiv %68 %69 
                                                      OpStore %49 %70 
                                          f32 %72 = OpLoad %49 
                                        f32_3 %73 = OpCompositeConstruct %72 %72 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %71 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %71 %78 
                                        f32_4 %81 = OpLoad %71 
                                        f32_3 %82 = OpVectorShuffle %81 %81 1 1 1 
                               Uniform f32_4* %85 = OpAccessChain %16 %83 %18 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %82 %87 
                                                      OpStore %80 %88 
                               Uniform f32_4* %90 = OpAccessChain %16 %83 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %71 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 0 0 
                                        f32_3 %95 = OpFMul %92 %94 
                                        f32_3 %96 = OpLoad %80 
                                        f32_3 %97 = OpFAdd %95 %96 
                                        f32_4 %98 = OpLoad %71 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 2 6 
                                                      OpStore %71 %99 
                              Uniform f32_4* %100 = OpAccessChain %16 %83 %59 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_4 %103 = OpLoad %71 
                                       f32_3 %104 = OpVectorShuffle %103 %103 2 2 2 
                                       f32_3 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %71 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 3 
                                       f32_3 %108 = OpFAdd %105 %107 
                                       f32_4 %109 = OpLoad %71 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 6 
                                                      OpStore %71 %110 
                                       f32_4 %111 = OpLoad %71 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                              Uniform f32_4* %113 = OpAccessChain %16 %83 %83 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFAdd %112 %115 
                                       f32_4 %117 = OpLoad %71 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %71 %118 
                                       f32_4 %119 = OpLoad %71 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_4* %122 = OpAccessChain %16 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_3 %125 = OpFNegate %124 
                                       f32_3 %126 = OpFAdd %120 %125 
                                                      OpStore %80 %126 
                                       f32_3 %127 = OpLoad %80 
                                       f32_3 %128 = OpLoad %80 
                                         f32 %129 = OpDot %127 %128 
                                Private f32* %130 = OpAccessChain %9 %29 
                                                      OpStore %130 %129 
                                Private f32* %131 = OpAccessChain %9 %29 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpExtInst %1 31 %132 
                                Private f32* %134 = OpAccessChain %9 %29 
                                                      OpStore %134 %133 
                                Private f32* %135 = OpAccessChain %9 %19 
                                         f32 %136 = OpLoad %135 
                                         f32 %137 = OpFNegate %136 
                                         f32 %138 = OpLoad %49 
                                         f32 %139 = OpFMul %137 %138 
                                Private f32* %140 = OpAccessChain %9 %29 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpFAdd %139 %141 
                                Private f32* %143 = OpAccessChain %9 %29 
                                                      OpStore %143 %142 
                                Uniform f32* %145 = OpAccessChain %16 %121 %144 
                                         f32 %146 = OpLoad %145 
                                Private f32* %147 = OpAccessChain %9 %29 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %71 %19 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFAdd %149 %151 
                                Private f32* %153 = OpAccessChain %9 %29 
                                                      OpStore %153 %152 
                                       f32_4 %155 = OpLoad %71 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 3 
                              Uniform f32_4* %158 = OpAccessChain %16 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFNegate %160 
                                       f32_3 %162 = OpFAdd %156 %161 
                                                      OpStore %154 %162 
                                       f32_3 %164 = OpLoad %154 
                                       f32_3 %165 = OpLoad %154 
                                         f32 %166 = OpDot %164 %165 
                                                      OpStore %163 %166 
                                         f32 %168 = OpLoad %163 
                                         f32 %169 = OpExtInst %1 32 %168 
                                                      OpStore %167 %169 
                                       f32_3 %170 = OpLoad %154 
                                         f32 %171 = OpLoad %167 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_3 %173 = OpFMul %170 %172 
                                                      OpStore %80 %173 
                                         f32 %174 = OpLoad %163 
                                Uniform f32* %175 = OpAccessChain %16 %157 %144 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFMul %174 %176 
                                                      OpStore %167 %177 
                  read_only Texture2DSampled %179 = OpLoad %178 
                                         f32 %180 = OpLoad %167 
                                       f32_2 %181 = OpCompositeConstruct %180 %180 
                                       f32_4 %182 = OpImageSampleImplicitLod %179 %181 
                                         f32 %183 = OpCompositeExtract %182 3 
                                                      OpStore %167 %183 
                                Private f32* %185 = OpAccessChain %9 %29 
                                         f32 %186 = OpLoad %185 
                                Uniform f32* %188 = OpAccessChain %16 %187 %19 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %186 %189 
                                Uniform f32* %191 = OpAccessChain %16 %187 %144 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFAdd %190 %192 
                                                      OpStore %184 %193 
                                         f32 %194 = OpLoad %184 
                                         f32 %196 = OpExtInst %1 43 %194 %195 %68 
                                                      OpStore %184 %196 
                                         f32 %200 = OpLoad %184 
                                        bool %202 = OpFOrdLessThan %200 %201 
                                                      OpStore %199 %202 
                                        bool %203 = OpLoad %199 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %315 
                                             %204 = OpLabel 
                                         f32 %206 = OpLoad %163 
                                         f32 %207 = OpExtInst %1 31 %206 
                                                      OpStore %163 %207 
                                         f32 %208 = OpLoad %163 
                                Uniform f32* %210 = OpAccessChain %16 %209 %144 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %208 %211 
                                                      OpStore %163 %212 
                                         f32 %213 = OpLoad %163 
                                Uniform f32* %215 = OpAccessChain %16 %214 %144 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFMul %213 %216 
                                                      OpStore %163 %217 
                                       f32_3 %219 = OpLoad %154 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %218 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %218 %224 
                read_only TextureCubeSampled %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %218 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_4 %232 = OpImageSampleExplicitLod %229 %231 Lod %7 
                                         f32 %233 = OpCompositeExtract %232 0 
                                Private f32* %234 = OpAccessChain %218 %29 
                                                      OpStore %234 %233 
                                       f32_3 %236 = OpLoad %154 
                                       f32_3 %239 = OpFAdd %236 %238 
                                                      OpStore %235 %239 
                read_only TextureCubeSampled %240 = OpLoad %228 
                                       f32_3 %241 = OpLoad %235 
                                       f32_4 %242 = OpImageSampleExplicitLod %240 %241 Lod %7 
                                         f32 %243 = OpCompositeExtract %242 0 
                                Private f32* %244 = OpAccessChain %218 %64 
                                                      OpStore %244 %243 
                                       f32_3 %245 = OpLoad %154 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %235 %247 
                read_only TextureCubeSampled %248 = OpLoad %228 
                                       f32_3 %249 = OpLoad %235 
                                       f32_4 %250 = OpImageSampleExplicitLod %248 %249 Lod %7 
                                         f32 %251 = OpCompositeExtract %250 0 
                                Private f32* %252 = OpAccessChain %218 %19 
                                                      OpStore %252 %251 
                                       f32_3 %253 = OpLoad %154 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore %154 %255 
                read_only TextureCubeSampled %256 = OpLoad %228 
                                       f32_3 %257 = OpLoad %154 
                                       f32_4 %258 = OpImageSampleExplicitLod %256 %257 Lod %7 
                                         f32 %259 = OpCompositeExtract %258 0 
                                Private f32* %260 = OpAccessChain %218 %144 
                                                      OpStore %260 %259 
                                       f32_4 %264 = OpLoad %218 
                                         f32 %265 = OpLoad %163 
                                       f32_4 %266 = OpCompositeConstruct %265 %265 %265 %265 
                                      bool_4 %267 = OpFOrdLessThan %264 %266 
                                                      OpStore %263 %267 
                                      bool_4 %270 = OpLoad %263 
                                        bool %271 = OpCompositeExtract %270 0 
                                                      OpSelectionMerge %273 None 
                                                      OpBranchConditional %271 %272 %276 
                                             %272 = OpLabel 
                                Uniform f32* %274 = OpAccessChain %16 %187 %29 
                                         f32 %275 = OpLoad %274 
                                                      OpStore %269 %275 
                                                      OpBranch %273 
                                             %276 = OpLabel 
                                                      OpStore %269 %68 
                                                      OpBranch %273 
                                             %273 = OpLabel 
                                         f32 %277 = OpLoad %269 
                                Private f32* %278 = OpAccessChain %218 %29 
                                                      OpStore %278 %277 
                                      bool_4 %280 = OpLoad %263 
                                        bool %281 = OpCompositeExtract %280 1 
                                                      OpSelectionMerge %283 None 
                                                      OpBranchConditional %281 %282 %286 
                                             %282 = OpLabel 
                                Uniform f32* %284 = OpAccessChain %16 %187 %29 
                                         f32 %285 = OpLoad %284 
                                                      OpStore %279 %285 
                                                      OpBranch %283 
                                             %286 = OpLabel 
                                                      OpStore %279 %68 
                                                      OpBranch %283 
                                             %283 = OpLabel 
                                         f32 %287 = OpLoad %279 
                                Private f32* %288 = OpAccessChain %218 %64 
                                                      OpStore %288 %287 
                                      bool_4 %290 = OpLoad %263 
                                        bool %291 = OpCompositeExtract %290 2 
                                                      OpSelectionMerge %293 None 
                                                      OpBranchConditional %291 %292 %296 
                                             %292 = OpLabel 
                                Uniform f32* %294 = OpAccessChain %16 %187 %29 
                                         f32 %295 = OpLoad %294 
                                                      OpStore %289 %295 
                                                      OpBranch %293 
                                             %296 = OpLabel 
                                                      OpStore %289 %68 
                                                      OpBranch %293 
                                             %293 = OpLabel 
                                         f32 %297 = OpLoad %289 
                                Private f32* %298 = OpAccessChain %218 %19 
                                                      OpStore %298 %297 
                                      bool_4 %300 = OpLoad %263 
                                        bool %301 = OpCompositeExtract %300 3 
                                                      OpSelectionMerge %303 None 
                                                      OpBranchConditional %301 %302 %306 
                                             %302 = OpLabel 
                                Uniform f32* %304 = OpAccessChain %16 %187 %29 
                                         f32 %305 = OpLoad %304 
                                                      OpStore %299 %305 
                                                      OpBranch %303 
                                             %306 = OpLabel 
                                                      OpStore %299 %68 
                                                      OpBranch %303 
                                             %303 = OpLabel 
                                         f32 %307 = OpLoad %299 
                                Private f32* %308 = OpAccessChain %218 %144 
                                                      OpStore %308 %307 
                                       f32_4 %310 = OpLoad %218 
                                         f32 %313 = OpDot %310 %312 
                                Private f32* %314 = OpAccessChain %309 %29 
                                                      OpStore %314 %313 
                                                      OpBranch %205 
                                             %315 = OpLabel 
                                Private f32* %316 = OpAccessChain %309 %29 
                                                      OpStore %316 %68 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                         f32 %317 = OpLoad %184 
                                Private f32* %318 = OpAccessChain %309 %29 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFAdd %317 %319 
                                Private f32* %321 = OpAccessChain %309 %29 
                                                      OpStore %321 %320 
                                Private f32* %322 = OpAccessChain %309 %29 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpExtInst %1 43 %323 %195 %68 
                                Private f32* %325 = OpAccessChain %309 %29 
                                                      OpStore %325 %324 
                                         f32 %326 = OpLoad %167 
                                Private f32* %327 = OpAccessChain %309 %29 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFMul %326 %328 
                                Private f32* %330 = OpAccessChain %154 %29 
                                                      OpStore %330 %329 
                                       f32_4 %333 = OpLoad %38 
                                       f32_2 %334 = OpVectorShuffle %333 %333 0 1 
                              Uniform f32_4* %336 = OpAccessChain %16 %335 
                                       f32_4 %337 = OpLoad %336 
                                       f32_2 %338 = OpVectorShuffle %337 %337 0 1 
                                       f32_2 %339 = OpFMul %334 %338 
                              Uniform f32_4* %340 = OpAccessChain %16 %335 
                                       f32_4 %341 = OpLoad %340 
                                       f32_2 %342 = OpVectorShuffle %341 %341 2 3 
                                       f32_2 %343 = OpFAdd %339 %342 
                                                      OpStore %332 %343 
                  read_only Texture2DSampled %346 = OpLoad %345 
                                       f32_2 %347 = OpLoad %332 
                                       f32_4 %348 = OpImageSampleImplicitLod %346 %347 
                                                      OpStore %344 %348 
                                       f32_4 %349 = OpLoad %344 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_3 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %309 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %309 %358 
                                       f32_4 %360 = OpLoad %309 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_4 %362 = OpLoad %309 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                         f32 %364 = OpDot %361 %363 
                                                      OpStore %359 %364 
                                         f32 %365 = OpLoad %359 
                                         f32 %366 = OpExtInst %1 32 %365 
                                                      OpStore %359 %366 
                                         f32 %367 = OpLoad %359 
                                       f32_3 %368 = OpCompositeConstruct %367 %367 %367 
                                       f32_4 %369 = OpLoad %309 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFMul %368 %370 
                                       f32_4 %372 = OpLoad %309 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %309 %373 
                                       f32_3 %374 = OpLoad %80 
                                       f32_3 %375 = OpFNegate %374 
                                       f32_4 %376 = OpLoad %309 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                         f32 %378 = OpDot %375 %377 
                                Private f32* %379 = OpAccessChain %309 %144 
                                                      OpStore %379 %378 
                                       f32_4 %380 = OpLoad %71 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 3 
                              Uniform f32_3* %383 = OpAccessChain %16 %89 
                                       f32_3 %384 = OpLoad %383 
                                       f32_3 %385 = OpFNegate %384 
                                       f32_3 %386 = OpFAdd %381 %385 
                                       f32_4 %387 = OpLoad %38 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 6 3 
                                                      OpStore %38 %388 
                                       f32_4 %389 = OpLoad %38 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_4 %391 = OpLoad %38 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpDot %390 %392 
                                Private f32* %394 = OpAccessChain %332 %29 
                                                      OpStore %394 %393 
                                Private f32* %395 = OpAccessChain %332 %29 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpExtInst %1 32 %396 
                                Private f32* %398 = OpAccessChain %332 %29 
                                                      OpStore %398 %397 
                                       f32_4 %399 = OpLoad %38 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_3 %401 = OpFNegate %400 
                                       f32_2 %402 = OpLoad %332 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 0 0 
                                       f32_3 %404 = OpFMul %401 %403 
                                       f32_3 %405 = OpLoad %80 
                                       f32_3 %406 = OpFNegate %405 
                                       f32_3 %407 = OpFAdd %404 %406 
                                       f32_4 %408 = OpLoad %38 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 5 6 3 
                                                      OpStore %38 %409 
                                       f32_4 %410 = OpLoad %38 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_4 %412 = OpLoad %38 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                         f32 %414 = OpDot %411 %413 
                                Private f32* %415 = OpAccessChain %332 %29 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %332 %29 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpExtInst %1 32 %417 
                                Private f32* %419 = OpAccessChain %332 %29 
                                                      OpStore %419 %418 
                                       f32_2 %420 = OpLoad %332 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 0 0 
                                       f32_4 %422 = OpLoad %38 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_3 %424 = OpFMul %421 %423 
                                       f32_4 %425 = OpLoad %38 
                                       f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                                      OpStore %38 %426 
                                       f32_4 %427 = OpLoad %38 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                       f32_4 %429 = OpLoad %309 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                         f32 %431 = OpDot %428 %430 
                                Private f32* %432 = OpAccessChain %309 %29 
                                                      OpStore %432 %431 
                                       f32_4 %433 = OpLoad %309 
                                       f32_2 %434 = OpVectorShuffle %433 %433 0 3 
                                       f32_2 %436 = OpExtInst %1 40 %434 %435 
                                       f32_4 %437 = OpLoad %309 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 1 2 5 
                                                      OpStore %309 %438 
                                Private f32* %440 = OpAccessChain %344 %144 
                                         f32 %441 = OpLoad %440 
                                         f32 %443 = OpFMul %441 %442 
                                                      OpStore %439 %443 
                                Private f32* %444 = OpAccessChain %309 %29 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpExtInst %1 30 %445 
                                Private f32* %447 = OpAccessChain %309 %29 
                                                      OpStore %447 %446 
                                Private f32* %448 = OpAccessChain %309 %29 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpLoad %439 
                                         f32 %451 = OpFMul %449 %450 
                                Private f32* %452 = OpAccessChain %309 %29 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %309 %29 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 29 %454 
                                Private f32* %456 = OpAccessChain %309 %29 
                                                      OpStore %456 %455 
                                Private f32* %457 = OpAccessChain %154 %29 
                                         f32 %458 = OpLoad %457 
                                Private f32* %459 = OpAccessChain %332 %29 
                                                      OpStore %459 %458 
                                Private f32* %460 = OpAccessChain %332 %29 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpExtInst %1 43 %461 %195 %68 
                                Private f32* %463 = OpAccessChain %332 %29 
                                                      OpStore %463 %462 
                                Private f32* %464 = OpAccessChain %332 %29 
                                         f32 %465 = OpLoad %464 
                                Private f32* %466 = OpAccessChain %309 %29 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFMul %465 %467 
                                Private f32* %469 = OpAccessChain %332 %29 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %154 %29 
                                         f32 %471 = OpLoad %470 
                                Private f32* %472 = OpAccessChain %309 %144 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpFMul %471 %473 
                                Private f32* %475 = OpAccessChain %154 %29 
                                                      OpStore %475 %474 
                                       f32_3 %476 = OpLoad %154 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 0 0 
                              Uniform f32_4* %479 = OpAccessChain %16 %478 
                                       f32_4 %480 = OpLoad %479 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpFMul %477 %481 
                                       f32_4 %483 = OpLoad %38 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %38 %484 
                              Uniform f32_4* %485 = OpAccessChain %16 %478 
                                       f32_4 %486 = OpLoad %485 
                                       f32_3 %487 = OpVectorShuffle %486 %486 0 1 2 
                                         f32 %492 = OpDot %487 %491 
                                Private f32* %493 = OpAccessChain %309 %29 
                                                      OpStore %493 %492 
                                Private f32* %494 = OpAccessChain %332 %29 
                                         f32 %495 = OpLoad %494 
                                Private f32* %496 = OpAccessChain %309 %29 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFMul %495 %497 
                                Private f32* %499 = OpAccessChain %38 %144 
                                                      OpStore %499 %498 
                                Private f32* %500 = OpAccessChain %9 %29 
                                         f32 %501 = OpLoad %500 
                                Uniform f32* %503 = OpAccessChain %16 %502 %19 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpFMul %501 %504 
                                Uniform f32* %506 = OpAccessChain %16 %502 %144 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpFAdd %505 %507 
                                Private f32* %509 = OpAccessChain %9 %29 
                                                      OpStore %509 %508 
                                Private f32* %510 = OpAccessChain %9 %29 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpFNegate %511 
                                         f32 %513 = OpFAdd %512 %68 
                                Private f32* %514 = OpAccessChain %9 %29 
                                                      OpStore %514 %513 
                                Private f32* %515 = OpAccessChain %9 %29 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpExtInst %1 43 %516 %195 %68 
                                Private f32* %518 = OpAccessChain %9 %29 
                                                      OpStore %518 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_4 %520 = OpVectorShuffle %519 %519 0 0 0 0 
                                       f32_4 %521 = OpLoad %38 
                                       f32_4 %522 = OpFMul %520 %521 
                                                      OpStore %9 %522 
                                       f32_4 %525 = OpLoad %9 
                                       f32_4 %526 = OpFNegate %525 
                                       f32_4 %527 = OpExtInst %1 29 %526 
                                                      OpStore %524 %527 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
float u_xlat5;
vec3 u_xlat6;
float u_xlat11;
float u_xlat16_15;
float u_xlat16;
float u_xlat16_16;
bool u_xlatb16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat1 = (-u_xlat6.z) * u_xlat1 + u_xlat6.x;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat6.x = u_xlat1 * _LightShadowData.z + _LightShadowData.w;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat3.xyz);
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16 = sqrt(u_xlat11);
    u_xlat16 = u_xlat16 * _LightPositionRange.w;
    u_xlat16 = u_xlat16 * _LightProjectionParams.w;
    u_xlatb16 = u_xlat10_4.x<u_xlat16;
    u_xlat16 = (u_xlatb16) ? _LightShadowData.x : 1.0;
    u_xlat6.x = u_xlat6.x + u_xlat16;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat16 = u_xlat11 * _LightPos.w;
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat6.x = u_xlat6.x * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat6.x = u_xlat6.x * u_xlat10_4.w;
    u_xlat11 = u_xlat6.x;
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16) + (-u_xlat3.xyz);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_15 = u_xlat10_0.w * 128.0;
    u_xlat16_16 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_16);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat16, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat11 * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat5 * u_xlat0.x;
    u_xlat0 = vec4(u_xlat1) * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 476
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %84 %471 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 RelaxedPrecision 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpMemberDecorate %39 9 Offset 39 
                                                      OpMemberDecorate %39 10 Offset 39 
                                                      OpMemberDecorate %39 11 Offset 39 
                                                      OpMemberDecorate %39 12 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %220 DescriptorSet 220 
                                                      OpDecorate %220 Binding 220 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %280 DescriptorSet 280 
                                                      OpDecorate %280 Binding 280 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %331 DescriptorSet 331 
                                                      OpDecorate %331 Binding 331 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %471 Location 471 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeArray %7 %36 
                                              %39 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %7 %7 %7 %38 %7 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 12 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_4* %55 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %56 = OpVariable UniformConstant 
                                          i32 %61 = OpConstant 2 
                                              %62 = OpTypePointer Uniform %6 
                                          u32 %67 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %35 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %79 = OpConstant 1 
                                          u32 %80 = OpConstant 2 
                                              %83 = OpTypePointer Input %35 
                                 Input f32_3* %84 = OpVariable Input 
                                              %85 = OpTypePointer Input %6 
                               Private f32_4* %94 = OpVariable Private 
                              Private f32_3* %101 = OpVariable Private 
                                         i32 %104 = OpConstant 3 
                                         i32 %109 = OpConstant 0 
                                         i32 %141 = OpConstant 7 
                                         u32 %165 = OpConstant 3 
                                         i32 %177 = OpConstant 6 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         i32 %192 = OpConstant 10 
                                         i32 %211 = OpConstant 8 
                                             %217 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %218 = OpTypeSampledImage %217 
                                             %219 = OpTypePointer UniformConstant %218 
UniformConstant read_only TextureCubeSampled* %220 = OpVariable UniformConstant 
                                Private f32* %225 = OpVariable Private 
                                Private f32* %229 = OpVariable Private 
                                         i32 %233 = OpConstant 4 
                                         i32 %238 = OpConstant 5 
                                             %242 = OpTypeBool 
                                             %243 = OpTypePointer Private %242 
                               Private bool* %244 = OpVariable Private 
                              Private f32_3* %248 = OpVariable Private 
                                             %249 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %280 = OpVariable UniformConstant 
                              Private f32_3* %293 = OpVariable Private 
                                         i32 %296 = OpConstant 11 
                                             %319 = OpTypePointer Uniform %35 
UniformConstant read_only TextureCubeSampled* %331 = OpVariable UniformConstant 
                                         f32 %334 = OpConstant 3.674022E-40 
                                         f32 %380 = OpConstant 3.674022E-40 
                                       f32_3 %381 = OpConstantComposite %380 %380 %380 
                                         f32 %383 = OpConstant 3.674022E-40 
                                       f32_3 %384 = OpConstantComposite %383 %383 %383 
                                Private f32* %386 = OpVariable Private 
                                         f32 %389 = OpConstant 3.674022E-40 
                                Private f32* %391 = OpVariable Private 
                              Private f32_4* %420 = OpVariable Private 
                                         i32 %423 = OpConstant 9 
                                         f32 %454 = OpConstant 3.674022E-40 
                                         f32 %455 = OpConstant 3.674022E-40 
                                         f32 %456 = OpConstant 3.674022E-40 
                                       f32_3 %457 = OpConstantComposite %454 %455 %456 
                                             %470 = OpTypePointer Output %7 
                               Output f32_4* %471 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %250 = OpVariable Function 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %34 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                        f32_4 %53 = OpLoad %9 
                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 2 3 
                                                      OpStore %9 %54 
                   read_only Texture2DSampled %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %41 %61 %31 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %21 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %41 %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Private f32* %73 = OpAccessChain %9 %31 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFDiv %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                                      OpStore %76 %75 
                                 Uniform f32* %81 = OpAccessChain %41 %79 %80 
                                          f32 %82 = OpLoad %81 
                                   Input f32* %86 = OpAccessChain %84 %80 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFDiv %82 %87 
                                 Private f32* %89 = OpAccessChain %78 %31 
                                                      OpStore %89 %88 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpLoad %84 
                                        f32_3 %93 = OpFMul %91 %92 
                                                      OpStore %78 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpLoad %78 
                                        f32_3 %98 = OpFMul %96 %97 
                                        f32_4 %99 = OpLoad %94 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %94 %100 
                                       f32_4 %102 = OpLoad %94 
                                       f32_3 %103 = OpVectorShuffle %102 %102 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %41 %104 %79 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %103 %107 
                                                      OpStore %101 %108 
                              Uniform f32_4* %110 = OpAccessChain %41 %104 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %94 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %101 
                                       f32_3 %117 = OpFAdd %115 %116 
                                       f32_4 %118 = OpLoad %94 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %41 %104 %61 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_4 %123 = OpLoad %94 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %94 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                                       f32_3 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %94 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 6 
                                                      OpStore %94 %130 
                                       f32_4 %131 = OpLoad %94 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 3 
                              Uniform f32_4* %133 = OpAccessChain %41 %104 %104 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFAdd %132 %135 
                                       f32_4 %137 = OpLoad %94 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %94 %138 
                                       f32_4 %139 = OpLoad %94 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_4* %142 = OpAccessChain %41 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFNegate %144 
                                       f32_3 %146 = OpFAdd %140 %145 
                                                      OpStore %101 %146 
                                       f32_3 %147 = OpLoad %101 
                                       f32_3 %148 = OpLoad %101 
                                         f32 %149 = OpDot %147 %148 
                                Private f32* %150 = OpAccessChain %78 %31 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %78 %31 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpExtInst %1 31 %152 
                                Private f32* %154 = OpAccessChain %78 %31 
                                                      OpStore %154 %153 
                                Private f32* %155 = OpAccessChain %78 %80 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFNegate %156 
                                Private f32* %158 = OpAccessChain %9 %31 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                Private f32* %161 = OpAccessChain %78 %31 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFAdd %160 %162 
                                Private f32* %164 = OpAccessChain %9 %31 
                                                      OpStore %164 %163 
                                Uniform f32* %166 = OpAccessChain %41 %141 %165 
                                         f32 %167 = OpLoad %166 
                                Private f32* %168 = OpAccessChain %9 %31 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %167 %169 
                                Private f32* %171 = OpAccessChain %94 %80 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFAdd %170 %172 
                                Private f32* %174 = OpAccessChain %9 %31 
                                                      OpStore %174 %173 
                                Private f32* %175 = OpAccessChain %9 %31 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %178 = OpAccessChain %41 %177 %80 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFMul %176 %179 
                                Uniform f32* %181 = OpAccessChain %41 %177 %165 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFAdd %180 %182 
                                Private f32* %184 = OpAccessChain %78 %31 
                                                      OpStore %184 %183 
                                Private f32* %185 = OpAccessChain %78 %31 
                                         f32 %186 = OpLoad %185 
                                         f32 %188 = OpExtInst %1 43 %186 %187 %72 
                                Private f32* %189 = OpAccessChain %78 %31 
                                                      OpStore %189 %188 
                                Private f32* %190 = OpAccessChain %9 %31 
                                         f32 %191 = OpLoad %190 
                                Uniform f32* %193 = OpAccessChain %41 %192 %80 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFMul %191 %194 
                                Uniform f32* %196 = OpAccessChain %41 %192 %165 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFAdd %195 %197 
                                Private f32* %199 = OpAccessChain %9 %31 
                                                      OpStore %199 %198 
                                Private f32* %200 = OpAccessChain %9 %31 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFNegate %201 
                                         f32 %203 = OpFAdd %202 %72 
                                Private f32* %204 = OpAccessChain %9 %31 
                                                      OpStore %204 %203 
                                Private f32* %205 = OpAccessChain %9 %31 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpExtInst %1 43 %206 %187 %72 
                                Private f32* %208 = OpAccessChain %9 %31 
                                                      OpStore %208 %207 
                                       f32_4 %209 = OpLoad %94 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 3 
                              Uniform f32_4* %212 = OpAccessChain %41 %211 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFNegate %214 
                                       f32_3 %216 = OpFAdd %210 %215 
                                                      OpStore %101 %216 
                read_only TextureCubeSampled %221 = OpLoad %220 
                                       f32_3 %222 = OpLoad %101 
                                       f32_4 %223 = OpImageSampleImplicitLod %221 %222 
                                         f32 %224 = OpCompositeExtract %223 0 
                                                      OpStore %21 %224 
                                       f32_3 %226 = OpLoad %101 
                                       f32_3 %227 = OpLoad %101 
                                         f32 %228 = OpDot %226 %227 
                                                      OpStore %225 %228 
                                         f32 %230 = OpLoad %225 
                                         f32 %231 = OpExtInst %1 31 %230 
                                                      OpStore %229 %231 
                                         f32 %232 = OpLoad %229 
                                Uniform f32* %234 = OpAccessChain %41 %233 %165 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %232 %235 
                                                      OpStore %229 %236 
                                         f32 %237 = OpLoad %229 
                                Uniform f32* %239 = OpAccessChain %41 %238 %165 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFMul %237 %240 
                                                      OpStore %229 %241 
                                         f32 %245 = OpLoad %21 
                                         f32 %246 = OpLoad %229 
                                        bool %247 = OpFOrdLessThan %245 %246 
                                                      OpStore %244 %247 
                                        bool %251 = OpLoad %244 
                                                      OpSelectionMerge %253 None 
                                                      OpBranchConditional %251 %252 %256 
                                             %252 = OpLabel 
                                Uniform f32* %254 = OpAccessChain %41 %177 %31 
                                         f32 %255 = OpLoad %254 
                                                      OpStore %250 %255 
                                                      OpBranch %253 
                                             %256 = OpLabel 
                                                      OpStore %250 %72 
                                                      OpBranch %253 
                                             %253 = OpLabel 
                                         f32 %257 = OpLoad %250 
                                Private f32* %258 = OpAccessChain %248 %31 
                                                      OpStore %258 %257 
                                Private f32* %259 = OpAccessChain %78 %31 
                                         f32 %260 = OpLoad %259 
                                Private f32* %261 = OpAccessChain %248 %31 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpFAdd %260 %262 
                                Private f32* %264 = OpAccessChain %248 %31 
                                                      OpStore %264 %263 
                                Private f32* %265 = OpAccessChain %248 %31 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpExtInst %1 43 %266 %187 %72 
                                Private f32* %268 = OpAccessChain %248 %31 
                                                      OpStore %268 %267 
                                         f32 %269 = OpLoad %225 
                                Uniform f32* %270 = OpAccessChain %41 %211 %165 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFMul %269 %271 
                                Private f32* %273 = OpAccessChain %78 %31 
                                                      OpStore %273 %272 
                                         f32 %274 = OpLoad %225 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %21 %275 
                                         f32 %276 = OpLoad %21 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_3 %278 = OpLoad %101 
                                       f32_3 %279 = OpFMul %277 %278 
                                                      OpStore %101 %279 
                  read_only Texture2DSampled %281 = OpLoad %280 
                                       f32_3 %282 = OpLoad %78 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 0 
                                       f32_4 %284 = OpImageSampleImplicitLod %281 %283 
                                         f32 %285 = OpCompositeExtract %284 3 
                                Private f32* %286 = OpAccessChain %78 %31 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %248 %31 
                                         f32 %288 = OpLoad %287 
                                Private f32* %289 = OpAccessChain %78 %31 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %78 %31 
                                                      OpStore %292 %291 
                                       f32_4 %294 = OpLoad %94 
                                       f32_3 %295 = OpVectorShuffle %294 %294 1 1 1 
                              Uniform f32_4* %297 = OpAccessChain %41 %296 %79 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFMul %295 %299 
                                                      OpStore %293 %300 
                              Uniform f32_4* %301 = OpAccessChain %41 %296 %109 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %94 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 0 0 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_3 %307 = OpLoad %293 
                                       f32_3 %308 = OpFAdd %306 %307 
                                                      OpStore %293 %308 
                              Uniform f32_4* %309 = OpAccessChain %41 %296 %61 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_4 %312 = OpLoad %94 
                                       f32_3 %313 = OpVectorShuffle %312 %312 3 3 3 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_3 %315 = OpLoad %293 
                                       f32_3 %316 = OpFAdd %314 %315 
                                                      OpStore %293 %316 
                                       f32_4 %317 = OpLoad %94 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 3 
                              Uniform f32_3* %320 = OpAccessChain %41 %109 
                                       f32_3 %321 = OpLoad %320 
                                       f32_3 %322 = OpFNegate %321 
                                       f32_3 %323 = OpFAdd %318 %322 
                                       f32_4 %324 = OpLoad %94 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
                                                      OpStore %94 %325 
                                       f32_3 %326 = OpLoad %293 
                              Uniform f32_4* %327 = OpAccessChain %41 %296 %104 
                                       f32_4 %328 = OpLoad %327 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpFAdd %326 %329 
                                                      OpStore %293 %330 
                read_only TextureCubeSampled %332 = OpLoad %331 
                                       f32_3 %333 = OpLoad %293 
                                       f32_4 %335 = OpImageSampleImplicitLod %332 %333 Bias %7 
                                         f32 %336 = OpCompositeExtract %335 3 
                                                      OpStore %21 %336 
                                         f32 %337 = OpLoad %21 
                                Private f32* %338 = OpAccessChain %78 %31 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %337 %339 
                                Private f32* %341 = OpAccessChain %78 %31 
                                                      OpStore %341 %340 
                                Private f32* %342 = OpAccessChain %78 %31 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %21 %343 
                                         f32 %344 = OpLoad %21 
                                         f32 %345 = OpExtInst %1 43 %344 %187 %72 
                                                      OpStore %21 %345 
                                       f32_4 %346 = OpLoad %94 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_4 %348 = OpLoad %94 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                         f32 %350 = OpDot %347 %349 
                                                      OpStore %225 %350 
                                         f32 %351 = OpLoad %225 
                                         f32 %352 = OpExtInst %1 32 %351 
                                                      OpStore %225 %352 
                                       f32_4 %353 = OpLoad %94 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_3 %355 = OpFNegate %354 
                                         f32 %356 = OpLoad %225 
                                       f32_3 %357 = OpCompositeConstruct %356 %356 %356 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_3 %359 = OpLoad %101 
                                       f32_3 %360 = OpFNegate %359 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %94 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %94 %363 
                                       f32_4 %364 = OpLoad %94 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                       f32_4 %366 = OpLoad %94 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                         f32 %368 = OpDot %365 %367 
                                                      OpStore %225 %368 
                                         f32 %369 = OpLoad %225 
                                         f32 %370 = OpExtInst %1 32 %369 
                                                      OpStore %225 %370 
                                         f32 %371 = OpLoad %225 
                                       f32_3 %372 = OpCompositeConstruct %371 %371 %371 
                                       f32_4 %373 = OpLoad %94 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %94 
                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
                                                      OpStore %94 %377 
                                       f32_4 %378 = OpLoad %55 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %382 = OpFMul %379 %381 
                                       f32_3 %385 = OpFAdd %382 %384 
                                                      OpStore %248 %385 
                                Private f32* %387 = OpAccessChain %55 %165 
                                         f32 %388 = OpLoad %387 
                                         f32 %390 = OpFMul %388 %389 
                                                      OpStore %386 %390 
                                       f32_3 %392 = OpLoad %248 
                                       f32_3 %393 = OpLoad %248 
                                         f32 %394 = OpDot %392 %393 
                                                      OpStore %391 %394 
                                         f32 %395 = OpLoad %391 
                                         f32 %396 = OpExtInst %1 32 %395 
                                                      OpStore %391 %396 
                                       f32_3 %397 = OpLoad %248 
                                         f32 %398 = OpLoad %391 
                                       f32_3 %399 = OpCompositeConstruct %398 %398 %398 
                                       f32_3 %400 = OpFMul %397 %399 
                                                      OpStore %248 %400 
                                       f32_4 %401 = OpLoad %94 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpLoad %248 
                                         f32 %404 = OpDot %402 %403 
                                                      OpStore %391 %404 
                                       f32_3 %405 = OpLoad %101 
                                       f32_3 %406 = OpFNegate %405 
                                       f32_3 %407 = OpLoad %248 
                                         f32 %408 = OpDot %406 %407 
                                Private f32* %409 = OpAccessChain %248 %31 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %248 %31 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpExtInst %1 40 %411 %187 
                                Private f32* %413 = OpAccessChain %248 %31 
                                                      OpStore %413 %412 
                                Private f32* %414 = OpAccessChain %78 %31 
                                         f32 %415 = OpLoad %414 
                                Private f32* %416 = OpAccessChain %248 %31 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFMul %415 %417 
                                Private f32* %419 = OpAccessChain %78 %31 
                                                      OpStore %419 %418 
                                       f32_3 %421 = OpLoad %78 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 0 0 
                              Uniform f32_4* %424 = OpAccessChain %41 %423 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFMul %422 %426 
                                       f32_4 %428 = OpLoad %420 
                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
                                                      OpStore %420 %429 
                                         f32 %430 = OpLoad %391 
                                         f32 %431 = OpExtInst %1 40 %430 %187 
                                Private f32* %432 = OpAccessChain %248 %31 
                                                      OpStore %432 %431 
                                Private f32* %433 = OpAccessChain %248 %31 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpExtInst %1 30 %434 
                                Private f32* %436 = OpAccessChain %248 %31 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %248 %31 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpLoad %386 
                                         f32 %440 = OpFMul %438 %439 
                                Private f32* %441 = OpAccessChain %248 %31 
                                                      OpStore %441 %440 
                                Private f32* %442 = OpAccessChain %248 %31 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpExtInst %1 29 %443 
                                Private f32* %445 = OpAccessChain %248 %31 
                                                      OpStore %445 %444 
                                         f32 %446 = OpLoad %21 
                                Private f32* %447 = OpAccessChain %248 %31 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpFMul %446 %448 
                                Private f32* %450 = OpAccessChain %78 %31 
                                                      OpStore %450 %449 
                              Uniform f32_4* %451 = OpAccessChain %41 %423 
                                       f32_4 %452 = OpLoad %451 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                         f32 %458 = OpDot %453 %457 
                                Private f32* %459 = OpAccessChain %248 %31 
                                                      OpStore %459 %458 
                                Private f32* %460 = OpAccessChain %78 %31 
                                         f32 %461 = OpLoad %460 
                                Private f32* %462 = OpAccessChain %248 %31 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpFMul %461 %463 
                                Private f32* %465 = OpAccessChain %420 %165 
                                                      OpStore %465 %464 
                                       f32_4 %466 = OpLoad %9 
                                       f32_4 %467 = OpVectorShuffle %466 %466 0 0 0 0 
                                       f32_4 %468 = OpLoad %420 
                                       f32_4 %469 = OpFMul %467 %468 
                                                      OpStore %9 %469 
                                       f32_4 %472 = OpLoad %9 
                                       f32_4 %473 = OpFNegate %472 
                                       f32_4 %474 = OpExtInst %1 29 %473 
                                                      OpStore %471 %474 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec4 u_xlat10_6;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec2 u_xlat18;
float u_xlat16_18;
float u_xlat19;
bool u_xlatb20;
float u_xlat27;
float u_xlat28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat28 = u_xlat19 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat28));
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlatb20 = u_xlat28<0.99000001;
    if(u_xlatb20){
        u_xlat19 = sqrt(u_xlat19);
        u_xlat19 = u_xlat19 * _LightPositionRange.w;
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_5 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_6 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat9.xyz = u_xlat9.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8 = textureLod(_ShadowMapTexture, u_xlat9.xyz, 0.0).yzwx;
        u_xlat8.x = u_xlat10_5.x;
        u_xlat8.y = u_xlat10_6.x;
        u_xlat8.z = u_xlat10_7.x;
        u_xlatb5 = lessThan(u_xlat8, vec4(u_xlat19));
        u_xlat5.x = (u_xlatb5.x) ? _LightShadowData.x : float(1.0);
        u_xlat5.y = (u_xlatb5.y) ? _LightShadowData.x : float(1.0);
        u_xlat5.z = (u_xlatb5.z) ? _LightShadowData.x : float(1.0);
        u_xlat5.w = (u_xlatb5.w) ? _LightShadowData.x : float(1.0);
        u_xlat9.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat9.x = 1.0;
    //ENDIF
    }
    u_xlat9.x = u_xlat28 + u_xlat9.x;
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat9.x = u_xlat9.x * u_xlat10_4.w;
    u_xlat18.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_1 = texture(_CameraNormalsTexture, u_xlat18.xy);
    u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz;
    u_xlat18.x = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat27) + (-u_xlat3.xyz);
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat18.y = dot(u_xlat2.xyz, u_xlat16_1.xyz);
    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
    u_xlat16_1.x = u_xlat10_1.w * 128.0;
    u_xlat27 = log2(u_xlat18.y);
    u_xlat27 = u_xlat27 * u_xlat16_1.x;
    u_xlat27 = exp2(u_xlat27);
    u_xlat1.x = u_xlat9.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat9.x = u_xlat9.x * u_xlat18.x;
    u_xlat1.xyz = u_xlat9.xxx * _LightColor.xyz;
    u_xlat9.x = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.w = u_xlat9.x * u_xlat27;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 583
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %578 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %373 DescriptorSet 373 
                                                      OpDecorate %373 Binding 373 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %399 DescriptorSet 399 
                                                      OpDecorate %399 Binding 399 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %578 Location 578 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 %7 %14 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                                 Input f32_4* %41 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypeSampledImage %51 
                                              %53 = OpTypePointer UniformConstant %52 
  UniformConstant read_only Texture2DSampled* %54 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                          u32 %65 = OpConstant 1 
                                          f32 %69 = OpConstant 3.674022E-40 
                               Private f32_4* %72 = OpVariable Private 
                                              %80 = OpTypePointer Private %10 
                               Private f32_3* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                                              %85 = OpTypePointer Uniform %7 
                                          i32 %90 = OpConstant 0 
                                         i32 %122 = OpConstant 7 
                                         u32 %145 = OpConstant 3 
                              Private f32_3* %155 = OpVariable Private 
                                         i32 %158 = OpConstant 8 
                                Private f32* %164 = OpVariable Private 
                                Private f32* %168 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %179 = OpVariable UniformConstant 
                                Private f32* %185 = OpVariable Private 
                                         i32 %188 = OpConstant 6 
                                         f32 %196 = OpConstant 3.674022E-40 
                                             %198 = OpTypeBool 
                                             %199 = OpTypePointer Private %198 
                               Private bool* %200 = OpVariable Private 
                                         f32 %202 = OpConstant 3.674022E-40 
                                         i32 %210 = OpConstant 4 
                                         i32 %215 = OpConstant 5 
                              Private f32_4* %219 = OpVariable Private 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_3 %222 = OpConstantComposite %221 %221 %221 
                                             %226 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %227 = OpTypeSampledImage %226 
                                             %228 = OpTypePointer UniformConstant %227 
UniformConstant read_only TextureCubeSampled* %229 = OpVariable UniformConstant 
                              Private f32_3* %236 = OpVariable Private 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %221 
                                       f32_3 %247 = OpConstantComposite %238 %221 %238 
                                       f32_3 %255 = OpConstantComposite %221 %238 %238 
                                             %262 = OpTypeVector %198 4 
                                             %263 = OpTypePointer Private %262 
                             Private bool_4* %264 = OpVariable Private 
                                             %269 = OpTypePointer Function %6 
                              Private f32_4* %310 = OpVariable Private 
                                         f32 %312 = OpConstant 3.674022E-40 
                                       f32_4 %313 = OpConstantComposite %312 %312 %312 %312 
                                         i32 %334 = OpConstant 11 
                                             %371 = OpTypePointer Private %42 
                              Private f32_2* %372 = OpVariable Private 
UniformConstant read_only TextureCubeSampled* %373 = OpVariable UniformConstant 
                                         f32 %377 = OpConstant 3.674022E-40 
                                         i32 %389 = OpConstant 12 
                              Private f32_4* %398 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %399 = OpVariable UniformConstant 
                                         f32 %405 = OpConstant 3.674022E-40 
                                       f32_3 %406 = OpConstantComposite %405 %405 %405 
                                         f32 %408 = OpConstant 3.674022E-40 
                                       f32_3 %409 = OpConstantComposite %408 %408 %408 
                                Private f32* %413 = OpVariable Private 
                                             %436 = OpTypePointer Uniform %10 
                                       f32_2 %489 = OpConstantComposite %196 %196 
                                Private f32* %493 = OpVariable Private 
                                         f32 %496 = OpConstant 3.674022E-40 
                                         i32 %532 = OpConstant 9 
                                         f32 %542 = OpConstant 3.674022E-40 
                                         f32 %543 = OpConstant 3.674022E-40 
                                         f32 %544 = OpConstant 3.674022E-40 
                                       f32_3 %545 = OpConstantComposite %542 %543 %544 
                                         i32 %556 = OpConstant 10 
                                             %577 = OpTypePointer Output %7 
                               Output f32_4* %578 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %270 = OpVariable Function 
                               Function f32* %280 = OpVariable Function 
                               Function f32* %290 = OpVariable Function 
                               Function f32* %300 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad %41 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %41 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 2 3 
                                                      OpStore %39 %49 
                   read_only Texture2DSampled %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %39 
                                        f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                                        f32_4 %58 = OpImageSampleImplicitLod %55 %57 
                                          f32 %59 = OpCompositeExtract %58 0 
                                                      OpStore %50 %59 
                                 Uniform f32* %61 = OpAccessChain %17 %60 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpLoad %50 
                                          f32 %64 = OpFMul %62 %63 
                                 Uniform f32* %66 = OpAccessChain %17 %60 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFAdd %64 %67 
                                                      OpStore %50 %68 
                                          f32 %70 = OpLoad %50 
                                          f32 %71 = OpFDiv %69 %70 
                                                      OpStore %50 %71 
                                          f32 %73 = OpLoad %50 
                                        f32_3 %74 = OpCompositeConstruct %73 %73 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %72 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %72 %79 
                                        f32_4 %82 = OpLoad %72 
                                        f32_3 %83 = OpVectorShuffle %82 %82 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %17 %84 %19 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %83 %88 
                                                      OpStore %81 %89 
                               Uniform f32_4* %91 = OpAccessChain %17 %84 %90 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %72 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_3 %97 = OpLoad %81 
                                        f32_3 %98 = OpFAdd %96 %97 
                                        f32_4 %99 = OpLoad %72 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 2 6 
                                                      OpStore %72 %100 
                              Uniform f32_4* %101 = OpAccessChain %17 %84 %60 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %72 
                                       f32_3 %105 = OpVectorShuffle %104 %104 2 2 2 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 3 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %72 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 6 
                                                      OpStore %72 %111 
                                       f32_4 %112 = OpLoad %72 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                              Uniform f32_4* %114 = OpAccessChain %17 %84 %84 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %72 %119 
                                       f32_4 %120 = OpLoad %72 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 3 
                              Uniform f32_4* %123 = OpAccessChain %17 %122 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFNegate %125 
                                       f32_3 %127 = OpFAdd %121 %126 
                                                      OpStore %81 %127 
                                       f32_3 %128 = OpLoad %81 
                                       f32_3 %129 = OpLoad %81 
                                         f32 %130 = OpDot %128 %129 
                                Private f32* %131 = OpAccessChain %9 %30 
                                                      OpStore %131 %130 
                                Private f32* %132 = OpAccessChain %9 %30 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpExtInst %1 31 %133 
                                Private f32* %135 = OpAccessChain %9 %30 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %20 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFNegate %137 
                                         f32 %139 = OpLoad %50 
                                         f32 %140 = OpFMul %138 %139 
                                Private f32* %141 = OpAccessChain %9 %30 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFAdd %140 %142 
                                Private f32* %144 = OpAccessChain %9 %30 
                                                      OpStore %144 %143 
                                Uniform f32* %146 = OpAccessChain %17 %122 %145 
                                         f32 %147 = OpLoad %146 
                                Private f32* %148 = OpAccessChain %9 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFMul %147 %149 
                                Private f32* %151 = OpAccessChain %72 %20 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFAdd %150 %152 
                                Private f32* %154 = OpAccessChain %9 %30 
                                                      OpStore %154 %153 
                                       f32_4 %156 = OpLoad %72 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 3 
                              Uniform f32_4* %159 = OpAccessChain %17 %158 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFNegate %161 
                                       f32_3 %163 = OpFAdd %157 %162 
                                                      OpStore %155 %163 
                                       f32_3 %165 = OpLoad %155 
                                       f32_3 %166 = OpLoad %155 
                                         f32 %167 = OpDot %165 %166 
                                                      OpStore %164 %167 
                                         f32 %169 = OpLoad %164 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %168 %170 
                                       f32_3 %171 = OpLoad %155 
                                         f32 %172 = OpLoad %168 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpFMul %171 %173 
                                                      OpStore %81 %174 
                                         f32 %175 = OpLoad %164 
                                Uniform f32* %176 = OpAccessChain %17 %158 %145 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFMul %175 %177 
                                                      OpStore %168 %178 
                  read_only Texture2DSampled %180 = OpLoad %179 
                                         f32 %181 = OpLoad %168 
                                       f32_2 %182 = OpCompositeConstruct %181 %181 
                                       f32_4 %183 = OpImageSampleImplicitLod %180 %182 
                                         f32 %184 = OpCompositeExtract %183 3 
                                                      OpStore %168 %184 
                                Private f32* %186 = OpAccessChain %9 %30 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %189 = OpAccessChain %17 %188 %20 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %187 %190 
                                Uniform f32* %192 = OpAccessChain %17 %188 %145 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFAdd %191 %193 
                                                      OpStore %185 %194 
                                         f32 %195 = OpLoad %185 
                                         f32 %197 = OpExtInst %1 43 %195 %196 %69 
                                                      OpStore %185 %197 
                                         f32 %201 = OpLoad %185 
                                        bool %203 = OpFOrdLessThan %201 %202 
                                                      OpStore %200 %203 
                                        bool %204 = OpLoad %200 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %316 
                                             %205 = OpLabel 
                                         f32 %207 = OpLoad %164 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %164 %208 
                                         f32 %209 = OpLoad %164 
                                Uniform f32* %211 = OpAccessChain %17 %210 %145 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %164 %213 
                                         f32 %214 = OpLoad %164 
                                Uniform f32* %216 = OpAccessChain %17 %215 %145 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFMul %214 %217 
                                                      OpStore %164 %218 
                                       f32_3 %220 = OpLoad %155 
                                       f32_3 %223 = OpFAdd %220 %222 
                                       f32_4 %224 = OpLoad %219 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %219 %225 
                read_only TextureCubeSampled %230 = OpLoad %229 
                                       f32_4 %231 = OpLoad %219 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpImageSampleExplicitLod %230 %232 Lod %7 
                                         f32 %234 = OpCompositeExtract %233 0 
                                Private f32* %235 = OpAccessChain %219 %30 
                                                      OpStore %235 %234 
                                       f32_3 %237 = OpLoad %155 
                                       f32_3 %240 = OpFAdd %237 %239 
                                                      OpStore %236 %240 
                read_only TextureCubeSampled %241 = OpLoad %229 
                                       f32_3 %242 = OpLoad %236 
                                       f32_4 %243 = OpImageSampleExplicitLod %241 %242 Lod %7 
                                         f32 %244 = OpCompositeExtract %243 0 
                                Private f32* %245 = OpAccessChain %219 %65 
                                                      OpStore %245 %244 
                                       f32_3 %246 = OpLoad %155 
                                       f32_3 %248 = OpFAdd %246 %247 
                                                      OpStore %236 %248 
                read_only TextureCubeSampled %249 = OpLoad %229 
                                       f32_3 %250 = OpLoad %236 
                                       f32_4 %251 = OpImageSampleExplicitLod %249 %250 Lod %7 
                                         f32 %252 = OpCompositeExtract %251 0 
                                Private f32* %253 = OpAccessChain %219 %20 
                                                      OpStore %253 %252 
                                       f32_3 %254 = OpLoad %155 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore %155 %256 
                read_only TextureCubeSampled %257 = OpLoad %229 
                                       f32_3 %258 = OpLoad %155 
                                       f32_4 %259 = OpImageSampleExplicitLod %257 %258 Lod %7 
                                         f32 %260 = OpCompositeExtract %259 0 
                                Private f32* %261 = OpAccessChain %219 %145 
                                                      OpStore %261 %260 
                                       f32_4 %265 = OpLoad %219 
                                         f32 %266 = OpLoad %164 
                                       f32_4 %267 = OpCompositeConstruct %266 %266 %266 %266 
                                      bool_4 %268 = OpFOrdLessThan %265 %267 
                                                      OpStore %264 %268 
                                      bool_4 %271 = OpLoad %264 
                                        bool %272 = OpCompositeExtract %271 0 
                                                      OpSelectionMerge %274 None 
                                                      OpBranchConditional %272 %273 %277 
                                             %273 = OpLabel 
                                Uniform f32* %275 = OpAccessChain %17 %188 %30 
                                         f32 %276 = OpLoad %275 
                                                      OpStore %270 %276 
                                                      OpBranch %274 
                                             %277 = OpLabel 
                                                      OpStore %270 %69 
                                                      OpBranch %274 
                                             %274 = OpLabel 
                                         f32 %278 = OpLoad %270 
                                Private f32* %279 = OpAccessChain %219 %30 
                                                      OpStore %279 %278 
                                      bool_4 %281 = OpLoad %264 
                                        bool %282 = OpCompositeExtract %281 1 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %287 
                                             %283 = OpLabel 
                                Uniform f32* %285 = OpAccessChain %17 %188 %30 
                                         f32 %286 = OpLoad %285 
                                                      OpStore %280 %286 
                                                      OpBranch %284 
                                             %287 = OpLabel 
                                                      OpStore %280 %69 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                         f32 %288 = OpLoad %280 
                                Private f32* %289 = OpAccessChain %219 %65 
                                                      OpStore %289 %288 
                                      bool_4 %291 = OpLoad %264 
                                        bool %292 = OpCompositeExtract %291 2 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %292 %293 %297 
                                             %293 = OpLabel 
                                Uniform f32* %295 = OpAccessChain %17 %188 %30 
                                         f32 %296 = OpLoad %295 
                                                      OpStore %290 %296 
                                                      OpBranch %294 
                                             %297 = OpLabel 
                                                      OpStore %290 %69 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                         f32 %298 = OpLoad %290 
                                Private f32* %299 = OpAccessChain %219 %20 
                                                      OpStore %299 %298 
                                      bool_4 %301 = OpLoad %264 
                                        bool %302 = OpCompositeExtract %301 3 
                                                      OpSelectionMerge %304 None 
                                                      OpBranchConditional %302 %303 %307 
                                             %303 = OpLabel 
                                Uniform f32* %305 = OpAccessChain %17 %188 %30 
                                         f32 %306 = OpLoad %305 
                                                      OpStore %300 %306 
                                                      OpBranch %304 
                                             %307 = OpLabel 
                                                      OpStore %300 %69 
                                                      OpBranch %304 
                                             %304 = OpLabel 
                                         f32 %308 = OpLoad %300 
                                Private f32* %309 = OpAccessChain %219 %145 
                                                      OpStore %309 %308 
                                       f32_4 %311 = OpLoad %219 
                                         f32 %314 = OpDot %311 %313 
                                Private f32* %315 = OpAccessChain %310 %30 
                                                      OpStore %315 %314 
                                                      OpBranch %206 
                                             %316 = OpLabel 
                                Private f32* %317 = OpAccessChain %310 %30 
                                                      OpStore %317 %69 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                         f32 %318 = OpLoad %185 
                                Private f32* %319 = OpAccessChain %310 %30 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFAdd %318 %320 
                                Private f32* %322 = OpAccessChain %310 %30 
                                                      OpStore %322 %321 
                                Private f32* %323 = OpAccessChain %310 %30 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpExtInst %1 43 %324 %196 %69 
                                Private f32* %326 = OpAccessChain %310 %30 
                                                      OpStore %326 %325 
                                         f32 %327 = OpLoad %168 
                                Private f32* %328 = OpAccessChain %310 %30 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %327 %329 
                                Private f32* %331 = OpAccessChain %155 %30 
                                                      OpStore %331 %330 
                                       f32_4 %332 = OpLoad %72 
                                       f32_3 %333 = OpVectorShuffle %332 %332 1 1 1 
                              Uniform f32_4* %335 = OpAccessChain %17 %334 %19 
                                       f32_4 %336 = OpLoad %335 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_3 %338 = OpFMul %333 %337 
                                       f32_4 %339 = OpLoad %219 
                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
                                                      OpStore %219 %340 
                              Uniform f32_4* %341 = OpAccessChain %17 %334 %90 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_4 %344 = OpLoad %72 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 0 0 
                                       f32_3 %346 = OpFMul %343 %345 
                                       f32_4 %347 = OpLoad %219 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFAdd %346 %348 
                                       f32_4 %350 = OpLoad %219 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %219 %351 
                              Uniform f32_4* %352 = OpAccessChain %17 %334 %60 
                                       f32_4 %353 = OpLoad %352 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_4 %355 = OpLoad %72 
                                       f32_3 %356 = OpVectorShuffle %355 %355 3 3 3 
                                       f32_3 %357 = OpFMul %354 %356 
                                       f32_4 %358 = OpLoad %219 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFAdd %357 %359 
                                       f32_4 %361 = OpLoad %219 
                                       f32_4 %362 = OpVectorShuffle %361 %360 4 5 6 3 
                                                      OpStore %219 %362 
                                       f32_4 %363 = OpLoad %219 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                              Uniform f32_4* %365 = OpAccessChain %17 %334 %84 
                                       f32_4 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpFAdd %364 %367 
                                       f32_4 %369 = OpLoad %219 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %219 %370 
                read_only TextureCubeSampled %374 = OpLoad %373 
                                       f32_4 %375 = OpLoad %219 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_4 %378 = OpImageSampleImplicitLod %374 %376 Bias %7 
                                         f32 %379 = OpCompositeExtract %378 3 
                                Private f32* %380 = OpAccessChain %372 %30 
                                                      OpStore %380 %379 
                                Private f32* %381 = OpAccessChain %372 %30 
                                         f32 %382 = OpLoad %381 
                                Private f32* %383 = OpAccessChain %155 %30 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFMul %382 %384 
                                Private f32* %386 = OpAccessChain %155 %30 
                                                      OpStore %386 %385 
                                       f32_4 %387 = OpLoad %39 
                                       f32_2 %388 = OpVectorShuffle %387 %387 0 1 
                              Uniform f32_4* %390 = OpAccessChain %17 %389 
                                       f32_4 %391 = OpLoad %390 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 1 
                                       f32_2 %393 = OpFMul %388 %392 
                              Uniform f32_4* %394 = OpAccessChain %17 %389 
                                       f32_4 %395 = OpLoad %394 
                                       f32_2 %396 = OpVectorShuffle %395 %395 2 3 
                                       f32_2 %397 = OpFAdd %393 %396 
                                                      OpStore %372 %397 
                  read_only Texture2DSampled %400 = OpLoad %399 
                                       f32_2 %401 = OpLoad %372 
                                       f32_4 %402 = OpImageSampleImplicitLod %400 %401 
                                                      OpStore %398 %402 
                                       f32_4 %403 = OpLoad %398 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_3 %407 = OpFMul %404 %406 
                                       f32_3 %410 = OpFAdd %407 %409 
                                       f32_4 %411 = OpLoad %310 
                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
                                                      OpStore %310 %412 
                                       f32_4 %414 = OpLoad %310 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_4 %416 = OpLoad %310 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                         f32 %418 = OpDot %415 %417 
                                                      OpStore %413 %418 
                                         f32 %419 = OpLoad %413 
                                         f32 %420 = OpExtInst %1 32 %419 
                                                      OpStore %413 %420 
                                         f32 %421 = OpLoad %413 
                                       f32_3 %422 = OpCompositeConstruct %421 %421 %421 
                                       f32_4 %423 = OpLoad %310 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_3 %425 = OpFMul %422 %424 
                                       f32_4 %426 = OpLoad %310 
                                       f32_4 %427 = OpVectorShuffle %426 %425 4 5 6 3 
                                                      OpStore %310 %427 
                                       f32_3 %428 = OpLoad %81 
                                       f32_3 %429 = OpFNegate %428 
                                       f32_4 %430 = OpLoad %310 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                         f32 %432 = OpDot %429 %431 
                                Private f32* %433 = OpAccessChain %310 %145 
                                                      OpStore %433 %432 
                                       f32_4 %434 = OpLoad %72 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 3 
                              Uniform f32_3* %437 = OpAccessChain %17 %90 
                                       f32_3 %438 = OpLoad %437 
                                       f32_3 %439 = OpFNegate %438 
                                       f32_3 %440 = OpFAdd %435 %439 
                                       f32_4 %441 = OpLoad %39 
                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 6 3 
                                                      OpStore %39 %442 
                                       f32_4 %443 = OpLoad %39 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_4 %445 = OpLoad %39 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                         f32 %447 = OpDot %444 %446 
                                Private f32* %448 = OpAccessChain %372 %30 
                                                      OpStore %448 %447 
                                Private f32* %449 = OpAccessChain %372 %30 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpExtInst %1 32 %450 
                                Private f32* %452 = OpAccessChain %372 %30 
                                                      OpStore %452 %451 
                                       f32_4 %453 = OpLoad %39 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                                       f32_3 %455 = OpFNegate %454 
                                       f32_2 %456 = OpLoad %372 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 0 0 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %81 
                                       f32_3 %460 = OpFNegate %459 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %39 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %39 %463 
                                       f32_4 %464 = OpLoad %39 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_4 %466 = OpLoad %39 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                Private f32* %469 = OpAccessChain %372 %30 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %372 %30 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpExtInst %1 32 %471 
                                Private f32* %473 = OpAccessChain %372 %30 
                                                      OpStore %473 %472 
                                       f32_2 %474 = OpLoad %372 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_4 %476 = OpLoad %39 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %39 
                                       f32_4 %480 = OpVectorShuffle %479 %478 4 5 6 3 
                                                      OpStore %39 %480 
                                       f32_4 %481 = OpLoad %39 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 1 2 
                                       f32_4 %483 = OpLoad %310 
                                       f32_3 %484 = OpVectorShuffle %483 %483 0 1 2 
                                         f32 %485 = OpDot %482 %484 
                                Private f32* %486 = OpAccessChain %310 %30 
                                                      OpStore %486 %485 
                                       f32_4 %487 = OpLoad %310 
                                       f32_2 %488 = OpVectorShuffle %487 %487 0 3 
                                       f32_2 %490 = OpExtInst %1 40 %488 %489 
                                       f32_4 %491 = OpLoad %310 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 1 2 5 
                                                      OpStore %310 %492 
                                Private f32* %494 = OpAccessChain %398 %145 
                                         f32 %495 = OpLoad %494 
                                         f32 %497 = OpFMul %495 %496 
                                                      OpStore %493 %497 
                                Private f32* %498 = OpAccessChain %310 %30 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpExtInst %1 30 %499 
                                Private f32* %501 = OpAccessChain %310 %30 
                                                      OpStore %501 %500 
                                Private f32* %502 = OpAccessChain %310 %30 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpLoad %493 
                                         f32 %505 = OpFMul %503 %504 
                                Private f32* %506 = OpAccessChain %310 %30 
                                                      OpStore %506 %505 
                                Private f32* %507 = OpAccessChain %310 %30 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpExtInst %1 29 %508 
                                Private f32* %510 = OpAccessChain %310 %30 
                                                      OpStore %510 %509 
                                Private f32* %511 = OpAccessChain %155 %30 
                                         f32 %512 = OpLoad %511 
                                Private f32* %513 = OpAccessChain %372 %30 
                                                      OpStore %513 %512 
                                Private f32* %514 = OpAccessChain %372 %30 
                                         f32 %515 = OpLoad %514 
                                         f32 %516 = OpExtInst %1 43 %515 %196 %69 
                                Private f32* %517 = OpAccessChain %372 %30 
                                                      OpStore %517 %516 
                                Private f32* %518 = OpAccessChain %372 %30 
                                         f32 %519 = OpLoad %518 
                                Private f32* %520 = OpAccessChain %310 %30 
                                         f32 %521 = OpLoad %520 
                                         f32 %522 = OpFMul %519 %521 
                                Private f32* %523 = OpAccessChain %372 %30 
                                                      OpStore %523 %522 
                                Private f32* %524 = OpAccessChain %155 %30 
                                         f32 %525 = OpLoad %524 
                                Private f32* %526 = OpAccessChain %310 %145 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpFMul %525 %527 
                                Private f32* %529 = OpAccessChain %155 %30 
                                                      OpStore %529 %528 
                                       f32_3 %530 = OpLoad %155 
                                       f32_3 %531 = OpVectorShuffle %530 %530 0 0 0 
                              Uniform f32_4* %533 = OpAccessChain %17 %532 
                                       f32_4 %534 = OpLoad %533 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
                                       f32_3 %536 = OpFMul %531 %535 
                                       f32_4 %537 = OpLoad %39 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 5 6 3 
                                                      OpStore %39 %538 
                              Uniform f32_4* %539 = OpAccessChain %17 %532 
                                       f32_4 %540 = OpLoad %539 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                         f32 %546 = OpDot %541 %545 
                                Private f32* %547 = OpAccessChain %310 %30 
                                                      OpStore %547 %546 
                                Private f32* %548 = OpAccessChain %372 %30 
                                         f32 %549 = OpLoad %548 
                                Private f32* %550 = OpAccessChain %310 %30 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpFMul %549 %551 
                                Private f32* %553 = OpAccessChain %39 %145 
                                                      OpStore %553 %552 
                                Private f32* %554 = OpAccessChain %9 %30 
                                         f32 %555 = OpLoad %554 
                                Uniform f32* %557 = OpAccessChain %17 %556 %20 
                                         f32 %558 = OpLoad %557 
                                         f32 %559 = OpFMul %555 %558 
                                Uniform f32* %560 = OpAccessChain %17 %556 %145 
                                         f32 %561 = OpLoad %560 
                                         f32 %562 = OpFAdd %559 %561 
                                Private f32* %563 = OpAccessChain %9 %30 
                                                      OpStore %563 %562 
                                Private f32* %564 = OpAccessChain %9 %30 
                                         f32 %565 = OpLoad %564 
                                         f32 %566 = OpFNegate %565 
                                         f32 %567 = OpFAdd %566 %69 
                                Private f32* %568 = OpAccessChain %9 %30 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %9 %30 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpExtInst %1 43 %570 %196 %69 
                                Private f32* %572 = OpAccessChain %9 %30 
                                                      OpStore %572 %571 
                                       f32_4 %573 = OpLoad %9 
                                       f32_4 %574 = OpVectorShuffle %573 %573 0 0 0 0 
                                       f32_4 %575 = OpLoad %39 
                                       f32_4 %576 = OpFMul %574 %575 
                                                      OpStore %9 %576 
                                       f32_4 %579 = OpLoad %9 
                                       f32_4 %580 = OpFNegate %579 
                                       f32_4 %581 = OpExtInst %1 29 %580 
                                                      OpStore %578 %581 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
}
}
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  Blend One One, One One
  ZWrite Off
  GpuProgramID 127399
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
float u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
float u_xlat16_3;
vec3 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat11;
float u_xlat16_15;
float u_xlat16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat1 = (-u_xlat6.z) * u_xlat1 + u_xlat11;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = inversesqrt(u_xlat11);
    u_xlat11 = u_xlat11 * _LightPos.w;
    u_xlat10_2 = texture(_LightTextureB0, vec2(u_xlat11)).wxyz;
    u_xlat7.xyz = vec3(u_xlat16) * u_xlat4.xyz;
    u_xlat6.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + (-u_xlat7.xyz);
    u_xlat3.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_15 = u_xlat10_0.w * 128.0;
    u_xlat16_3 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_3 = inversesqrt(u_xlat16_3);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_3);
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat10_2.x * u_xlat0.x;
    u_xlat16_2 = u_xlat10_2.x;
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat6.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat16_2 * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = vec4(u_xlat1) * u_xlat3;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 360
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %83 %357 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %228 DescriptorSet 228 
                                                      OpDecorate %228 Binding 228 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %280 RelaxedPrecision 
                                                      OpDecorate %281 RelaxedPrecision 
                                                      OpDecorate %282 RelaxedPrecision 
                                                      OpDecorate %283 RelaxedPrecision 
                                                      OpDecorate %284 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %291 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %300 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %357 Location 357 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %7 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 8 
                                              %43 = OpTypePointer Uniform %7 
                               Private f32_4* %54 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %55 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                              %61 = OpTypePointer Uniform %6 
                                          u32 %66 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Private %35 
                               Private f32_3* %77 = OpVariable Private 
                                          i32 %78 = OpConstant 1 
                                          u32 %79 = OpConstant 2 
                                              %82 = OpTypePointer Input %35 
                                 Input f32_3* %83 = OpVariable Input 
                                              %84 = OpTypePointer Input %6 
                               Private f32_4* %93 = OpVariable Private 
                              Private f32_3* %100 = OpVariable Private 
                                         i32 %103 = OpConstant 3 
                                         i32 %108 = OpConstant 0 
                                             %140 = OpTypePointer Uniform %35 
                              Private f32_3* %153 = OpVariable Private 
                                         i32 %156 = OpConstant 5 
                                         i32 %164 = OpConstant 4 
                                         u32 %188 = OpConstant 3 
                                         i32 %200 = OpConstant 7 
                                         f32 %215 = OpConstant 3.674022E-40 
                                Private f32* %221 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %228 = OpVariable UniformConstant 
                              Private f32_3* %261 = OpVariable Private 
                                         f32 %264 = OpConstant 3.674022E-40 
                                       f32_3 %265 = OpConstantComposite %264 %264 %264 
                                         f32 %267 = OpConstant 3.674022E-40 
                                       f32_3 %268 = OpConstantComposite %267 %267 %267 
                                Private f32* %270 = OpVariable Private 
                                         f32 %273 = OpConstant 3.674022E-40 
                                Private f32* %275 = OpVariable Private 
                              Private f32_4* %306 = OpVariable Private 
                                         i32 %309 = OpConstant 6 
                                         f32 %340 = OpConstant 3.674022E-40 
                                         f32 %341 = OpConstant 3.674022E-40 
                                         f32 %342 = OpConstant 3.674022E-40 
                                       f32_3 %343 = OpConstantComposite %340 %341 %342 
                                             %356 = OpTypePointer Output %7 
                               Output f32_4* %357 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %44 = OpAccessChain %40 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_2 %47 = OpFMul %34 %46 
                               Uniform f32_4* %48 = OpAccessChain %40 %42 
                                        f32_4 %49 = OpLoad %48 
                                        f32_2 %50 = OpVectorShuffle %49 %49 2 3 
                                        f32_2 %51 = OpFAdd %47 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                   read_only Texture2DSampled %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_2 %58 = OpVectorShuffle %57 %57 0 1 
                                        f32_4 %59 = OpImageSampleImplicitLod %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %40 %60 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %21 
                                          f32 %65 = OpFMul %63 %64 
                                 Uniform f32* %67 = OpAccessChain %40 %60 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFAdd %65 %68 
                                 Private f32* %70 = OpAccessChain %9 %31 
                                                      OpStore %70 %69 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFDiv %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %31 
                                                      OpStore %75 %74 
                                 Uniform f32* %80 = OpAccessChain %40 %78 %79 
                                          f32 %81 = OpLoad %80 
                                   Input f32* %85 = OpAccessChain %83 %79 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFDiv %81 %86 
                                 Private f32* %88 = OpAccessChain %77 %31 
                                                      OpStore %88 %87 
                                        f32_3 %89 = OpLoad %77 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 0 0 
                                        f32_3 %91 = OpLoad %83 
                                        f32_3 %92 = OpFMul %90 %91 
                                                      OpStore %77 %92 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpLoad %77 
                                        f32_3 %97 = OpFMul %95 %96 
                                        f32_4 %98 = OpLoad %93 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
                                                      OpStore %93 %99 
                                       f32_4 %101 = OpLoad %93 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %104 = OpAccessChain %40 %103 %78 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFMul %102 %106 
                                                      OpStore %100 %107 
                              Uniform f32_4* %109 = OpAccessChain %40 %103 %108 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %93 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %100 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %93 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %93 %118 
                              Uniform f32_4* %119 = OpAccessChain %40 %103 %60 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %93 
                                       f32_3 %123 = OpVectorShuffle %122 %122 2 2 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %93 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 2 6 
                                                      OpStore %93 %129 
                                       f32_4 %130 = OpLoad %93 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 3 
                              Uniform f32_4* %132 = OpAccessChain %40 %103 %103 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFAdd %131 %134 
                                       f32_4 %136 = OpLoad %93 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %93 %137 
                                       f32_4 %138 = OpLoad %93 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                              Uniform f32_3* %141 = OpAccessChain %40 %108 
                                       f32_3 %142 = OpLoad %141 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                                      OpStore %100 %144 
                                       f32_3 %145 = OpLoad %100 
                                       f32_3 %146 = OpLoad %100 
                                         f32 %147 = OpDot %145 %146 
                                Private f32* %148 = OpAccessChain %77 %31 
                                                      OpStore %148 %147 
                                Private f32* %149 = OpAccessChain %77 %31 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpExtInst %1 32 %150 
                                Private f32* %152 = OpAccessChain %77 %31 
                                                      OpStore %152 %151 
                                       f32_4 %154 = OpLoad %93 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 3 
                              Uniform f32_4* %157 = OpAccessChain %40 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFNegate %159 
                                       f32_3 %161 = OpFAdd %155 %160 
                                                      OpStore %153 %161 
                                       f32_4 %162 = OpLoad %93 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 3 
                              Uniform f32_4* %165 = OpAccessChain %40 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFNegate %167 
                                       f32_3 %169 = OpFAdd %163 %168 
                                       f32_4 %170 = OpLoad %93 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 2 6 
                                                      OpStore %93 %171 
                                       f32_4 %172 = OpLoad %93 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 3 
                                       f32_4 %174 = OpLoad %93 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 3 
                                         f32 %176 = OpDot %173 %175 
                                                      OpStore %21 %176 
                                         f32 %177 = OpLoad %21 
                                         f32 %178 = OpExtInst %1 31 %177 
                                                      OpStore %21 %178 
                                Private f32* %179 = OpAccessChain %77 %79 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFNegate %180 
                                Private f32* %182 = OpAccessChain %9 %31 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %181 %183 
                                         f32 %185 = OpLoad %21 
                                         f32 %186 = OpFAdd %184 %185 
                                Private f32* %187 = OpAccessChain %9 %31 
                                                      OpStore %187 %186 
                                Uniform f32* %189 = OpAccessChain %40 %164 %188 
                                         f32 %190 = OpLoad %189 
                                Private f32* %191 = OpAccessChain %9 %31 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                Private f32* %194 = OpAccessChain %93 %79 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFAdd %193 %195 
                                Private f32* %197 = OpAccessChain %9 %31 
                                                      OpStore %197 %196 
                                Private f32* %198 = OpAccessChain %9 %31 
                                         f32 %199 = OpLoad %198 
                                Uniform f32* %201 = OpAccessChain %40 %200 %79 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFMul %199 %202 
                                Uniform f32* %204 = OpAccessChain %40 %200 %188 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFAdd %203 %205 
                                Private f32* %207 = OpAccessChain %9 %31 
                                                      OpStore %207 %206 
                                Private f32* %208 = OpAccessChain %9 %31 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %210 %71 
                                Private f32* %212 = OpAccessChain %9 %31 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %9 %31 
                                         f32 %214 = OpLoad %213 
                                         f32 %216 = OpExtInst %1 43 %214 %215 %71 
                                Private f32* %217 = OpAccessChain %9 %31 
                                                      OpStore %217 %216 
                                       f32_3 %218 = OpLoad %153 
                                       f32_3 %219 = OpLoad %153 
                                         f32 %220 = OpDot %218 %219 
                                                      OpStore %21 %220 
                                         f32 %222 = OpLoad %21 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %221 %223 
                                         f32 %224 = OpLoad %21 
                                Uniform f32* %225 = OpAccessChain %40 %156 %188 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFMul %224 %226 
                                                      OpStore %21 %227 
                  read_only Texture2DSampled %229 = OpLoad %228 
                                         f32 %230 = OpLoad %21 
                                       f32_2 %231 = OpCompositeConstruct %230 %230 
                                       f32_4 %232 = OpImageSampleImplicitLod %229 %231 
                                         f32 %233 = OpCompositeExtract %232 3 
                                                      OpStore %21 %233 
                                         f32 %234 = OpLoad %221 
                                       f32_3 %235 = OpCompositeConstruct %234 %234 %234 
                                       f32_3 %236 = OpLoad %153 
                                       f32_3 %237 = OpFMul %235 %236 
                                       f32_4 %238 = OpLoad %93 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                                      OpStore %93 %239 
                                       f32_3 %240 = OpLoad %100 
                                       f32_3 %241 = OpFNegate %240 
                                       f32_3 %242 = OpLoad %77 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 0 0 
                                       f32_3 %244 = OpFMul %241 %243 
                                       f32_4 %245 = OpLoad %93 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFNegate %246 
                                       f32_3 %248 = OpFAdd %244 %247 
                                                      OpStore %100 %248 
                                       f32_3 %249 = OpLoad %100 
                                       f32_3 %250 = OpLoad %100 
                                         f32 %251 = OpDot %249 %250 
                                Private f32* %252 = OpAccessChain %77 %31 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %77 %31 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 32 %254 
                                Private f32* %256 = OpAccessChain %77 %31 
                                                      OpStore %256 %255 
                                       f32_3 %257 = OpLoad %77 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpLoad %100 
                                       f32_3 %260 = OpFMul %258 %259 
                                                      OpStore %100 %260 
                                       f32_4 %262 = OpLoad %54 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %269 = OpFAdd %266 %268 
                                                      OpStore %261 %269 
                                Private f32* %271 = OpAccessChain %54 %188 
                                         f32 %272 = OpLoad %271 
                                         f32 %274 = OpFMul %272 %273 
                                                      OpStore %270 %274 
                                       f32_3 %276 = OpLoad %261 
                                       f32_3 %277 = OpLoad %261 
                                         f32 %278 = OpDot %276 %277 
                                                      OpStore %275 %278 
                                         f32 %279 = OpLoad %275 
                                         f32 %280 = OpExtInst %1 32 %279 
                                                      OpStore %275 %280 
                                       f32_3 %281 = OpLoad %261 
                                         f32 %282 = OpLoad %275 
                                       f32_3 %283 = OpCompositeConstruct %282 %282 %282 
                                       f32_3 %284 = OpFMul %281 %283 
                                                      OpStore %261 %284 
                                       f32_3 %285 = OpLoad %100 
                                       f32_3 %286 = OpLoad %261 
                                         f32 %287 = OpDot %285 %286 
                                                      OpStore %275 %287 
                                       f32_4 %288 = OpLoad %93 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_3 %290 = OpFNegate %289 
                                       f32_3 %291 = OpLoad %261 
                                         f32 %292 = OpDot %290 %291 
                                Private f32* %293 = OpAccessChain %261 %31 
                                                      OpStore %293 %292 
                                Private f32* %294 = OpAccessChain %261 %31 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 40 %295 %215 
                                Private f32* %297 = OpAccessChain %261 %31 
                                                      OpStore %297 %296 
                                         f32 %298 = OpLoad %21 
                                Private f32* %299 = OpAccessChain %261 %31 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFMul %298 %300 
                                Private f32* %302 = OpAccessChain %77 %31 
                                                      OpStore %302 %301 
                                         f32 %303 = OpLoad %21 
                                                      OpStore %21 %303 
                                         f32 %304 = OpLoad %21 
                                         f32 %305 = OpExtInst %1 43 %304 %215 %71 
                                                      OpStore %21 %305 
                                       f32_3 %307 = OpLoad %77 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 0 0 
                              Uniform f32_4* %310 = OpAccessChain %40 %309 
                                       f32_4 %311 = OpLoad %310 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %313 = OpFMul %308 %312 
                                       f32_4 %314 = OpLoad %306 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %306 %315 
                                         f32 %316 = OpLoad %275 
                                         f32 %317 = OpExtInst %1 40 %316 %215 
                                Private f32* %318 = OpAccessChain %261 %31 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %261 %31 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpExtInst %1 30 %320 
                                Private f32* %322 = OpAccessChain %261 %31 
                                                      OpStore %322 %321 
                                Private f32* %323 = OpAccessChain %261 %31 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpLoad %270 
                                         f32 %326 = OpFMul %324 %325 
                                Private f32* %327 = OpAccessChain %261 %31 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %261 %31 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 29 %329 
                                Private f32* %331 = OpAccessChain %261 %31 
                                                      OpStore %331 %330 
                                         f32 %332 = OpLoad %21 
                                Private f32* %333 = OpAccessChain %261 %31 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                Private f32* %336 = OpAccessChain %77 %31 
                                                      OpStore %336 %335 
                              Uniform f32_4* %337 = OpAccessChain %40 %309 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                         f32 %344 = OpDot %339 %343 
                                Private f32* %345 = OpAccessChain %261 %31 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %77 %31 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %261 %31 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFMul %347 %349 
                                Private f32* %351 = OpAccessChain %306 %188 
                                                      OpStore %351 %350 
                                       f32_4 %352 = OpLoad %9 
                                       f32_4 %353 = OpVectorShuffle %352 %352 0 0 0 0 
                                       f32_4 %354 = OpLoad %306 
                                       f32_4 %355 = OpFMul %353 %354 
                                                      OpStore %9 %355 
                                       f32_4 %358 = OpLoad %9 
                                                      OpStore %357 %358 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
float u_xlat16_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat16_12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat5.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat5.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat1 = (-u_xlat5.z) * u_xlat1 + u_xlat5.x;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat5.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = (-u_xlat2.xyw) * u_xlat5.xxx + (-_LightDir.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_12 = u_xlat10_0.w * 128.0;
    u_xlat16_2 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_2 = inversesqrt(u_xlat16_2);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2);
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-_LightDir.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat5.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_12;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat4 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat4 * u_xlat0.x;
    SV_Target0 = vec4(u_xlat1) * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 323
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %83 %320 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %273 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %289 RelaxedPrecision 
                                                      OpDecorate %290 RelaxedPrecision 
                                                      OpDecorate %293 RelaxedPrecision 
                                                      OpDecorate %294 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %299 RelaxedPrecision 
                                                      OpDecorate %301 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %320 Location 320 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %7 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 8 
                                              %43 = OpTypePointer Uniform %7 
                               Private f32_4* %54 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %55 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                              %61 = OpTypePointer Uniform %6 
                                          u32 %66 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Private %35 
                               Private f32_3* %77 = OpVariable Private 
                                          i32 %78 = OpConstant 1 
                                          u32 %79 = OpConstant 2 
                                              %82 = OpTypePointer Input %35 
                                 Input f32_3* %83 = OpVariable Input 
                                              %84 = OpTypePointer Input %6 
                               Private f32_4* %93 = OpVariable Private 
                              Private f32_3* %100 = OpVariable Private 
                                         i32 %103 = OpConstant 3 
                                         i32 %108 = OpConstant 0 
                                         i32 %140 = OpConstant 4 
                                             %148 = OpTypePointer Uniform %35 
                                         u32 %173 = OpConstant 3 
                                         i32 %185 = OpConstant 7 
                                         f32 %200 = OpConstant 3.674022E-40 
                                         i32 %219 = OpConstant 5 
                              Private f32_3* %237 = OpVariable Private 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_3 %241 = OpConstantComposite %240 %240 %240 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_3 %244 = OpConstantComposite %243 %243 %243 
                                Private f32* %246 = OpVariable Private 
                                         f32 %249 = OpConstant 3.674022E-40 
                                Private f32* %251 = OpVariable Private 
                              Private f32_4* %275 = OpVariable Private 
                                         i32 %278 = OpConstant 6 
                                Private f32* %301 = OpVariable Private 
                                         f32 %305 = OpConstant 3.674022E-40 
                                         f32 %306 = OpConstant 3.674022E-40 
                                         f32 %307 = OpConstant 3.674022E-40 
                                       f32_3 %308 = OpConstantComposite %305 %306 %307 
                                             %319 = OpTypePointer Output %7 
                               Output f32_4* %320 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %44 = OpAccessChain %40 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_2 %47 = OpFMul %34 %46 
                               Uniform f32_4* %48 = OpAccessChain %40 %42 
                                        f32_4 %49 = OpLoad %48 
                                        f32_2 %50 = OpVectorShuffle %49 %49 2 3 
                                        f32_2 %51 = OpFAdd %47 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                   read_only Texture2DSampled %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_2 %58 = OpVectorShuffle %57 %57 0 1 
                                        f32_4 %59 = OpImageSampleImplicitLod %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %40 %60 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %21 
                                          f32 %65 = OpFMul %63 %64 
                                 Uniform f32* %67 = OpAccessChain %40 %60 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFAdd %65 %68 
                                 Private f32* %70 = OpAccessChain %9 %31 
                                                      OpStore %70 %69 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFDiv %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %31 
                                                      OpStore %75 %74 
                                 Uniform f32* %80 = OpAccessChain %40 %78 %79 
                                          f32 %81 = OpLoad %80 
                                   Input f32* %85 = OpAccessChain %83 %79 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFDiv %81 %86 
                                 Private f32* %88 = OpAccessChain %77 %31 
                                                      OpStore %88 %87 
                                        f32_3 %89 = OpLoad %77 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 0 0 
                                        f32_3 %91 = OpLoad %83 
                                        f32_3 %92 = OpFMul %90 %91 
                                                      OpStore %77 %92 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpLoad %77 
                                        f32_3 %97 = OpFMul %95 %96 
                                        f32_4 %98 = OpLoad %93 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
                                                      OpStore %93 %99 
                                       f32_4 %101 = OpLoad %93 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %104 = OpAccessChain %40 %103 %78 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFMul %102 %106 
                                                      OpStore %100 %107 
                              Uniform f32_4* %109 = OpAccessChain %40 %103 %108 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %93 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %100 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %93 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %93 %118 
                              Uniform f32_4* %119 = OpAccessChain %40 %103 %60 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %93 
                                       f32_3 %123 = OpVectorShuffle %122 %122 2 2 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %93 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 2 6 
                                                      OpStore %93 %129 
                                       f32_4 %130 = OpLoad %93 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 3 
                              Uniform f32_4* %132 = OpAccessChain %40 %103 %103 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFAdd %131 %134 
                                       f32_4 %136 = OpLoad %93 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %93 %137 
                                       f32_4 %138 = OpLoad %93 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                              Uniform f32_4* %141 = OpAccessChain %40 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %139 %144 
                                                      OpStore %100 %145 
                                       f32_4 %146 = OpLoad %93 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 3 
                              Uniform f32_3* %149 = OpAccessChain %40 %108 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %147 %151 
                                       f32_4 %153 = OpLoad %93 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 2 6 
                                                      OpStore %93 %154 
                                       f32_3 %155 = OpLoad %100 
                                       f32_3 %156 = OpLoad %100 
                                         f32 %157 = OpDot %155 %156 
                                Private f32* %158 = OpAccessChain %77 %31 
                                                      OpStore %158 %157 
                                Private f32* %159 = OpAccessChain %77 %31 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpExtInst %1 31 %160 
                                Private f32* %162 = OpAccessChain %77 %31 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %77 %79 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFNegate %164 
                                Private f32* %166 = OpAccessChain %9 %31 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFMul %165 %167 
                                Private f32* %169 = OpAccessChain %77 %31 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %31 
                                                      OpStore %172 %171 
                                Uniform f32* %174 = OpAccessChain %40 %140 %173 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %9 %31 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFMul %175 %177 
                                Private f32* %179 = OpAccessChain %93 %79 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFAdd %178 %180 
                                Private f32* %182 = OpAccessChain %9 %31 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %9 %31 
                                         f32 %184 = OpLoad %183 
                                Uniform f32* %186 = OpAccessChain %40 %185 %79 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %184 %187 
                                Uniform f32* %189 = OpAccessChain %40 %185 %173 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFAdd %188 %190 
                                Private f32* %192 = OpAccessChain %9 %31 
                                                      OpStore %192 %191 
                                Private f32* %193 = OpAccessChain %9 %31 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFNegate %194 
                                         f32 %196 = OpFAdd %195 %71 
                                Private f32* %197 = OpAccessChain %9 %31 
                                                      OpStore %197 %196 
                                Private f32* %198 = OpAccessChain %9 %31 
                                         f32 %199 = OpLoad %198 
                                         f32 %201 = OpExtInst %1 43 %199 %200 %71 
                                Private f32* %202 = OpAccessChain %9 %31 
                                                      OpStore %202 %201 
                                       f32_4 %203 = OpLoad %93 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 3 
                                       f32_4 %205 = OpLoad %93 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 3 
                                         f32 %207 = OpDot %204 %206 
                                Private f32* %208 = OpAccessChain %77 %31 
                                                      OpStore %208 %207 
                                Private f32* %209 = OpAccessChain %77 %31 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpExtInst %1 32 %210 
                                Private f32* %212 = OpAccessChain %77 %31 
                                                      OpStore %212 %211 
                                       f32_4 %213 = OpLoad %93 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 3 
                                       f32_3 %215 = OpFNegate %214 
                                       f32_3 %216 = OpLoad %77 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 0 0 
                                       f32_3 %218 = OpFMul %215 %217 
                              Uniform f32_4* %220 = OpAccessChain %40 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpFAdd %218 %223 
                                                      OpStore %77 %224 
                                       f32_3 %225 = OpLoad %77 
                                       f32_3 %226 = OpLoad %77 
                                         f32 %227 = OpDot %225 %226 
                                Private f32* %228 = OpAccessChain %93 %31 
                                                      OpStore %228 %227 
                                Private f32* %229 = OpAccessChain %93 %31 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpExtInst %1 32 %230 
                                Private f32* %232 = OpAccessChain %93 %31 
                                                      OpStore %232 %231 
                                       f32_3 %233 = OpLoad %77 
                                       f32_4 %234 = OpLoad %93 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpFMul %233 %235 
                                                      OpStore %77 %236 
                                       f32_4 %238 = OpLoad %54 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %242 = OpFMul %239 %241 
                                       f32_3 %245 = OpFAdd %242 %244 
                                                      OpStore %237 %245 
                                Private f32* %247 = OpAccessChain %54 %173 
                                         f32 %248 = OpLoad %247 
                                         f32 %250 = OpFMul %248 %249 
                                                      OpStore %246 %250 
                                       f32_3 %252 = OpLoad %237 
                                       f32_3 %253 = OpLoad %237 
                                         f32 %254 = OpDot %252 %253 
                                                      OpStore %251 %254 
                                         f32 %255 = OpLoad %251 
                                         f32 %256 = OpExtInst %1 32 %255 
                                                      OpStore %251 %256 
                                       f32_3 %257 = OpLoad %237 
                                         f32 %258 = OpLoad %251 
                                       f32_3 %259 = OpCompositeConstruct %258 %258 %258 
                                       f32_3 %260 = OpFMul %257 %259 
                                                      OpStore %237 %260 
                                       f32_3 %261 = OpLoad %77 
                                       f32_3 %262 = OpLoad %237 
                                         f32 %263 = OpDot %261 %262 
                                                      OpStore %251 %263 
                              Uniform f32_4* %264 = OpAccessChain %40 %219 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFNegate %266 
                                       f32_3 %268 = OpLoad %237 
                                         f32 %269 = OpDot %267 %268 
                                Private f32* %270 = OpAccessChain %237 %31 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %237 %31 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 40 %272 %200 
                                Private f32* %274 = OpAccessChain %237 %31 
                                                      OpStore %274 %273 
                                       f32_3 %276 = OpLoad %237 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 0 0 
                              Uniform f32_4* %279 = OpAccessChain %40 %278 
                                       f32_4 %280 = OpLoad %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpFMul %277 %281 
                                       f32_4 %283 = OpLoad %275 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %275 %284 
                                         f32 %285 = OpLoad %251 
                                         f32 %286 = OpExtInst %1 40 %285 %200 
                                Private f32* %287 = OpAccessChain %237 %31 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %237 %31 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 30 %289 
                                Private f32* %291 = OpAccessChain %237 %31 
                                                      OpStore %291 %290 
                                Private f32* %292 = OpAccessChain %237 %31 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpLoad %246 
                                         f32 %295 = OpFMul %293 %294 
                                Private f32* %296 = OpAccessChain %237 %31 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %237 %31 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpExtInst %1 29 %298 
                                Private f32* %300 = OpAccessChain %237 %31 
                                                      OpStore %300 %299 
                              Uniform f32_4* %302 = OpAccessChain %40 %278 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                         f32 %309 = OpDot %304 %308 
                                                      OpStore %301 %309 
                                         f32 %310 = OpLoad %301 
                                Private f32* %311 = OpAccessChain %237 %31 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %310 %312 
                                Private f32* %314 = OpAccessChain %275 %173 
                                                      OpStore %314 %313 
                                       f32_4 %315 = OpLoad %9 
                                       f32_4 %316 = OpVectorShuffle %315 %315 0 0 0 0 
                                       f32_4 %317 = OpLoad %275 
                                       f32_4 %318 = OpFMul %316 %317 
                                                      OpStore %9 %318 
                                       f32_4 %321 = OpLoad %9 
                                                      OpStore %320 %321 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat16_7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
float u_xlat16_18;
bool u_xlatb18;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat4.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat10_5 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat7.xxx + u_xlat4.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = u_xlat10_0.w * 128.0;
    u_xlat16_7 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_7);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat6 = max(u_xlat7.x, 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * u_xlat16_18;
    u_xlat6 = exp2(u_xlat6);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat7.z) * u_xlat1.x + u_xlat12;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.z;
    u_xlat12 = u_xlat12 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlatb18 = u_xlat1.z<0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xy, -8.0);
    u_xlat18 = u_xlat18 * u_xlat10_1.w;
    u_xlat18 = u_xlat10_5.w * u_xlat18;
    u_xlat1.x = u_xlat18;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = u_xlat18 * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat6 * u_xlat1.x;
    u_xlat6 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat6 * u_xlat0.x;
    SV_Target0 = vec4(u_xlat12) * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 433
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %84 %430 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpMemberDecorate %39 9 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %368 DescriptorSet 368 
                                                      OpDecorate %368 Binding 368 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %430 Location 430 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeArray %7 %36 
                                              %39 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %38 %7 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 9 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_4* %55 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %56 = OpVariable UniformConstant 
                                          i32 %61 = OpConstant 2 
                                              %62 = OpTypePointer Uniform %6 
                                          u32 %67 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %35 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %79 = OpConstant 1 
                                          u32 %80 = OpConstant 2 
                                              %83 = OpTypePointer Input %35 
                                 Input f32_3* %84 = OpVariable Input 
                                              %85 = OpTypePointer Input %6 
                               Private f32_4* %94 = OpVariable Private 
                              Private f32_3* %101 = OpVariable Private 
                                         i32 %104 = OpConstant 3 
                                         i32 %109 = OpConstant 0 
                                             %141 = OpTypePointer Uniform %35 
                              Private f32_3* %154 = OpVariable Private 
                                         i32 %158 = OpConstant 5 
                                Private f32* %166 = OpVariable Private 
                                         u32 %170 = OpConstant 3 
 UniformConstant read_only Texture2DSampled* %174 = OpVariable UniformConstant 
                              Private f32_3* %203 = OpVariable Private 
                                         f32 %206 = OpConstant 3.674022E-40 
                                       f32_3 %207 = OpConstantComposite %206 %206 %206 
                                         f32 %209 = OpConstant 3.674022E-40 
                                       f32_3 %210 = OpConstantComposite %209 %209 %209 
                                Private f32* %212 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
                                Private f32* %217 = OpVariable Private 
                                         f32 %236 = OpConstant 3.674022E-40 
                                Private f32* %239 = OpVariable Private 
                              Private f32_4* %249 = OpVariable Private 
                                         i32 %252 = OpConstant 8 
                                         i32 %283 = OpConstant 4 
                                         i32 %322 = OpConstant 7 
                                             %354 = OpTypeBool 
                                             %355 = OpTypePointer Private %354 
                               Private bool* %356 = OpVariable Private 
                                             %360 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %368 = OpVariable UniformConstant 
                                         f32 %372 = OpConstant 3.674022E-40 
                                         i32 %399 = OpConstant 6 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         f32 %414 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_3 %416 = OpConstantComposite %413 %414 %415 
                                             %429 = OpTypePointer Output %7 
                               Output f32_4* %430 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %361 = OpVariable Function 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %34 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                        f32_4 %53 = OpLoad %9 
                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 2 3 
                                                      OpStore %9 %54 
                   read_only Texture2DSampled %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %41 %61 %31 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %21 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %41 %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Private f32* %73 = OpAccessChain %9 %31 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFDiv %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                                      OpStore %76 %75 
                                 Uniform f32* %81 = OpAccessChain %41 %79 %80 
                                          f32 %82 = OpLoad %81 
                                   Input f32* %86 = OpAccessChain %84 %80 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFDiv %82 %87 
                                 Private f32* %89 = OpAccessChain %78 %31 
                                                      OpStore %89 %88 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpLoad %84 
                                        f32_3 %93 = OpFMul %91 %92 
                                                      OpStore %78 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpLoad %78 
                                        f32_3 %98 = OpFMul %96 %97 
                                        f32_4 %99 = OpLoad %94 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %94 %100 
                                       f32_4 %102 = OpLoad %94 
                                       f32_3 %103 = OpVectorShuffle %102 %102 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %41 %104 %79 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %103 %107 
                                                      OpStore %101 %108 
                              Uniform f32_4* %110 = OpAccessChain %41 %104 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %94 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %101 
                                       f32_3 %117 = OpFAdd %115 %116 
                                       f32_4 %118 = OpLoad %94 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %41 %104 %61 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_4 %123 = OpLoad %94 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %94 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                                       f32_3 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %94 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 6 
                                                      OpStore %94 %130 
                                       f32_4 %131 = OpLoad %94 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 3 
                              Uniform f32_4* %133 = OpAccessChain %41 %104 %104 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFAdd %132 %135 
                                       f32_4 %137 = OpLoad %94 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %94 %138 
                                       f32_4 %139 = OpLoad %94 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_3* %142 = OpAccessChain %41 %109 
                                       f32_3 %143 = OpLoad %142 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %140 %144 
                                                      OpStore %101 %145 
                                       f32_3 %146 = OpLoad %101 
                                       f32_3 %147 = OpLoad %101 
                                         f32 %148 = OpDot %146 %147 
                                Private f32* %149 = OpAccessChain %78 %31 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %78 %31 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpExtInst %1 32 %151 
                                Private f32* %153 = OpAccessChain %78 %31 
                                                      OpStore %153 %152 
                                       f32_4 %155 = OpLoad %94 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 3 
                                       f32_3 %157 = OpFNegate %156 
                              Uniform f32_4* %159 = OpAccessChain %41 %158 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFAdd %157 %161 
                                                      OpStore %154 %162 
                                       f32_3 %163 = OpLoad %154 
                                       f32_3 %164 = OpLoad %154 
                                         f32 %165 = OpDot %163 %164 
                                                      OpStore %21 %165 
                                         f32 %167 = OpLoad %21 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %166 %168 
                                         f32 %169 = OpLoad %21 
                                Uniform f32* %171 = OpAccessChain %41 %158 %170 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %169 %172 
                                                      OpStore %21 %173 
                  read_only Texture2DSampled %175 = OpLoad %174 
                                         f32 %176 = OpLoad %21 
                                       f32_2 %177 = OpCompositeConstruct %176 %176 
                                       f32_4 %178 = OpImageSampleImplicitLod %175 %177 
                                         f32 %179 = OpCompositeExtract %178 3 
                                                      OpStore %21 %179 
                                         f32 %180 = OpLoad %166 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %154 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %154 %183 
                                       f32_3 %184 = OpLoad %101 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpLoad %78 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 0 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                       f32_3 %189 = OpLoad %154 
                                       f32_3 %190 = OpFAdd %188 %189 
                                                      OpStore %101 %190 
                                       f32_3 %191 = OpLoad %101 
                                       f32_3 %192 = OpLoad %101 
                                         f32 %193 = OpDot %191 %192 
                                Private f32* %194 = OpAccessChain %78 %31 
                                                      OpStore %194 %193 
                                Private f32* %195 = OpAccessChain %78 %31 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 32 %196 
                                Private f32* %198 = OpAccessChain %78 %31 
                                                      OpStore %198 %197 
                                       f32_3 %199 = OpLoad %78 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 0 0 
                                       f32_3 %201 = OpLoad %101 
                                       f32_3 %202 = OpFMul %200 %201 
                                                      OpStore %101 %202 
                                       f32_4 %204 = OpLoad %55 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_3 %211 = OpFAdd %208 %210 
                                                      OpStore %203 %211 
                                Private f32* %213 = OpAccessChain %55 %170 
                                         f32 %214 = OpLoad %213 
                                         f32 %216 = OpFMul %214 %215 
                                                      OpStore %212 %216 
                                       f32_3 %218 = OpLoad %203 
                                       f32_3 %219 = OpLoad %203 
                                         f32 %220 = OpDot %218 %219 
                                                      OpStore %217 %220 
                                         f32 %221 = OpLoad %217 
                                         f32 %222 = OpExtInst %1 32 %221 
                                                      OpStore %217 %222 
                                       f32_3 %223 = OpLoad %203 
                                         f32 %224 = OpLoad %217 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_3 %226 = OpFMul %223 %225 
                                                      OpStore %203 %226 
                                       f32_3 %227 = OpLoad %101 
                                       f32_3 %228 = OpLoad %203 
                                         f32 %229 = OpDot %227 %228 
                                                      OpStore %217 %229 
                                       f32_3 %230 = OpLoad %154 
                                       f32_3 %231 = OpLoad %203 
                                         f32 %232 = OpDot %230 %231 
                                Private f32* %233 = OpAccessChain %203 %31 
                                                      OpStore %233 %232 
                                Private f32* %234 = OpAccessChain %203 %31 
                                         f32 %235 = OpLoad %234 
                                         f32 %237 = OpExtInst %1 40 %235 %236 
                                Private f32* %238 = OpAccessChain %203 %31 
                                                      OpStore %238 %237 
                                         f32 %240 = OpLoad %217 
                                         f32 %241 = OpExtInst %1 40 %240 %236 
                                                      OpStore %239 %241 
                                         f32 %242 = OpLoad %239 
                                         f32 %243 = OpExtInst %1 30 %242 
                                                      OpStore %239 %243 
                                         f32 %244 = OpLoad %239 
                                         f32 %245 = OpLoad %212 
                                         f32 %246 = OpFMul %244 %245 
                                                      OpStore %239 %246 
                                         f32 %247 = OpLoad %239 
                                         f32 %248 = OpExtInst %1 29 %247 
                                                      OpStore %239 %248 
                                       f32_4 %250 = OpLoad %94 
                                       f32_3 %251 = OpVectorShuffle %250 %250 1 1 1 
                              Uniform f32_4* %253 = OpAccessChain %41 %252 %79 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 3 
                                       f32_3 %256 = OpFMul %251 %255 
                                       f32_4 %257 = OpLoad %249 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %249 %258 
                              Uniform f32_4* %259 = OpAccessChain %41 %252 %109 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 3 
                                       f32_4 %262 = OpLoad %94 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpFMul %261 %263 
                                       f32_4 %265 = OpLoad %249 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFAdd %264 %266 
                                       f32_4 %268 = OpLoad %249 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %249 %269 
                              Uniform f32_4* %270 = OpAccessChain %41 %252 %61 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 3 
                                       f32_4 %273 = OpLoad %94 
                                       f32_3 %274 = OpVectorShuffle %273 %273 3 3 3 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %249 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %249 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %249 %280 
                                       f32_4 %281 = OpLoad %94 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 3 
                              Uniform f32_4* %284 = OpAccessChain %41 %283 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFNegate %286 
                                       f32_3 %288 = OpFAdd %282 %287 
                                       f32_4 %289 = OpLoad %94 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 6 
                                                      OpStore %94 %290 
                                       f32_4 %291 = OpLoad %94 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 3 
                                       f32_4 %293 = OpLoad %94 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 3 
                                         f32 %295 = OpDot %292 %294 
                                Private f32* %296 = OpAccessChain %78 %31 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %78 %31 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpExtInst %1 31 %298 
                                Private f32* %300 = OpAccessChain %78 %31 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %78 %80 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFNegate %302 
                                Private f32* %304 = OpAccessChain %9 %31 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                Private f32* %307 = OpAccessChain %78 %31 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFAdd %306 %308 
                                Private f32* %310 = OpAccessChain %9 %31 
                                                      OpStore %310 %309 
                                Uniform f32* %311 = OpAccessChain %41 %283 %170 
                                         f32 %312 = OpLoad %311 
                                Private f32* %313 = OpAccessChain %9 %31 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %94 %80 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFAdd %315 %317 
                                Private f32* %319 = OpAccessChain %9 %31 
                                                      OpStore %319 %318 
                                Private f32* %320 = OpAccessChain %9 %31 
                                         f32 %321 = OpLoad %320 
                                Uniform f32* %323 = OpAccessChain %41 %322 %80 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFMul %321 %324 
                                Uniform f32* %326 = OpAccessChain %41 %322 %170 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFAdd %325 %327 
                                Private f32* %329 = OpAccessChain %9 %31 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %9 %31 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFNegate %331 
                                         f32 %333 = OpFAdd %332 %72 
                                Private f32* %334 = OpAccessChain %9 %31 
                                                      OpStore %334 %333 
                                Private f32* %335 = OpAccessChain %9 %31 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 43 %336 %236 %72 
                                Private f32* %338 = OpAccessChain %9 %31 
                                                      OpStore %338 %337 
                                       f32_4 %339 = OpLoad %249 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                              Uniform f32_4* %341 = OpAccessChain %41 %252 %104 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 3 
                                       f32_3 %344 = OpFAdd %340 %343 
                                       f32_4 %345 = OpLoad %249 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %249 %346 
                                       f32_4 %347 = OpLoad %249 
                                       f32_2 %348 = OpVectorShuffle %347 %347 0 1 
                                       f32_4 %349 = OpLoad %249 
                                       f32_2 %350 = OpVectorShuffle %349 %349 2 2 
                                       f32_2 %351 = OpFDiv %348 %350 
                                       f32_3 %352 = OpLoad %78 
                                       f32_3 %353 = OpVectorShuffle %352 %351 3 1 4 
                                                      OpStore %78 %353 
                                Private f32* %357 = OpAccessChain %249 %80 
                                         f32 %358 = OpLoad %357 
                                        bool %359 = OpFOrdLessThan %358 %236 
                                                      OpStore %356 %359 
                                        bool %362 = OpLoad %356 
                                                      OpSelectionMerge %364 None 
                                                      OpBranchConditional %362 %363 %365 
                                             %363 = OpLabel 
                                                      OpStore %361 %72 
                                                      OpBranch %364 
                                             %365 = OpLabel 
                                                      OpStore %361 %236 
                                                      OpBranch %364 
                                             %364 = OpLabel 
                                         f32 %366 = OpLoad %361 
                                Private f32* %367 = OpAccessChain %249 %31 
                                                      OpStore %367 %366 
                  read_only Texture2DSampled %369 = OpLoad %368 
                                       f32_3 %370 = OpLoad %78 
                                       f32_2 %371 = OpVectorShuffle %370 %370 0 2 
                                       f32_4 %373 = OpImageSampleImplicitLod %369 %371 Bias %7 
                                         f32 %374 = OpCompositeExtract %373 3 
                                Private f32* %375 = OpAccessChain %78 %31 
                                                      OpStore %375 %374 
                                Private f32* %376 = OpAccessChain %249 %31 
                                         f32 %377 = OpLoad %376 
                                Private f32* %378 = OpAccessChain %78 %31 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                Private f32* %381 = OpAccessChain %78 %31 
                                                      OpStore %381 %380 
                                         f32 %382 = OpLoad %21 
                                Private f32* %383 = OpAccessChain %78 %31 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFMul %382 %384 
                                Private f32* %386 = OpAccessChain %78 %31 
                                                      OpStore %386 %385 
                                Private f32* %387 = OpAccessChain %78 %31 
                                         f32 %388 = OpLoad %387 
                                                      OpStore %21 %388 
                                         f32 %389 = OpLoad %21 
                                         f32 %390 = OpExtInst %1 43 %389 %236 %72 
                                                      OpStore %21 %390 
                                Private f32* %391 = OpAccessChain %78 %31 
                                         f32 %392 = OpLoad %391 
                                Private f32* %393 = OpAccessChain %203 %31 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFMul %392 %394 
                                Private f32* %396 = OpAccessChain %78 %31 
                                                      OpStore %396 %395 
                                       f32_3 %397 = OpLoad %78 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 0 0 
                              Uniform f32_4* %400 = OpAccessChain %41 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %398 %402 
                                       f32_4 %404 = OpLoad %249 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %249 %405 
                                         f32 %406 = OpLoad %21 
                                         f32 %407 = OpLoad %239 
                                         f32 %408 = OpFMul %406 %407 
                                Private f32* %409 = OpAccessChain %78 %31 
                                                      OpStore %409 %408 
                              Uniform f32_4* %410 = OpAccessChain %41 %399 
                                       f32_4 %411 = OpLoad %410 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                         f32 %417 = OpDot %412 %416 
                                Private f32* %418 = OpAccessChain %203 %31 
                                                      OpStore %418 %417 
                                Private f32* %419 = OpAccessChain %78 %31 
                                         f32 %420 = OpLoad %419 
                                Private f32* %421 = OpAccessChain %203 %31 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFMul %420 %422 
                                Private f32* %424 = OpAccessChain %249 %170 
                                                      OpStore %424 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_4 %426 = OpVectorShuffle %425 %425 0 0 0 0 
                                       f32_4 %427 = OpLoad %249 
                                       f32_4 %428 = OpFMul %426 %427 
                                                      OpStore %9 %428 
                                       f32_4 %431 = OpLoad %9 
                                                      OpStore %430 %431 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
float u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat16_7;
float u_xlat12;
float u_xlat13;
float u_xlat16_18;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat10_5 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat7.xxx + (-u_xlat4.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = u_xlat10_0.w * 128.0;
    u_xlat16_7 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_7 = inversesqrt(u_xlat16_7);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_7);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-u_xlat4.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat6 = max(u_xlat7.x, 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * u_xlat16_18;
    u_xlat6 = exp2(u_xlat6);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat7.z) * u_xlat1.x + u_xlat12;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.z;
    u_xlat12 = u_xlat12 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xyz, -8.0);
    u_xlat16_18 = u_xlat10_1.w * u_xlat10_5.w;
    u_xlat16_1 = u_xlat16_18;
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
    u_xlat0.x = u_xlat16_18 * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat6 * u_xlat16_1;
    u_xlat6 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat6 * u_xlat0.x;
    SV_Target0 = vec4(u_xlat12) * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 411
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %84 %408 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpMemberDecorate %39 9 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %352 DescriptorSet 352 
                                                      OpDecorate %352 Binding 352 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %408 RelaxedPrecision 
                                                      OpDecorate %408 Location 408 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeArray %7 %36 
                                              %39 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %38 %7 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 9 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_4* %55 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %56 = OpVariable UniformConstant 
                                          i32 %61 = OpConstant 2 
                                              %62 = OpTypePointer Uniform %6 
                                          u32 %67 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %35 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %79 = OpConstant 1 
                                          u32 %80 = OpConstant 2 
                                              %83 = OpTypePointer Input %35 
                                 Input f32_3* %84 = OpVariable Input 
                                              %85 = OpTypePointer Input %6 
                               Private f32_4* %94 = OpVariable Private 
                              Private f32_3* %101 = OpVariable Private 
                                         i32 %104 = OpConstant 3 
                                         i32 %109 = OpConstant 0 
                                             %141 = OpTypePointer Uniform %35 
                              Private f32_3* %154 = OpVariable Private 
                                         i32 %157 = OpConstant 5 
                                Private f32* %166 = OpVariable Private 
                                         u32 %170 = OpConstant 3 
 UniformConstant read_only Texture2DSampled* %174 = OpVariable UniformConstant 
                              Private f32_3* %204 = OpVariable Private 
                                         f32 %207 = OpConstant 3.674022E-40 
                                       f32_3 %208 = OpConstantComposite %207 %207 %207 
                                         f32 %210 = OpConstant 3.674022E-40 
                                       f32_3 %211 = OpConstantComposite %210 %210 %210 
                                Private f32* %213 = OpVariable Private 
                                         f32 %216 = OpConstant 3.674022E-40 
                                Private f32* %218 = OpVariable Private 
                                         f32 %238 = OpConstant 3.674022E-40 
                                Private f32* %241 = OpVariable Private 
                              Private f32_4* %251 = OpVariable Private 
                                         i32 %254 = OpConstant 8 
                                         i32 %285 = OpConstant 4 
                                         i32 %324 = OpConstant 7 
                                             %349 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %350 = OpTypeSampledImage %349 
                                             %351 = OpTypePointer UniformConstant %350 
UniformConstant read_only TextureCubeSampled* %352 = OpVariable UniformConstant 
                                         f32 %356 = OpConstant 3.674022E-40 
                                         i32 %377 = OpConstant 6 
                                         f32 %391 = OpConstant 3.674022E-40 
                                         f32 %392 = OpConstant 3.674022E-40 
                                         f32 %393 = OpConstant 3.674022E-40 
                                       f32_3 %394 = OpConstantComposite %391 %392 %393 
                                             %407 = OpTypePointer Output %7 
                               Output f32_4* %408 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %34 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                        f32_4 %53 = OpLoad %9 
                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 2 3 
                                                      OpStore %9 %54 
                   read_only Texture2DSampled %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %41 %61 %31 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %21 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %41 %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Private f32* %73 = OpAccessChain %9 %31 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFDiv %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                                      OpStore %76 %75 
                                 Uniform f32* %81 = OpAccessChain %41 %79 %80 
                                          f32 %82 = OpLoad %81 
                                   Input f32* %86 = OpAccessChain %84 %80 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFDiv %82 %87 
                                 Private f32* %89 = OpAccessChain %78 %31 
                                                      OpStore %89 %88 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpLoad %84 
                                        f32_3 %93 = OpFMul %91 %92 
                                                      OpStore %78 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpLoad %78 
                                        f32_3 %98 = OpFMul %96 %97 
                                        f32_4 %99 = OpLoad %94 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %94 %100 
                                       f32_4 %102 = OpLoad %94 
                                       f32_3 %103 = OpVectorShuffle %102 %102 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %41 %104 %79 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %103 %107 
                                                      OpStore %101 %108 
                              Uniform f32_4* %110 = OpAccessChain %41 %104 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %94 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %101 
                                       f32_3 %117 = OpFAdd %115 %116 
                                       f32_4 %118 = OpLoad %94 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %41 %104 %61 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_4 %123 = OpLoad %94 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %94 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                                       f32_3 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %94 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 6 
                                                      OpStore %94 %130 
                                       f32_4 %131 = OpLoad %94 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 3 
                              Uniform f32_4* %133 = OpAccessChain %41 %104 %104 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFAdd %132 %135 
                                       f32_4 %137 = OpLoad %94 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %94 %138 
                                       f32_4 %139 = OpLoad %94 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_3* %142 = OpAccessChain %41 %109 
                                       f32_3 %143 = OpLoad %142 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %140 %144 
                                                      OpStore %101 %145 
                                       f32_3 %146 = OpLoad %101 
                                       f32_3 %147 = OpLoad %101 
                                         f32 %148 = OpDot %146 %147 
                                Private f32* %149 = OpAccessChain %78 %31 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %78 %31 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpExtInst %1 32 %151 
                                Private f32* %153 = OpAccessChain %78 %31 
                                                      OpStore %153 %152 
                                       f32_4 %155 = OpLoad %94 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 3 
                              Uniform f32_4* %158 = OpAccessChain %41 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFNegate %160 
                                       f32_3 %162 = OpFAdd %156 %161 
                                                      OpStore %154 %162 
                                       f32_3 %163 = OpLoad %154 
                                       f32_3 %164 = OpLoad %154 
                                         f32 %165 = OpDot %163 %164 
                                                      OpStore %21 %165 
                                         f32 %167 = OpLoad %21 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %166 %168 
                                         f32 %169 = OpLoad %21 
                                Uniform f32* %171 = OpAccessChain %41 %157 %170 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %169 %172 
                                                      OpStore %21 %173 
                  read_only Texture2DSampled %175 = OpLoad %174 
                                         f32 %176 = OpLoad %21 
                                       f32_2 %177 = OpCompositeConstruct %176 %176 
                                       f32_4 %178 = OpImageSampleImplicitLod %175 %177 
                                         f32 %179 = OpCompositeExtract %178 3 
                                                      OpStore %21 %179 
                                         f32 %180 = OpLoad %166 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %154 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %154 %183 
                                       f32_3 %184 = OpLoad %101 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpLoad %78 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 0 0 
                                       f32_3 %188 = OpFMul %185 %187 
                                       f32_3 %189 = OpLoad %154 
                                       f32_3 %190 = OpFNegate %189 
                                       f32_3 %191 = OpFAdd %188 %190 
                                                      OpStore %101 %191 
                                       f32_3 %192 = OpLoad %101 
                                       f32_3 %193 = OpLoad %101 
                                         f32 %194 = OpDot %192 %193 
                                Private f32* %195 = OpAccessChain %78 %31 
                                                      OpStore %195 %194 
                                Private f32* %196 = OpAccessChain %78 %31 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpExtInst %1 32 %197 
                                Private f32* %199 = OpAccessChain %78 %31 
                                                      OpStore %199 %198 
                                       f32_3 %200 = OpLoad %78 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
                                       f32_3 %202 = OpLoad %101 
                                       f32_3 %203 = OpFMul %201 %202 
                                                      OpStore %101 %203 
                                       f32_4 %205 = OpLoad %55 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_3 %212 = OpFAdd %209 %211 
                                                      OpStore %204 %212 
                                Private f32* %214 = OpAccessChain %55 %170 
                                         f32 %215 = OpLoad %214 
                                         f32 %217 = OpFMul %215 %216 
                                                      OpStore %213 %217 
                                       f32_3 %219 = OpLoad %204 
                                       f32_3 %220 = OpLoad %204 
                                         f32 %221 = OpDot %219 %220 
                                                      OpStore %218 %221 
                                         f32 %222 = OpLoad %218 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %218 %223 
                                       f32_3 %224 = OpLoad %204 
                                         f32 %225 = OpLoad %218 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_3 %227 = OpFMul %224 %226 
                                                      OpStore %204 %227 
                                       f32_3 %228 = OpLoad %101 
                                       f32_3 %229 = OpLoad %204 
                                         f32 %230 = OpDot %228 %229 
                                                      OpStore %218 %230 
                                       f32_3 %231 = OpLoad %154 
                                       f32_3 %232 = OpFNegate %231 
                                       f32_3 %233 = OpLoad %204 
                                         f32 %234 = OpDot %232 %233 
                                Private f32* %235 = OpAccessChain %204 %31 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %204 %31 
                                         f32 %237 = OpLoad %236 
                                         f32 %239 = OpExtInst %1 40 %237 %238 
                                Private f32* %240 = OpAccessChain %204 %31 
                                                      OpStore %240 %239 
                                         f32 %242 = OpLoad %218 
                                         f32 %243 = OpExtInst %1 40 %242 %238 
                                                      OpStore %241 %243 
                                         f32 %244 = OpLoad %241 
                                         f32 %245 = OpExtInst %1 30 %244 
                                                      OpStore %241 %245 
                                         f32 %246 = OpLoad %241 
                                         f32 %247 = OpLoad %213 
                                         f32 %248 = OpFMul %246 %247 
                                                      OpStore %241 %248 
                                         f32 %249 = OpLoad %241 
                                         f32 %250 = OpExtInst %1 29 %249 
                                                      OpStore %241 %250 
                                       f32_4 %252 = OpLoad %94 
                                       f32_3 %253 = OpVectorShuffle %252 %252 1 1 1 
                              Uniform f32_4* %255 = OpAccessChain %41 %254 %79 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpFMul %253 %257 
                                       f32_4 %259 = OpLoad %251 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %251 %260 
                              Uniform f32_4* %261 = OpAccessChain %41 %254 %109 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %94 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %251 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %266 %268 
                                       f32_4 %270 = OpLoad %251 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %251 %271 
                              Uniform f32_4* %272 = OpAccessChain %41 %254 %61 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_4 %275 = OpLoad %94 
                                       f32_3 %276 = OpVectorShuffle %275 %275 3 3 3 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_4 %278 = OpLoad %251 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %251 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %251 %282 
                                       f32_4 %283 = OpLoad %94 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 3 
                              Uniform f32_4* %286 = OpAccessChain %41 %285 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFNegate %288 
                                       f32_3 %290 = OpFAdd %284 %289 
                                       f32_4 %291 = OpLoad %94 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 2 6 
                                                      OpStore %94 %292 
                                       f32_4 %293 = OpLoad %94 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 3 
                                       f32_4 %295 = OpLoad %94 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 3 
                                         f32 %297 = OpDot %294 %296 
                                Private f32* %298 = OpAccessChain %78 %31 
                                                      OpStore %298 %297 
                                Private f32* %299 = OpAccessChain %78 %31 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpExtInst %1 31 %300 
                                Private f32* %302 = OpAccessChain %78 %31 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %78 %80 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpFNegate %304 
                                Private f32* %306 = OpAccessChain %9 %31 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                Private f32* %309 = OpAccessChain %78 %31 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFAdd %308 %310 
                                Private f32* %312 = OpAccessChain %9 %31 
                                                      OpStore %312 %311 
                                Uniform f32* %313 = OpAccessChain %41 %285 %170 
                                         f32 %314 = OpLoad %313 
                                Private f32* %315 = OpAccessChain %9 %31 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFMul %314 %316 
                                Private f32* %318 = OpAccessChain %94 %80 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFAdd %317 %319 
                                Private f32* %321 = OpAccessChain %9 %31 
                                                      OpStore %321 %320 
                                Private f32* %322 = OpAccessChain %9 %31 
                                         f32 %323 = OpLoad %322 
                                Uniform f32* %325 = OpAccessChain %41 %324 %80 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFMul %323 %326 
                                Uniform f32* %328 = OpAccessChain %41 %324 %170 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFAdd %327 %329 
                                Private f32* %331 = OpAccessChain %9 %31 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %9 %31 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpFNegate %333 
                                         f32 %335 = OpFAdd %334 %72 
                                Private f32* %336 = OpAccessChain %9 %31 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %9 %31 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpExtInst %1 43 %338 %238 %72 
                                Private f32* %340 = OpAccessChain %9 %31 
                                                      OpStore %340 %339 
                                       f32_4 %341 = OpLoad %251 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                              Uniform f32_4* %343 = OpAccessChain %41 %254 %104 
                                       f32_4 %344 = OpLoad %343 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_3 %346 = OpFAdd %342 %345 
                                       f32_4 %347 = OpLoad %251 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 6 3 
                                                      OpStore %251 %348 
                read_only TextureCubeSampled %353 = OpLoad %352 
                                       f32_4 %354 = OpLoad %251 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %357 = OpImageSampleImplicitLod %353 %355 Bias %7 
                                         f32 %358 = OpCompositeExtract %357 3 
                                Private f32* %359 = OpAccessChain %78 %31 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %78 %31 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpLoad %21 
                                         f32 %363 = OpFMul %361 %362 
                                Private f32* %364 = OpAccessChain %78 %31 
                                                      OpStore %364 %363 
                                Private f32* %365 = OpAccessChain %78 %31 
                                         f32 %366 = OpLoad %365 
                                                      OpStore %21 %366 
                                         f32 %367 = OpLoad %21 
                                         f32 %368 = OpExtInst %1 43 %367 %238 %72 
                                                      OpStore %21 %368 
                                Private f32* %369 = OpAccessChain %78 %31 
                                         f32 %370 = OpLoad %369 
                                Private f32* %371 = OpAccessChain %204 %31 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpFMul %370 %372 
                                Private f32* %374 = OpAccessChain %78 %31 
                                                      OpStore %374 %373 
                                       f32_3 %375 = OpLoad %78 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 0 0 
                              Uniform f32_4* %378 = OpAccessChain %41 %377 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFMul %376 %380 
                                       f32_4 %382 = OpLoad %251 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %251 %383 
                                         f32 %384 = OpLoad %21 
                                         f32 %385 = OpLoad %241 
                                         f32 %386 = OpFMul %384 %385 
                                Private f32* %387 = OpAccessChain %78 %31 
                                                      OpStore %387 %386 
                              Uniform f32_4* %388 = OpAccessChain %41 %377 
                                       f32_4 %389 = OpLoad %388 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                         f32 %395 = OpDot %390 %394 
                                Private f32* %396 = OpAccessChain %204 %31 
                                                      OpStore %396 %395 
                                Private f32* %397 = OpAccessChain %78 %31 
                                         f32 %398 = OpLoad %397 
                                Private f32* %399 = OpAccessChain %204 %31 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFMul %398 %400 
                                Private f32* %402 = OpAccessChain %251 %170 
                                                      OpStore %402 %401 
                                       f32_4 %403 = OpLoad %9 
                                       f32_4 %404 = OpVectorShuffle %403 %403 0 0 0 0 
                                       f32_4 %405 = OpLoad %251 
                                       f32_4 %406 = OpFMul %404 %405 
                                                      OpStore %9 %406 
                                       f32_4 %409 = OpLoad %9 
                                                      OpStore %408 %409 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat16_5;
vec2 u_xlat8;
float u_xlat16_8;
float u_xlat16_12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat5.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat5.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat5.xxx + (-_LightDir.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat3.xyz = u_xlat5.xxx * u_xlat3.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_12 = u_xlat10_0.w * 128.0;
    u_xlat16_5 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_5 = inversesqrt(u_xlat16_5);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_5);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-_LightDir.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4 = max(u_xlat5.x, 0.0);
    u_xlat4 = log2(u_xlat4);
    u_xlat4 = u_xlat4 * u_xlat16_12;
    u_xlat4 = exp2(u_xlat4);
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat1 = (-u_xlat5.z) * u_xlat1 + u_xlat5.x;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat10_2 = texture(_LightTexture0, u_xlat8.xy, -8.0);
    u_xlat16_8 = u_xlat10_2.w;
    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat10_2.w;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat16_8 * u_xlat4;
    u_xlat4 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat4 * u_xlat0.x;
    SV_Target0 = vec4(u_xlat1) * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 379
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %84 %376 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpMemberDecorate %39 9 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %194 RelaxedPrecision 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %198 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %201 RelaxedPrecision 
                                                      OpDecorate %203 RelaxedPrecision 
                                                      OpDecorate %209 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %215 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %226 RelaxedPrecision 
                                                      OpDecorate %325 DescriptorSet 325 
                                                      OpDecorate %325 Binding 325 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %376 Location 376 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeArray %7 %36 
                                              %39 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %38 %7 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 9 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_4* %55 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %56 = OpVariable UniformConstant 
                                          i32 %61 = OpConstant 2 
                                              %62 = OpTypePointer Uniform %6 
                                          u32 %67 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %35 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %79 = OpConstant 1 
                                          u32 %80 = OpConstant 2 
                                              %83 = OpTypePointer Input %35 
                                 Input f32_3* %84 = OpVariable Input 
                                              %85 = OpTypePointer Input %6 
                               Private f32_4* %94 = OpVariable Private 
                              Private f32_3* %101 = OpVariable Private 
                                         i32 %104 = OpConstant 3 
                                         i32 %109 = OpConstant 0 
                                             %141 = OpTypePointer Uniform %35 
                                         i32 %159 = OpConstant 5 
                              Private f32_3* %177 = OpVariable Private 
                                         f32 %180 = OpConstant 3.674022E-40 
                                       f32_3 %181 = OpConstantComposite %180 %180 %180 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_3 %184 = OpConstantComposite %183 %183 %183 
                                Private f32* %186 = OpVariable Private 
                                         u32 %187 = OpConstant 3 
                                         f32 %190 = OpConstant 3.674022E-40 
                                Private f32* %192 = OpVariable Private 
                                         f32 %214 = OpConstant 3.674022E-40 
                                Private f32* %217 = OpVariable Private 
                                         i32 %229 = OpConstant 8 
                              Private f32_4* %258 = OpVariable Private 
                                         i32 %261 = OpConstant 4 
                                         i32 %300 = OpConstant 7 
 UniformConstant read_only Texture2DSampled* %325 = OpVariable UniformConstant 
                                         f32 %329 = OpConstant 3.674022E-40 
                                         i32 %345 = OpConstant 6 
                                         f32 %359 = OpConstant 3.674022E-40 
                                         f32 %360 = OpConstant 3.674022E-40 
                                         f32 %361 = OpConstant 3.674022E-40 
                                       f32_3 %362 = OpConstantComposite %359 %360 %361 
                                             %375 = OpTypePointer Output %7 
                               Output f32_4* %376 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %34 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                        f32_4 %53 = OpLoad %9 
                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 2 3 
                                                      OpStore %9 %54 
                   read_only Texture2DSampled %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %41 %61 %31 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %21 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %41 %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Private f32* %73 = OpAccessChain %9 %31 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFDiv %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                                      OpStore %76 %75 
                                 Uniform f32* %81 = OpAccessChain %41 %79 %80 
                                          f32 %82 = OpLoad %81 
                                   Input f32* %86 = OpAccessChain %84 %80 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFDiv %82 %87 
                                 Private f32* %89 = OpAccessChain %78 %31 
                                                      OpStore %89 %88 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpLoad %84 
                                        f32_3 %93 = OpFMul %91 %92 
                                                      OpStore %78 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpLoad %78 
                                        f32_3 %98 = OpFMul %96 %97 
                                        f32_4 %99 = OpLoad %94 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %94 %100 
                                       f32_4 %102 = OpLoad %94 
                                       f32_3 %103 = OpVectorShuffle %102 %102 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %41 %104 %79 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %103 %107 
                                                      OpStore %101 %108 
                              Uniform f32_4* %110 = OpAccessChain %41 %104 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %94 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %101 
                                       f32_3 %117 = OpFAdd %115 %116 
                                       f32_4 %118 = OpLoad %94 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %41 %104 %61 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_4 %123 = OpLoad %94 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %94 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                                       f32_3 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %94 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 6 
                                                      OpStore %94 %130 
                                       f32_4 %131 = OpLoad %94 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 3 
                              Uniform f32_4* %133 = OpAccessChain %41 %104 %104 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFAdd %132 %135 
                                       f32_4 %137 = OpLoad %94 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %94 %138 
                                       f32_4 %139 = OpLoad %94 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_3* %142 = OpAccessChain %41 %109 
                                       f32_3 %143 = OpLoad %142 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %140 %144 
                                                      OpStore %101 %145 
                                       f32_3 %146 = OpLoad %101 
                                       f32_3 %147 = OpLoad %101 
                                         f32 %148 = OpDot %146 %147 
                                Private f32* %149 = OpAccessChain %78 %31 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %78 %31 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpExtInst %1 32 %151 
                                Private f32* %153 = OpAccessChain %78 %31 
                                                      OpStore %153 %152 
                                       f32_3 %154 = OpLoad %101 
                                       f32_3 %155 = OpFNegate %154 
                                       f32_3 %156 = OpLoad %78 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 0 0 
                                       f32_3 %158 = OpFMul %155 %157 
                              Uniform f32_4* %160 = OpAccessChain %41 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %101 %164 
                                       f32_3 %165 = OpLoad %101 
                                       f32_3 %166 = OpLoad %101 
                                         f32 %167 = OpDot %165 %166 
                                Private f32* %168 = OpAccessChain %78 %31 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %78 %31 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpExtInst %1 32 %170 
                                Private f32* %172 = OpAccessChain %78 %31 
                                                      OpStore %172 %171 
                                       f32_3 %173 = OpLoad %78 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 0 0 
                                       f32_3 %175 = OpLoad %101 
                                       f32_3 %176 = OpFMul %174 %175 
                                                      OpStore %101 %176 
                                       f32_4 %178 = OpLoad %55 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %177 %185 
                                Private f32* %188 = OpAccessChain %55 %187 
                                         f32 %189 = OpLoad %188 
                                         f32 %191 = OpFMul %189 %190 
                                                      OpStore %186 %191 
                                       f32_3 %193 = OpLoad %177 
                                       f32_3 %194 = OpLoad %177 
                                         f32 %195 = OpDot %193 %194 
                                                      OpStore %192 %195 
                                         f32 %196 = OpLoad %192 
                                         f32 %197 = OpExtInst %1 32 %196 
                                                      OpStore %192 %197 
                                       f32_3 %198 = OpLoad %177 
                                         f32 %199 = OpLoad %192 
                                       f32_3 %200 = OpCompositeConstruct %199 %199 %199 
                                       f32_3 %201 = OpFMul %198 %200 
                                                      OpStore %177 %201 
                                       f32_3 %202 = OpLoad %101 
                                       f32_3 %203 = OpLoad %177 
                                         f32 %204 = OpDot %202 %203 
                                                      OpStore %192 %204 
                              Uniform f32_4* %205 = OpAccessChain %41 %159 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFNegate %207 
                                       f32_3 %209 = OpLoad %177 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %177 %31 
                                                      OpStore %211 %210 
                                Private f32* %212 = OpAccessChain %177 %31 
                                         f32 %213 = OpLoad %212 
                                         f32 %215 = OpExtInst %1 40 %213 %214 
                                Private f32* %216 = OpAccessChain %177 %31 
                                                      OpStore %216 %215 
                                         f32 %218 = OpLoad %192 
                                         f32 %219 = OpExtInst %1 40 %218 %214 
                                                      OpStore %217 %219 
                                         f32 %220 = OpLoad %217 
                                         f32 %221 = OpExtInst %1 30 %220 
                                                      OpStore %217 %221 
                                         f32 %222 = OpLoad %217 
                                         f32 %223 = OpLoad %186 
                                         f32 %224 = OpFMul %222 %223 
                                                      OpStore %217 %224 
                                         f32 %225 = OpLoad %217 
                                         f32 %226 = OpExtInst %1 29 %225 
                                                      OpStore %217 %226 
                                       f32_4 %227 = OpLoad %94 
                                       f32_2 %228 = OpVectorShuffle %227 %227 1 1 
                              Uniform f32_4* %230 = OpAccessChain %41 %229 %79 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFMul %228 %232 
                                       f32_3 %234 = OpLoad %78 
                                       f32_3 %235 = OpVectorShuffle %234 %233 3 4 2 
                                                      OpStore %78 %235 
                              Uniform f32_4* %236 = OpAccessChain %41 %229 %109 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpLoad %94 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 0 
                                       f32_2 %241 = OpFMul %238 %240 
                                       f32_3 %242 = OpLoad %78 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFAdd %241 %243 
                                       f32_3 %245 = OpLoad %78 
                                       f32_3 %246 = OpVectorShuffle %245 %244 3 4 2 
                                                      OpStore %78 %246 
                              Uniform f32_4* %247 = OpAccessChain %41 %229 %61 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                                       f32_4 %250 = OpLoad %94 
                                       f32_2 %251 = OpVectorShuffle %250 %250 3 3 
                                       f32_2 %252 = OpFMul %249 %251 
                                       f32_3 %253 = OpLoad %78 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_3 %256 = OpLoad %78 
                                       f32_3 %257 = OpVectorShuffle %256 %255 3 4 2 
                                                      OpStore %78 %257 
                                       f32_4 %259 = OpLoad %94 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 3 
                              Uniform f32_4* %262 = OpAccessChain %41 %261 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %260 %265 
                                       f32_4 %267 = OpLoad %258 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %258 %268 
                                       f32_4 %269 = OpLoad %258 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %258 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                         f32 %273 = OpDot %270 %272 
                                Private f32* %274 = OpAccessChain %258 %31 
                                                      OpStore %274 %273 
                                Private f32* %275 = OpAccessChain %258 %31 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpExtInst %1 31 %276 
                                Private f32* %278 = OpAccessChain %258 %31 
                                                      OpStore %278 %277 
                                Private f32* %279 = OpAccessChain %78 %80 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFNegate %280 
                                Private f32* %282 = OpAccessChain %9 %31 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFMul %281 %283 
                                Private f32* %285 = OpAccessChain %258 %31 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFAdd %284 %286 
                                Private f32* %288 = OpAccessChain %9 %31 
                                                      OpStore %288 %287 
                                Uniform f32* %289 = OpAccessChain %41 %261 %187 
                                         f32 %290 = OpLoad %289 
                                Private f32* %291 = OpAccessChain %9 %31 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFMul %290 %292 
                                Private f32* %294 = OpAccessChain %94 %80 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFAdd %293 %295 
                                Private f32* %297 = OpAccessChain %9 %31 
                                                      OpStore %297 %296 
                                Private f32* %298 = OpAccessChain %9 %31 
                                         f32 %299 = OpLoad %298 
                                Uniform f32* %301 = OpAccessChain %41 %300 %80 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFMul %299 %302 
                                Uniform f32* %304 = OpAccessChain %41 %300 %187 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFAdd %303 %305 
                                Private f32* %307 = OpAccessChain %9 %31 
                                                      OpStore %307 %306 
                                Private f32* %308 = OpAccessChain %9 %31 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %310 %72 
                                Private f32* %312 = OpAccessChain %9 %31 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %9 %31 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpExtInst %1 43 %314 %214 %72 
                                Private f32* %316 = OpAccessChain %9 %31 
                                                      OpStore %316 %315 
                                       f32_3 %317 = OpLoad %78 
                                       f32_2 %318 = OpVectorShuffle %317 %317 0 1 
                              Uniform f32_4* %319 = OpAccessChain %41 %229 %104 
                                       f32_4 %320 = OpLoad %319 
                                       f32_2 %321 = OpVectorShuffle %320 %320 0 1 
                                       f32_2 %322 = OpFAdd %318 %321 
                                       f32_3 %323 = OpLoad %78 
                                       f32_3 %324 = OpVectorShuffle %323 %322 3 4 2 
                                                      OpStore %78 %324 
                  read_only Texture2DSampled %326 = OpLoad %325 
                                       f32_3 %327 = OpLoad %78 
                                       f32_2 %328 = OpVectorShuffle %327 %327 0 1 
                                       f32_4 %330 = OpImageSampleImplicitLod %326 %328 Bias %7 
                                         f32 %331 = OpCompositeExtract %330 3 
                                Private f32* %332 = OpAccessChain %78 %31 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %78 %31 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %21 %334 
                                         f32 %335 = OpLoad %21 
                                         f32 %336 = OpExtInst %1 43 %335 %214 %72 
                                                      OpStore %21 %336 
                                Private f32* %337 = OpAccessChain %78 %31 
                                         f32 %338 = OpLoad %337 
                                Private f32* %339 = OpAccessChain %177 %31 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %338 %340 
                                Private f32* %342 = OpAccessChain %78 %31 
                                                      OpStore %342 %341 
                                       f32_3 %343 = OpLoad %78 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 0 0 
                              Uniform f32_4* %346 = OpAccessChain %41 %345 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFMul %344 %348 
                                       f32_4 %350 = OpLoad %258 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %258 %351 
                                         f32 %352 = OpLoad %21 
                                         f32 %353 = OpLoad %217 
                                         f32 %354 = OpFMul %352 %353 
                                Private f32* %355 = OpAccessChain %78 %31 
                                                      OpStore %355 %354 
                              Uniform f32_4* %356 = OpAccessChain %41 %345 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                         f32 %363 = OpDot %358 %362 
                                Private f32* %364 = OpAccessChain %177 %31 
                                                      OpStore %364 %363 
                                Private f32* %365 = OpAccessChain %78 %31 
                                         f32 %366 = OpLoad %365 
                                Private f32* %367 = OpAccessChain %177 %31 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFMul %366 %368 
                                Private f32* %370 = OpAccessChain %258 %187 
                                                      OpStore %370 %369 
                                       f32_4 %371 = OpLoad %9 
                                       f32_4 %372 = OpVectorShuffle %371 %371 0 0 0 0 
                                       f32_4 %373 = OpLoad %258 
                                       f32_4 %374 = OpFMul %372 %373 
                                                      OpStore %9 %374 
                                       f32_4 %377 = OpLoad %9 
                                                      OpStore %376 %377 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat1;
vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat16_2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec2 u_xlat5;
vec2 u_xlat10;
float u_xlat10_10;
float u_xlat15;
float u_xlat16_15;
float u_xlat16;
float u_xlat16_16;
void main()
{
    u_xlat0 = (-_LightShadowData.x) + 1.0;
    u_xlat5.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_2 = texture(_CameraNormalsTexture, u_xlat5.xy);
    u_xlat5.x = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat1.xyz = u_xlat10.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xyw = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat0 = u_xlat10_10 * u_xlat0 + _LightShadowData.x;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10.x = sqrt(u_xlat10.x);
    u_xlat5.x = (-u_xlat1.z) * u_xlat5.x + u_xlat10.x;
    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat1.w;
    u_xlat10.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat5.x = u_xlat5.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat0 = u_xlat10.x + u_xlat0;
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat10.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlatb1 = u_xlat1.z<0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat10_4 = texture(_LightTexture0, u_xlat10.xy, -8.0);
    u_xlat10.x = u_xlat1.x * u_xlat10_4.w;
    u_xlat1.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat10.x = u_xlat10.x * u_xlat10_4.w;
    u_xlat0 = u_xlat0 * u_xlat10.x;
    u_xlat10.x = u_xlat0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_15 = u_xlat10_2.w * 128.0;
    u_xlat16_16 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
    u_xlat16 = dot(u_xlat3.xyz, u_xlat16_2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat2.xyz = vec3(u_xlat0) * _LightColor.xyz;
    u_xlat0 = max(u_xlat16, 0.0);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * u_xlat16_15;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat10.x * u_xlat0;
    u_xlat10.x = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat10.x * u_xlat0;
    SV_Target0 = u_xlat5.xxxx * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 510
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %33 %85 %506 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %8 RelaxedPrecision 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %26 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %33 Location 33 
                                                      OpDecorate %43 DescriptorSet 43 
                                                      OpDecorate %43 Binding 43 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %62 RelaxedPrecision 
                                                      OpDecorate %85 Location 85 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %180 DescriptorSet 180 
                                                      OpDecorate %180 Binding 180 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %325 DescriptorSet 325 
                                                      OpDecorate %325 Binding 325 
                                                      OpDecorate %371 DescriptorSet 371 
                                                      OpDecorate %371 Binding 371 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %426 RelaxedPrecision 
                                                      OpDecorate %427 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %432 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %447 RelaxedPrecision 
                                                      OpDecorate %452 RelaxedPrecision 
                                                      OpDecorate %465 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %469 RelaxedPrecision 
                                                      OpDecorate %470 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %479 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %498 RelaxedPrecision 
                                                      OpDecorate %506 RelaxedPrecision 
                                                      OpDecorate %506 Location 506 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %509 DescriptorSet 509 
                                                      OpDecorate %509 Binding 509 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 3 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %10 %14 
                                              %16 = OpTypeArray %10 %12 
                                              %17 = OpTypeStruct %9 %10 %10 %13 %15 %10 %10 %10 %10 %10 %16 %10 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 5 
                                          u32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %6 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %29 = OpTypeVector %6 2 
                                              %30 = OpTypePointer Private %29 
                               Private f32_2* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %10 
                                 Input f32_4* %33 = OpVariable Input 
                                 Private f32* %39 = OpVariable Private 
                                              %40 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %41 = OpTypeSampledImage %40 
                                              %42 = OpTypePointer UniformConstant %41 
  UniformConstant read_only Texture2DSampled* %43 = OpVariable UniformConstant 
                                          i32 %49 = OpConstant 11 
                                              %50 = OpTypePointer Uniform %10 
                                              %59 = OpTypePointer Private %10 
                               Private f32_4* %60 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %61 = OpVariable UniformConstant 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                 Private f32* %79 = OpVariable Private 
                                          i32 %80 = OpConstant 1 
                                          u32 %81 = OpConstant 2 
                                              %84 = OpTypePointer Input %9 
                                 Input f32_3* %85 = OpVariable Input 
                                              %86 = OpTypePointer Input %6 
                               Private f32_4* %90 = OpVariable Private 
                                             %104 = OpTypePointer Private %9 
                              Private f32_3* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 3 
                                         i32 %113 = OpConstant 0 
                              Private f32_4* %135 = OpVariable Private 
                                         i32 %138 = OpConstant 4 
                                             %167 = OpTypePointer Function %9 
                                Private f32* %176 = OpVariable Private 
                                             %177 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %178 = OpTypeSampledImage %177 
                                             %179 = OpTypePointer UniformConstant %178 
 UniformConstant read_only Texture2DSampled* %180 = OpVariable UniformConstant 
                                         f32 %183 = OpConstant 3.674022E-40 
                                         i32 %193 = OpConstant 6 
                                         u32 %217 = OpConstant 3 
                                         i32 %239 = OpConstant 9 
                              Private f32_3* %256 = OpVariable Private 
                              Private f32_4* %265 = OpVariable Private 
                                         i32 %268 = OpConstant 10 
                                             %312 = OpTypeBool 
                                             %313 = OpTypePointer Private %312 
                               Private bool* %314 = OpVariable Private 
                                             %318 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %325 = OpVariable UniformConstant 
                                         f32 %329 = OpConstant 3.674022E-40 
                                         i32 %340 = OpConstant 7 
                                             %348 = OpTypePointer Uniform %9 
 UniformConstant read_only Texture2DSampled* %371 = OpVariable UniformConstant 
                                         f32 %416 = OpConstant 3.674022E-40 
                                       f32_3 %417 = OpConstantComposite %416 %416 %416 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_3 %420 = OpConstantComposite %419 %419 %419 
                                Private f32* %422 = OpVariable Private 
                                         f32 %425 = OpConstant 3.674022E-40 
                                Private f32* %427 = OpVariable Private 
                              Private f32_4* %455 = OpVariable Private 
                                         i32 %458 = OpConstant 8 
                                         f32 %489 = OpConstant 3.674022E-40 
                                         f32 %490 = OpConstant 3.674022E-40 
                                         f32 %491 = OpConstant 3.674022E-40 
                                       f32_3 %492 = OpConstantComposite %489 %490 %491 
                                             %505 = OpTypePointer Output %10 
                               Output f32_4* %506 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %509 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %168 = OpVariable Function 
                               Function f32* %319 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                          f32 %28 = OpFAdd %26 %27 
                                                      OpStore %8 %28 
                                        f32_4 %34 = OpLoad %33 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                                        f32_4 %36 = OpLoad %33 
                                        f32_2 %37 = OpVectorShuffle %36 %36 3 3 
                                        f32_2 %38 = OpFDiv %35 %37 
                                                      OpStore %31 %38 
                   read_only Texture2DSampled %44 = OpLoad %43 
                                        f32_2 %45 = OpLoad %31 
                                        f32_4 %46 = OpImageSampleImplicitLod %44 %45 
                                          f32 %47 = OpCompositeExtract %46 0 
                                                      OpStore %39 %47 
                                        f32_2 %48 = OpLoad %31 
                               Uniform f32_4* %51 = OpAccessChain %19 %49 
                                        f32_4 %52 = OpLoad %51 
                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                        f32_2 %54 = OpFMul %48 %53 
                               Uniform f32_4* %55 = OpAccessChain %19 %49 
                                        f32_4 %56 = OpLoad %55 
                                        f32_2 %57 = OpVectorShuffle %56 %56 2 3 
                                        f32_2 %58 = OpFAdd %54 %57 
                                                      OpStore %31 %58 
                   read_only Texture2DSampled %62 = OpLoad %61 
                                        f32_2 %63 = OpLoad %31 
                                        f32_4 %64 = OpImageSampleImplicitLod %62 %63 
                                                      OpStore %60 %64 
                                 Uniform f32* %66 = OpAccessChain %19 %65 %22 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %39 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %19 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                 Private f32* %74 = OpAccessChain %31 %22 
                                                      OpStore %74 %73 
                                 Private f32* %75 = OpAccessChain %31 %22 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFDiv %27 %76 
                                 Private f32* %78 = OpAccessChain %31 %22 
                                                      OpStore %78 %77 
                                 Uniform f32* %82 = OpAccessChain %19 %80 %81 
                                          f32 %83 = OpLoad %82 
                                   Input f32* %87 = OpAccessChain %85 %81 
                                          f32 %88 = OpLoad %87 
                                          f32 %89 = OpFDiv %83 %88 
                                                      OpStore %79 %89 
                                          f32 %91 = OpLoad %79 
                                        f32_3 %92 = OpCompositeConstruct %91 %91 %91 
                                        f32_3 %93 = OpLoad %85 
                                        f32_3 %94 = OpFMul %92 %93 
                                        f32_4 %95 = OpLoad %90 
                                        f32_4 %96 = OpVectorShuffle %95 %94 4 5 6 3 
                                                      OpStore %90 %96 
                                        f32_2 %97 = OpLoad %31 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_4 %99 = OpLoad %90 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_4 %102 = OpLoad %90 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 6 
                                                      OpStore %90 %103 
                                       f32_4 %106 = OpLoad %90 
                                       f32_3 %107 = OpVectorShuffle %106 %106 1 1 1 
                              Uniform f32_4* %109 = OpAccessChain %19 %108 %80 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_3 %112 = OpFMul %107 %111 
                                                      OpStore %105 %112 
                              Uniform f32_4* %114 = OpAccessChain %19 %108 %113 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_4 %117 = OpLoad %90 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 0 0 
                                       f32_3 %119 = OpFMul %116 %118 
                                       f32_3 %120 = OpLoad %105 
                                       f32_3 %121 = OpFAdd %119 %120 
                                                      OpStore %105 %121 
                              Uniform f32_4* %122 = OpAccessChain %19 %108 %65 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_4 %125 = OpLoad %90 
                                       f32_3 %126 = OpVectorShuffle %125 %125 3 3 3 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_3 %128 = OpLoad %105 
                                       f32_3 %129 = OpFAdd %127 %128 
                                                      OpStore %105 %129 
                                       f32_3 %130 = OpLoad %105 
                              Uniform f32_4* %131 = OpAccessChain %19 %108 %108 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFAdd %130 %133 
                                                      OpStore %105 %134 
                                       f32_3 %136 = OpLoad %105 
                                       f32_4 %137 = OpVectorShuffle %136 %136 1 1 1 1 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 %80 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %137 %140 
                                                      OpStore %135 %141 
                              Uniform f32_4* %142 = OpAccessChain %19 %138 %113 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpLoad %105 
                                       f32_4 %145 = OpVectorShuffle %144 %144 0 0 0 0 
                                       f32_4 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %135 
                                       f32_4 %148 = OpFAdd %146 %147 
                                                      OpStore %135 %148 
                              Uniform f32_4* %149 = OpAccessChain %19 %138 %65 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpLoad %105 
                                       f32_4 %152 = OpVectorShuffle %151 %151 2 2 2 2 
                                       f32_4 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %135 
                                       f32_4 %155 = OpFAdd %153 %154 
                                                      OpStore %135 %155 
                                       f32_4 %156 = OpLoad %135 
                              Uniform f32_4* %157 = OpAccessChain %19 %138 %108 
                                       f32_4 %158 = OpLoad %157 
                                       f32_4 %159 = OpFAdd %156 %158 
                                                      OpStore %135 %159 
                                       f32_4 %160 = OpLoad %135 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_4 %162 = OpLoad %135 
                                       f32_3 %163 = OpVectorShuffle %162 %162 3 3 3 
                                       f32_3 %164 = OpFDiv %161 %163 
                                       f32_4 %165 = OpLoad %135 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 5 6 3 
                                                      OpStore %135 %166 
                                       f32_4 %169 = OpLoad %135 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 1 
                                Private f32* %171 = OpAccessChain %135 %81 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpCompositeExtract %170 0 
                                         f32 %174 = OpCompositeExtract %170 1 
                                       f32_3 %175 = OpCompositeConstruct %173 %174 %172 
                                                      OpStore %168 %175 
                  read_only Texture2DSampled %181 = OpLoad %180 
                                       f32_3 %182 = OpLoad %168 
                                         f32 %184 = OpCompositeExtract %182 2 
                                         f32 %185 = OpImageSampleDrefExplicitLod %181 %182 %184 Lod %6 
                                                      OpStore %176 %185 
                                         f32 %186 = OpLoad %176 
                                         f32 %187 = OpLoad %8 
                                         f32 %188 = OpFMul %186 %187 
                                Uniform f32* %189 = OpAccessChain %19 %21 %22 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFAdd %188 %190 
                                                      OpStore %8 %191 
                                       f32_3 %192 = OpLoad %105 
                              Uniform f32_4* %194 = OpAccessChain %19 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFNegate %196 
                                       f32_3 %198 = OpFAdd %192 %197 
                                       f32_4 %199 = OpLoad %135 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %135 %200 
                                       f32_4 %201 = OpLoad %135 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %135 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpDot %202 %204 
                                                      OpStore %79 %205 
                                         f32 %206 = OpLoad %79 
                                         f32 %207 = OpExtInst %1 31 %206 
                                                      OpStore %79 %207 
                                Private f32* %208 = OpAccessChain %90 %81 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                Private f32* %211 = OpAccessChain %31 %22 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %210 %212 
                                         f32 %214 = OpLoad %79 
                                         f32 %215 = OpFAdd %213 %214 
                                Private f32* %216 = OpAccessChain %31 %22 
                                                      OpStore %216 %215 
                                Uniform f32* %218 = OpAccessChain %19 %193 %217 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %31 %22 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFMul %219 %221 
                                Private f32* %223 = OpAccessChain %90 %217 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFAdd %222 %224 
                                Private f32* %226 = OpAccessChain %31 %22 
                                                      OpStore %226 %225 
                                Private f32* %227 = OpAccessChain %31 %22 
                                         f32 %228 = OpLoad %227 
                                Uniform f32* %229 = OpAccessChain %19 %21 %81 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFMul %228 %230 
                                Uniform f32* %232 = OpAccessChain %19 %21 %217 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                                      OpStore %79 %234 
                                         f32 %235 = OpLoad %79 
                                         f32 %236 = OpExtInst %1 43 %235 %183 %27 
                                                      OpStore %79 %236 
                                Private f32* %237 = OpAccessChain %31 %22 
                                         f32 %238 = OpLoad %237 
                                Uniform f32* %240 = OpAccessChain %19 %239 %81 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %238 %241 
                                Uniform f32* %243 = OpAccessChain %19 %239 %217 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFAdd %242 %244 
                                Private f32* %246 = OpAccessChain %31 %22 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %31 %22 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFNegate %248 
                                         f32 %250 = OpFAdd %249 %27 
                                Private f32* %251 = OpAccessChain %31 %22 
                                                      OpStore %251 %250 
                                Private f32* %252 = OpAccessChain %31 %22 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpExtInst %1 43 %253 %183 %27 
                                Private f32* %255 = OpAccessChain %31 %22 
                                                      OpStore %255 %254 
                                         f32 %257 = OpLoad %79 
                                         f32 %258 = OpLoad %8 
                                         f32 %259 = OpFAdd %257 %258 
                                Private f32* %260 = OpAccessChain %256 %22 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %256 %22 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpExtInst %1 43 %262 %183 %27 
                                Private f32* %264 = OpAccessChain %256 %22 
                                                      OpStore %264 %263 
                                       f32_3 %266 = OpLoad %105 
                                       f32_3 %267 = OpVectorShuffle %266 %266 1 1 1 
                              Uniform f32_4* %269 = OpAccessChain %19 %268 %80 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 3 
                                       f32_3 %272 = OpFMul %267 %271 
                                       f32_4 %273 = OpLoad %265 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 1 5 6 
                                                      OpStore %265 %274 
                              Uniform f32_4* %275 = OpAccessChain %19 %268 %113 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 3 
                                       f32_3 %278 = OpLoad %105 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 0 0 
                                       f32_3 %280 = OpFMul %277 %279 
                                       f32_4 %281 = OpLoad %265 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 2 3 
                                       f32_3 %283 = OpFAdd %280 %282 
                                       f32_4 %284 = OpLoad %265 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 1 5 6 
                                                      OpStore %265 %285 
                              Uniform f32_4* %286 = OpAccessChain %19 %268 %65 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 3 
                                       f32_3 %289 = OpLoad %105 
                                       f32_3 %290 = OpVectorShuffle %289 %289 2 2 2 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_4 %292 = OpLoad %265 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 2 3 
                                       f32_3 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %265 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 1 5 6 
                                                      OpStore %265 %296 
                                       f32_4 %297 = OpLoad %265 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 2 3 
                              Uniform f32_4* %299 = OpAccessChain %19 %268 %108 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 3 
                                       f32_3 %302 = OpFAdd %298 %301 
                                       f32_4 %303 = OpLoad %265 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 1 5 6 
                                                      OpStore %265 %304 
                                       f32_4 %305 = OpLoad %265 
                                       f32_2 %306 = OpVectorShuffle %305 %305 0 2 
                                       f32_4 %307 = OpLoad %265 
                                       f32_2 %308 = OpVectorShuffle %307 %307 3 3 
                                       f32_2 %309 = OpFDiv %306 %308 
                                       f32_4 %310 = OpLoad %265 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 1 5 3 
                                                      OpStore %265 %311 
                                Private f32* %315 = OpAccessChain %265 %217 
                                         f32 %316 = OpLoad %315 
                                        bool %317 = OpFOrdLessThan %316 %183 
                                                      OpStore %314 %317 
                                        bool %320 = OpLoad %314 
                                                      OpSelectionMerge %322 None 
                                                      OpBranchConditional %320 %321 %323 
                                             %321 = OpLabel 
                                                      OpStore %319 %27 
                                                      OpBranch %322 
                                             %323 = OpLabel 
                                                      OpStore %319 %183 
                                                      OpBranch %322 
                                             %322 = OpLabel 
                                         f32 %324 = OpLoad %319 
                                                      OpStore %39 %324 
                  read_only Texture2DSampled %326 = OpLoad %325 
                                       f32_4 %327 = OpLoad %265 
                                       f32_2 %328 = OpVectorShuffle %327 %327 0 2 
                                       f32_4 %330 = OpImageSampleImplicitLod %326 %328 Bias %10 
                                         f32 %331 = OpCompositeExtract %330 3 
                                Private f32* %332 = OpAccessChain %265 %22 
                                                      OpStore %332 %331 
                                         f32 %333 = OpLoad %39 
                                Private f32* %334 = OpAccessChain %265 %22 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFMul %333 %335 
                                Private f32* %337 = OpAccessChain %265 %22 
                                                      OpStore %337 %336 
                                       f32_3 %338 = OpLoad %105 
                                       f32_3 %339 = OpFNegate %338 
                              Uniform f32_4* %341 = OpAccessChain %19 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpFAdd %339 %343 
                                       f32_4 %345 = OpLoad %90 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %90 %346 
                                       f32_3 %347 = OpLoad %105 
                              Uniform f32_3* %349 = OpAccessChain %19 %113 
                                       f32_3 %350 = OpLoad %349 
                                       f32_3 %351 = OpFNegate %350 
                                       f32_3 %352 = OpFAdd %347 %351 
                                                      OpStore %105 %352 
                                       f32_4 %353 = OpLoad %90 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_4 %355 = OpLoad %90 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                         f32 %357 = OpDot %354 %356 
                                                      OpStore %79 %357 
                                         f32 %358 = OpLoad %79 
                                Uniform f32* %359 = OpAccessChain %19 %340 %217 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFMul %358 %360 
                                                      OpStore %39 %361 
                                         f32 %362 = OpLoad %79 
                                         f32 %363 = OpExtInst %1 32 %362 
                                                      OpStore %79 %363 
                                         f32 %364 = OpLoad %79 
                                       f32_3 %365 = OpCompositeConstruct %364 %364 %364 
                                       f32_4 %366 = OpLoad %90 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpFMul %365 %367 
                                       f32_4 %369 = OpLoad %90 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %90 %370 
                  read_only Texture2DSampled %372 = OpLoad %371 
                                         f32 %373 = OpLoad %39 
                                       f32_2 %374 = OpCompositeConstruct %373 %373 
                                       f32_4 %375 = OpImageSampleImplicitLod %372 %374 
                                         f32 %376 = OpCompositeExtract %375 3 
                                                      OpStore %79 %376 
                                         f32 %377 = OpLoad %79 
                                Private f32* %378 = OpAccessChain %265 %22 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                Private f32* %381 = OpAccessChain %265 %22 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %256 %22 
                                         f32 %383 = OpLoad %382 
                                Private f32* %384 = OpAccessChain %265 %22 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                Private f32* %387 = OpAccessChain %265 %22 
                                                      OpStore %387 %386 
                                Private f32* %388 = OpAccessChain %265 %22 
                                         f32 %389 = OpLoad %388 
                                                      OpStore %79 %389 
                                         f32 %390 = OpLoad %79 
                                         f32 %391 = OpExtInst %1 43 %390 %183 %27 
                                                      OpStore %79 %391 
                                       f32_3 %392 = OpLoad %105 
                                       f32_3 %393 = OpLoad %105 
                                         f32 %394 = OpDot %392 %393 
                                                      OpStore %39 %394 
                                         f32 %395 = OpLoad %39 
                                         f32 %396 = OpExtInst %1 32 %395 
                                                      OpStore %39 %396 
                                       f32_3 %397 = OpLoad %105 
                                       f32_3 %398 = OpFNegate %397 
                                         f32 %399 = OpLoad %39 
                                       f32_3 %400 = OpCompositeConstruct %399 %399 %399 
                                       f32_3 %401 = OpFMul %398 %400 
                                       f32_4 %402 = OpLoad %90 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_3 %404 = OpFAdd %401 %403 
                                                      OpStore %105 %404 
                                       f32_3 %405 = OpLoad %105 
                                       f32_3 %406 = OpLoad %105 
                                         f32 %407 = OpDot %405 %406 
                                                      OpStore %39 %407 
                                         f32 %408 = OpLoad %39 
                                         f32 %409 = OpExtInst %1 32 %408 
                                                      OpStore %39 %409 
                                         f32 %410 = OpLoad %39 
                                       f32_3 %411 = OpCompositeConstruct %410 %410 %410 
                                       f32_3 %412 = OpLoad %105 
                                       f32_3 %413 = OpFMul %411 %412 
                                                      OpStore %105 %413 
                                       f32_4 %414 = OpLoad %60 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_3 %418 = OpFMul %415 %417 
                                       f32_3 %421 = OpFAdd %418 %420 
                                                      OpStore %256 %421 
                                Private f32* %423 = OpAccessChain %60 %217 
                                         f32 %424 = OpLoad %423 
                                         f32 %426 = OpFMul %424 %425 
                                                      OpStore %422 %426 
                                       f32_3 %428 = OpLoad %256 
                                       f32_3 %429 = OpLoad %256 
                                         f32 %430 = OpDot %428 %429 
                                                      OpStore %427 %430 
                                         f32 %431 = OpLoad %427 
                                         f32 %432 = OpExtInst %1 32 %431 
                                                      OpStore %427 %432 
                                       f32_3 %433 = OpLoad %256 
                                         f32 %434 = OpLoad %427 
                                       f32_3 %435 = OpCompositeConstruct %434 %434 %434 
                                       f32_3 %436 = OpFMul %433 %435 
                                                      OpStore %256 %436 
                                       f32_3 %437 = OpLoad %105 
                                       f32_3 %438 = OpLoad %256 
                                         f32 %439 = OpDot %437 %438 
                                                      OpStore %427 %439 
                                       f32_4 %440 = OpLoad %90 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                       f32_3 %442 = OpLoad %256 
                                         f32 %443 = OpDot %441 %442 
                                Private f32* %444 = OpAccessChain %256 %22 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %256 %22 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpExtInst %1 40 %446 %183 
                                Private f32* %448 = OpAccessChain %256 %22 
                                                      OpStore %448 %447 
                                Private f32* %449 = OpAccessChain %265 %22 
                                         f32 %450 = OpLoad %449 
                                Private f32* %451 = OpAccessChain %256 %22 
                                         f32 %452 = OpLoad %451 
                                         f32 %453 = OpFMul %450 %452 
                                Private f32* %454 = OpAccessChain %265 %22 
                                                      OpStore %454 %453 
                                       f32_4 %456 = OpLoad %265 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 0 0 
                              Uniform f32_4* %459 = OpAccessChain %19 %458 
                                       f32_4 %460 = OpLoad %459 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 1 2 
                                       f32_3 %462 = OpFMul %457 %461 
                                       f32_4 %463 = OpLoad %455 
                                       f32_4 %464 = OpVectorShuffle %463 %462 4 5 6 3 
                                                      OpStore %455 %464 
                                         f32 %465 = OpLoad %427 
                                         f32 %466 = OpExtInst %1 40 %465 %183 
                                Private f32* %467 = OpAccessChain %256 %22 
                                                      OpStore %467 %466 
                                Private f32* %468 = OpAccessChain %256 %22 
                                         f32 %469 = OpLoad %468 
                                         f32 %470 = OpExtInst %1 30 %469 
                                Private f32* %471 = OpAccessChain %256 %22 
                                                      OpStore %471 %470 
                                Private f32* %472 = OpAccessChain %256 %22 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpLoad %422 
                                         f32 %475 = OpFMul %473 %474 
                                Private f32* %476 = OpAccessChain %256 %22 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %256 %22 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpExtInst %1 29 %478 
                                Private f32* %480 = OpAccessChain %256 %22 
                                                      OpStore %480 %479 
                                         f32 %481 = OpLoad %79 
                                Private f32* %482 = OpAccessChain %256 %22 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFMul %481 %483 
                                Private f32* %485 = OpAccessChain %265 %22 
                                                      OpStore %485 %484 
                              Uniform f32_4* %486 = OpAccessChain %19 %458 
                                       f32_4 %487 = OpLoad %486 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                         f32 %493 = OpDot %488 %492 
                                Private f32* %494 = OpAccessChain %256 %22 
                                                      OpStore %494 %493 
                                Private f32* %495 = OpAccessChain %265 %22 
                                         f32 %496 = OpLoad %495 
                                Private f32* %497 = OpAccessChain %256 %22 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpFMul %496 %498 
                                Private f32* %500 = OpAccessChain %455 %217 
                                                      OpStore %500 %499 
                                       f32_2 %501 = OpLoad %31 
                                       f32_4 %502 = OpVectorShuffle %501 %501 0 0 0 0 
                                       f32_4 %503 = OpLoad %455 
                                       f32_4 %504 = OpFMul %502 %503 
                                                      OpStore %265 %504 
                                       f32_4 %507 = OpLoad %265 
                                                      OpStore %506 %507 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec4 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
float u_xlat18;
float u_xlat16_18;
float u_xlat19;
float u_xlat20;
float u_xlat16_20;
float u_xlat10_20;
bool u_xlatb20;
vec2 u_xlat22;
float u_xlat27;
float u_xlat28;
bool u_xlatb28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat10_4 = texture(_LightTexture0, u_xlat3.xy, -8.0);
    u_xlatb28 = u_xlat3.z<0.0;
    u_xlat28 = u_xlatb28 ? 1.0 : float(0.0);
    u_xlat28 = u_xlat28 * u_xlat10_4.w;
    u_xlat19 = u_xlat19 * _LightPos.w;
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat19));
    u_xlat19 = u_xlat28 * u_xlat10_3.w;
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlatb20 = u_xlat28<0.99000001;
    if(u_xlatb20){
        u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
        u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
        u_xlat4.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
        u_xlat4.xy = floor(u_xlat4.xy);
        u_xlat3.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat4.xy);
        u_xlat5 = u_xlat3.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat6.xw = u_xlat5.xz * u_xlat5.xz;
        u_xlat22.xy = u_xlat6.xw * vec2(0.5, 0.5) + (-u_xlat3.xy);
        u_xlat5.xz = (-u_xlat3.xy) + vec2(1.0, 1.0);
        u_xlat7.xy = min(u_xlat3.xy, vec2(0.0, 0.0));
        u_xlat5.xz = (-u_xlat7.xy) * u_xlat7.xy + u_xlat5.xz;
        u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
        u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat5.yw;
        u_xlat7.x = u_xlat22.x;
        u_xlat7.y = u_xlat5.x;
        u_xlat7.z = u_xlat3.x;
        u_xlat7.w = u_xlat6.x;
        u_xlat7 = u_xlat7 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat6.x = u_xlat22.y;
        u_xlat6.y = u_xlat5.z;
        u_xlat6.z = u_xlat3.y;
        u_xlat5 = u_xlat6 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat6 = u_xlat7.ywyw + u_xlat7.xzxz;
        u_xlat8 = u_xlat5.yyww + u_xlat5.xxzz;
        u_xlat3.xy = u_xlat7.yw / u_xlat6.zw;
        u_xlat3.xy = u_xlat3.xy + vec2(-1.5, 0.5);
        u_xlat22.xy = u_xlat5.yw / u_xlat8.yw;
        u_xlat22.xy = u_xlat22.xy + vec2(-1.5, 0.5);
        u_xlat5.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.xx;
        u_xlat5.zw = u_xlat22.xy * _ShadowMapTexture_TexelSize.yy;
        u_xlat6 = u_xlat6 * u_xlat8;
        u_xlat7 = u_xlat4.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xzyz;
        vec3 txVec0 = vec3(u_xlat7.xy,u_xlat3.z);
        u_xlat10_20 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
        vec3 txVec1 = vec3(u_xlat7.zw,u_xlat3.z);
        u_xlat10_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
        u_xlat3.x = u_xlat10_3.x * u_xlat6.y;
        u_xlat20 = u_xlat6.x * u_xlat10_20 + u_xlat3.x;
        u_xlat4 = u_xlat4.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwyw;
        vec3 txVec2 = vec3(u_xlat4.xy,u_xlat3.z);
        u_xlat10_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
        u_xlat20 = u_xlat6.z * u_xlat10_3.x + u_xlat20;
        vec3 txVec3 = vec3(u_xlat4.zw,u_xlat3.z);
        u_xlat10_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
        u_xlat20 = u_xlat6.w * u_xlat10_3.x + u_xlat20;
        u_xlat3.x = (-_LightShadowData.x) + 1.0;
        u_xlat20 = u_xlat20 * u_xlat3.x + _LightShadowData.x;
    } else {
        u_xlat20 = 1.0;
    //ENDIF
    }
    u_xlat28 = u_xlat28 + u_xlat20;
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlat19 = u_xlat28 * u_xlat19;
    u_xlat1.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_3 = texture(_CameraNormalsTexture, u_xlat1.xy);
    u_xlat16_1.xyw = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = dot(u_xlat16_1.xyw, u_xlat16_1.xyw);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_1.xyw = u_xlat16_1.xyw * vec3(u_xlat16_20);
    u_xlat20 = dot(u_xlat9.xyz, u_xlat16_1.xyw);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlat2.xyw = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat9.xyz = (-u_xlat2.xyw) * u_xlat3.xxx + u_xlat9.xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat2.xxx;
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat16_1.xyw);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlat16_18 = u_xlat10_3.w * 128.0;
    u_xlat9.x = log2(u_xlat9.x);
    u_xlat9.x = u_xlat9.x * u_xlat16_18;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat18 = u_xlat19;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat9.x = u_xlat18 * u_xlat9.x;
    u_xlat18 = u_xlat19 * u_xlat20;
    u_xlat1.xyz = vec3(u_xlat18) * _LightColor.xyz;
    u_xlat18 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.w = u_xlat18 * u_xlat9.x;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    SV_Target0 = u_xlat0.xxxx * u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 801
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %43 %797 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 RelaxedPrecision 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate %27 Location 27 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %230 DescriptorSet 230 
                                                      OpDecorate %230 Binding 230 
                                                      OpDecorate %259 DescriptorSet 259 
                                                      OpDecorate %259 Binding 259 
                                                      OpDecorate %272 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %509 DescriptorSet 509 
                                                      OpDecorate %509 Binding 509 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %601 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %611 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %630 DescriptorSet 630 
                                                      OpDecorate %630 Binding 630 
                                                      OpDecorate %631 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %639 RelaxedPrecision 
                                                      OpDecorate %642 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %647 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %649 RelaxedPrecision 
                                                      OpDecorate %650 RelaxedPrecision 
                                                      OpDecorate %651 RelaxedPrecision 
                                                      OpDecorate %652 RelaxedPrecision 
                                                      OpDecorate %653 RelaxedPrecision 
                                                      OpDecorate %654 RelaxedPrecision 
                                                      OpDecorate %655 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %657 RelaxedPrecision 
                                                      OpDecorate %661 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %709 RelaxedPrecision 
                                                      OpDecorate %710 RelaxedPrecision 
                                                      OpDecorate %711 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %721 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %770 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %797 Location 797 
                                                      OpDecorate %800 RelaxedPrecision 
                                                      OpDecorate %800 DescriptorSet 800 
                                                      OpDecorate %800 Binding 800 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %12 
                                              %17 = OpTypeStruct %10 %7 %7 %13 %15 %7 %7 %7 %7 %7 %16 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 1 
                                          u32 %22 = OpConstant 2 
                                              %23 = OpTypePointer Uniform %6 
                                              %26 = OpTypePointer Input %10 
                                 Input f32_3* %27 = OpVariable Input 
                                              %28 = OpTypePointer Input %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                               Private f32_4* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                                 Input f32_4* %43 = OpVariable Input 
                                              %44 = OpTypeVector %6 2 
                                 Private f32* %52 = OpVariable Private 
                                              %53 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %54 = OpTypeSampledImage %53 
                                              %55 = OpTypePointer UniformConstant %54 
  UniformConstant read_only Texture2DSampled* %56 = OpVariable UniformConstant 
                                          i32 %62 = OpConstant 2 
                                          u32 %67 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                               Private f32_4* %74 = OpVariable Private 
                               Private f32_4* %82 = OpVariable Private 
                                          i32 %85 = OpConstant 3 
                                              %86 = OpTypePointer Uniform %7 
                                          i32 %93 = OpConstant 0 
                                         i32 %126 = OpConstant 6 
                                         u32 %153 = OpConstant 3 
                                             %163 = OpTypePointer Private %10 
                              Private f32_3* %164 = OpVariable Private 
                                         i32 %168 = OpConstant 7 
                                Private f32* %173 = OpVariable Private 
                                Private f32* %177 = OpVariable Private 
                                         i32 %186 = OpConstant 10 
 UniformConstant read_only Texture2DSampled* %230 = OpVariable UniformConstant 
                                         f32 %234 = OpConstant 3.674022E-40 
                                             %237 = OpTypeBool 
                                             %238 = OpTypePointer Private %237 
                               Private bool* %239 = OpVariable Private 
                                         f32 %242 = OpConstant 3.674022E-40 
                                Private f32* %244 = OpVariable Private 
                                             %245 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %259 = OpVariable UniformConstant 
                                         i32 %270 = OpConstant 5 
                                         f32 %280 = OpConstant 3.674022E-40 
                                         i32 %287 = OpConstant 4 
                              Private f32_4* %316 = OpVariable Private 
                                         i32 %319 = OpConstant 11 
                                         f32 %324 = OpConstant 3.674022E-40 
                                       f32_2 %325 = OpConstantComposite %324 %324 
                              Private f32_4* %346 = OpVariable Private 
                                       f32_4 %349 = OpConstantComposite %324 %71 %324 %71 
                              Private f32_4* %351 = OpVariable Private 
                                             %359 = OpTypePointer Private %44 
                              Private f32_2* %360 = OpVariable Private 
                                       f32_2 %371 = OpConstantComposite %71 %71 
                              Private f32_4* %375 = OpVariable Private 
                                       f32_2 %378 = OpConstantComposite %242 %242 
                                         f32 %422 = OpConstant 3.674022E-40 
                                         f32 %423 = OpConstant 3.674022E-40 
                                       f32_4 %424 = OpConstantComposite %422 %422 %422 %423 
                              Private f32_4* %442 = OpVariable Private 
                                         f32 %457 = OpConstant 3.674022E-40 
                                       f32_2 %458 = OpConstantComposite %457 %324 
                                             %496 = OpTypePointer Function %10 
                                Private f32* %505 = OpVariable Private 
                                             %506 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %507 = OpTypeSampledImage %506 
                                             %508 = OpTypePointer UniformConstant %507 
 UniformConstant read_only Texture2DSampled* %509 = OpVariable UniformConstant 
                              Private f32_4* %522 = OpVariable Private 
                                Private f32* %590 = OpVariable Private 
                                Private f32* %601 = OpVariable Private 
                              Private f32_4* %604 = OpVariable Private 
                                         i32 %619 = OpConstant 12 
 UniformConstant read_only Texture2DSampled* %630 = OpVariable UniformConstant 
                                         f32 %637 = OpConstant 3.674022E-40 
                                       f32_3 %638 = OpConstantComposite %637 %637 %637 
                                         f32 %640 = OpConstant 3.674022E-40 
                                       f32_3 %641 = OpConstantComposite %640 %640 %640 
                                Private f32* %645 = OpVariable Private 
                                             %667 = OpTypePointer Uniform %10 
                                Private f32* %714 = OpVariable Private 
                                         f32 %717 = OpConstant 3.674022E-40 
                                Private f32* %744 = OpVariable Private 
                                         i32 %751 = OpConstant 8 
                                         f32 %761 = OpConstant 3.674022E-40 
                                         f32 %762 = OpConstant 3.674022E-40 
                                         f32 %763 = OpConstant 3.674022E-40 
                                       f32_3 %764 = OpConstantComposite %761 %762 %763 
                                         i32 %775 = OpConstant 9 
                                             %796 = OpTypePointer Output %7 
                               Output f32_4* %797 = OpVariable Output 
 UniformConstant read_only Texture2DSampled* %800 = OpVariable UniformConstant 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %246 = OpVariable Function 
                             Function f32_3* %497 = OpVariable Function 
                             Function f32_3* %514 = OpVariable Function 
                             Function f32_3* %550 = OpVariable Function 
                             Function f32_3* %570 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                   Input f32* %29 = OpAccessChain %27 %22 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFDiv %25 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpLoad %27 
                                        f32_3 %38 = OpFMul %36 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %9 %40 
                                        f32_4 %45 = OpLoad %43 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_4 %47 = OpLoad %43 
                                        f32_2 %48 = OpVectorShuffle %47 %47 3 3 
                                        f32_2 %49 = OpFDiv %46 %48 
                                        f32_4 %50 = OpLoad %41 
                                        f32_4 %51 = OpVectorShuffle %50 %49 4 5 2 3 
                                                      OpStore %41 %51 
                   read_only Texture2DSampled %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %41 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                          f32 %61 = OpCompositeExtract %60 0 
                                                      OpStore %52 %61 
                                 Uniform f32* %63 = OpAccessChain %19 %62 %32 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %52 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %19 %62 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                                      OpStore %52 %70 
                                          f32 %72 = OpLoad %52 
                                          f32 %73 = OpFDiv %71 %72 
                                                      OpStore %52 %73 
                                          f32 %75 = OpLoad %52 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %74 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %74 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_3 %84 = OpVectorShuffle %83 %83 1 1 1 
                               Uniform f32_4* %87 = OpAccessChain %19 %85 %21 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %84 %89 
                                        f32_4 %91 = OpLoad %82 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %82 %92 
                               Uniform f32_4* %94 = OpAccessChain %19 %85 %93 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_4 %97 = OpLoad %74 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %82 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %74 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 2 6 
                                                      OpStore %74 %104 
                              Uniform f32_4* %105 = OpAccessChain %19 %85 %62 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_4 %108 = OpLoad %74 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %74 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %74 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 2 6 
                                                      OpStore %74 %115 
                                       f32_4 %116 = OpLoad %74 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %19 %85 %85 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %117 %120 
                                       f32_4 %122 = OpLoad %74 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 2 6 
                                                      OpStore %74 %123 
                                       f32_4 %124 = OpLoad %74 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 3 
                              Uniform f32_4* %127 = OpAccessChain %19 %126 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %125 %130 
                                       f32_4 %132 = OpLoad %82 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %82 %133 
                                       f32_4 %134 = OpLoad %82 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_4 %136 = OpLoad %82 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %135 %137 
                                Private f32* %139 = OpAccessChain %9 %32 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %32 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpExtInst %1 31 %141 
                                Private f32* %143 = OpAccessChain %9 %32 
                                                      OpStore %143 %142 
                                Private f32* %144 = OpAccessChain %9 %22 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpFNegate %145 
                                         f32 %147 = OpLoad %52 
                                         f32 %148 = OpFMul %146 %147 
                                Private f32* %149 = OpAccessChain %9 %32 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFAdd %148 %150 
                                Private f32* %152 = OpAccessChain %9 %32 
                                                      OpStore %152 %151 
                                Uniform f32* %154 = OpAccessChain %19 %126 %153 
                                         f32 %155 = OpLoad %154 
                                Private f32* %156 = OpAccessChain %9 %32 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFMul %155 %157 
                                Private f32* %159 = OpAccessChain %74 %22 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFAdd %158 %160 
                                Private f32* %162 = OpAccessChain %9 %32 
                                                      OpStore %162 %161 
                                       f32_4 %165 = OpLoad %74 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 3 
                                       f32_3 %167 = OpFNegate %166 
                              Uniform f32_4* %169 = OpAccessChain %19 %168 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFAdd %167 %171 
                                                      OpStore %164 %172 
                                       f32_3 %174 = OpLoad %164 
                                       f32_3 %175 = OpLoad %164 
                                         f32 %176 = OpDot %174 %175 
                                                      OpStore %173 %176 
                                         f32 %178 = OpLoad %173 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %177 %179 
                                       f32_3 %180 = OpLoad %164 
                                         f32 %181 = OpLoad %177 
                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
                                       f32_3 %183 = OpFMul %180 %182 
                                                      OpStore %164 %183 
                                       f32_4 %184 = OpLoad %74 
                                       f32_3 %185 = OpVectorShuffle %184 %184 1 1 1 
                              Uniform f32_4* %187 = OpAccessChain %19 %186 %21 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 3 
                                       f32_3 %190 = OpFMul %185 %189 
                                       f32_4 %191 = OpLoad %82 
                                       f32_4 %192 = OpVectorShuffle %191 %190 4 5 6 3 
                                                      OpStore %82 %192 
                              Uniform f32_4* %193 = OpAccessChain %19 %186 %93 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 3 
                                       f32_4 %196 = OpLoad %74 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 0 0 
                                       f32_3 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %82 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpFAdd %198 %200 
                                       f32_4 %202 = OpLoad %82 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %82 %203 
                              Uniform f32_4* %204 = OpAccessChain %19 %186 %62 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 3 
                                       f32_4 %207 = OpLoad %74 
                                       f32_3 %208 = OpVectorShuffle %207 %207 3 3 3 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %82 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFAdd %209 %211 
                                       f32_4 %213 = OpLoad %82 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %82 %214 
                                       f32_4 %215 = OpLoad %82 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              Uniform f32_4* %217 = OpAccessChain %19 %186 %85 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 3 
                                       f32_3 %220 = OpFAdd %216 %219 
                                       f32_4 %221 = OpLoad %82 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 6 3 
                                                      OpStore %82 %222 
                                       f32_4 %223 = OpLoad %82 
                                       f32_2 %224 = OpVectorShuffle %223 %223 0 1 
                                       f32_4 %225 = OpLoad %82 
                                       f32_2 %226 = OpVectorShuffle %225 %225 2 2 
                                       f32_2 %227 = OpFDiv %224 %226 
                                       f32_4 %228 = OpLoad %82 
                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 2 3 
                                                      OpStore %82 %229 
                  read_only Texture2DSampled %231 = OpLoad %230 
                                       f32_4 %232 = OpLoad %82 
                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
                                       f32_4 %235 = OpImageSampleImplicitLod %231 %233 Bias %7 
                                         f32 %236 = OpCompositeExtract %235 3 
                                                      OpStore %177 %236 
                                Private f32* %240 = OpAccessChain %82 %22 
                                         f32 %241 = OpLoad %240 
                                        bool %243 = OpFOrdLessThan %241 %242 
                                                      OpStore %239 %243 
                                        bool %247 = OpLoad %239 
                                                      OpSelectionMerge %249 None 
                                                      OpBranchConditional %247 %248 %250 
                                             %248 = OpLabel 
                                                      OpStore %246 %71 
                                                      OpBranch %249 
                                             %250 = OpLabel 
                                                      OpStore %246 %242 
                                                      OpBranch %249 
                                             %249 = OpLabel 
                                         f32 %251 = OpLoad %246 
                                                      OpStore %244 %251 
                                         f32 %252 = OpLoad %177 
                                         f32 %253 = OpLoad %244 
                                         f32 %254 = OpFMul %252 %253 
                                                      OpStore %177 %254 
                                         f32 %255 = OpLoad %173 
                                Uniform f32* %256 = OpAccessChain %19 %168 %153 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                                      OpStore %173 %258 
                  read_only Texture2DSampled %260 = OpLoad %259 
                                         f32 %261 = OpLoad %173 
                                       f32_2 %262 = OpCompositeConstruct %261 %261 
                                       f32_4 %263 = OpImageSampleImplicitLod %260 %262 
                                         f32 %264 = OpCompositeExtract %263 3 
                                                      OpStore %173 %264 
                                         f32 %265 = OpLoad %173 
                                         f32 %266 = OpLoad %177 
                                         f32 %267 = OpFMul %265 %266 
                                                      OpStore %173 %267 
                                Private f32* %268 = OpAccessChain %9 %32 
                                         f32 %269 = OpLoad %268 
                                Uniform f32* %271 = OpAccessChain %19 %270 %22 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFMul %269 %272 
                                Uniform f32* %274 = OpAccessChain %19 %270 %153 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFAdd %273 %275 
                                                      OpStore %177 %276 
                                         f32 %277 = OpLoad %177 
                                         f32 %278 = OpExtInst %1 43 %277 %242 %71 
                                                      OpStore %177 %278 
                                         f32 %279 = OpLoad %177 
                                        bool %281 = OpFOrdLessThan %279 %280 
                                                      OpStore %239 %281 
                                        bool %282 = OpLoad %239 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %603 
                                             %283 = OpLabel 
                                       f32_4 %285 = OpLoad %74 
                                       f32_4 %286 = OpVectorShuffle %285 %285 1 1 1 1 
                              Uniform f32_4* %288 = OpAccessChain %19 %287 %21 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpFMul %286 %289 
                                                      OpStore %82 %290 
                              Uniform f32_4* %291 = OpAccessChain %19 %287 %93 
                                       f32_4 %292 = OpLoad %291 
                                       f32_4 %293 = OpLoad %74 
                                       f32_4 %294 = OpVectorShuffle %293 %293 0 0 0 0 
                                       f32_4 %295 = OpFMul %292 %294 
                                       f32_4 %296 = OpLoad %82 
                                       f32_4 %297 = OpFAdd %295 %296 
                                                      OpStore %82 %297 
                              Uniform f32_4* %298 = OpAccessChain %19 %287 %62 
                                       f32_4 %299 = OpLoad %298 
                                       f32_4 %300 = OpLoad %74 
                                       f32_4 %301 = OpVectorShuffle %300 %300 3 3 3 3 
                                       f32_4 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %82 
                                       f32_4 %304 = OpFAdd %302 %303 
                                                      OpStore %82 %304 
                                       f32_4 %305 = OpLoad %82 
                              Uniform f32_4* %306 = OpAccessChain %19 %287 %85 
                                       f32_4 %307 = OpLoad %306 
                                       f32_4 %308 = OpFAdd %305 %307 
                                                      OpStore %82 %308 
                                       f32_4 %309 = OpLoad %82 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_4 %311 = OpLoad %82 
                                       f32_3 %312 = OpVectorShuffle %311 %311 3 3 3 
                                       f32_3 %313 = OpFDiv %310 %312 
                                       f32_4 %314 = OpLoad %82 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %82 %315 
                                       f32_4 %317 = OpLoad %82 
                                       f32_2 %318 = OpVectorShuffle %317 %317 0 1 
                              Uniform f32_4* %320 = OpAccessChain %19 %319 
                                       f32_4 %321 = OpLoad %320 
                                       f32_2 %322 = OpVectorShuffle %321 %321 2 3 
                                       f32_2 %323 = OpFMul %318 %322 
                                       f32_2 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %316 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 2 3 
                                                      OpStore %316 %328 
                                       f32_4 %329 = OpLoad %316 
                                       f32_2 %330 = OpVectorShuffle %329 %329 0 1 
                                       f32_2 %331 = OpExtInst %1 8 %330 
                                       f32_4 %332 = OpLoad %316 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 2 3 
                                                      OpStore %316 %333 
                                       f32_4 %334 = OpLoad %82 
                                       f32_2 %335 = OpVectorShuffle %334 %334 0 1 
                              Uniform f32_4* %336 = OpAccessChain %19 %319 
                                       f32_4 %337 = OpLoad %336 
                                       f32_2 %338 = OpVectorShuffle %337 %337 2 3 
                                       f32_2 %339 = OpFMul %335 %338 
                                       f32_4 %340 = OpLoad %316 
                                       f32_2 %341 = OpVectorShuffle %340 %340 0 1 
                                       f32_2 %342 = OpFNegate %341 
                                       f32_2 %343 = OpFAdd %339 %342 
                                       f32_4 %344 = OpLoad %82 
                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 2 3 
                                                      OpStore %82 %345 
                                       f32_4 %347 = OpLoad %82 
                                       f32_4 %348 = OpVectorShuffle %347 %347 0 0 1 1 
                                       f32_4 %350 = OpFAdd %348 %349 
                                                      OpStore %346 %350 
                                       f32_4 %352 = OpLoad %346 
                                       f32_2 %353 = OpVectorShuffle %352 %352 0 2 
                                       f32_4 %354 = OpLoad %346 
                                       f32_2 %355 = OpVectorShuffle %354 %354 0 2 
                                       f32_2 %356 = OpFMul %353 %355 
                                       f32_4 %357 = OpLoad %351 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 1 2 5 
                                                      OpStore %351 %358 
                                       f32_4 %361 = OpLoad %351 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 3 
                                       f32_2 %363 = OpFMul %362 %325 
                                       f32_4 %364 = OpLoad %82 
                                       f32_2 %365 = OpVectorShuffle %364 %364 0 1 
                                       f32_2 %366 = OpFNegate %365 
                                       f32_2 %367 = OpFAdd %363 %366 
                                                      OpStore %360 %367 
                                       f32_4 %368 = OpLoad %82 
                                       f32_2 %369 = OpVectorShuffle %368 %368 0 1 
                                       f32_2 %370 = OpFNegate %369 
                                       f32_2 %372 = OpFAdd %370 %371 
                                       f32_4 %373 = OpLoad %346 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 1 5 3 
                                                      OpStore %346 %374 
                                       f32_4 %376 = OpLoad %82 
                                       f32_2 %377 = OpVectorShuffle %376 %376 0 1 
                                       f32_2 %379 = OpExtInst %1 37 %377 %378 
                                       f32_4 %380 = OpLoad %375 
                                       f32_4 %381 = OpVectorShuffle %380 %379 4 5 2 3 
                                                      OpStore %375 %381 
                                       f32_4 %382 = OpLoad %375 
                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
                                       f32_2 %384 = OpFNegate %383 
                                       f32_4 %385 = OpLoad %375 
                                       f32_2 %386 = OpVectorShuffle %385 %385 0 1 
                                       f32_2 %387 = OpFMul %384 %386 
                                       f32_4 %388 = OpLoad %346 
                                       f32_2 %389 = OpVectorShuffle %388 %388 0 2 
                                       f32_2 %390 = OpFAdd %387 %389 
                                       f32_4 %391 = OpLoad %346 
                                       f32_4 %392 = OpVectorShuffle %391 %390 4 1 5 3 
                                                      OpStore %346 %392 
                                       f32_4 %393 = OpLoad %82 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_2 %395 = OpExtInst %1 40 %394 %378 
                                       f32_4 %396 = OpLoad %82 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 5 2 3 
                                                      OpStore %82 %397 
                                       f32_4 %398 = OpLoad %82 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                       f32_2 %400 = OpFNegate %399 
                                       f32_4 %401 = OpLoad %82 
                                       f32_2 %402 = OpVectorShuffle %401 %401 0 1 
                                       f32_2 %403 = OpFMul %400 %402 
                                       f32_4 %404 = OpLoad %346 
                                       f32_2 %405 = OpVectorShuffle %404 %404 1 3 
                                       f32_2 %406 = OpFAdd %403 %405 
                                       f32_4 %407 = OpLoad %82 
                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
                                                      OpStore %82 %408 
                                Private f32* %409 = OpAccessChain %360 %32 
                                         f32 %410 = OpLoad %409 
                                Private f32* %411 = OpAccessChain %375 %32 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %346 %32 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %375 %67 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %82 %32 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %375 %22 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %351 %32 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %375 %153 
                                                      OpStore %420 %419 
                                       f32_4 %421 = OpLoad %375 
                                       f32_4 %425 = OpFMul %421 %424 
                                                      OpStore %375 %425 
                                Private f32* %426 = OpAccessChain %360 %67 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %351 %32 
                                                      OpStore %428 %427 
                                Private f32* %429 = OpAccessChain %346 %22 
                                         f32 %430 = OpLoad %429 
                                Private f32* %431 = OpAccessChain %351 %67 
                                                      OpStore %431 %430 
                                Private f32* %432 = OpAccessChain %82 %67 
                                         f32 %433 = OpLoad %432 
                                Private f32* %434 = OpAccessChain %351 %22 
                                                      OpStore %434 %433 
                                       f32_4 %435 = OpLoad %351 
                                       f32_4 %436 = OpFMul %435 %424 
                                                      OpStore %346 %436 
                                       f32_4 %437 = OpLoad %375 
                                       f32_4 %438 = OpVectorShuffle %437 %437 1 3 1 3 
                                       f32_4 %439 = OpLoad %375 
                                       f32_4 %440 = OpVectorShuffle %439 %439 0 2 0 2 
                                       f32_4 %441 = OpFAdd %438 %440 
                                                      OpStore %351 %441 
                                       f32_4 %443 = OpLoad %346 
                                       f32_4 %444 = OpVectorShuffle %443 %443 1 1 3 3 
                                       f32_4 %445 = OpLoad %346 
                                       f32_4 %446 = OpVectorShuffle %445 %445 0 0 2 2 
                                       f32_4 %447 = OpFAdd %444 %446 
                                                      OpStore %442 %447 
                                       f32_4 %448 = OpLoad %375 
                                       f32_2 %449 = OpVectorShuffle %448 %448 1 3 
                                       f32_4 %450 = OpLoad %351 
                                       f32_2 %451 = OpVectorShuffle %450 %450 2 3 
                                       f32_2 %452 = OpFDiv %449 %451 
                                       f32_4 %453 = OpLoad %82 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 2 3 
                                                      OpStore %82 %454 
                                       f32_4 %455 = OpLoad %82 
                                       f32_2 %456 = OpVectorShuffle %455 %455 0 1 
                                       f32_2 %459 = OpFAdd %456 %458 
                                       f32_4 %460 = OpLoad %82 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore %82 %461 
                                       f32_4 %462 = OpLoad %346 
                                       f32_2 %463 = OpVectorShuffle %462 %462 1 3 
                                       f32_4 %464 = OpLoad %442 
                                       f32_2 %465 = OpVectorShuffle %464 %464 1 3 
                                       f32_2 %466 = OpFDiv %463 %465 
                                                      OpStore %360 %466 
                                       f32_2 %467 = OpLoad %360 
                                       f32_2 %468 = OpFAdd %467 %458 
                                                      OpStore %360 %468 
                                       f32_4 %469 = OpLoad %82 
                                       f32_2 %470 = OpVectorShuffle %469 %469 0 1 
                              Uniform f32_4* %471 = OpAccessChain %19 %319 
                                       f32_4 %472 = OpLoad %471 
                                       f32_2 %473 = OpVectorShuffle %472 %472 0 0 
                                       f32_2 %474 = OpFMul %470 %473 
                                       f32_4 %475 = OpLoad %346 
                                       f32_4 %476 = OpVectorShuffle %475 %474 4 5 2 3 
                                                      OpStore %346 %476 
                                       f32_2 %477 = OpLoad %360 
                              Uniform f32_4* %478 = OpAccessChain %19 %319 
                                       f32_4 %479 = OpLoad %478 
                                       f32_2 %480 = OpVectorShuffle %479 %479 1 1 
                                       f32_2 %481 = OpFMul %477 %480 
                                       f32_4 %482 = OpLoad %346 
                                       f32_4 %483 = OpVectorShuffle %482 %481 0 1 4 5 
                                                      OpStore %346 %483 
                                       f32_4 %484 = OpLoad %351 
                                       f32_4 %485 = OpLoad %442 
                                       f32_4 %486 = OpFMul %484 %485 
                                                      OpStore %351 %486 
                                       f32_4 %487 = OpLoad %316 
                                       f32_4 %488 = OpVectorShuffle %487 %487 0 1 0 1 
                              Uniform f32_4* %489 = OpAccessChain %19 %319 
                                       f32_4 %490 = OpLoad %489 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 0 1 
                                       f32_4 %492 = OpFMul %488 %491 
                                       f32_4 %493 = OpLoad %346 
                                       f32_4 %494 = OpVectorShuffle %493 %493 0 2 1 2 
                                       f32_4 %495 = OpFAdd %492 %494 
                                                      OpStore %375 %495 
                                       f32_4 %498 = OpLoad %375 
                                       f32_2 %499 = OpVectorShuffle %498 %498 0 1 
                                Private f32* %500 = OpAccessChain %82 %22 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpCompositeExtract %499 0 
                                         f32 %503 = OpCompositeExtract %499 1 
                                       f32_3 %504 = OpCompositeConstruct %502 %503 %501 
                                                      OpStore %497 %504 
                  read_only Texture2DSampled %510 = OpLoad %509 
                                       f32_3 %511 = OpLoad %497 
                                         f32 %512 = OpCompositeExtract %511 2 
                                         f32 %513 = OpImageSampleDrefExplicitLod %510 %511 %512 Lod %6 
                                                      OpStore %505 %513 
                                       f32_4 %515 = OpLoad %375 
                                       f32_2 %516 = OpVectorShuffle %515 %515 2 3 
                                Private f32* %517 = OpAccessChain %82 %22 
                                         f32 %518 = OpLoad %517 
                                         f32 %519 = OpCompositeExtract %516 0 
                                         f32 %520 = OpCompositeExtract %516 1 
                                       f32_3 %521 = OpCompositeConstruct %519 %520 %518 
                                                      OpStore %514 %521 
                  read_only Texture2DSampled %523 = OpLoad %509 
                                       f32_3 %524 = OpLoad %514 
                                         f32 %525 = OpCompositeExtract %524 2 
                                         f32 %526 = OpImageSampleDrefExplicitLod %523 %524 %525 Lod %6 
                                Private f32* %527 = OpAccessChain %522 %32 
                                                      OpStore %527 %526 
                                Private f32* %528 = OpAccessChain %522 %32 
                                         f32 %529 = OpLoad %528 
                                Private f32* %530 = OpAccessChain %351 %67 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpFMul %529 %531 
                                Private f32* %533 = OpAccessChain %82 %32 
                                                      OpStore %533 %532 
                                Private f32* %534 = OpAccessChain %351 %32 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpLoad %505 
                                         f32 %537 = OpFMul %535 %536 
                                Private f32* %538 = OpAccessChain %82 %32 
                                         f32 %539 = OpLoad %538 
                                         f32 %540 = OpFAdd %537 %539 
                                                      OpStore %244 %540 
                                       f32_4 %541 = OpLoad %316 
                                       f32_4 %542 = OpVectorShuffle %541 %541 0 1 0 1 
                              Uniform f32_4* %543 = OpAccessChain %19 %319 
                                       f32_4 %544 = OpLoad %543 
                                       f32_4 %545 = OpVectorShuffle %544 %544 0 1 0 1 
                                       f32_4 %546 = OpFMul %542 %545 
                                       f32_4 %547 = OpLoad %346 
                                       f32_4 %548 = OpVectorShuffle %547 %547 0 3 1 3 
                                       f32_4 %549 = OpFAdd %546 %548 
                                                      OpStore %316 %549 
                                       f32_4 %551 = OpLoad %316 
                                       f32_2 %552 = OpVectorShuffle %551 %551 0 1 
                                Private f32* %553 = OpAccessChain %82 %22 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpCompositeExtract %552 0 
                                         f32 %556 = OpCompositeExtract %552 1 
                                       f32_3 %557 = OpCompositeConstruct %555 %556 %554 
                                                      OpStore %550 %557 
                  read_only Texture2DSampled %558 = OpLoad %509 
                                       f32_3 %559 = OpLoad %550 
                                         f32 %560 = OpCompositeExtract %559 2 
                                         f32 %561 = OpImageSampleDrefExplicitLod %558 %559 %560 Lod %6 
                                Private f32* %562 = OpAccessChain %522 %32 
                                                      OpStore %562 %561 
                                Private f32* %563 = OpAccessChain %351 %22 
                                         f32 %564 = OpLoad %563 
                                Private f32* %565 = OpAccessChain %522 %32 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %564 %566 
                                         f32 %568 = OpLoad %244 
                                         f32 %569 = OpFAdd %567 %568 
                                                      OpStore %244 %569 
                                       f32_4 %571 = OpLoad %316 
                                       f32_2 %572 = OpVectorShuffle %571 %571 2 3 
                                Private f32* %573 = OpAccessChain %82 %22 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpCompositeExtract %572 0 
                                         f32 %576 = OpCompositeExtract %572 1 
                                       f32_3 %577 = OpCompositeConstruct %575 %576 %574 
                                                      OpStore %570 %577 
                  read_only Texture2DSampled %578 = OpLoad %509 
                                       f32_3 %579 = OpLoad %570 
                                         f32 %580 = OpCompositeExtract %579 2 
                                         f32 %581 = OpImageSampleDrefExplicitLod %578 %579 %580 Lod %6 
                                Private f32* %582 = OpAccessChain %522 %32 
                                                      OpStore %582 %581 
                                Private f32* %583 = OpAccessChain %351 %153 
                                         f32 %584 = OpLoad %583 
                                Private f32* %585 = OpAccessChain %522 %32 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %584 %586 
                                         f32 %588 = OpLoad %244 
                                         f32 %589 = OpFAdd %587 %588 
                                                      OpStore %244 %589 
                                Uniform f32* %591 = OpAccessChain %19 %270 %32 
                                         f32 %592 = OpLoad %591 
                                         f32 %593 = OpFNegate %592 
                                         f32 %594 = OpFAdd %593 %71 
                                                      OpStore %590 %594 
                                         f32 %595 = OpLoad %244 
                                         f32 %596 = OpLoad %590 
                                         f32 %597 = OpFMul %595 %596 
                                Uniform f32* %598 = OpAccessChain %19 %270 %32 
                                         f32 %599 = OpLoad %598 
                                         f32 %600 = OpFAdd %597 %599 
                                                      OpStore %244 %600 
                                         f32 %602 = OpLoad %244 
                                                      OpStore %601 %602 
                                                      OpBranch %284 
                                             %603 = OpLabel 
                                                      OpStore %601 %71 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                         f32 %605 = OpLoad %177 
                                         f32 %606 = OpLoad %601 
                                         f32 %607 = OpFAdd %605 %606 
                                Private f32* %608 = OpAccessChain %604 %32 
                                                      OpStore %608 %607 
                                Private f32* %609 = OpAccessChain %604 %32 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpExtInst %1 43 %610 %242 %71 
                                Private f32* %612 = OpAccessChain %604 %32 
                                                      OpStore %612 %611 
                                         f32 %613 = OpLoad %173 
                                Private f32* %614 = OpAccessChain %604 %32 
                                         f32 %615 = OpLoad %614 
                                         f32 %616 = OpFMul %613 %615 
                                                      OpStore %173 %616 
                                       f32_4 %617 = OpLoad %41 
                                       f32_2 %618 = OpVectorShuffle %617 %617 0 1 
                              Uniform f32_4* %620 = OpAccessChain %19 %619 
                                       f32_4 %621 = OpLoad %620 
                                       f32_2 %622 = OpVectorShuffle %621 %621 0 1 
                                       f32_2 %623 = OpFMul %618 %622 
                              Uniform f32_4* %624 = OpAccessChain %19 %619 
                                       f32_4 %625 = OpLoad %624 
                                       f32_2 %626 = OpVectorShuffle %625 %625 2 3 
                                       f32_2 %627 = OpFAdd %623 %626 
                                       f32_4 %628 = OpLoad %41 
                                       f32_4 %629 = OpVectorShuffle %628 %627 4 5 2 3 
                                                      OpStore %41 %629 
                  read_only Texture2DSampled %631 = OpLoad %630 
                                       f32_4 %632 = OpLoad %41 
                                       f32_2 %633 = OpVectorShuffle %632 %632 0 1 
                                       f32_4 %634 = OpImageSampleImplicitLod %631 %633 
                                                      OpStore %522 %634 
                                       f32_4 %635 = OpLoad %522 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 1 2 
                                       f32_3 %639 = OpFMul %636 %638 
                                       f32_3 %642 = OpFAdd %639 %641 
                                       f32_4 %643 = OpLoad %604 
                                       f32_4 %644 = OpVectorShuffle %643 %642 4 5 6 3 
                                                      OpStore %604 %644 
                                       f32_4 %646 = OpLoad %604 
                                       f32_3 %647 = OpVectorShuffle %646 %646 0 1 2 
                                       f32_4 %648 = OpLoad %604 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                                         f32 %650 = OpDot %647 %649 
                                                      OpStore %645 %650 
                                         f32 %651 = OpLoad %645 
                                         f32 %652 = OpExtInst %1 32 %651 
                                                      OpStore %645 %652 
                                         f32 %653 = OpLoad %645 
                                       f32_3 %654 = OpCompositeConstruct %653 %653 %653 
                                       f32_4 %655 = OpLoad %604 
                                       f32_3 %656 = OpVectorShuffle %655 %655 0 1 2 
                                       f32_3 %657 = OpFMul %654 %656 
                                       f32_4 %658 = OpLoad %604 
                                       f32_4 %659 = OpVectorShuffle %658 %657 4 5 6 3 
                                                      OpStore %604 %659 
                                       f32_3 %660 = OpLoad %164 
                                       f32_4 %661 = OpLoad %604 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                                         f32 %663 = OpDot %660 %662 
                                Private f32* %664 = OpAccessChain %604 %153 
                                                      OpStore %664 %663 
                                       f32_4 %665 = OpLoad %74 
                                       f32_3 %666 = OpVectorShuffle %665 %665 0 1 3 
                              Uniform f32_3* %668 = OpAccessChain %19 %93 
                                       f32_3 %669 = OpLoad %668 
                                       f32_3 %670 = OpFNegate %669 
                                       f32_3 %671 = OpFAdd %666 %670 
                                       f32_4 %672 = OpLoad %41 
                                       f32_4 %673 = OpVectorShuffle %672 %671 4 5 2 6 
                                                      OpStore %41 %673 
                                       f32_4 %674 = OpLoad %41 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 3 
                                       f32_4 %676 = OpLoad %41 
                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 3 
                                         f32 %678 = OpDot %675 %677 
                                Private f32* %679 = OpAccessChain %82 %32 
                                                      OpStore %679 %678 
                                Private f32* %680 = OpAccessChain %82 %32 
                                         f32 %681 = OpLoad %680 
                                         f32 %682 = OpExtInst %1 32 %681 
                                Private f32* %683 = OpAccessChain %82 %32 
                                                      OpStore %683 %682 
                                       f32_4 %684 = OpLoad %41 
                                       f32_3 %685 = OpVectorShuffle %684 %684 0 1 3 
                                       f32_3 %686 = OpFNegate %685 
                                       f32_4 %687 = OpLoad %82 
                                       f32_3 %688 = OpVectorShuffle %687 %687 0 0 0 
                                       f32_3 %689 = OpFMul %686 %688 
                                       f32_3 %690 = OpLoad %164 
                                       f32_3 %691 = OpFAdd %689 %690 
                                                      OpStore %164 %691 
                                       f32_3 %692 = OpLoad %164 
                                       f32_3 %693 = OpLoad %164 
                                         f32 %694 = OpDot %692 %693 
                                Private f32* %695 = OpAccessChain %41 %32 
                                                      OpStore %695 %694 
                                Private f32* %696 = OpAccessChain %41 %32 
                                         f32 %697 = OpLoad %696 
                                         f32 %698 = OpExtInst %1 32 %697 
                                Private f32* %699 = OpAccessChain %41 %32 
                                                      OpStore %699 %698 
                                       f32_3 %700 = OpLoad %164 
                                       f32_4 %701 = OpLoad %41 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 0 0 
                                       f32_3 %703 = OpFMul %700 %702 
                                                      OpStore %164 %703 
                                       f32_3 %704 = OpLoad %164 
                                       f32_4 %705 = OpLoad %604 
                                       f32_3 %706 = OpVectorShuffle %705 %705 0 1 2 
                                         f32 %707 = OpDot %704 %706 
                                Private f32* %708 = OpAccessChain %604 %32 
                                                      OpStore %708 %707 
                                       f32_4 %709 = OpLoad %604 
                                       f32_2 %710 = OpVectorShuffle %709 %709 0 3 
                                       f32_2 %711 = OpExtInst %1 40 %710 %378 
                                       f32_4 %712 = OpLoad %604 
                                       f32_4 %713 = OpVectorShuffle %712 %711 4 1 2 5 
                                                      OpStore %604 %713 
                                Private f32* %715 = OpAccessChain %522 %153 
                                         f32 %716 = OpLoad %715 
                                         f32 %718 = OpFMul %716 %717 
                                                      OpStore %714 %718 
                                Private f32* %719 = OpAccessChain %604 %32 
                                         f32 %720 = OpLoad %719 
                                         f32 %721 = OpExtInst %1 30 %720 
                                Private f32* %722 = OpAccessChain %604 %32 
                                                      OpStore %722 %721 
                                Private f32* %723 = OpAccessChain %604 %32 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpLoad %714 
                                         f32 %726 = OpFMul %724 %725 
                                Private f32* %727 = OpAccessChain %604 %32 
                                                      OpStore %727 %726 
                                Private f32* %728 = OpAccessChain %604 %32 
                                         f32 %729 = OpLoad %728 
                                         f32 %730 = OpExtInst %1 29 %729 
                                Private f32* %731 = OpAccessChain %604 %32 
                                                      OpStore %731 %730 
                                         f32 %732 = OpLoad %173 
                                Private f32* %733 = OpAccessChain %164 %32 
                                                      OpStore %733 %732 
                                Private f32* %734 = OpAccessChain %164 %32 
                                         f32 %735 = OpLoad %734 
                                         f32 %736 = OpExtInst %1 43 %735 %242 %71 
                                Private f32* %737 = OpAccessChain %164 %32 
                                                      OpStore %737 %736 
                                Private f32* %738 = OpAccessChain %164 %32 
                                         f32 %739 = OpLoad %738 
                                Private f32* %740 = OpAccessChain %604 %32 
                                         f32 %741 = OpLoad %740 
                                         f32 %742 = OpFMul %739 %741 
                                Private f32* %743 = OpAccessChain %164 %32 
                                                      OpStore %743 %742 
                                         f32 %745 = OpLoad %173 
                                Private f32* %746 = OpAccessChain %604 %153 
                                         f32 %747 = OpLoad %746 
                                         f32 %748 = OpFMul %745 %747 
                                                      OpStore %744 %748 
                                         f32 %749 = OpLoad %744 
                                       f32_3 %750 = OpCompositeConstruct %749 %749 %749 
                              Uniform f32_4* %752 = OpAccessChain %19 %751 
                                       f32_4 %753 = OpLoad %752 
                                       f32_3 %754 = OpVectorShuffle %753 %753 0 1 2 
                                       f32_3 %755 = OpFMul %750 %754 
                                       f32_4 %756 = OpLoad %41 
                                       f32_4 %757 = OpVectorShuffle %756 %755 4 5 6 3 
                                                      OpStore %41 %757 
                              Uniform f32_4* %758 = OpAccessChain %19 %751 
                                       f32_4 %759 = OpLoad %758 
                                       f32_3 %760 = OpVectorShuffle %759 %759 0 1 2 
                                         f32 %765 = OpDot %760 %764 
                                Private f32* %766 = OpAccessChain %604 %32 
                                                      OpStore %766 %765 
                                Private f32* %767 = OpAccessChain %164 %32 
                                         f32 %768 = OpLoad %767 
                                Private f32* %769 = OpAccessChain %604 %32 
                                         f32 %770 = OpLoad %769 
                                         f32 %771 = OpFMul %768 %770 
                                Private f32* %772 = OpAccessChain %41 %153 
                                                      OpStore %772 %771 
                                Private f32* %773 = OpAccessChain %9 %32 
                                         f32 %774 = OpLoad %773 
                                Uniform f32* %776 = OpAccessChain %19 %775 %22 
                                         f32 %777 = OpLoad %776 
                                         f32 %778 = OpFMul %774 %777 
                                Uniform f32* %779 = OpAccessChain %19 %775 %153 
                                         f32 %780 = OpLoad %779 
                                         f32 %781 = OpFAdd %778 %780 
                                Private f32* %782 = OpAccessChain %9 %32 
                                                      OpStore %782 %781 
                                Private f32* %783 = OpAccessChain %9 %32 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpFNegate %784 
                                         f32 %786 = OpFAdd %785 %71 
                                Private f32* %787 = OpAccessChain %9 %32 
                                                      OpStore %787 %786 
                                Private f32* %788 = OpAccessChain %9 %32 
                                         f32 %789 = OpLoad %788 
                                         f32 %790 = OpExtInst %1 43 %789 %242 %71 
                                Private f32* %791 = OpAccessChain %9 %32 
                                                      OpStore %791 %790 
                                       f32_4 %792 = OpLoad %9 
                                       f32_4 %793 = OpVectorShuffle %792 %792 0 0 0 0 
                                       f32_4 %794 = OpLoad %41 
                                       f32_4 %795 = OpFMul %793 %794 
                                                      OpStore %9 %795 
                                       f32_4 %798 = OpLoad %9 
                                                      OpStore %797 %798 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat16_6;
float u_xlat8;
vec2 u_xlat9;
float u_xlat12;
float u_xlat16_13;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat12 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat4.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = (-u_xlat3.xyz) * u_xlat4.xxx + (-_LightDir.xyz);
    u_xlat9.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat9.xxx;
    u_xlat9.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat10_1 = texture(_CameraNormalsTexture, u_xlat9.xy);
    u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = u_xlat10_1.w * 128.0;
    u_xlat16_6 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_6 = inversesqrt(u_xlat16_6);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(u_xlat16_6);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat16_1.xyz);
    u_xlat4.y = dot((-_LightDir.xyz), u_xlat16_1.xyz);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat16_13;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat12 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12 = u_xlat12 + u_xlat10_2.x;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat4.xy = vec2(u_xlat12) * u_xlat4.xy;
    u_xlat1.xyz = u_xlat4.yyy * _LightColor.xyz;
    u_xlat8 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.w = u_xlat8 * u_xlat4.x;
    SV_Target0 = u_xlat0.xxxx * u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 350
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %347 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 RelaxedPrecision 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %40 Location 40 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %211 DescriptorSet 211 
                                                      OpDecorate %211 Binding 211 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %218 DescriptorSet 218 
                                                      OpDecorate %218 Binding 218 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %223 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %227 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %231 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %238 RelaxedPrecision 
                                                      OpDecorate %239 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %242 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %261 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %264 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %268 RelaxedPrecision 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %311 RelaxedPrecision 
                                                      OpDecorate %312 RelaxedPrecision 
                                                      OpDecorate %313 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %347 Location 347 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                                 Input f32_4* %40 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %59 = OpConstant 2 
                                          u32 %64 = OpConstant 1 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                              %79 = OpTypePointer Private %10 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 3 
                                              %84 = OpTypePointer Uniform %7 
                                          i32 %89 = OpConstant 0 
                                             %121 = OpTypePointer Uniform %10 
                                         i32 %128 = OpConstant 5 
                                         u32 %155 = OpConstant 3 
                              Private f32_3* %165 = OpVariable Private 
                                         i32 %179 = OpConstant 6 
                                             %185 = OpTypePointer Private %41 
                              Private f32_2* %186 = OpVariable Private 
                                         i32 %201 = OpConstant 9 
                                Private f32* %210 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %211 = OpVariable UniformConstant 
                              Private f32_4* %217 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %218 = OpVariable UniformConstant 
                              Private f32_3* %222 = OpVariable Private 
                                         f32 %225 = OpConstant 3.674022E-40 
                                       f32_3 %226 = OpConstantComposite %225 %225 %225 
                                         f32 %228 = OpConstant 3.674022E-40 
                                       f32_3 %229 = OpConstantComposite %228 %228 %228 
                                Private f32* %231 = OpVariable Private 
                                         f32 %234 = OpConstant 3.674022E-40 
                                Private f32* %236 = OpVariable Private 
                                         f32 %258 = OpConstant 3.674022E-40 
                                Private f32* %261 = OpVariable Private 
                                         i32 %274 = OpConstant 4 
                                         i32 %288 = OpConstant 8 
                                Private f32* %305 = OpVariable Private 
                              Private f32_2* %312 = OpVariable Private 
                                         i32 %320 = OpConstant 7 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         f32 %331 = OpConstant 3.674022E-40 
                                         f32 %332 = OpConstant 3.674022E-40 
                                       f32_3 %333 = OpConstantComposite %330 %331 %332 
                                             %346 = OpTypePointer Output %7 
                               Output f32_4* %347 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %42 = OpLoad %40 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad %40 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %38 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_4 %57 = OpImageSampleImplicitLod %54 %56 
                                          f32 %58 = OpCompositeExtract %57 0 
                                                      OpStore %49 %58 
                                 Uniform f32* %60 = OpAccessChain %16 %59 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpLoad %49 
                                          f32 %63 = OpFMul %61 %62 
                                 Uniform f32* %65 = OpAccessChain %16 %59 %64 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %63 %66 
                                                      OpStore %49 %67 
                                          f32 %69 = OpLoad %49 
                                          f32 %70 = OpFDiv %68 %69 
                                                      OpStore %49 %70 
                                          f32 %72 = OpLoad %49 
                                        f32_3 %73 = OpCompositeConstruct %72 %72 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %71 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %71 %78 
                                        f32_4 %81 = OpLoad %71 
                                        f32_3 %82 = OpVectorShuffle %81 %81 1 1 1 
                               Uniform f32_4* %85 = OpAccessChain %16 %83 %18 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %82 %87 
                                                      OpStore %80 %88 
                               Uniform f32_4* %90 = OpAccessChain %16 %83 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %71 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 0 0 
                                        f32_3 %95 = OpFMul %92 %94 
                                        f32_3 %96 = OpLoad %80 
                                        f32_3 %97 = OpFAdd %95 %96 
                                        f32_4 %98 = OpLoad %71 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 2 6 
                                                      OpStore %71 %99 
                              Uniform f32_4* %100 = OpAccessChain %16 %83 %59 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_4 %103 = OpLoad %71 
                                       f32_3 %104 = OpVectorShuffle %103 %103 2 2 2 
                                       f32_3 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %71 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 3 
                                       f32_3 %108 = OpFAdd %105 %107 
                                       f32_4 %109 = OpLoad %71 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 6 
                                                      OpStore %71 %110 
                                       f32_4 %111 = OpLoad %71 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                              Uniform f32_4* %113 = OpAccessChain %16 %83 %83 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFAdd %112 %115 
                                       f32_4 %117 = OpLoad %71 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %71 %118 
                                       f32_4 %119 = OpLoad %71 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_3* %122 = OpAccessChain %16 %89 
                                       f32_3 %123 = OpLoad %122 
                                       f32_3 %124 = OpFNegate %123 
                                       f32_3 %125 = OpFAdd %120 %124 
                                                      OpStore %80 %125 
                                       f32_4 %126 = OpLoad %71 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                              Uniform f32_4* %129 = OpAccessChain %16 %128 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFNegate %131 
                                       f32_3 %133 = OpFAdd %127 %132 
                                       f32_4 %134 = OpLoad %71 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 2 6 
                                                      OpStore %71 %135 
                                       f32_4 %136 = OpLoad %71 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 3 
                                       f32_4 %138 = OpLoad %71 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                                         f32 %140 = OpDot %137 %139 
                                Private f32* %141 = OpAccessChain %9 %29 
                                                      OpStore %141 %140 
                                Private f32* %142 = OpAccessChain %9 %29 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpExtInst %1 31 %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %9 %19 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFNegate %147 
                                         f32 %149 = OpLoad %49 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %9 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFAdd %150 %152 
                                Private f32* %154 = OpAccessChain %9 %29 
                                                      OpStore %154 %153 
                                Uniform f32* %156 = OpAccessChain %16 %128 %155 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %9 %29 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                Private f32* %161 = OpAccessChain %71 %19 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFAdd %160 %162 
                                Private f32* %164 = OpAccessChain %9 %29 
                                                      OpStore %164 %163 
                                       f32_3 %166 = OpLoad %80 
                                       f32_3 %167 = OpLoad %80 
                                         f32 %168 = OpDot %166 %167 
                                Private f32* %169 = OpAccessChain %165 %29 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %165 %29 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpExtInst %1 32 %171 
                                Private f32* %173 = OpAccessChain %165 %29 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %80 
                                       f32_3 %175 = OpFNegate %174 
                                       f32_3 %176 = OpLoad %165 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 0 0 
                                       f32_3 %178 = OpFMul %175 %177 
                              Uniform f32_4* %180 = OpAccessChain %16 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFNegate %182 
                                       f32_3 %184 = OpFAdd %178 %183 
                                                      OpStore %165 %184 
                                       f32_3 %187 = OpLoad %165 
                                       f32_3 %188 = OpLoad %165 
                                         f32 %189 = OpDot %187 %188 
                                Private f32* %190 = OpAccessChain %186 %29 
                                                      OpStore %190 %189 
                                Private f32* %191 = OpAccessChain %186 %29 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpExtInst %1 32 %192 
                                Private f32* %194 = OpAccessChain %186 %29 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %165 
                                       f32_2 %196 = OpLoad %186 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 0 0 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %165 %198 
                                       f32_4 %199 = OpLoad %38 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                              Uniform f32_4* %202 = OpAccessChain %16 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_2 %204 = OpVectorShuffle %203 %203 0 1 
                                       f32_2 %205 = OpFMul %200 %204 
                              Uniform f32_4* %206 = OpAccessChain %16 %201 
                                       f32_4 %207 = OpLoad %206 
                                       f32_2 %208 = OpVectorShuffle %207 %207 2 3 
                                       f32_2 %209 = OpFAdd %205 %208 
                                                      OpStore %186 %209 
                  read_only Texture2DSampled %212 = OpLoad %211 
                                       f32_4 %213 = OpLoad %38 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_4 %215 = OpImageSampleImplicitLod %212 %214 
                                         f32 %216 = OpCompositeExtract %215 0 
                                                      OpStore %210 %216 
                  read_only Texture2DSampled %219 = OpLoad %218 
                                       f32_2 %220 = OpLoad %186 
                                       f32_4 %221 = OpImageSampleImplicitLod %219 %220 
                                                      OpStore %217 %221 
                                       f32_4 %223 = OpLoad %217 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_3 %230 = OpFAdd %227 %229 
                                                      OpStore %222 %230 
                                Private f32* %232 = OpAccessChain %217 %155 
                                         f32 %233 = OpLoad %232 
                                         f32 %235 = OpFMul %233 %234 
                                                      OpStore %231 %235 
                                       f32_3 %237 = OpLoad %222 
                                       f32_3 %238 = OpLoad %222 
                                         f32 %239 = OpDot %237 %238 
                                                      OpStore %236 %239 
                                         f32 %240 = OpLoad %236 
                                         f32 %241 = OpExtInst %1 32 %240 
                                                      OpStore %236 %241 
                                       f32_3 %242 = OpLoad %222 
                                         f32 %243 = OpLoad %236 
                                       f32_3 %244 = OpCompositeConstruct %243 %243 %243 
                                       f32_3 %245 = OpFMul %242 %244 
                                                      OpStore %222 %245 
                                       f32_3 %246 = OpLoad %165 
                                       f32_3 %247 = OpLoad %222 
                                         f32 %248 = OpDot %246 %247 
                                                      OpStore %236 %248 
                              Uniform f32_4* %249 = OpAccessChain %16 %179 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFNegate %251 
                                       f32_3 %253 = OpLoad %222 
                                         f32 %254 = OpDot %252 %253 
                                Private f32* %255 = OpAccessChain %222 %29 
                                                      OpStore %255 %254 
                                Private f32* %256 = OpAccessChain %222 %29 
                                         f32 %257 = OpLoad %256 
                                         f32 %259 = OpExtInst %1 40 %257 %258 
                                Private f32* %260 = OpAccessChain %222 %29 
                                                      OpStore %260 %259 
                                         f32 %262 = OpLoad %236 
                                         f32 %263 = OpExtInst %1 40 %262 %258 
                                                      OpStore %261 %263 
                                         f32 %264 = OpLoad %261 
                                         f32 %265 = OpExtInst %1 30 %264 
                                                      OpStore %261 %265 
                                         f32 %266 = OpLoad %261 
                                         f32 %267 = OpLoad %231 
                                         f32 %268 = OpFMul %266 %267 
                                                      OpStore %261 %268 
                                         f32 %269 = OpLoad %261 
                                         f32 %270 = OpExtInst %1 29 %269 
                                Private f32* %271 = OpAccessChain %222 %64 
                                                      OpStore %271 %270 
                                Private f32* %272 = OpAccessChain %9 %29 
                                         f32 %273 = OpLoad %272 
                                Uniform f32* %275 = OpAccessChain %16 %274 %19 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFMul %273 %276 
                                Uniform f32* %278 = OpAccessChain %16 %274 %155 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFAdd %277 %279 
                                Private f32* %281 = OpAccessChain %165 %29 
                                                      OpStore %281 %280 
                                Private f32* %282 = OpAccessChain %165 %29 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpExtInst %1 43 %283 %258 %68 
                                Private f32* %285 = OpAccessChain %165 %29 
                                                      OpStore %285 %284 
                                Private f32* %286 = OpAccessChain %9 %29 
                                         f32 %287 = OpLoad %286 
                                Uniform f32* %289 = OpAccessChain %16 %288 %19 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %287 %290 
                                Uniform f32* %292 = OpAccessChain %16 %288 %155 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                Private f32* %295 = OpAccessChain %9 %29 
                                                      OpStore %295 %294 
                                Private f32* %296 = OpAccessChain %9 %29 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFAdd %298 %68 
                                Private f32* %300 = OpAccessChain %9 %29 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %9 %29 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 43 %302 %258 %68 
                                Private f32* %304 = OpAccessChain %9 %29 
                                                      OpStore %304 %303 
                                Private f32* %306 = OpAccessChain %165 %29 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpLoad %210 
                                         f32 %309 = OpFAdd %307 %308 
                                                      OpStore %305 %309 
                                         f32 %310 = OpLoad %305 
                                         f32 %311 = OpExtInst %1 43 %310 %258 %68 
                                                      OpStore %305 %311 
                                         f32 %313 = OpLoad %305 
                                       f32_2 %314 = OpCompositeConstruct %313 %313 
                                       f32_3 %315 = OpLoad %222 
                                       f32_2 %316 = OpVectorShuffle %315 %315 1 0 
                                       f32_2 %317 = OpFMul %314 %316 
                                                      OpStore %312 %317 
                                       f32_2 %318 = OpLoad %312 
                                       f32_3 %319 = OpVectorShuffle %318 %318 1 1 1 
                              Uniform f32_4* %321 = OpAccessChain %16 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpFMul %319 %323 
                                       f32_4 %325 = OpLoad %38 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %38 %326 
                              Uniform f32_4* %327 = OpAccessChain %16 %320 
                                       f32_4 %328 = OpLoad %327 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                         f32 %334 = OpDot %329 %333 
                                Private f32* %335 = OpAccessChain %222 %29 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %312 %29 
                                         f32 %337 = OpLoad %336 
                                Private f32* %338 = OpAccessChain %222 %29 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %337 %339 
                                Private f32* %341 = OpAccessChain %38 %155 
                                                      OpStore %341 %340 
                                       f32_4 %342 = OpLoad %9 
                                       f32_4 %343 = OpVectorShuffle %342 %342 0 0 0 0 
                                       f32_4 %344 = OpLoad %38 
                                       f32_4 %345 = OpFMul %343 %344 
                                                      OpStore %9 %345 
                                       f32_4 %348 = OpLoad %9 
                                                      OpStore %347 %348 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec2 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
float u_xlat4;
vec2 u_xlat8;
float u_xlat12;
float u_xlat16_12;
float u_xlat13;
float u_xlat16_13;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat12 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat4 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat8.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_1 = texture(_CameraNormalsTexture, u_xlat8.xy);
    u_xlat4 = u_xlat4 + u_xlat10_3.x;
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat10_3 = texture(_LightTexture0, u_xlat8.xy, -8.0);
    u_xlat4 = u_xlat4 * u_xlat10_3.w;
    u_xlat8.x = u_xlat4;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat12) + (-_LightDir.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_12 = u_xlat10_1.w * 128.0;
    u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_13 = inversesqrt(u_xlat16_13);
    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat16_1.xyz);
    u_xlat1.x = dot((-_LightDir.xyz), u_xlat16_1.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat4 = u_xlat4 * u_xlat1.x;
    u_xlat2.xyz = vec3(u_xlat4) * _LightColor.xyz;
    u_xlat4 = max(u_xlat13, 0.0);
    u_xlat4 = log2(u_xlat4);
    u_xlat4 = u_xlat4 * u_xlat16_12;
    u_xlat4 = exp2(u_xlat4);
    u_xlat4 = u_xlat8.x * u_xlat4;
    u_xlat8.x = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat8.x * u_xlat4;
    SV_Target0 = u_xlat0.xxxx * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 414
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %411 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 RelaxedPrecision 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %164 RelaxedPrecision 
                                                      OpDecorate %191 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %192 DescriptorSet 192 
                                                      OpDecorate %192 Binding 192 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %197 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %212 DescriptorSet 212 
                                                      OpDecorate %212 Binding 212 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %217 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %225 RelaxedPrecision 
                                                      OpDecorate %264 DescriptorSet 264 
                                                      OpDecorate %264 Binding 264 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %321 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %327 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %334 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %339 RelaxedPrecision 
                                                      OpDecorate %342 RelaxedPrecision 
                                                      OpDecorate %348 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %380 RelaxedPrecision 
                                                      OpDecorate %383 RelaxedPrecision 
                                                      OpDecorate %384 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %411 Location 411 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %14 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                                 Input f32_4* %41 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypeSampledImage %51 
                                              %53 = OpTypePointer UniformConstant %52 
  UniformConstant read_only Texture2DSampled* %54 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                          u32 %65 = OpConstant 1 
                                          f32 %69 = OpConstant 3.674022E-40 
                               Private f32_4* %72 = OpVariable Private 
                                              %80 = OpTypePointer Private %10 
                               Private f32_3* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                                              %85 = OpTypePointer Uniform %7 
                                          i32 %90 = OpConstant 0 
                                         i32 %122 = OpConstant 5 
                                         u32 %145 = OpConstant 3 
                                             %155 = OpTypePointer Private %42 
                              Private f32_2* %156 = OpVariable Private 
                                         i32 %159 = OpConstant 4 
                                         f32 %169 = OpConstant 3.674022E-40 
                                         i32 %174 = OpConstant 8 
                                Private f32* %191 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %192 = OpVariable UniformConstant 
                                         i32 %200 = OpConstant 10 
                              Private f32_4* %211 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %212 = OpVariable UniformConstant 
                              Private f32_3* %217 = OpVariable Private 
                                         i32 %229 = OpConstant 9 
                                             %252 = OpTypePointer Uniform %10 
 UniformConstant read_only Texture2DSampled* %264 = OpVariable UniformConstant 
                                         f32 %267 = OpConstant 3.674022E-40 
                                Private f32* %277 = OpVariable Private 
                                         i32 %295 = OpConstant 6 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_3 %320 = OpConstantComposite %319 %319 %319 
                                         f32 %322 = OpConstant 3.674022E-40 
                                       f32_3 %323 = OpConstantComposite %322 %322 %322 
                                Private f32* %325 = OpVariable Private 
                                         f32 %328 = OpConstant 3.674022E-40 
                                Private f32* %330 = OpVariable Private 
                                         i32 %363 = OpConstant 7 
                                         f32 %394 = OpConstant 3.674022E-40 
                                         f32 %395 = OpConstant 3.674022E-40 
                                         f32 %396 = OpConstant 3.674022E-40 
                                       f32_3 %397 = OpConstantComposite %394 %395 %396 
                                             %410 = OpTypePointer Output %7 
                               Output f32_4* %411 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad %41 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %41 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 2 3 
                                                      OpStore %39 %49 
                   read_only Texture2DSampled %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %39 
                                        f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                                        f32_4 %58 = OpImageSampleImplicitLod %55 %57 
                                          f32 %59 = OpCompositeExtract %58 0 
                                                      OpStore %50 %59 
                                 Uniform f32* %61 = OpAccessChain %17 %60 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpLoad %50 
                                          f32 %64 = OpFMul %62 %63 
                                 Uniform f32* %66 = OpAccessChain %17 %60 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFAdd %64 %67 
                                                      OpStore %50 %68 
                                          f32 %70 = OpLoad %50 
                                          f32 %71 = OpFDiv %69 %70 
                                                      OpStore %50 %71 
                                          f32 %73 = OpLoad %50 
                                        f32_3 %74 = OpCompositeConstruct %73 %73 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %72 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %72 %79 
                                        f32_4 %82 = OpLoad %72 
                                        f32_3 %83 = OpVectorShuffle %82 %82 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %17 %84 %19 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %83 %88 
                                                      OpStore %81 %89 
                               Uniform f32_4* %91 = OpAccessChain %17 %84 %90 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %72 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_3 %97 = OpLoad %81 
                                        f32_3 %98 = OpFAdd %96 %97 
                                        f32_4 %99 = OpLoad %72 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 2 6 
                                                      OpStore %72 %100 
                              Uniform f32_4* %101 = OpAccessChain %17 %84 %60 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %72 
                                       f32_3 %105 = OpVectorShuffle %104 %104 2 2 2 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 3 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %72 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 6 
                                                      OpStore %72 %111 
                                       f32_4 %112 = OpLoad %72 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                              Uniform f32_4* %114 = OpAccessChain %17 %84 %84 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %72 %119 
                                       f32_4 %120 = OpLoad %72 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 3 
                              Uniform f32_4* %123 = OpAccessChain %17 %122 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFNegate %125 
                                       f32_3 %127 = OpFAdd %121 %126 
                                                      OpStore %81 %127 
                                       f32_3 %128 = OpLoad %81 
                                       f32_3 %129 = OpLoad %81 
                                         f32 %130 = OpDot %128 %129 
                                Private f32* %131 = OpAccessChain %9 %30 
                                                      OpStore %131 %130 
                                Private f32* %132 = OpAccessChain %9 %30 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpExtInst %1 31 %133 
                                Private f32* %135 = OpAccessChain %9 %30 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %20 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFNegate %137 
                                         f32 %139 = OpLoad %50 
                                         f32 %140 = OpFMul %138 %139 
                                Private f32* %141 = OpAccessChain %9 %30 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFAdd %140 %142 
                                Private f32* %144 = OpAccessChain %9 %30 
                                                      OpStore %144 %143 
                                Uniform f32* %146 = OpAccessChain %17 %122 %145 
                                         f32 %147 = OpLoad %146 
                                Private f32* %148 = OpAccessChain %9 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFMul %147 %149 
                                Private f32* %151 = OpAccessChain %72 %20 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFAdd %150 %152 
                                Private f32* %154 = OpAccessChain %9 %30 
                                                      OpStore %154 %153 
                                Private f32* %157 = OpAccessChain %9 %30 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %17 %159 %20 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %158 %161 
                                Uniform f32* %163 = OpAccessChain %17 %159 %145 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %156 %30 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %156 %30 
                                         f32 %168 = OpLoad %167 
                                         f32 %170 = OpExtInst %1 43 %168 %169 %69 
                                Private f32* %171 = OpAccessChain %156 %30 
                                                      OpStore %171 %170 
                                Private f32* %172 = OpAccessChain %9 %30 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %17 %174 %20 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFMul %173 %176 
                                Uniform f32* %178 = OpAccessChain %17 %174 %145 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFAdd %177 %179 
                                Private f32* %181 = OpAccessChain %9 %30 
                                                      OpStore %181 %180 
                                Private f32* %182 = OpAccessChain %9 %30 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFNegate %183 
                                         f32 %185 = OpFAdd %184 %69 
                                Private f32* %186 = OpAccessChain %9 %30 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %9 %30 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 43 %188 %169 %69 
                                Private f32* %190 = OpAccessChain %9 %30 
                                                      OpStore %190 %189 
                  read_only Texture2DSampled %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %39 
                                       f32_2 %195 = OpVectorShuffle %194 %194 0 1 
                                       f32_4 %196 = OpImageSampleImplicitLod %193 %195 
                                         f32 %197 = OpCompositeExtract %196 0 
                                                      OpStore %191 %197 
                                       f32_4 %198 = OpLoad %39 
                                       f32_2 %199 = OpVectorShuffle %198 %198 0 1 
                              Uniform f32_4* %201 = OpAccessChain %17 %200 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_2 %204 = OpFMul %199 %203 
                              Uniform f32_4* %205 = OpAccessChain %17 %200 
                                       f32_4 %206 = OpLoad %205 
                                       f32_2 %207 = OpVectorShuffle %206 %206 2 3 
                                       f32_2 %208 = OpFAdd %204 %207 
                                       f32_4 %209 = OpLoad %39 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 2 3 
                                                      OpStore %39 %210 
                  read_only Texture2DSampled %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %39 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_4 %216 = OpImageSampleImplicitLod %213 %215 
                                                      OpStore %211 %216 
                                Private f32* %218 = OpAccessChain %156 %30 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpLoad %191 
                                         f32 %221 = OpFAdd %219 %220 
                                Private f32* %222 = OpAccessChain %217 %30 
                                                      OpStore %222 %221 
                                Private f32* %223 = OpAccessChain %217 %30 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpExtInst %1 43 %224 %169 %69 
                                Private f32* %226 = OpAccessChain %217 %30 
                                                      OpStore %226 %225 
                                       f32_4 %227 = OpLoad %72 
                                       f32_2 %228 = OpVectorShuffle %227 %227 1 1 
                              Uniform f32_4* %230 = OpAccessChain %17 %229 %19 
                                       f32_4 %231 = OpLoad %230 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFMul %228 %232 
                                                      OpStore %156 %233 
                              Uniform f32_4* %234 = OpAccessChain %17 %229 %90 
                                       f32_4 %235 = OpLoad %234 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_4 %237 = OpLoad %72 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 0 
                                       f32_2 %239 = OpFMul %236 %238 
                                       f32_2 %240 = OpLoad %156 
                                       f32_2 %241 = OpFAdd %239 %240 
                                                      OpStore %156 %241 
                              Uniform f32_4* %242 = OpAccessChain %17 %229 %60 
                                       f32_4 %243 = OpLoad %242 
                                       f32_2 %244 = OpVectorShuffle %243 %243 0 1 
                                       f32_4 %245 = OpLoad %72 
                                       f32_2 %246 = OpVectorShuffle %245 %245 3 3 
                                       f32_2 %247 = OpFMul %244 %246 
                                       f32_2 %248 = OpLoad %156 
                                       f32_2 %249 = OpFAdd %247 %248 
                                                      OpStore %156 %249 
                                       f32_4 %250 = OpLoad %72 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 3 
                              Uniform f32_3* %253 = OpAccessChain %17 %90 
                                       f32_3 %254 = OpLoad %253 
                                       f32_3 %255 = OpFNegate %254 
                                       f32_3 %256 = OpFAdd %251 %255 
                                       f32_4 %257 = OpLoad %72 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %72 %258 
                                       f32_2 %259 = OpLoad %156 
                              Uniform f32_4* %260 = OpAccessChain %17 %229 %84 
                                       f32_4 %261 = OpLoad %260 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_2 %263 = OpFAdd %259 %262 
                                                      OpStore %156 %263 
                  read_only Texture2DSampled %265 = OpLoad %264 
                                       f32_2 %266 = OpLoad %156 
                                       f32_4 %268 = OpImageSampleImplicitLod %265 %266 Bias %7 
                                         f32 %269 = OpCompositeExtract %268 3 
                                Private f32* %270 = OpAccessChain %156 %30 
                                                      OpStore %270 %269 
                                Private f32* %271 = OpAccessChain %156 %30 
                                         f32 %272 = OpLoad %271 
                                Private f32* %273 = OpAccessChain %217 %30 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                Private f32* %276 = OpAccessChain %156 %30 
                                                      OpStore %276 %275 
                                Private f32* %278 = OpAccessChain %156 %30 
                                         f32 %279 = OpLoad %278 
                                                      OpStore %277 %279 
                                         f32 %280 = OpLoad %277 
                                         f32 %281 = OpExtInst %1 43 %280 %169 %69 
                                                      OpStore %277 %281 
                                       f32_4 %282 = OpLoad %72 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_4 %284 = OpLoad %72 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                         f32 %286 = OpDot %283 %285 
                                                      OpStore %50 %286 
                                         f32 %287 = OpLoad %50 
                                         f32 %288 = OpExtInst %1 32 %287 
                                                      OpStore %50 %288 
                                       f32_4 %289 = OpLoad %72 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFNegate %290 
                                         f32 %292 = OpLoad %50 
                                       f32_3 %293 = OpCompositeConstruct %292 %292 %292 
                                       f32_3 %294 = OpFMul %291 %293 
                              Uniform f32_4* %296 = OpAccessChain %17 %295 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFNegate %298 
                                       f32_3 %300 = OpFAdd %294 %299 
                                       f32_4 %301 = OpLoad %72 
                                       f32_4 %302 = OpVectorShuffle %301 %300 4 5 6 3 
                                                      OpStore %72 %302 
                                       f32_4 %303 = OpLoad %72 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_4 %305 = OpLoad %72 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                         f32 %307 = OpDot %304 %306 
                                                      OpStore %50 %307 
                                         f32 %308 = OpLoad %50 
                                         f32 %309 = OpExtInst %1 32 %308 
                                                      OpStore %50 %309 
                                         f32 %310 = OpLoad %50 
                                       f32_3 %311 = OpCompositeConstruct %310 %310 %310 
                                       f32_4 %312 = OpLoad %72 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_4 %315 = OpLoad %72 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %72 %316 
                                       f32_4 %317 = OpLoad %211 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_3 %321 = OpFMul %318 %320 
                                       f32_3 %324 = OpFAdd %321 %323 
                                                      OpStore %217 %324 
                                Private f32* %326 = OpAccessChain %211 %145 
                                         f32 %327 = OpLoad %326 
                                         f32 %329 = OpFMul %327 %328 
                                                      OpStore %325 %329 
                                       f32_3 %331 = OpLoad %217 
                                       f32_3 %332 = OpLoad %217 
                                         f32 %333 = OpDot %331 %332 
                                                      OpStore %330 %333 
                                         f32 %334 = OpLoad %330 
                                         f32 %335 = OpExtInst %1 32 %334 
                                                      OpStore %330 %335 
                                       f32_3 %336 = OpLoad %217 
                                         f32 %337 = OpLoad %330 
                                       f32_3 %338 = OpCompositeConstruct %337 %337 %337 
                                       f32_3 %339 = OpFMul %336 %338 
                                                      OpStore %217 %339 
                                       f32_4 %340 = OpLoad %72 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpLoad %217 
                                         f32 %343 = OpDot %341 %342 
                                                      OpStore %330 %343 
                              Uniform f32_4* %344 = OpAccessChain %17 %295 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_3 %347 = OpFNegate %346 
                                       f32_3 %348 = OpLoad %217 
                                         f32 %349 = OpDot %347 %348 
                                Private f32* %350 = OpAccessChain %217 %30 
                                                      OpStore %350 %349 
                                Private f32* %351 = OpAccessChain %217 %30 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpExtInst %1 40 %352 %169 
                                Private f32* %354 = OpAccessChain %217 %30 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %156 %30 
                                         f32 %356 = OpLoad %355 
                                Private f32* %357 = OpAccessChain %217 %30 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFMul %356 %358 
                                Private f32* %360 = OpAccessChain %156 %30 
                                                      OpStore %360 %359 
                                       f32_2 %361 = OpLoad %156 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 0 0 
                              Uniform f32_4* %364 = OpAccessChain %17 %363 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFMul %362 %366 
                                       f32_4 %368 = OpLoad %39 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                                      OpStore %39 %369 
                                         f32 %370 = OpLoad %330 
                                         f32 %371 = OpExtInst %1 40 %370 %169 
                                Private f32* %372 = OpAccessChain %217 %30 
                                                      OpStore %372 %371 
                                Private f32* %373 = OpAccessChain %217 %30 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpExtInst %1 30 %374 
                                Private f32* %376 = OpAccessChain %217 %30 
                                                      OpStore %376 %375 
                                Private f32* %377 = OpAccessChain %217 %30 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpLoad %325 
                                         f32 %380 = OpFMul %378 %379 
                                Private f32* %381 = OpAccessChain %217 %30 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %217 %30 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpExtInst %1 29 %383 
                                Private f32* %385 = OpAccessChain %217 %30 
                                                      OpStore %385 %384 
                                         f32 %386 = OpLoad %277 
                                Private f32* %387 = OpAccessChain %217 %30 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %386 %388 
                                Private f32* %390 = OpAccessChain %156 %30 
                                                      OpStore %390 %389 
                              Uniform f32_4* %391 = OpAccessChain %17 %363 
                                       f32_4 %392 = OpLoad %391 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                         f32 %398 = OpDot %393 %397 
                                Private f32* %399 = OpAccessChain %217 %30 
                                                      OpStore %399 %398 
                                Private f32* %400 = OpAccessChain %156 %30 
                                         f32 %401 = OpLoad %400 
                                Private f32* %402 = OpAccessChain %217 %30 
                                         f32 %403 = OpLoad %402 
                                         f32 %404 = OpFMul %401 %403 
                                Private f32* %405 = OpAccessChain %39 %145 
                                                      OpStore %405 %404 
                                       f32_4 %406 = OpLoad %9 
                                       f32_4 %407 = OpVectorShuffle %406 %406 0 0 0 0 
                                       f32_4 %408 = OpLoad %39 
                                       f32_4 %409 = OpFMul %407 %408 
                                                      OpStore %9 %409 
                                       f32_4 %412 = OpLoad %9 
                                                      OpStore %411 %412 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat10_4;
float u_xlat5;
vec3 u_xlat6;
float u_xlat11;
float u_xlat16_15;
float u_xlat16;
float u_xlat16_16;
bool u_xlatb16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat1 = (-u_xlat6.z) * u_xlat1 + u_xlat6.x;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat6.x = u_xlat1 * _LightShadowData.z + _LightShadowData.w;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat3.xyz);
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16 = sqrt(u_xlat11);
    u_xlat16 = u_xlat16 * _LightPositionRange.w;
    u_xlat16 = u_xlat16 * _LightProjectionParams.w;
    u_xlatb16 = u_xlat10_4.x<u_xlat16;
    u_xlat16 = (u_xlatb16) ? _LightShadowData.x : 1.0;
    u_xlat6.x = u_xlat6.x + u_xlat16;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat16 = u_xlat11 * _LightPos.w;
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat6.x = u_xlat6.x * u_xlat10_4.w;
    u_xlat11 = u_xlat6.x;
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16) + (-u_xlat3.xyz);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_15 = u_xlat10_0.w * 128.0;
    u_xlat16_16 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_16);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat16, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat11 * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = vec4(u_xlat1) * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 433
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %83 %430 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 RelaxedPrecision 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpMemberDecorate %38 8 Offset 38 
                                                      OpMemberDecorate %38 9 Offset 38 
                                                      OpMemberDecorate %38 10 Offset 38 
                                                      OpMemberDecorate %38 11 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %83 Location 83 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %228 DescriptorSet 228 
                                                      OpDecorate %228 Binding 228 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %232 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate %265 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate %274 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %288 DescriptorSet 288 
                                                      OpDecorate %288 Binding 288 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate %341 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %347 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %351 RelaxedPrecision 
                                                      OpDecorate %352 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %402 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %430 Location 430 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 11 
                                              %43 = OpTypePointer Uniform %7 
                               Private f32_4* %54 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %55 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                              %61 = OpTypePointer Uniform %6 
                                          u32 %66 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                                              %76 = OpTypePointer Private %35 
                               Private f32_3* %77 = OpVariable Private 
                                          i32 %78 = OpConstant 1 
                                          u32 %79 = OpConstant 2 
                                              %82 = OpTypePointer Input %35 
                                 Input f32_3* %83 = OpVariable Input 
                                              %84 = OpTypePointer Input %6 
                               Private f32_4* %93 = OpVariable Private 
                              Private f32_3* %100 = OpVariable Private 
                                         i32 %103 = OpConstant 3 
                                         i32 %108 = OpConstant 0 
                                         i32 %140 = OpConstant 7 
                                         u32 %164 = OpConstant 3 
                                         i32 %176 = OpConstant 6 
                                         f32 %186 = OpConstant 3.674022E-40 
                                         i32 %191 = OpConstant 10 
                                         i32 %210 = OpConstant 8 
                                             %218 = OpTypePointer Uniform %35 
                                             %225 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %226 = OpTypeSampledImage %225 
                                             %227 = OpTypePointer UniformConstant %226 
UniformConstant read_only TextureCubeSampled* %228 = OpVariable UniformConstant 
                                Private f32* %233 = OpVariable Private 
                                Private f32* %237 = OpVariable Private 
                                         i32 %241 = OpConstant 4 
                                         i32 %246 = OpConstant 5 
                                             %250 = OpTypeBool 
                                             %251 = OpTypePointer Private %250 
                               Private bool* %252 = OpVariable Private 
                              Private f32_3* %256 = OpVariable Private 
                                             %257 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %288 = OpVariable UniformConstant 
                                         f32 %339 = OpConstant 3.674022E-40 
                                       f32_3 %340 = OpConstantComposite %339 %339 %339 
                                         f32 %342 = OpConstant 3.674022E-40 
                                       f32_3 %343 = OpConstantComposite %342 %342 %342 
                                Private f32* %345 = OpVariable Private 
                                         f32 %348 = OpConstant 3.674022E-40 
                                Private f32* %350 = OpVariable Private 
                              Private f32_4* %379 = OpVariable Private 
                                         i32 %382 = OpConstant 9 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         f32 %414 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_3 %416 = OpConstantComposite %413 %414 %415 
                                             %429 = OpTypePointer Output %7 
                               Output f32_4* %430 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %258 = OpVariable Function 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %44 = OpAccessChain %40 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_2 %47 = OpFMul %34 %46 
                               Uniform f32_4* %48 = OpAccessChain %40 %42 
                                        f32_4 %49 = OpLoad %48 
                                        f32_2 %50 = OpVectorShuffle %49 %49 2 3 
                                        f32_2 %51 = OpFAdd %47 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 2 3 
                                                      OpStore %9 %53 
                   read_only Texture2DSampled %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_2 %58 = OpVectorShuffle %57 %57 0 1 
                                        f32_4 %59 = OpImageSampleImplicitLod %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %40 %60 %31 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %21 
                                          f32 %65 = OpFMul %63 %64 
                                 Uniform f32* %67 = OpAccessChain %40 %60 %66 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFAdd %65 %68 
                                 Private f32* %70 = OpAccessChain %9 %31 
                                                      OpStore %70 %69 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFDiv %71 %73 
                                 Private f32* %75 = OpAccessChain %9 %31 
                                                      OpStore %75 %74 
                                 Uniform f32* %80 = OpAccessChain %40 %78 %79 
                                          f32 %81 = OpLoad %80 
                                   Input f32* %85 = OpAccessChain %83 %79 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFDiv %81 %86 
                                 Private f32* %88 = OpAccessChain %77 %31 
                                                      OpStore %88 %87 
                                        f32_3 %89 = OpLoad %77 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 0 0 
                                        f32_3 %91 = OpLoad %83 
                                        f32_3 %92 = OpFMul %90 %91 
                                                      OpStore %77 %92 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpLoad %77 
                                        f32_3 %97 = OpFMul %95 %96 
                                        f32_4 %98 = OpLoad %93 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
                                                      OpStore %93 %99 
                                       f32_4 %101 = OpLoad %93 
                                       f32_3 %102 = OpVectorShuffle %101 %101 1 1 1 
                              Uniform f32_4* %104 = OpAccessChain %40 %103 %78 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFMul %102 %106 
                                                      OpStore %100 %107 
                              Uniform f32_4* %109 = OpAccessChain %40 %103 %108 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %93 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %100 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %93 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %93 %118 
                              Uniform f32_4* %119 = OpAccessChain %40 %103 %60 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %93 
                                       f32_3 %123 = OpVectorShuffle %122 %122 2 2 2 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %93 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 2 6 
                                                      OpStore %93 %129 
                                       f32_4 %130 = OpLoad %93 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 3 
                              Uniform f32_4* %132 = OpAccessChain %40 %103 %103 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFAdd %131 %134 
                                       f32_4 %136 = OpLoad %93 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %93 %137 
                                       f32_4 %138 = OpLoad %93 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                              Uniform f32_4* %141 = OpAccessChain %40 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %139 %144 
                                                      OpStore %100 %145 
                                       f32_3 %146 = OpLoad %100 
                                       f32_3 %147 = OpLoad %100 
                                         f32 %148 = OpDot %146 %147 
                                Private f32* %149 = OpAccessChain %77 %31 
                                                      OpStore %149 %148 
                                Private f32* %150 = OpAccessChain %77 %31 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpExtInst %1 31 %151 
                                Private f32* %153 = OpAccessChain %77 %31 
                                                      OpStore %153 %152 
                                Private f32* %154 = OpAccessChain %77 %79 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFNegate %155 
                                Private f32* %157 = OpAccessChain %9 %31 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                Private f32* %160 = OpAccessChain %77 %31 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFAdd %159 %161 
                                Private f32* %163 = OpAccessChain %9 %31 
                                                      OpStore %163 %162 
                                Uniform f32* %165 = OpAccessChain %40 %140 %164 
                                         f32 %166 = OpLoad %165 
                                Private f32* %167 = OpAccessChain %9 %31 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %166 %168 
                                Private f32* %170 = OpAccessChain %93 %79 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFAdd %169 %171 
                                Private f32* %173 = OpAccessChain %9 %31 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %9 %31 
                                         f32 %175 = OpLoad %174 
                                Uniform f32* %177 = OpAccessChain %40 %176 %79 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpFMul %175 %178 
                                Uniform f32* %180 = OpAccessChain %40 %176 %164 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFAdd %179 %181 
                                Private f32* %183 = OpAccessChain %77 %31 
                                                      OpStore %183 %182 
                                Private f32* %184 = OpAccessChain %77 %31 
                                         f32 %185 = OpLoad %184 
                                         f32 %187 = OpExtInst %1 43 %185 %186 %71 
                                Private f32* %188 = OpAccessChain %77 %31 
                                                      OpStore %188 %187 
                                Private f32* %189 = OpAccessChain %9 %31 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %192 = OpAccessChain %40 %191 %79 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %190 %193 
                                Uniform f32* %195 = OpAccessChain %40 %191 %164 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFAdd %194 %196 
                                Private f32* %198 = OpAccessChain %9 %31 
                                                      OpStore %198 %197 
                                Private f32* %199 = OpAccessChain %9 %31 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                         f32 %202 = OpFAdd %201 %71 
                                Private f32* %203 = OpAccessChain %9 %31 
                                                      OpStore %203 %202 
                                Private f32* %204 = OpAccessChain %9 %31 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpExtInst %1 43 %205 %186 %71 
                                Private f32* %207 = OpAccessChain %9 %31 
                                                      OpStore %207 %206 
                                       f32_4 %208 = OpLoad %93 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 3 
                              Uniform f32_4* %211 = OpAccessChain %40 %210 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %214 = OpFNegate %213 
                                       f32_3 %215 = OpFAdd %209 %214 
                                                      OpStore %100 %215 
                                       f32_4 %216 = OpLoad %93 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 3 
                              Uniform f32_3* %219 = OpAccessChain %40 %108 
                                       f32_3 %220 = OpLoad %219 
                                       f32_3 %221 = OpFNegate %220 
                                       f32_3 %222 = OpFAdd %217 %221 
                                       f32_4 %223 = OpLoad %93 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %93 %224 
                read_only TextureCubeSampled %229 = OpLoad %228 
                                       f32_3 %230 = OpLoad %100 
                                       f32_4 %231 = OpImageSampleImplicitLod %229 %230 
                                         f32 %232 = OpCompositeExtract %231 0 
                                                      OpStore %21 %232 
                                       f32_3 %234 = OpLoad %100 
                                       f32_3 %235 = OpLoad %100 
                                         f32 %236 = OpDot %234 %235 
                                                      OpStore %233 %236 
                                         f32 %238 = OpLoad %233 
                                         f32 %239 = OpExtInst %1 31 %238 
                                                      OpStore %237 %239 
                                         f32 %240 = OpLoad %237 
                                Uniform f32* %242 = OpAccessChain %40 %241 %164 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %240 %243 
                                                      OpStore %237 %244 
                                         f32 %245 = OpLoad %237 
                                Uniform f32* %247 = OpAccessChain %40 %246 %164 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %245 %248 
                                                      OpStore %237 %249 
                                         f32 %253 = OpLoad %21 
                                         f32 %254 = OpLoad %237 
                                        bool %255 = OpFOrdLessThan %253 %254 
                                                      OpStore %252 %255 
                                        bool %259 = OpLoad %252 
                                                      OpSelectionMerge %261 None 
                                                      OpBranchConditional %259 %260 %264 
                                             %260 = OpLabel 
                                Uniform f32* %262 = OpAccessChain %40 %176 %31 
                                         f32 %263 = OpLoad %262 
                                                      OpStore %258 %263 
                                                      OpBranch %261 
                                             %264 = OpLabel 
                                                      OpStore %258 %71 
                                                      OpBranch %261 
                                             %261 = OpLabel 
                                         f32 %265 = OpLoad %258 
                                Private f32* %266 = OpAccessChain %256 %31 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %77 %31 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %256 %31 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFAdd %268 %270 
                                Private f32* %272 = OpAccessChain %256 %31 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %256 %31 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %186 %71 
                                Private f32* %276 = OpAccessChain %256 %31 
                                                      OpStore %276 %275 
                                         f32 %277 = OpLoad %233 
                                Uniform f32* %278 = OpAccessChain %40 %210 %164 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFMul %277 %279 
                                Private f32* %281 = OpAccessChain %77 %31 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %233 
                                         f32 %283 = OpExtInst %1 32 %282 
                                                      OpStore %21 %283 
                                         f32 %284 = OpLoad %21 
                                       f32_3 %285 = OpCompositeConstruct %284 %284 %284 
                                       f32_3 %286 = OpLoad %100 
                                       f32_3 %287 = OpFMul %285 %286 
                                                      OpStore %100 %287 
                  read_only Texture2DSampled %289 = OpLoad %288 
                                       f32_3 %290 = OpLoad %77 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 0 
                                       f32_4 %292 = OpImageSampleImplicitLod %289 %291 
                                         f32 %293 = OpCompositeExtract %292 3 
                                Private f32* %294 = OpAccessChain %77 %31 
                                                      OpStore %294 %293 
                                Private f32* %295 = OpAccessChain %256 %31 
                                         f32 %296 = OpLoad %295 
                                Private f32* %297 = OpAccessChain %77 %31 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %77 %31 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %77 %31 
                                         f32 %302 = OpLoad %301 
                                                      OpStore %21 %302 
                                         f32 %303 = OpLoad %21 
                                         f32 %304 = OpExtInst %1 43 %303 %186 %71 
                                                      OpStore %21 %304 
                                       f32_4 %305 = OpLoad %93 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_4 %307 = OpLoad %93 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                         f32 %309 = OpDot %306 %308 
                                                      OpStore %233 %309 
                                         f32 %310 = OpLoad %233 
                                         f32 %311 = OpExtInst %1 32 %310 
                                                      OpStore %233 %311 
                                       f32_4 %312 = OpLoad %93 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFNegate %313 
                                         f32 %315 = OpLoad %233 
                                       f32_3 %316 = OpCompositeConstruct %315 %315 %315 
                                       f32_3 %317 = OpFMul %314 %316 
                                       f32_3 %318 = OpLoad %100 
                                       f32_3 %319 = OpFNegate %318 
                                       f32_3 %320 = OpFAdd %317 %319 
                                       f32_4 %321 = OpLoad %93 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %93 %322 
                                       f32_4 %323 = OpLoad %93 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                       f32_4 %325 = OpLoad %93 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                         f32 %327 = OpDot %324 %326 
                                                      OpStore %233 %327 
                                         f32 %328 = OpLoad %233 
                                         f32 %329 = OpExtInst %1 32 %328 
                                                      OpStore %233 %329 
                                         f32 %330 = OpLoad %233 
                                       f32_3 %331 = OpCompositeConstruct %330 %330 %330 
                                       f32_4 %332 = OpLoad %93 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_3 %334 = OpFMul %331 %333 
                                       f32_4 %335 = OpLoad %93 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 6 3 
                                                      OpStore %93 %336 
                                       f32_4 %337 = OpLoad %54 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %341 = OpFMul %338 %340 
                                       f32_3 %344 = OpFAdd %341 %343 
                                                      OpStore %256 %344 
                                Private f32* %346 = OpAccessChain %54 %164 
                                         f32 %347 = OpLoad %346 
                                         f32 %349 = OpFMul %347 %348 
                                                      OpStore %345 %349 
                                       f32_3 %351 = OpLoad %256 
                                       f32_3 %352 = OpLoad %256 
                                         f32 %353 = OpDot %351 %352 
                                                      OpStore %350 %353 
                                         f32 %354 = OpLoad %350 
                                         f32 %355 = OpExtInst %1 32 %354 
                                                      OpStore %350 %355 
                                       f32_3 %356 = OpLoad %256 
                                         f32 %357 = OpLoad %350 
                                       f32_3 %358 = OpCompositeConstruct %357 %357 %357 
                                       f32_3 %359 = OpFMul %356 %358 
                                                      OpStore %256 %359 
                                       f32_4 %360 = OpLoad %93 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpLoad %256 
                                         f32 %363 = OpDot %361 %362 
                                                      OpStore %350 %363 
                                       f32_3 %364 = OpLoad %100 
                                       f32_3 %365 = OpFNegate %364 
                                       f32_3 %366 = OpLoad %256 
                                         f32 %367 = OpDot %365 %366 
                                Private f32* %368 = OpAccessChain %256 %31 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %256 %31 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpExtInst %1 40 %370 %186 
                                Private f32* %372 = OpAccessChain %256 %31 
                                                      OpStore %372 %371 
                                Private f32* %373 = OpAccessChain %77 %31 
                                         f32 %374 = OpLoad %373 
                                Private f32* %375 = OpAccessChain %256 %31 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                Private f32* %378 = OpAccessChain %77 %31 
                                                      OpStore %378 %377 
                                       f32_3 %380 = OpLoad %77 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
                              Uniform f32_4* %383 = OpAccessChain %40 %382 
                                       f32_4 %384 = OpLoad %383 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpFMul %381 %385 
                                       f32_4 %387 = OpLoad %379 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 6 3 
                                                      OpStore %379 %388 
                                         f32 %389 = OpLoad %350 
                                         f32 %390 = OpExtInst %1 40 %389 %186 
                                Private f32* %391 = OpAccessChain %256 %31 
                                                      OpStore %391 %390 
                                Private f32* %392 = OpAccessChain %256 %31 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpExtInst %1 30 %393 
                                Private f32* %395 = OpAccessChain %256 %31 
                                                      OpStore %395 %394 
                                Private f32* %396 = OpAccessChain %256 %31 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpLoad %345 
                                         f32 %399 = OpFMul %397 %398 
                                Private f32* %400 = OpAccessChain %256 %31 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %256 %31 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 29 %402 
                                Private f32* %404 = OpAccessChain %256 %31 
                                                      OpStore %404 %403 
                                         f32 %405 = OpLoad %21 
                                Private f32* %406 = OpAccessChain %256 %31 
                                         f32 %407 = OpLoad %406 
                                         f32 %408 = OpFMul %405 %407 
                                Private f32* %409 = OpAccessChain %77 %31 
                                                      OpStore %409 %408 
                              Uniform f32_4* %410 = OpAccessChain %40 %382 
                                       f32_4 %411 = OpLoad %410 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                         f32 %417 = OpDot %412 %416 
                                Private f32* %418 = OpAccessChain %256 %31 
                                                      OpStore %418 %417 
                                Private f32* %419 = OpAccessChain %77 %31 
                                         f32 %420 = OpLoad %419 
                                Private f32* %421 = OpAccessChain %256 %31 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFMul %420 %422 
                                Private f32* %424 = OpAccessChain %379 %164 
                                                      OpStore %424 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_4 %426 = OpVectorShuffle %425 %425 0 0 0 0 
                                       f32_4 %427 = OpLoad %379 
                                       f32_4 %428 = OpFMul %426 %427 
                                                      OpStore %9 %428 
                                       f32_4 %431 = OpLoad %9 
                                                      OpStore %430 %431 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec4 u_xlat10_6;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec2 u_xlat18;
float u_xlat16_18;
float u_xlat19;
bool u_xlatb20;
float u_xlat27;
float u_xlat28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat28 = u_xlat19 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat28));
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlatb20 = u_xlat28<0.99000001;
    if(u_xlatb20){
        u_xlat19 = sqrt(u_xlat19);
        u_xlat19 = u_xlat19 * _LightPositionRange.w;
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_5 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_6 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat9.xyz = u_xlat9.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8 = textureLod(_ShadowMapTexture, u_xlat9.xyz, 0.0).yzwx;
        u_xlat8.x = u_xlat10_5.x;
        u_xlat8.y = u_xlat10_6.x;
        u_xlat8.z = u_xlat10_7.x;
        u_xlatb5 = lessThan(u_xlat8, vec4(u_xlat19));
        u_xlat5.x = (u_xlatb5.x) ? _LightShadowData.x : float(1.0);
        u_xlat5.y = (u_xlatb5.y) ? _LightShadowData.x : float(1.0);
        u_xlat5.z = (u_xlatb5.z) ? _LightShadowData.x : float(1.0);
        u_xlat5.w = (u_xlatb5.w) ? _LightShadowData.x : float(1.0);
        u_xlat9.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat9.x = 1.0;
    //ENDIF
    }
    u_xlat9.x = u_xlat28 + u_xlat9.x;
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat10_4.w;
    u_xlat18.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_1 = texture(_CameraNormalsTexture, u_xlat18.xy);
    u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz;
    u_xlat18.x = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat27) + (-u_xlat3.xyz);
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat18.y = dot(u_xlat2.xyz, u_xlat16_1.xyz);
    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
    u_xlat16_1.x = u_xlat10_1.w * 128.0;
    u_xlat27 = log2(u_xlat18.y);
    u_xlat27 = u_xlat27 * u_xlat16_1.x;
    u_xlat27 = exp2(u_xlat27);
    u_xlat1.x = u_xlat9.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat9.x = u_xlat9.x * u_xlat18.x;
    u_xlat1.xyz = u_xlat9.xxx * _LightColor.xyz;
    u_xlat9.x = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.w = u_xlat9.x * u_xlat27;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    SV_Target0 = u_xlat0.xxxx * u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 527
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %524 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 RelaxedPrecision 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpMemberDecorate %14 10 Offset 14 
                                                      OpMemberDecorate %14 11 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %24 Location 24 
                                                      OpDecorate %40 Location 40 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %192 RelaxedPrecision 
                                                      OpDecorate %228 RelaxedPrecision 
                                                      OpDecorate %228 DescriptorSet 228 
                                                      OpDecorate %228 Binding 228 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %259 RelaxedPrecision 
                                                      OpDecorate %275 RelaxedPrecision 
                                                      OpDecorate %277 RelaxedPrecision 
                                                      OpDecorate %285 RelaxedPrecision 
                                                      OpDecorate %287 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %297 RelaxedPrecision 
                                                      OpDecorate %305 RelaxedPrecision 
                                                      OpDecorate %307 RelaxedPrecision 
                                                      OpDecorate %309 RelaxedPrecision 
                                                      OpDecorate %319 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %344 RelaxedPrecision 
                                                      OpDecorate %345 RelaxedPrecision 
                                                      OpDecorate %345 DescriptorSet 345 
                                                      OpDecorate %345 Binding 345 
                                                      OpDecorate %346 RelaxedPrecision 
                                                      OpDecorate %349 RelaxedPrecision 
                                                      OpDecorate %350 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %367 RelaxedPrecision 
                                                      OpDecorate %368 RelaxedPrecision 
                                                      OpDecorate %369 RelaxedPrecision 
                                                      OpDecorate %370 RelaxedPrecision 
                                                      OpDecorate %371 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %429 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %433 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %436 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %446 RelaxedPrecision 
                                                      OpDecorate %449 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %455 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %473 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %524 Location 524 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                                 Input f32_3* %24 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                                 Input f32_4* %40 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypeSampledImage %50 
                                              %52 = OpTypePointer UniformConstant %51 
  UniformConstant read_only Texture2DSampled* %53 = OpVariable UniformConstant 
                                          i32 %59 = OpConstant 2 
                                          u32 %64 = OpConstant 1 
                                          f32 %68 = OpConstant 3.674022E-40 
                               Private f32_4* %71 = OpVariable Private 
                                              %79 = OpTypePointer Private %10 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 3 
                                              %84 = OpTypePointer Uniform %7 
                                          i32 %89 = OpConstant 0 
                                         i32 %121 = OpConstant 7 
                                         u32 %144 = OpConstant 3 
                              Private f32_3* %154 = OpVariable Private 
                                         i32 %157 = OpConstant 8 
                                Private f32* %163 = OpVariable Private 
                                Private f32* %167 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %178 = OpVariable UniformConstant 
                                Private f32* %184 = OpVariable Private 
                                         i32 %187 = OpConstant 6 
                                         f32 %195 = OpConstant 3.674022E-40 
                                             %197 = OpTypeBool 
                                             %198 = OpTypePointer Private %197 
                               Private bool* %199 = OpVariable Private 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         i32 %209 = OpConstant 4 
                                         i32 %214 = OpConstant 5 
                              Private f32_4* %218 = OpVariable Private 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_3 %221 = OpConstantComposite %220 %220 %220 
                                             %225 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %226 = OpTypeSampledImage %225 
                                             %227 = OpTypePointer UniformConstant %226 
UniformConstant read_only TextureCubeSampled* %228 = OpVariable UniformConstant 
                              Private f32_3* %235 = OpVariable Private 
                                         f32 %237 = OpConstant 3.674022E-40 
                                       f32_3 %238 = OpConstantComposite %237 %237 %220 
                                       f32_3 %246 = OpConstantComposite %237 %220 %237 
                                       f32_3 %254 = OpConstantComposite %220 %237 %237 
                                             %261 = OpTypeVector %197 4 
                                             %262 = OpTypePointer Private %261 
                             Private bool_4* %263 = OpVariable Private 
                                             %268 = OpTypePointer Function %6 
                              Private f32_4* %309 = OpVariable Private 
                                         f32 %311 = OpConstant 3.674022E-40 
                                       f32_4 %312 = OpConstantComposite %311 %311 %311 %311 
                                             %331 = OpTypePointer Private %41 
                              Private f32_2* %332 = OpVariable Private 
                                         i32 %335 = OpConstant 11 
                              Private f32_4* %344 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %345 = OpVariable UniformConstant 
                                         f32 %351 = OpConstant 3.674022E-40 
                                       f32_3 %352 = OpConstantComposite %351 %351 %351 
                                         f32 %354 = OpConstant 3.674022E-40 
                                       f32_3 %355 = OpConstantComposite %354 %354 %354 
                                Private f32* %359 = OpVariable Private 
                                             %382 = OpTypePointer Uniform %10 
                                       f32_2 %435 = OpConstantComposite %195 %195 
                                Private f32* %439 = OpVariable Private 
                                         f32 %442 = OpConstant 3.674022E-40 
                                         i32 %478 = OpConstant 9 
                                         f32 %488 = OpConstant 3.674022E-40 
                                         f32 %489 = OpConstant 3.674022E-40 
                                         f32 %490 = OpConstant 3.674022E-40 
                                       f32_3 %491 = OpConstantComposite %488 %489 %490 
                                         i32 %502 = OpConstant 10 
                                             %523 = OpTypePointer Output %7 
                               Output f32_4* %524 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %269 = OpVariable Function 
                               Function f32* %279 = OpVariable Function 
                               Function f32* %289 = OpVariable Function 
                               Function f32* %299 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain %24 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad %24 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %42 = OpLoad %40 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad %40 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                   read_only Texture2DSampled %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %38 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_4 %57 = OpImageSampleImplicitLod %54 %56 
                                          f32 %58 = OpCompositeExtract %57 0 
                                                      OpStore %49 %58 
                                 Uniform f32* %60 = OpAccessChain %16 %59 %29 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpLoad %49 
                                          f32 %63 = OpFMul %61 %62 
                                 Uniform f32* %65 = OpAccessChain %16 %59 %64 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpFAdd %63 %66 
                                                      OpStore %49 %67 
                                          f32 %69 = OpLoad %49 
                                          f32 %70 = OpFDiv %68 %69 
                                                      OpStore %49 %70 
                                          f32 %72 = OpLoad %49 
                                        f32_3 %73 = OpCompositeConstruct %72 %72 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 1 2 
                                        f32_3 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %71 
                                        f32_4 %78 = OpVectorShuffle %77 %76 4 5 6 3 
                                                      OpStore %71 %78 
                                        f32_4 %81 = OpLoad %71 
                                        f32_3 %82 = OpVectorShuffle %81 %81 1 1 1 
                               Uniform f32_4* %85 = OpAccessChain %16 %83 %18 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %82 %87 
                                                      OpStore %80 %88 
                               Uniform f32_4* %90 = OpAccessChain %16 %83 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %71 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 0 0 
                                        f32_3 %95 = OpFMul %92 %94 
                                        f32_3 %96 = OpLoad %80 
                                        f32_3 %97 = OpFAdd %95 %96 
                                        f32_4 %98 = OpLoad %71 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 2 6 
                                                      OpStore %71 %99 
                              Uniform f32_4* %100 = OpAccessChain %16 %83 %59 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_4 %103 = OpLoad %71 
                                       f32_3 %104 = OpVectorShuffle %103 %103 2 2 2 
                                       f32_3 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %71 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 3 
                                       f32_3 %108 = OpFAdd %105 %107 
                                       f32_4 %109 = OpLoad %71 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 6 
                                                      OpStore %71 %110 
                                       f32_4 %111 = OpLoad %71 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                              Uniform f32_4* %113 = OpAccessChain %16 %83 %83 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFAdd %112 %115 
                                       f32_4 %117 = OpLoad %71 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %71 %118 
                                       f32_4 %119 = OpLoad %71 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_4* %122 = OpAccessChain %16 %121 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_3 %125 = OpFNegate %124 
                                       f32_3 %126 = OpFAdd %120 %125 
                                                      OpStore %80 %126 
                                       f32_3 %127 = OpLoad %80 
                                       f32_3 %128 = OpLoad %80 
                                         f32 %129 = OpDot %127 %128 
                                Private f32* %130 = OpAccessChain %9 %29 
                                                      OpStore %130 %129 
                                Private f32* %131 = OpAccessChain %9 %29 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpExtInst %1 31 %132 
                                Private f32* %134 = OpAccessChain %9 %29 
                                                      OpStore %134 %133 
                                Private f32* %135 = OpAccessChain %9 %19 
                                         f32 %136 = OpLoad %135 
                                         f32 %137 = OpFNegate %136 
                                         f32 %138 = OpLoad %49 
                                         f32 %139 = OpFMul %137 %138 
                                Private f32* %140 = OpAccessChain %9 %29 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpFAdd %139 %141 
                                Private f32* %143 = OpAccessChain %9 %29 
                                                      OpStore %143 %142 
                                Uniform f32* %145 = OpAccessChain %16 %121 %144 
                                         f32 %146 = OpLoad %145 
                                Private f32* %147 = OpAccessChain %9 %29 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFMul %146 %148 
                                Private f32* %150 = OpAccessChain %71 %19 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFAdd %149 %151 
                                Private f32* %153 = OpAccessChain %9 %29 
                                                      OpStore %153 %152 
                                       f32_4 %155 = OpLoad %71 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 3 
                              Uniform f32_4* %158 = OpAccessChain %16 %157 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFNegate %160 
                                       f32_3 %162 = OpFAdd %156 %161 
                                                      OpStore %154 %162 
                                       f32_3 %164 = OpLoad %154 
                                       f32_3 %165 = OpLoad %154 
                                         f32 %166 = OpDot %164 %165 
                                                      OpStore %163 %166 
                                         f32 %168 = OpLoad %163 
                                         f32 %169 = OpExtInst %1 32 %168 
                                                      OpStore %167 %169 
                                       f32_3 %170 = OpLoad %154 
                                         f32 %171 = OpLoad %167 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_3 %173 = OpFMul %170 %172 
                                                      OpStore %80 %173 
                                         f32 %174 = OpLoad %163 
                                Uniform f32* %175 = OpAccessChain %16 %157 %144 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFMul %174 %176 
                                                      OpStore %167 %177 
                  read_only Texture2DSampled %179 = OpLoad %178 
                                         f32 %180 = OpLoad %167 
                                       f32_2 %181 = OpCompositeConstruct %180 %180 
                                       f32_4 %182 = OpImageSampleImplicitLod %179 %181 
                                         f32 %183 = OpCompositeExtract %182 3 
                                                      OpStore %167 %183 
                                Private f32* %185 = OpAccessChain %9 %29 
                                         f32 %186 = OpLoad %185 
                                Uniform f32* %188 = OpAccessChain %16 %187 %19 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %186 %189 
                                Uniform f32* %191 = OpAccessChain %16 %187 %144 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFAdd %190 %192 
                                                      OpStore %184 %193 
                                         f32 %194 = OpLoad %184 
                                         f32 %196 = OpExtInst %1 43 %194 %195 %68 
                                                      OpStore %184 %196 
                                         f32 %200 = OpLoad %184 
                                        bool %202 = OpFOrdLessThan %200 %201 
                                                      OpStore %199 %202 
                                        bool %203 = OpLoad %199 
                                                      OpSelectionMerge %205 None 
                                                      OpBranchConditional %203 %204 %315 
                                             %204 = OpLabel 
                                         f32 %206 = OpLoad %163 
                                         f32 %207 = OpExtInst %1 31 %206 
                                                      OpStore %163 %207 
                                         f32 %208 = OpLoad %163 
                                Uniform f32* %210 = OpAccessChain %16 %209 %144 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %208 %211 
                                                      OpStore %163 %212 
                                         f32 %213 = OpLoad %163 
                                Uniform f32* %215 = OpAccessChain %16 %214 %144 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFMul %213 %216 
                                                      OpStore %163 %217 
                                       f32_3 %219 = OpLoad %154 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %218 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %218 %224 
                read_only TextureCubeSampled %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %218 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_4 %232 = OpImageSampleExplicitLod %229 %231 Lod %7 
                                         f32 %233 = OpCompositeExtract %232 0 
                                Private f32* %234 = OpAccessChain %218 %29 
                                                      OpStore %234 %233 
                                       f32_3 %236 = OpLoad %154 
                                       f32_3 %239 = OpFAdd %236 %238 
                                                      OpStore %235 %239 
                read_only TextureCubeSampled %240 = OpLoad %228 
                                       f32_3 %241 = OpLoad %235 
                                       f32_4 %242 = OpImageSampleExplicitLod %240 %241 Lod %7 
                                         f32 %243 = OpCompositeExtract %242 0 
                                Private f32* %244 = OpAccessChain %218 %64 
                                                      OpStore %244 %243 
                                       f32_3 %245 = OpLoad %154 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %235 %247 
                read_only TextureCubeSampled %248 = OpLoad %228 
                                       f32_3 %249 = OpLoad %235 
                                       f32_4 %250 = OpImageSampleExplicitLod %248 %249 Lod %7 
                                         f32 %251 = OpCompositeExtract %250 0 
                                Private f32* %252 = OpAccessChain %218 %19 
                                                      OpStore %252 %251 
                                       f32_3 %253 = OpLoad %154 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore %154 %255 
                read_only TextureCubeSampled %256 = OpLoad %228 
                                       f32_3 %257 = OpLoad %154 
                                       f32_4 %258 = OpImageSampleExplicitLod %256 %257 Lod %7 
                                         f32 %259 = OpCompositeExtract %258 0 
                                Private f32* %260 = OpAccessChain %218 %144 
                                                      OpStore %260 %259 
                                       f32_4 %264 = OpLoad %218 
                                         f32 %265 = OpLoad %163 
                                       f32_4 %266 = OpCompositeConstruct %265 %265 %265 %265 
                                      bool_4 %267 = OpFOrdLessThan %264 %266 
                                                      OpStore %263 %267 
                                      bool_4 %270 = OpLoad %263 
                                        bool %271 = OpCompositeExtract %270 0 
                                                      OpSelectionMerge %273 None 
                                                      OpBranchConditional %271 %272 %276 
                                             %272 = OpLabel 
                                Uniform f32* %274 = OpAccessChain %16 %187 %29 
                                         f32 %275 = OpLoad %274 
                                                      OpStore %269 %275 
                                                      OpBranch %273 
                                             %276 = OpLabel 
                                                      OpStore %269 %68 
                                                      OpBranch %273 
                                             %273 = OpLabel 
                                         f32 %277 = OpLoad %269 
                                Private f32* %278 = OpAccessChain %218 %29 
                                                      OpStore %278 %277 
                                      bool_4 %280 = OpLoad %263 
                                        bool %281 = OpCompositeExtract %280 1 
                                                      OpSelectionMerge %283 None 
                                                      OpBranchConditional %281 %282 %286 
                                             %282 = OpLabel 
                                Uniform f32* %284 = OpAccessChain %16 %187 %29 
                                         f32 %285 = OpLoad %284 
                                                      OpStore %279 %285 
                                                      OpBranch %283 
                                             %286 = OpLabel 
                                                      OpStore %279 %68 
                                                      OpBranch %283 
                                             %283 = OpLabel 
                                         f32 %287 = OpLoad %279 
                                Private f32* %288 = OpAccessChain %218 %64 
                                                      OpStore %288 %287 
                                      bool_4 %290 = OpLoad %263 
                                        bool %291 = OpCompositeExtract %290 2 
                                                      OpSelectionMerge %293 None 
                                                      OpBranchConditional %291 %292 %296 
                                             %292 = OpLabel 
                                Uniform f32* %294 = OpAccessChain %16 %187 %29 
                                         f32 %295 = OpLoad %294 
                                                      OpStore %289 %295 
                                                      OpBranch %293 
                                             %296 = OpLabel 
                                                      OpStore %289 %68 
                                                      OpBranch %293 
                                             %293 = OpLabel 
                                         f32 %297 = OpLoad %289 
                                Private f32* %298 = OpAccessChain %218 %19 
                                                      OpStore %298 %297 
                                      bool_4 %300 = OpLoad %263 
                                        bool %301 = OpCompositeExtract %300 3 
                                                      OpSelectionMerge %303 None 
                                                      OpBranchConditional %301 %302 %306 
                                             %302 = OpLabel 
                                Uniform f32* %304 = OpAccessChain %16 %187 %29 
                                         f32 %305 = OpLoad %304 
                                                      OpStore %299 %305 
                                                      OpBranch %303 
                                             %306 = OpLabel 
                                                      OpStore %299 %68 
                                                      OpBranch %303 
                                             %303 = OpLabel 
                                         f32 %307 = OpLoad %299 
                                Private f32* %308 = OpAccessChain %218 %144 
                                                      OpStore %308 %307 
                                       f32_4 %310 = OpLoad %218 
                                         f32 %313 = OpDot %310 %312 
                                Private f32* %314 = OpAccessChain %309 %29 
                                                      OpStore %314 %313 
                                                      OpBranch %205 
                                             %315 = OpLabel 
                                Private f32* %316 = OpAccessChain %309 %29 
                                                      OpStore %316 %68 
                                                      OpBranch %205 
                                             %205 = OpLabel 
                                         f32 %317 = OpLoad %184 
                                Private f32* %318 = OpAccessChain %309 %29 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFAdd %317 %319 
                                Private f32* %321 = OpAccessChain %309 %29 
                                                      OpStore %321 %320 
                                Private f32* %322 = OpAccessChain %309 %29 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpExtInst %1 43 %323 %195 %68 
                                Private f32* %325 = OpAccessChain %309 %29 
                                                      OpStore %325 %324 
                                         f32 %326 = OpLoad %167 
                                Private f32* %327 = OpAccessChain %309 %29 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFMul %326 %328 
                                Private f32* %330 = OpAccessChain %154 %29 
                                                      OpStore %330 %329 
                                       f32_4 %333 = OpLoad %38 
                                       f32_2 %334 = OpVectorShuffle %333 %333 0 1 
                              Uniform f32_4* %336 = OpAccessChain %16 %335 
                                       f32_4 %337 = OpLoad %336 
                                       f32_2 %338 = OpVectorShuffle %337 %337 0 1 
                                       f32_2 %339 = OpFMul %334 %338 
                              Uniform f32_4* %340 = OpAccessChain %16 %335 
                                       f32_4 %341 = OpLoad %340 
                                       f32_2 %342 = OpVectorShuffle %341 %341 2 3 
                                       f32_2 %343 = OpFAdd %339 %342 
                                                      OpStore %332 %343 
                  read_only Texture2DSampled %346 = OpLoad %345 
                                       f32_2 %347 = OpLoad %332 
                                       f32_4 %348 = OpImageSampleImplicitLod %346 %347 
                                                      OpStore %344 %348 
                                       f32_4 %349 = OpLoad %344 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_3 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %309 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %309 %358 
                                       f32_4 %360 = OpLoad %309 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_4 %362 = OpLoad %309 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                         f32 %364 = OpDot %361 %363 
                                                      OpStore %359 %364 
                                         f32 %365 = OpLoad %359 
                                         f32 %366 = OpExtInst %1 32 %365 
                                                      OpStore %359 %366 
                                         f32 %367 = OpLoad %359 
                                       f32_3 %368 = OpCompositeConstruct %367 %367 %367 
                                       f32_4 %369 = OpLoad %309 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFMul %368 %370 
                                       f32_4 %372 = OpLoad %309 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %309 %373 
                                       f32_3 %374 = OpLoad %80 
                                       f32_3 %375 = OpFNegate %374 
                                       f32_4 %376 = OpLoad %309 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                         f32 %378 = OpDot %375 %377 
                                Private f32* %379 = OpAccessChain %309 %144 
                                                      OpStore %379 %378 
                                       f32_4 %380 = OpLoad %71 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 3 
                              Uniform f32_3* %383 = OpAccessChain %16 %89 
                                       f32_3 %384 = OpLoad %383 
                                       f32_3 %385 = OpFNegate %384 
                                       f32_3 %386 = OpFAdd %381 %385 
                                       f32_4 %387 = OpLoad %38 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 6 3 
                                                      OpStore %38 %388 
                                       f32_4 %389 = OpLoad %38 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_4 %391 = OpLoad %38 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpDot %390 %392 
                                Private f32* %394 = OpAccessChain %332 %29 
                                                      OpStore %394 %393 
                                Private f32* %395 = OpAccessChain %332 %29 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpExtInst %1 32 %396 
                                Private f32* %398 = OpAccessChain %332 %29 
                                                      OpStore %398 %397 
                                       f32_4 %399 = OpLoad %38 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_3 %401 = OpFNegate %400 
                                       f32_2 %402 = OpLoad %332 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 0 0 
                                       f32_3 %404 = OpFMul %401 %403 
                                       f32_3 %405 = OpLoad %80 
                                       f32_3 %406 = OpFNegate %405 
                                       f32_3 %407 = OpFAdd %404 %406 
                                       f32_4 %408 = OpLoad %38 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 5 6 3 
                                                      OpStore %38 %409 
                                       f32_4 %410 = OpLoad %38 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                       f32_4 %412 = OpLoad %38 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                         f32 %414 = OpDot %411 %413 
                                Private f32* %415 = OpAccessChain %332 %29 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %332 %29 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpExtInst %1 32 %417 
                                Private f32* %419 = OpAccessChain %332 %29 
                                                      OpStore %419 %418 
                                       f32_2 %420 = OpLoad %332 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 0 0 
                                       f32_4 %422 = OpLoad %38 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_3 %424 = OpFMul %421 %423 
                                       f32_4 %425 = OpLoad %38 
                                       f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                                      OpStore %38 %426 
                                       f32_4 %427 = OpLoad %38 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                       f32_4 %429 = OpLoad %309 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                         f32 %431 = OpDot %428 %430 
                                Private f32* %432 = OpAccessChain %309 %29 
                                                      OpStore %432 %431 
                                       f32_4 %433 = OpLoad %309 
                                       f32_2 %434 = OpVectorShuffle %433 %433 0 3 
                                       f32_2 %436 = OpExtInst %1 40 %434 %435 
                                       f32_4 %437 = OpLoad %309 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 1 2 5 
                                                      OpStore %309 %438 
                                Private f32* %440 = OpAccessChain %344 %144 
                                         f32 %441 = OpLoad %440 
                                         f32 %443 = OpFMul %441 %442 
                                                      OpStore %439 %443 
                                Private f32* %444 = OpAccessChain %309 %29 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpExtInst %1 30 %445 
                                Private f32* %447 = OpAccessChain %309 %29 
                                                      OpStore %447 %446 
                                Private f32* %448 = OpAccessChain %309 %29 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpLoad %439 
                                         f32 %451 = OpFMul %449 %450 
                                Private f32* %452 = OpAccessChain %309 %29 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %309 %29 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 29 %454 
                                Private f32* %456 = OpAccessChain %309 %29 
                                                      OpStore %456 %455 
                                Private f32* %457 = OpAccessChain %154 %29 
                                         f32 %458 = OpLoad %457 
                                Private f32* %459 = OpAccessChain %332 %29 
                                                      OpStore %459 %458 
                                Private f32* %460 = OpAccessChain %332 %29 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpExtInst %1 43 %461 %195 %68 
                                Private f32* %463 = OpAccessChain %332 %29 
                                                      OpStore %463 %462 
                                Private f32* %464 = OpAccessChain %332 %29 
                                         f32 %465 = OpLoad %464 
                                Private f32* %466 = OpAccessChain %309 %29 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpFMul %465 %467 
                                Private f32* %469 = OpAccessChain %332 %29 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %154 %29 
                                         f32 %471 = OpLoad %470 
                                Private f32* %472 = OpAccessChain %309 %144 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpFMul %471 %473 
                                Private f32* %475 = OpAccessChain %154 %29 
                                                      OpStore %475 %474 
                                       f32_3 %476 = OpLoad %154 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 0 0 
                              Uniform f32_4* %479 = OpAccessChain %16 %478 
                                       f32_4 %480 = OpLoad %479 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpFMul %477 %481 
                                       f32_4 %483 = OpLoad %38 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %38 %484 
                              Uniform f32_4* %485 = OpAccessChain %16 %478 
                                       f32_4 %486 = OpLoad %485 
                                       f32_3 %487 = OpVectorShuffle %486 %486 0 1 2 
                                         f32 %492 = OpDot %487 %491 
                                Private f32* %493 = OpAccessChain %309 %29 
                                                      OpStore %493 %492 
                                Private f32* %494 = OpAccessChain %332 %29 
                                         f32 %495 = OpLoad %494 
                                Private f32* %496 = OpAccessChain %309 %29 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFMul %495 %497 
                                Private f32* %499 = OpAccessChain %38 %144 
                                                      OpStore %499 %498 
                                Private f32* %500 = OpAccessChain %9 %29 
                                         f32 %501 = OpLoad %500 
                                Uniform f32* %503 = OpAccessChain %16 %502 %19 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpFMul %501 %504 
                                Uniform f32* %506 = OpAccessChain %16 %502 %144 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpFAdd %505 %507 
                                Private f32* %509 = OpAccessChain %9 %29 
                                                      OpStore %509 %508 
                                Private f32* %510 = OpAccessChain %9 %29 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpFNegate %511 
                                         f32 %513 = OpFAdd %512 %68 
                                Private f32* %514 = OpAccessChain %9 %29 
                                                      OpStore %514 %513 
                                Private f32* %515 = OpAccessChain %9 %29 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpExtInst %1 43 %516 %195 %68 
                                Private f32* %518 = OpAccessChain %9 %29 
                                                      OpStore %518 %517 
                                       f32_4 %519 = OpLoad %9 
                                       f32_4 %520 = OpVectorShuffle %519 %519 0 0 0 0 
                                       f32_4 %521 = OpLoad %38 
                                       f32_4 %522 = OpFMul %520 %521 
                                                      OpStore %9 %522 
                                       f32_4 %525 = OpLoad %9 
                                                      OpStore %524 %525 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
float u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
float u_xlat5;
vec3 u_xlat6;
float u_xlat11;
float u_xlat16_15;
float u_xlat16;
float u_xlat16_16;
bool u_xlatb16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat1 = (-u_xlat6.z) * u_xlat1 + u_xlat6.x;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat6.x = u_xlat1 * _LightShadowData.z + _LightShadowData.w;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat3.xyz);
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16 = sqrt(u_xlat11);
    u_xlat16 = u_xlat16 * _LightPositionRange.w;
    u_xlat16 = u_xlat16 * _LightProjectionParams.w;
    u_xlatb16 = u_xlat10_4.x<u_xlat16;
    u_xlat16 = (u_xlatb16) ? _LightShadowData.x : 1.0;
    u_xlat6.x = u_xlat6.x + u_xlat16;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat16 = u_xlat11 * _LightPos.w;
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat6.x = u_xlat6.x * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat6.x = u_xlat6.x * u_xlat10_4.w;
    u_xlat11 = u_xlat6.x;
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16) + (-u_xlat3.xyz);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_15 = u_xlat10_0.w * 128.0;
    u_xlat16_16 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_16);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat16, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat11 * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat2.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = vec4(u_xlat1) * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 474
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %84 %471 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 RelaxedPrecision 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpMemberDecorate %39 9 Offset 39 
                                                      OpMemberDecorate %39 10 Offset 39 
                                                      OpMemberDecorate %39 11 Offset 39 
                                                      OpMemberDecorate %39 12 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %57 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %220 DescriptorSet 220 
                                                      OpDecorate %220 Binding 220 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %266 RelaxedPrecision 
                                                      OpDecorate %267 RelaxedPrecision 
                                                      OpDecorate %280 DescriptorSet 280 
                                                      OpDecorate %280 Binding 280 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %331 DescriptorSet 331 
                                                      OpDecorate %331 Binding 331 
                                                      OpDecorate %378 RelaxedPrecision 
                                                      OpDecorate %379 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %386 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %390 RelaxedPrecision 
                                                      OpDecorate %391 RelaxedPrecision 
                                                      OpDecorate %392 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %394 RelaxedPrecision 
                                                      OpDecorate %395 RelaxedPrecision 
                                                      OpDecorate %396 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %412 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %434 RelaxedPrecision 
                                                      OpDecorate %435 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %444 RelaxedPrecision 
                                                      OpDecorate %448 RelaxedPrecision 
                                                      OpDecorate %463 RelaxedPrecision 
                                                      OpDecorate %471 RelaxedPrecision 
                                                      OpDecorate %471 Location 471 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypeSampledImage %22 
                                              %24 = OpTypePointer UniformConstant %23 
  UniformConstant read_only Texture2DSampled* %25 = OpVariable UniformConstant 
                                              %30 = OpTypeInt 32 0 
                                          u32 %31 = OpConstant 0 
                                              %35 = OpTypeVector %6 3 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeArray %7 %36 
                                              %39 = OpTypeStruct %35 %7 %7 %37 %7 %7 %7 %7 %7 %7 %7 %38 %7 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 12 
                                              %44 = OpTypePointer Uniform %7 
                               Private f32_4* %55 = OpVariable Private 
  UniformConstant read_only Texture2DSampled* %56 = OpVariable UniformConstant 
                                          i32 %61 = OpConstant 2 
                                              %62 = OpTypePointer Uniform %6 
                                          u32 %67 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %35 
                               Private f32_3* %78 = OpVariable Private 
                                          i32 %79 = OpConstant 1 
                                          u32 %80 = OpConstant 2 
                                              %83 = OpTypePointer Input %35 
                                 Input f32_3* %84 = OpVariable Input 
                                              %85 = OpTypePointer Input %6 
                               Private f32_4* %94 = OpVariable Private 
                              Private f32_3* %101 = OpVariable Private 
                                         i32 %104 = OpConstant 3 
                                         i32 %109 = OpConstant 0 
                                         i32 %141 = OpConstant 7 
                                         u32 %165 = OpConstant 3 
                                         i32 %177 = OpConstant 6 
                                         f32 %187 = OpConstant 3.674022E-40 
                                         i32 %192 = OpConstant 10 
                                         i32 %211 = OpConstant 8 
                                             %217 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %218 = OpTypeSampledImage %217 
                                             %219 = OpTypePointer UniformConstant %218 
UniformConstant read_only TextureCubeSampled* %220 = OpVariable UniformConstant 
                                Private f32* %225 = OpVariable Private 
                                Private f32* %229 = OpVariable Private 
                                         i32 %233 = OpConstant 4 
                                         i32 %238 = OpConstant 5 
                                             %242 = OpTypeBool 
                                             %243 = OpTypePointer Private %242 
                               Private bool* %244 = OpVariable Private 
                              Private f32_3* %248 = OpVariable Private 
                                             %249 = OpTypePointer Function %6 
 UniformConstant read_only Texture2DSampled* %280 = OpVariable UniformConstant 
                              Private f32_3* %293 = OpVariable Private 
                                         i32 %296 = OpConstant 11 
                                             %319 = OpTypePointer Uniform %35 
UniformConstant read_only TextureCubeSampled* %331 = OpVariable UniformConstant 
                                         f32 %334 = OpConstant 3.674022E-40 
                                         f32 %380 = OpConstant 3.674022E-40 
                                       f32_3 %381 = OpConstantComposite %380 %380 %380 
                                         f32 %383 = OpConstant 3.674022E-40 
                                       f32_3 %384 = OpConstantComposite %383 %383 %383 
                                Private f32* %386 = OpVariable Private 
                                         f32 %389 = OpConstant 3.674022E-40 
                                Private f32* %391 = OpVariable Private 
                              Private f32_4* %420 = OpVariable Private 
                                         i32 %423 = OpConstant 9 
                                         f32 %454 = OpConstant 3.674022E-40 
                                         f32 %455 = OpConstant 3.674022E-40 
                                         f32 %456 = OpConstant 3.674022E-40 
                                       f32_3 %457 = OpConstantComposite %454 %455 %456 
                                             %470 = OpTypePointer Output %7 
                               Output f32_4* %471 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %250 = OpVariable Function 
                                        f32_4 %13 = OpLoad %11 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad %11 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                   read_only Texture2DSampled %26 = OpLoad %25 
                                        f32_4 %27 = OpLoad %9 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_4 %29 = OpImageSampleImplicitLod %26 %28 
                                          f32 %32 = OpCompositeExtract %29 0 
                                                      OpStore %21 %32 
                                        f32_4 %33 = OpLoad %9 
                                        f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %34 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                        f32_4 %53 = OpLoad %9 
                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 2 3 
                                                      OpStore %9 %54 
                   read_only Texture2DSampled %57 = OpLoad %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %41 %61 %31 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %21 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %41 %61 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                 Private f32* %71 = OpAccessChain %9 %31 
                                                      OpStore %71 %70 
                                 Private f32* %73 = OpAccessChain %9 %31 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFDiv %72 %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                                      OpStore %76 %75 
                                 Uniform f32* %81 = OpAccessChain %41 %79 %80 
                                          f32 %82 = OpLoad %81 
                                   Input f32* %86 = OpAccessChain %84 %80 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFDiv %82 %87 
                                 Private f32* %89 = OpAccessChain %78 %31 
                                                      OpStore %89 %88 
                                        f32_3 %90 = OpLoad %78 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpLoad %84 
                                        f32_3 %93 = OpFMul %91 %92 
                                                      OpStore %78 %93 
                                        f32_4 %95 = OpLoad %9 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpLoad %78 
                                        f32_3 %98 = OpFMul %96 %97 
                                        f32_4 %99 = OpLoad %94 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %94 %100 
                                       f32_4 %102 = OpLoad %94 
                                       f32_3 %103 = OpVectorShuffle %102 %102 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %41 %104 %79 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %103 %107 
                                                      OpStore %101 %108 
                              Uniform f32_4* %110 = OpAccessChain %41 %104 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %94 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 0 0 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_3 %116 = OpLoad %101 
                                       f32_3 %117 = OpFAdd %115 %116 
                                       f32_4 %118 = OpLoad %94 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %94 %119 
                              Uniform f32_4* %120 = OpAccessChain %41 %104 %61 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_4 %123 = OpLoad %94 
                                       f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                                       f32_3 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %94 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                                       f32_3 %128 = OpFAdd %125 %127 
                                       f32_4 %129 = OpLoad %94 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 6 
                                                      OpStore %94 %130 
                                       f32_4 %131 = OpLoad %94 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 3 
                              Uniform f32_4* %133 = OpAccessChain %41 %104 %104 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpFAdd %132 %135 
                                       f32_4 %137 = OpLoad %94 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %94 %138 
                                       f32_4 %139 = OpLoad %94 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_4* %142 = OpAccessChain %41 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFNegate %144 
                                       f32_3 %146 = OpFAdd %140 %145 
                                                      OpStore %101 %146 
                                       f32_3 %147 = OpLoad %101 
                                       f32_3 %148 = OpLoad %101 
                                         f32 %149 = OpDot %147 %148 
                                Private f32* %150 = OpAccessChain %78 %31 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %78 %31 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpExtInst %1 31 %152 
                                Private f32* %154 = OpAccessChain %78 %31 
                                                      OpStore %154 %153 
                                Private f32* %155 = OpAccessChain %78 %80 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFNegate %156 
                                Private f32* %158 = OpAccessChain %9 %31 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                Private f32* %161 = OpAccessChain %78 %31 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFAdd %160 %162 
                                Private f32* %164 = OpAccessChain %9 %31 
                                                      OpStore %164 %163 
                                Uniform f32* %166 = OpAccessChain %41 %141 %165 
                                         f32 %167 = OpLoad %166 
                                Private f32* %168 = OpAccessChain %9 %31 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %167 %169 
                                Private f32* %171 = OpAccessChain %94 %80 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFAdd %170 %172 
                                Private f32* %174 = OpAccessChain %9 %31 
                                                      OpStore %174 %173 
                                Private f32* %175 = OpAccessChain %9 %31 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %178 = OpAccessChain %41 %177 %80 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFMul %176 %179 
                                Uniform f32* %181 = OpAccessChain %41 %177 %165 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFAdd %180 %182 
                                Private f32* %184 = OpAccessChain %78 %31 
                                                      OpStore %184 %183 
                                Private f32* %185 = OpAccessChain %78 %31 
                                         f32 %186 = OpLoad %185 
                                         f32 %188 = OpExtInst %1 43 %186 %187 %72 
                                Private f32* %189 = OpAccessChain %78 %31 
                                                      OpStore %189 %188 
                                Private f32* %190 = OpAccessChain %9 %31 
                                         f32 %191 = OpLoad %190 
                                Uniform f32* %193 = OpAccessChain %41 %192 %80 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFMul %191 %194 
                                Uniform f32* %196 = OpAccessChain %41 %192 %165 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFAdd %195 %197 
                                Private f32* %199 = OpAccessChain %9 %31 
                                                      OpStore %199 %198 
                                Private f32* %200 = OpAccessChain %9 %31 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFNegate %201 
                                         f32 %203 = OpFAdd %202 %72 
                                Private f32* %204 = OpAccessChain %9 %31 
                                                      OpStore %204 %203 
                                Private f32* %205 = OpAccessChain %9 %31 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpExtInst %1 43 %206 %187 %72 
                                Private f32* %208 = OpAccessChain %9 %31 
                                                      OpStore %208 %207 
                                       f32_4 %209 = OpLoad %94 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 3 
                              Uniform f32_4* %212 = OpAccessChain %41 %211 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFNegate %214 
                                       f32_3 %216 = OpFAdd %210 %215 
                                                      OpStore %101 %216 
                read_only TextureCubeSampled %221 = OpLoad %220 
                                       f32_3 %222 = OpLoad %101 
                                       f32_4 %223 = OpImageSampleImplicitLod %221 %222 
                                         f32 %224 = OpCompositeExtract %223 0 
                                                      OpStore %21 %224 
                                       f32_3 %226 = OpLoad %101 
                                       f32_3 %227 = OpLoad %101 
                                         f32 %228 = OpDot %226 %227 
                                                      OpStore %225 %228 
                                         f32 %230 = OpLoad %225 
                                         f32 %231 = OpExtInst %1 31 %230 
                                                      OpStore %229 %231 
                                         f32 %232 = OpLoad %229 
                                Uniform f32* %234 = OpAccessChain %41 %233 %165 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %232 %235 
                                                      OpStore %229 %236 
                                         f32 %237 = OpLoad %229 
                                Uniform f32* %239 = OpAccessChain %41 %238 %165 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFMul %237 %240 
                                                      OpStore %229 %241 
                                         f32 %245 = OpLoad %21 
                                         f32 %246 = OpLoad %229 
                                        bool %247 = OpFOrdLessThan %245 %246 
                                                      OpStore %244 %247 
                                        bool %251 = OpLoad %244 
                                                      OpSelectionMerge %253 None 
                                                      OpBranchConditional %251 %252 %256 
                                             %252 = OpLabel 
                                Uniform f32* %254 = OpAccessChain %41 %177 %31 
                                         f32 %255 = OpLoad %254 
                                                      OpStore %250 %255 
                                                      OpBranch %253 
                                             %256 = OpLabel 
                                                      OpStore %250 %72 
                                                      OpBranch %253 
                                             %253 = OpLabel 
                                         f32 %257 = OpLoad %250 
                                Private f32* %258 = OpAccessChain %248 %31 
                                                      OpStore %258 %257 
                                Private f32* %259 = OpAccessChain %78 %31 
                                         f32 %260 = OpLoad %259 
                                Private f32* %261 = OpAccessChain %248 %31 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpFAdd %260 %262 
                                Private f32* %264 = OpAccessChain %248 %31 
                                                      OpStore %264 %263 
                                Private f32* %265 = OpAccessChain %248 %31 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpExtInst %1 43 %266 %187 %72 
                                Private f32* %268 = OpAccessChain %248 %31 
                                                      OpStore %268 %267 
                                         f32 %269 = OpLoad %225 
                                Uniform f32* %270 = OpAccessChain %41 %211 %165 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFMul %269 %271 
                                Private f32* %273 = OpAccessChain %78 %31 
                                                      OpStore %273 %272 
                                         f32 %274 = OpLoad %225 
                                         f32 %275 = OpExtInst %1 32 %274 
                                                      OpStore %21 %275 
                                         f32 %276 = OpLoad %21 
                                       f32_3 %277 = OpCompositeConstruct %276 %276 %276 
                                       f32_3 %278 = OpLoad %101 
                                       f32_3 %279 = OpFMul %277 %278 
                                                      OpStore %101 %279 
                  read_only Texture2DSampled %281 = OpLoad %280 
                                       f32_3 %282 = OpLoad %78 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 0 
                                       f32_4 %284 = OpImageSampleImplicitLod %281 %283 
                                         f32 %285 = OpCompositeExtract %284 3 
                                Private f32* %286 = OpAccessChain %78 %31 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %248 %31 
                                         f32 %288 = OpLoad %287 
                                Private f32* %289 = OpAccessChain %78 %31 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                Private f32* %292 = OpAccessChain %78 %31 
                                                      OpStore %292 %291 
                                       f32_4 %294 = OpLoad %94 
                                       f32_3 %295 = OpVectorShuffle %294 %294 1 1 1 
                              Uniform f32_4* %297 = OpAccessChain %41 %296 %79 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFMul %295 %299 
                                                      OpStore %293 %300 
                              Uniform f32_4* %301 = OpAccessChain %41 %296 %109 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %94 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 0 0 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_3 %307 = OpLoad %293 
                                       f32_3 %308 = OpFAdd %306 %307 
                                                      OpStore %293 %308 
                              Uniform f32_4* %309 = OpAccessChain %41 %296 %61 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_4 %312 = OpLoad %94 
                                       f32_3 %313 = OpVectorShuffle %312 %312 3 3 3 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_3 %315 = OpLoad %293 
                                       f32_3 %316 = OpFAdd %314 %315 
                                                      OpStore %293 %316 
                                       f32_4 %317 = OpLoad %94 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 3 
                              Uniform f32_3* %320 = OpAccessChain %41 %109 
                                       f32_3 %321 = OpLoad %320 
                                       f32_3 %322 = OpFNegate %321 
                                       f32_3 %323 = OpFAdd %318 %322 
                                       f32_4 %324 = OpLoad %94 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
                                                      OpStore %94 %325 
                                       f32_3 %326 = OpLoad %293 
                              Uniform f32_4* %327 = OpAccessChain %41 %296 %104 
                                       f32_4 %328 = OpLoad %327 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpFAdd %326 %329 
                                                      OpStore %293 %330 
                read_only TextureCubeSampled %332 = OpLoad %331 
                                       f32_3 %333 = OpLoad %293 
                                       f32_4 %335 = OpImageSampleImplicitLod %332 %333 Bias %7 
                                         f32 %336 = OpCompositeExtract %335 3 
                                                      OpStore %21 %336 
                                         f32 %337 = OpLoad %21 
                                Private f32* %338 = OpAccessChain %78 %31 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %337 %339 
                                Private f32* %341 = OpAccessChain %78 %31 
                                                      OpStore %341 %340 
                                Private f32* %342 = OpAccessChain %78 %31 
                                         f32 %343 = OpLoad %342 
                                                      OpStore %21 %343 
                                         f32 %344 = OpLoad %21 
                                         f32 %345 = OpExtInst %1 43 %344 %187 %72 
                                                      OpStore %21 %345 
                                       f32_4 %346 = OpLoad %94 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_4 %348 = OpLoad %94 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                         f32 %350 = OpDot %347 %349 
                                                      OpStore %225 %350 
                                         f32 %351 = OpLoad %225 
                                         f32 %352 = OpExtInst %1 32 %351 
                                                      OpStore %225 %352 
                                       f32_4 %353 = OpLoad %94 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_3 %355 = OpFNegate %354 
                                         f32 %356 = OpLoad %225 
                                       f32_3 %357 = OpCompositeConstruct %356 %356 %356 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_3 %359 = OpLoad %101 
                                       f32_3 %360 = OpFNegate %359 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %94 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %94 %363 
                                       f32_4 %364 = OpLoad %94 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                       f32_4 %366 = OpLoad %94 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                         f32 %368 = OpDot %365 %367 
                                                      OpStore %225 %368 
                                         f32 %369 = OpLoad %225 
                                         f32 %370 = OpExtInst %1 32 %369 
                                                      OpStore %225 %370 
                                         f32 %371 = OpLoad %225 
                                       f32_3 %372 = OpCompositeConstruct %371 %371 %371 
                                       f32_4 %373 = OpLoad %94 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %94 
                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
                                                      OpStore %94 %377 
                                       f32_4 %378 = OpLoad %55 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %382 = OpFMul %379 %381 
                                       f32_3 %385 = OpFAdd %382 %384 
                                                      OpStore %248 %385 
                                Private f32* %387 = OpAccessChain %55 %165 
                                         f32 %388 = OpLoad %387 
                                         f32 %390 = OpFMul %388 %389 
                                                      OpStore %386 %390 
                                       f32_3 %392 = OpLoad %248 
                                       f32_3 %393 = OpLoad %248 
                                         f32 %394 = OpDot %392 %393 
                                                      OpStore %391 %394 
                                         f32 %395 = OpLoad %391 
                                         f32 %396 = OpExtInst %1 32 %395 
                                                      OpStore %391 %396 
                                       f32_3 %397 = OpLoad %248 
                                         f32 %398 = OpLoad %391 
                                       f32_3 %399 = OpCompositeConstruct %398 %398 %398 
                                       f32_3 %400 = OpFMul %397 %399 
                                                      OpStore %248 %400 
                                       f32_4 %401 = OpLoad %94 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpLoad %248 
                                         f32 %404 = OpDot %402 %403 
                                                      OpStore %391 %404 
                                       f32_3 %405 = OpLoad %101 
                                       f32_3 %406 = OpFNegate %405 
                                       f32_3 %407 = OpLoad %248 
                                         f32 %408 = OpDot %406 %407 
                                Private f32* %409 = OpAccessChain %248 %31 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %248 %31 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpExtInst %1 40 %411 %187 
                                Private f32* %413 = OpAccessChain %248 %31 
                                                      OpStore %413 %412 
                                Private f32* %414 = OpAccessChain %78 %31 
                                         f32 %415 = OpLoad %414 
                                Private f32* %416 = OpAccessChain %248 %31 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFMul %415 %417 
                                Private f32* %419 = OpAccessChain %78 %31 
                                                      OpStore %419 %418 
                                       f32_3 %421 = OpLoad %78 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 0 0 
                              Uniform f32_4* %424 = OpAccessChain %41 %423 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFMul %422 %426 
                                       f32_4 %428 = OpLoad %420 
                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
                                                      OpStore %420 %429 
                                         f32 %430 = OpLoad %391 
                                         f32 %431 = OpExtInst %1 40 %430 %187 
                                Private f32* %432 = OpAccessChain %248 %31 
                                                      OpStore %432 %431 
                                Private f32* %433 = OpAccessChain %248 %31 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpExtInst %1 30 %434 
                                Private f32* %436 = OpAccessChain %248 %31 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %248 %31 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpLoad %386 
                                         f32 %440 = OpFMul %438 %439 
                                Private f32* %441 = OpAccessChain %248 %31 
                                                      OpStore %441 %440 
                                Private f32* %442 = OpAccessChain %248 %31 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpExtInst %1 29 %443 
                                Private f32* %445 = OpAccessChain %248 %31 
                                                      OpStore %445 %444 
                                         f32 %446 = OpLoad %21 
                                Private f32* %447 = OpAccessChain %248 %31 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpFMul %446 %448 
                                Private f32* %450 = OpAccessChain %78 %31 
                                                      OpStore %450 %449 
                              Uniform f32_4* %451 = OpAccessChain %41 %423 
                                       f32_4 %452 = OpLoad %451 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                         f32 %458 = OpDot %453 %457 
                                Private f32* %459 = OpAccessChain %248 %31 
                                                      OpStore %459 %458 
                                Private f32* %460 = OpAccessChain %78 %31 
                                         f32 %461 = OpLoad %460 
                                Private f32* %462 = OpAccessChain %248 %31 
                                         f32 %463 = OpLoad %462 
                                         f32 %464 = OpFMul %461 %463 
                                Private f32* %465 = OpAccessChain %420 %165 
                                                      OpStore %465 %464 
                                       f32_4 %466 = OpLoad %9 
                                       f32_4 %467 = OpVectorShuffle %466 %466 0 0 0 0 
                                       f32_4 %468 = OpLoad %420 
                                       f32_4 %469 = OpFMul %467 %468 
                                                      OpStore %9 %469 
                                       f32_4 %472 = OpLoad %9 
                                                      OpStore %471 %472 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
uniform  samplerCube _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat16_1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec4 u_xlat10_5;
bvec4 u_xlatb5;
vec4 u_xlat10_6;
vec4 u_xlat10_7;
vec4 u_xlat8;
vec3 u_xlat9;
vec2 u_xlat18;
float u_xlat16_18;
float u_xlat19;
bool u_xlatb20;
float u_xlat27;
float u_xlat28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat3.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat28 = u_xlat19 * _LightPos.w;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat28));
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlatb20 = u_xlat28<0.99000001;
    if(u_xlatb20){
        u_xlat19 = sqrt(u_xlat19);
        u_xlat19 = u_xlat19 * _LightPositionRange.w;
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat4.xyz = u_xlat9.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        u_xlat10_5 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat10_6 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat4.xyz = u_xlat9.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat10_7 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
        u_xlat9.xyz = u_xlat9.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8 = textureLod(_ShadowMapTexture, u_xlat9.xyz, 0.0).yzwx;
        u_xlat8.x = u_xlat10_5.x;
        u_xlat8.y = u_xlat10_6.x;
        u_xlat8.z = u_xlat10_7.x;
        u_xlatb5 = lessThan(u_xlat8, vec4(u_xlat19));
        u_xlat5.x = (u_xlatb5.x) ? _LightShadowData.x : float(1.0);
        u_xlat5.y = (u_xlatb5.y) ? _LightShadowData.x : float(1.0);
        u_xlat5.z = (u_xlatb5.z) ? _LightShadowData.x : float(1.0);
        u_xlat5.w = (u_xlatb5.w) ? _LightShadowData.x : float(1.0);
        u_xlat9.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
    } else {
        u_xlat9.x = 1.0;
    //ENDIF
    }
    u_xlat9.x = u_xlat28 + u_xlat9.x;
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat9.x = u_xlat9.x * u_xlat10_4.w;
    u_xlat18.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_1 = texture(_CameraNormalsTexture, u_xlat18.xy);
    u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_1.xyz;
    u_xlat18.x = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat27) + (-u_xlat3.xyz);
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat18.y = dot(u_xlat2.xyz, u_xlat16_1.xyz);
    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
    u_xlat16_1.x = u_xlat10_1.w * 128.0;
    u_xlat27 = log2(u_xlat18.y);
    u_xlat27 = u_xlat27 * u_xlat16_1.x;
    u_xlat27 = exp2(u_xlat27);
    u_xlat1.x = u_xlat9.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat9.x = u_xlat9.x * u_xlat18.x;
    u_xlat1.xyz = u_xlat9.xxx * _LightColor.xyz;
    u_xlat9.x = dot(_LightColor.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.w = u_xlat9.x * u_xlat27;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    SV_Target0 = u_xlat0.xxxx * u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate %175 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                               Output f32_4* %102 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                               Output f32_3* %175 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad %102 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore %102 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad %102 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore %102 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore %175 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 1
; Bound: 581
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %578 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 RelaxedPrecision 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpMemberDecorate %15 12 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %25 Location 25 
                                                      OpDecorate %41 Location 41 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %190 RelaxedPrecision 
                                                      OpDecorate %193 RelaxedPrecision 
                                                      OpDecorate %229 RelaxedPrecision 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %244 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %260 RelaxedPrecision 
                                                      OpDecorate %276 RelaxedPrecision 
                                                      OpDecorate %278 RelaxedPrecision 
                                                      OpDecorate %286 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %296 RelaxedPrecision 
                                                      OpDecorate %298 RelaxedPrecision 
                                                      OpDecorate %306 RelaxedPrecision 
                                                      OpDecorate %308 RelaxedPrecision 
                                                      OpDecorate %310 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %324 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %329 RelaxedPrecision 
                                                      OpDecorate %373 DescriptorSet 373 
                                                      OpDecorate %373 Binding 373 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %399 DescriptorSet 399 
                                                      OpDecorate %399 Binding 399 
                                                      OpDecorate %400 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %410 RelaxedPrecision 
                                                      OpDecorate %413 RelaxedPrecision 
                                                      OpDecorate %414 RelaxedPrecision 
                                                      OpDecorate %415 RelaxedPrecision 
                                                      OpDecorate %416 RelaxedPrecision 
                                                      OpDecorate %417 RelaxedPrecision 
                                                      OpDecorate %418 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %424 RelaxedPrecision 
                                                      OpDecorate %425 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %431 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %488 RelaxedPrecision 
                                                      OpDecorate %490 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %495 RelaxedPrecision 
                                                      OpDecorate %497 RelaxedPrecision 
                                                      OpDecorate %499 RelaxedPrecision 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %508 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %578 Location 578 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 %7 %14 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                                 Input f32_3* %25 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                                 Input f32_4* %41 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypeSampledImage %51 
                                              %53 = OpTypePointer UniformConstant %52 
  UniformConstant read_only Texture2DSampled* %54 = OpVariable UniformConstant 
                                          i32 %60 = OpConstant 2 
                                          u32 %65 = OpConstant 1 
                                          f32 %69 = OpConstant 3.674022E-40 
                               Private f32_4* %72 = OpVariable Private 
                                              %80 = OpTypePointer Private %10 
                               Private f32_3* %81 = OpVariable Private 
                                          i32 %84 = OpConstant 3 
                                              %85 = OpTypePointer Uniform %7 
                                          i32 %90 = OpConstant 0 
                                         i32 %122 = OpConstant 7 
                                         u32 %145 = OpConstant 3 
                              Private f32_3* %155 = OpVariable Private 
                                         i32 %158 = OpConstant 8 
                                Private f32* %164 = OpVariable Private 
                                Private f32* %168 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %179 = OpVariable UniformConstant 
                                Private f32* %185 = OpVariable Private 
                                         i32 %188 = OpConstant 6 
                                         f32 %196 = OpConstant 3.674022E-40 
                                             %198 = OpTypeBool 
                                             %199 = OpTypePointer Private %198 
                               Private bool* %200 = OpVariable Private 
                                         f32 %202 = OpConstant 3.674022E-40 
                                         i32 %210 = OpConstant 4 
                                         i32 %215 = OpConstant 5 
                              Private f32_4* %219 = OpVariable Private 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_3 %222 = OpConstantComposite %221 %221 %221 
                                             %226 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %227 = OpTypeSampledImage %226 
                                             %228 = OpTypePointer UniformConstant %227 
UniformConstant read_only TextureCubeSampled* %229 = OpVariable UniformConstant 
                              Private f32_3* %236 = OpVariable Private 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %221 
                                       f32_3 %247 = OpConstantComposite %238 %221 %238 
                                       f32_3 %255 = OpConstantComposite %221 %238 %238 
                                             %262 = OpTypeVector %198 4 
                                             %263 = OpTypePointer Private %262 
                             Private bool_4* %264 = OpVariable Private 
                                             %269 = OpTypePointer Function %6 
                              Private f32_4* %310 = OpVariable Private 
                                         f32 %312 = OpConstant 3.674022E-40 
                                       f32_4 %313 = OpConstantComposite %312 %312 %312 %312 
                                         i32 %334 = OpConstant 11 
                                             %371 = OpTypePointer Private %42 
                              Private f32_2* %372 = OpVariable Private 
UniformConstant read_only TextureCubeSampled* %373 = OpVariable UniformConstant 
                                         f32 %377 = OpConstant 3.674022E-40 
                                         i32 %389 = OpConstant 12 
                              Private f32_4* %398 = OpVariable Private 
 UniformConstant read_only Texture2DSampled* %399 = OpVariable UniformConstant 
                                         f32 %405 = OpConstant 3.674022E-40 
                                       f32_3 %406 = OpConstantComposite %405 %405 %405 
                                         f32 %408 = OpConstant 3.674022E-40 
                                       f32_3 %409 = OpConstantComposite %408 %408 %408 
                                Private f32* %413 = OpVariable Private 
                                             %436 = OpTypePointer Uniform %10 
                                       f32_2 %489 = OpConstantComposite %196 %196 
                                Private f32* %493 = OpVariable Private 
                                         f32 %496 = OpConstant 3.674022E-40 
                                         i32 %532 = OpConstant 9 
                                         f32 %542 = OpConstant 3.674022E-40 
                                         f32 %543 = OpConstant 3.674022E-40 
                                         f32 %544 = OpConstant 3.674022E-40 
                                       f32_3 %545 = OpConstantComposite %542 %543 %544 
                                         i32 %556 = OpConstant 10 
                                             %577 = OpTypePointer Output %7 
                               Output f32_4* %578 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %270 = OpVariable Function 
                               Function f32* %280 = OpVariable Function 
                               Function f32* %290 = OpVariable Function 
                               Function f32* %300 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain %25 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad %25 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad %41 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad %41 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 2 3 
                                                      OpStore %39 %49 
                   read_only Texture2DSampled %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %39 
                                        f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                                        f32_4 %58 = OpImageSampleImplicitLod %55 %57 
                                          f32 %59 = OpCompositeExtract %58 0 
                                                      OpStore %50 %59 
                                 Uniform f32* %61 = OpAccessChain %17 %60 %30 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpLoad %50 
                                          f32 %64 = OpFMul %62 %63 
                                 Uniform f32* %66 = OpAccessChain %17 %60 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFAdd %64 %67 
                                                      OpStore %50 %68 
                                          f32 %70 = OpLoad %50 
                                          f32 %71 = OpFDiv %69 %70 
                                                      OpStore %50 %71 
                                          f32 %73 = OpLoad %50 
                                        f32_3 %74 = OpCompositeConstruct %73 %73 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %72 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %72 %79 
                                        f32_4 %82 = OpLoad %72 
                                        f32_3 %83 = OpVectorShuffle %82 %82 1 1 1 
                               Uniform f32_4* %86 = OpAccessChain %17 %84 %19 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %83 %88 
                                                      OpStore %81 %89 
                               Uniform f32_4* %91 = OpAccessChain %17 %84 %90 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %72 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_3 %97 = OpLoad %81 
                                        f32_3 %98 = OpFAdd %96 %97 
                                        f32_4 %99 = OpLoad %72 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 2 6 
                                                      OpStore %72 %100 
                              Uniform f32_4* %101 = OpAccessChain %17 %84 %60 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_4 %104 = OpLoad %72 
                                       f32_3 %105 = OpVectorShuffle %104 %104 2 2 2 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %72 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 3 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %72 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 2 6 
                                                      OpStore %72 %111 
                                       f32_4 %112 = OpLoad %72 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                              Uniform f32_4* %114 = OpAccessChain %17 %84 %84 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %113 %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 2 6 
                                                      OpStore %72 %119 
                                       f32_4 %120 = OpLoad %72 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 3 
                              Uniform f32_4* %123 = OpAccessChain %17 %122 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFNegate %125 
                                       f32_3 %127 = OpFAdd %121 %126 
                                                      OpStore %81 %127 
                                       f32_3 %128 = OpLoad %81 
                                       f32_3 %129 = OpLoad %81 
                                         f32 %130 = OpDot %128 %129 
                                Private f32* %131 = OpAccessChain %9 %30 
                                                      OpStore %131 %130 
                                Private f32* %132 = OpAccessChain %9 %30 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpExtInst %1 31 %133 
                                Private f32* %135 = OpAccessChain %9 %30 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %20 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFNegate %137 
                                         f32 %139 = OpLoad %50 
                                         f32 %140 = OpFMul %138 %139 
                                Private f32* %141 = OpAccessChain %9 %30 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFAdd %140 %142 
                                Private f32* %144 = OpAccessChain %9 %30 
                                                      OpStore %144 %143 
                                Uniform f32* %146 = OpAccessChain %17 %122 %145 
                                         f32 %147 = OpLoad %146 
                                Private f32* %148 = OpAccessChain %9 %30 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFMul %147 %149 
                                Private f32* %151 = OpAccessChain %72 %20 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFAdd %150 %152 
                                Private f32* %154 = OpAccessChain %9 %30 
                                                      OpStore %154 %153 
                                       f32_4 %156 = OpLoad %72 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 3 
                              Uniform f32_4* %159 = OpAccessChain %17 %158 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFNegate %161 
                                       f32_3 %163 = OpFAdd %157 %162 
                                                      OpStore %155 %163 
                                       f32_3 %165 = OpLoad %155 
                                       f32_3 %166 = OpLoad %155 
                                         f32 %167 = OpDot %165 %166 
                                                      OpStore %164 %167 
                                         f32 %169 = OpLoad %164 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %168 %170 
                                       f32_3 %171 = OpLoad %155 
                                         f32 %172 = OpLoad %168 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpFMul %171 %173 
                                                      OpStore %81 %174 
                                         f32 %175 = OpLoad %164 
                                Uniform f32* %176 = OpAccessChain %17 %158 %145 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFMul %175 %177 
                                                      OpStore %168 %178 
                  read_only Texture2DSampled %180 = OpLoad %179 
                                         f32 %181 = OpLoad %168 
                                       f32_2 %182 = OpCompositeConstruct %181 %181 
                                       f32_4 %183 = OpImageSampleImplicitLod %180 %182 
                                         f32 %184 = OpCompositeExtract %183 3 
                                                      OpStore %168 %184 
                                Private f32* %186 = OpAccessChain %9 %30 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %189 = OpAccessChain %17 %188 %20 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %187 %190 
                                Uniform f32* %192 = OpAccessChain %17 %188 %145 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFAdd %191 %193 
                                                      OpStore %185 %194 
                                         f32 %195 = OpLoad %185 
                                         f32 %197 = OpExtInst %1 43 %195 %196 %69 
                                                      OpStore %185 %197 
                                         f32 %201 = OpLoad %185 
                                        bool %203 = OpFOrdLessThan %201 %202 
                                                      OpStore %200 %203 
                                        bool %204 = OpLoad %200 
                                                      OpSelectionMerge %206 None 
                                                      OpBranchConditional %204 %205 %316 
                                             %205 = OpLabel 
                                         f32 %207 = OpLoad %164 
                                         f32 %208 = OpExtInst %1 31 %207 
                                                      OpStore %164 %208 
                                         f32 %209 = OpLoad %164 
                                Uniform f32* %211 = OpAccessChain %17 %210 %145 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFMul %209 %212 
                                                      OpStore %164 %213 
                                         f32 %214 = OpLoad %164 
                                Uniform f32* %216 = OpAccessChain %17 %215 %145 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFMul %214 %217 
                                                      OpStore %164 %218 
                                       f32_3 %220 = OpLoad %155 
                                       f32_3 %223 = OpFAdd %220 %222 
                                       f32_4 %224 = OpLoad %219 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %219 %225 
                read_only TextureCubeSampled %230 = OpLoad %229 
                                       f32_4 %231 = OpLoad %219 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpImageSampleExplicitLod %230 %232 Lod %7 
                                         f32 %234 = OpCompositeExtract %233 0 
                                Private f32* %235 = OpAccessChain %219 %30 
                                                      OpStore %235 %234 
                                       f32_3 %237 = OpLoad %155 
                                       f32_3 %240 = OpFAdd %237 %239 
                                                      OpStore %236 %240 
                read_only TextureCubeSampled %241 = OpLoad %229 
                                       f32_3 %242 = OpLoad %236 
                                       f32_4 %243 = OpImageSampleExplicitLod %241 %242 Lod %7 
                                         f32 %244 = OpCompositeExtract %243 0 
                                Private f32* %245 = OpAccessChain %219 %65 
                                                      OpStore %245 %244 
                                       f32_3 %246 = OpLoad %155 
                                       f32_3 %248 = OpFAdd %246 %247 
                                                      OpStore %236 %248 
                read_only TextureCubeSampled %249 = OpLoad %229 
                                       f32_3 %250 = OpLoad %236 
                                       f32_4 %251 = OpImageSampleExplicitLod %249 %250 Lod %7 
                                         f32 %252 = OpCompositeExtract %251 0 
                                Private f32* %253 = OpAccessChain %219 %20 
                                                      OpStore %253 %252 
                                       f32_3 %254 = OpLoad %155 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore %155 %256 
                read_only TextureCubeSampled %257 = OpLoad %229 
                                       f32_3 %258 = OpLoad %155 
                                       f32_4 %259 = OpImageSampleExplicitLod %257 %258 Lod %7 
                                         f32 %260 = OpCompositeExtract %259 0 
                                Private f32* %261 = OpAccessChain %219 %145 
                                                      OpStore %261 %260 
                                       f32_4 %265 = OpLoad %219 
                                         f32 %266 = OpLoad %164 
                                       f32_4 %267 = OpCompositeConstruct %266 %266 %266 %266 
                                      bool_4 %268 = OpFOrdLessThan %265 %267 
                                                      OpStore %264 %268 
                                      bool_4 %271 = OpLoad %264 
                                        bool %272 = OpCompositeExtract %271 0 
                                                      OpSelectionMerge %274 None 
                                                      OpBranchConditional %272 %273 %277 
                                             %273 = OpLabel 
                                Uniform f32* %275 = OpAccessChain %17 %188 %30 
                                         f32 %276 = OpLoad %275 
                                                      OpStore %270 %276 
                                                      OpBranch %274 
                                             %277 = OpLabel 
                                                      OpStore %270 %69 
                                                      OpBranch %274 
                                             %274 = OpLabel 
                                         f32 %278 = OpLoad %270 
                                Private f32* %279 = OpAccessChain %219 %30 
                                                      OpStore %279 %278 
                                      bool_4 %281 = OpLoad %264 
                                        bool %282 = OpCompositeExtract %281 1 
                                                      OpSelectionMerge %284 None 
                                                      OpBranchConditional %282 %283 %287 
                                             %283 = OpLabel 
                                Uniform f32* %285 = OpAccessChain %17 %188 %30 
                                         f32 %286 = OpLoad %285 
                                                      OpStore %280 %286 
                                                      OpBranch %284 
                                             %287 = OpLabel 
                                                      OpStore %280 %69 
                                                      OpBranch %284 
                                             %284 = OpLabel 
                                         f32 %288 = OpLoad %280 
                                Private f32* %289 = OpAccessChain %219 %65 
                                                      OpStore %289 %288 
                                      bool_4 %291 = OpLoad %264 
                                        bool %292 = OpCompositeExtract %291 2 
                                                      OpSelectionMerge %294 None 
                                                      OpBranchConditional %292 %293 %297 
                                             %293 = OpLabel 
                                Uniform f32* %295 = OpAccessChain %17 %188 %30 
                                         f32 %296 = OpLoad %295 
                                                      OpStore %290 %296 
                                                      OpBranch %294 
                                             %297 = OpLabel 
                                                      OpStore %290 %69 
                                                      OpBranch %294 
                                             %294 = OpLabel 
                                         f32 %298 = OpLoad %290 
                                Private f32* %299 = OpAccessChain %219 %20 
                                                      OpStore %299 %298 
                                      bool_4 %301 = OpLoad %264 
                                        bool %302 = OpCompositeExtract %301 3 
                                                      OpSelectionMerge %304 None 
                                                      OpBranchConditional %302 %303 %307 
                                             %303 = OpLabel 
                                Uniform f32* %305 = OpAccessChain %17 %188 %30 
                                         f32 %306 = OpLoad %305 
                                                      OpStore %300 %306 
                                                      OpBranch %304 
                                             %307 = OpLabel 
                                                      OpStore %300 %69 
                                                      OpBranch %304 
                                             %304 = OpLabel 
                                         f32 %308 = OpLoad %300 
                                Private f32* %309 = OpAccessChain %219 %145 
                                                      OpStore %309 %308 
                                       f32_4 %311 = OpLoad %219 
                                         f32 %314 = OpDot %311 %313 
                                Private f32* %315 = OpAccessChain %310 %30 
                                                      OpStore %315 %314 
                                                      OpBranch %206 
                                             %316 = OpLabel 
                                Private f32* %317 = OpAccessChain %310 %30 
                                                      OpStore %317 %69 
                                                      OpBranch %206 
                                             %206 = OpLabel 
                                         f32 %318 = OpLoad %185 
                                Private f32* %319 = OpAccessChain %310 %30 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFAdd %318 %320 
                                Private f32* %322 = OpAccessChain %310 %30 
                                                      OpStore %322 %321 
                                Private f32* %323 = OpAccessChain %310 %30 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpExtInst %1 43 %324 %196 %69 
                                Private f32* %326 = OpAccessChain %310 %30 
                                                      OpStore %326 %325 
                                         f32 %327 = OpLoad %168 
                                Private f32* %328 = OpAccessChain %310 %30 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFMul %327 %329 
                                Private f32* %331 = OpAccessChain %155 %30 
                                                      OpStore %331 %330 
                                       f32_4 %332 = OpLoad %72 
                                       f32_3 %333 = OpVectorShuffle %332 %332 1 1 1 
                              Uniform f32_4* %335 = OpAccessChain %17 %334 %19 
                                       f32_4 %336 = OpLoad %335 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_3 %338 = OpFMul %333 %337 
                                       f32_4 %339 = OpLoad %219 
                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
                                                      OpStore %219 %340 
                              Uniform f32_4* %341 = OpAccessChain %17 %334 %90 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_4 %344 = OpLoad %72 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 0 0 
                                       f32_3 %346 = OpFMul %343 %345 
                                       f32_4 %347 = OpLoad %219 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_3 %349 = OpFAdd %346 %348 
                                       f32_4 %350 = OpLoad %219 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 6 3 
                                                      OpStore %219 %351 
                              Uniform f32_4* %352 = OpAccessChain %17 %334 %60 
                                       f32_4 %353 = OpLoad %352 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_4 %355 = OpLoad %72 
                                       f32_3 %356 = OpVectorShuffle %355 %355 3 3 3 
                                       f32_3 %357 = OpFMul %354 %356 
                                       f32_4 %358 = OpLoad %219 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_3 %360 = OpFAdd %357 %359 
                                       f32_4 %361 = OpLoad %219 
                                       f32_4 %362 = OpVectorShuffle %361 %360 4 5 6 3 
                                                      OpStore %219 %362 
                                       f32_4 %363 = OpLoad %219 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                              Uniform f32_4* %365 = OpAccessChain %17 %334 %84 
                                       f32_4 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpFAdd %364 %367 
                                       f32_4 %369 = OpLoad %219 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %219 %370 
                read_only TextureCubeSampled %374 = OpLoad %373 
                                       f32_4 %375 = OpLoad %219 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_4 %378 = OpImageSampleImplicitLod %374 %376 Bias %7 
                                         f32 %379 = OpCompositeExtract %378 3 
                                Private f32* %380 = OpAccessChain %372 %30 
                                                      OpStore %380 %379 
                                Private f32* %381 = OpAccessChain %372 %30 
                                         f32 %382 = OpLoad %381 
                                Private f32* %383 = OpAccessChain %155 %30 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFMul %382 %384 
                                Private f32* %386 = OpAccessChain %155 %30 
                                                      OpStore %386 %385 
                                       f32_4 %387 = OpLoad %39 
                                       f32_2 %388 = OpVectorShuffle %387 %387 0 1 
                              Uniform f32_4* %390 = OpAccessChain %17 %389 
                                       f32_4 %391 = OpLoad %390 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 1 
                                       f32_2 %393 = OpFMul %388 %392 
                              Uniform f32_4* %394 = OpAccessChain %17 %389 
                                       f32_4 %395 = OpLoad %394 
                                       f32_2 %396 = OpVectorShuffle %395 %395 2 3 
                                       f32_2 %397 = OpFAdd %393 %396 
                                                      OpStore %372 %397 
                  read_only Texture2DSampled %400 = OpLoad %399 
                                       f32_2 %401 = OpLoad %372 
                                       f32_4 %402 = OpImageSampleImplicitLod %400 %401 
                                                      OpStore %398 %402 
                                       f32_4 %403 = OpLoad %398 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_3 %407 = OpFMul %404 %406 
                                       f32_3 %410 = OpFAdd %407 %409 
                                       f32_4 %411 = OpLoad %310 
                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
                                                      OpStore %310 %412 
                                       f32_4 %414 = OpLoad %310 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_4 %416 = OpLoad %310 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                         f32 %418 = OpDot %415 %417 
                                                      OpStore %413 %418 
                                         f32 %419 = OpLoad %413 
                                         f32 %420 = OpExtInst %1 32 %419 
                                                      OpStore %413 %420 
                                         f32 %421 = OpLoad %413 
                                       f32_3 %422 = OpCompositeConstruct %421 %421 %421 
                                       f32_4 %423 = OpLoad %310 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_3 %425 = OpFMul %422 %424 
                                       f32_4 %426 = OpLoad %310 
                                       f32_4 %427 = OpVectorShuffle %426 %425 4 5 6 3 
                                                      OpStore %310 %427 
                                       f32_3 %428 = OpLoad %81 
                                       f32_3 %429 = OpFNegate %428 
                                       f32_4 %430 = OpLoad %310 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                         f32 %432 = OpDot %429 %431 
                                Private f32* %433 = OpAccessChain %310 %145 
                                                      OpStore %433 %432 
                                       f32_4 %434 = OpLoad %72 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 3 
                              Uniform f32_3* %437 = OpAccessChain %17 %90 
                                       f32_3 %438 = OpLoad %437 
                                       f32_3 %439 = OpFNegate %438 
                                       f32_3 %440 = OpFAdd %435 %439 
                                       f32_4 %441 = OpLoad %39 
                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 6 3 
                                                      OpStore %39 %442 
                                       f32_4 %443 = OpLoad %39 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_4 %445 = OpLoad %39 
                                       f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                         f32 %447 = OpDot %444 %446 
                                Private f32* %448 = OpAccessChain %372 %30 
                                                      OpStore %448 %447 
                                Private f32* %449 = OpAccessChain %372 %30 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpExtInst %1 32 %450 
                                Private f32* %452 = OpAccessChain %372 %30 
                                                      OpStore %452 %451 
                                       f32_4 %453 = OpLoad %39 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                                       f32_3 %455 = OpFNegate %454 
                                       f32_2 %456 = OpLoad %372 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 0 0 
                                       f32_3 %458 = OpFMul %455 %457 
                                       f32_3 %459 = OpLoad %81 
                                       f32_3 %460 = OpFNegate %459 
                                       f32_3 %461 = OpFAdd %458 %460 
                                       f32_4 %462 = OpLoad %39 
                                       f32_4 %463 = OpVectorShuffle %462 %461 4 5 6 3 
                                                      OpStore %39 %463 
                                       f32_4 %464 = OpLoad %39 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_4 %466 = OpLoad %39 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                Private f32* %469 = OpAccessChain %372 %30 
                                                      OpStore %469 %468 
                                Private f32* %470 = OpAccessChain %372 %30 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpExtInst %1 32 %471 
                                Private f32* %473 = OpAccessChain %372 %30 
                                                      OpStore %473 %472 
                                       f32_2 %474 = OpLoad %372 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_4 %476 = OpLoad %39 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpFMul %475 %477 
                                       f32_4 %479 = OpLoad %39 
                                       f32_4 %480 = OpVectorShuffle %479 %478 4 5 6 3 
                                                      OpStore %39 %480 
                                       f32_4 %481 = OpLoad %39 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 1 2 
                                       f32_4 %483 = OpLoad %310 
                                       f32_3 %484 = OpVectorShuffle %483 %483 0 1 2 
                                         f32 %485 = OpDot %482 %484 
                                Private f32* %486 = OpAccessChain %310 %30 
                                                      OpStore %486 %485 
                                       f32_4 %487 = OpLoad %310 
                                       f32_2 %488 = OpVectorShuffle %487 %487 0 3 
                                       f32_2 %490 = OpExtInst %1 40 %488 %489 
                                       f32_4 %491 = OpLoad %310 
                                       f32_4 %492 = OpVectorShuffle %491 %490 4 1 2 5 
                                                      OpStore %310 %492 
                                Private f32* %494 = OpAccessChain %398 %145 
                                         f32 %495 = OpLoad %494 
                                         f32 %497 = OpFMul %495 %496 
                                                      OpStore %493 %497 
                                Private f32* %498 = OpAccessChain %310 %30 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpExtInst %1 30 %499 
                                Private f32* %501 = OpAccessChain %310 %30 
                                                      OpStore %501 %500 
                                Private f32* %502 = OpAccessChain %310 %30 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpLoad %493 
                                         f32 %505 = OpFMul %503 %504 
                                Private f32* %506 = OpAccessChain %310 %30 
                                                      OpStore %506 %505 
                                Private f32* %507 = OpAccessChain %310 %30 
                                         f32 %508 = OpLoad %507 
                                         f32 %509 = OpExtInst %1 29 %508 
                                Private f32* %510 = OpAccessChain %310 %30 
                                                      OpStore %510 %509 
                                Private f32* %511 = OpAccessChain %155 %30 
                                         f32 %512 = OpLoad %511 
                                Private f32* %513 = OpAccessChain %372 %30 
                                                      OpStore %513 %512 
                                Private f32* %514 = OpAccessChain %372 %30 
                                         f32 %515 = OpLoad %514 
                                         f32 %516 = OpExtInst %1 43 %515 %196 %69 
                                Private f32* %517 = OpAccessChain %372 %30 
                                                      OpStore %517 %516 
                                Private f32* %518 = OpAccessChain %372 %30 
                                         f32 %519 = OpLoad %518 
                                Private f32* %520 = OpAccessChain %310 %30 
                                         f32 %521 = OpLoad %520 
                                         f32 %522 = OpFMul %519 %521 
                                Private f32* %523 = OpAccessChain %372 %30 
                                                      OpStore %523 %522 
                                Private f32* %524 = OpAccessChain %155 %30 
                                         f32 %525 = OpLoad %524 
                                Private f32* %526 = OpAccessChain %310 %145 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpFMul %525 %527 
                                Private f32* %529 = OpAccessChain %155 %30 
                                                      OpStore %529 %528 
                                       f32_3 %530 = OpLoad %155 
                                       f32_3 %531 = OpVectorShuffle %530 %530 0 0 0 
                              Uniform f32_4* %533 = OpAccessChain %17 %532 
                                       f32_4 %534 = OpLoad %533 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
                                       f32_3 %536 = OpFMul %531 %535 
                                       f32_4 %537 = OpLoad %39 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 5 6 3 
                                                      OpStore %39 %538 
                              Uniform f32_4* %539 = OpAccessChain %17 %532 
                                       f32_4 %540 = OpLoad %539 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                         f32 %546 = OpDot %541 %545 
                                Private f32* %547 = OpAccessChain %310 %30 
                                                      OpStore %547 %546 
                                Private f32* %548 = OpAccessChain %372 %30 
                                         f32 %549 = OpLoad %548 
                                Private f32* %550 = OpAccessChain %310 %30 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpFMul %549 %551 
                                Private f32* %553 = OpAccessChain %39 %145 
                                                      OpStore %553 %552 
                                Private f32* %554 = OpAccessChain %9 %30 
                                         f32 %555 = OpLoad %554 
                                Uniform f32* %557 = OpAccessChain %17 %556 %20 
                                         f32 %558 = OpLoad %557 
                                         f32 %559 = OpFMul %555 %558 
                                Uniform f32* %560 = OpAccessChain %17 %556 %145 
                                         f32 %561 = OpLoad %560 
                                         f32 %562 = OpFAdd %559 %561 
                                Private f32* %563 = OpAccessChain %9 %30 
                                                      OpStore %563 %562 
                                Private f32* %564 = OpAccessChain %9 %30 
                                         f32 %565 = OpLoad %564 
                                         f32 %566 = OpFNegate %565 
                                         f32 %567 = OpFAdd %566 %69 
                                Private f32* %568 = OpAccessChain %9 %30 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %9 %30 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpExtInst %1 43 %570 %196 %69 
                                Private f32* %572 = OpAccessChain %9 %30 
                                                      OpStore %572 %571 
                                       f32_4 %573 = OpLoad %9 
                                       f32_4 %574 = OpVectorShuffle %573 %573 0 0 0 0 
                                       f32_4 %575 = OpLoad %39 
                                       f32_4 %576 = OpFMul %574 %575 
                                                      OpStore %9 %576 
                                       f32_4 %579 = OpLoad %9 
                                                      OpStore %578 %579 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
}
}
}
}